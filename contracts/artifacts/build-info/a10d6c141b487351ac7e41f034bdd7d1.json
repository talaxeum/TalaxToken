{
	"id": "a10d6c141b487351ac7e41f034bdd7d1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Stakable.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/**\n * @notice Error handling message for Modifier\n */\nerror Function__notAuthorized();\nerror Function__notAVoter();\nerror Function__votingNotAvailable();\n\n/**\n * @notice Error handling message for Staking functions\n */\nerror Staking__cannotStakeNothing();\nerror Staking__userIsStaker();\nerror Staking__penaltyExceed3Percent();\nerror Staking__airdropExceed20Percent();\nerror Staking__noStakingFound();\n\n/**\n * @notice Error handling message for Airdrop functions\n */\nerror Airdrop__claimableOnceAWeek();\n\n/**\n * @notice Error handling message for Voting functions\n */\nerror Voting__votingIsRunning();\nerror Voting__alreadyVoted();\nerror Voting__notYetVoted();\nerror Voting__notEnoughVoters();\n\ncontract Stakable is ReentrancyGuard {\n    using SafeMath for uint256;\n    /**\n     * @notice Constructor since this contract is not meant to be used without inheritance\n     * push once to stakeholders for it to work properly\n     */\n\n    struct Voter {\n        bool votingRight;\n        mapping(uint256 => bool) voted;\n    }\n\n    uint256 public stakingPenaltyRate;\n    uint256 public airdropRate;\n    uint256 public airdropSince;\n\n    bool internal _votingStatus;\n    uint256 internal _votingId;\n    uint256 public totalVoters;\n    mapping(address => Voter) public voters;\n    mapping(uint256 => uint256) public votedUsers;\n\n    address public _talax;\n    address public _owner;\n\n    constructor() {\n        //Staking penalty and Airdrop in 0.1 times percentage\n        stakingPenaltyRate = 15;\n        airdropRate = 80;\n        _talax = msg.sender;\n        _owner = msg.sender;\n    }\n\n    /**\n     * @notice\n     * A stake struct is used to represent the way we store stakes,\n     * A Stake will contain the users address, the amount staked and a timestamp,\n     * Since which is when the stake was made\n     */\n    struct Stake {\n        uint256 amount;\n        uint256 since;\n        uint256 rewardAPY;\n        uint256 releaseTime;\n        // This claimable field is new and used to tell how big of a reward is currently available\n        uint256 claimable;\n        uint256 claimableAirdrop;\n        uint256 latestClaimDrop;\n    }\n\n    /**\n     * @notice\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\n     */\n    struct StakingSummary {\n        uint256 total_amount;\n        uint256 penalty;\n        Stake stake;\n    }\n\n    /**\n     * @notice\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\n     */\n    mapping(address => Stake) internal stakeholders;\n\n    /**\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\n     */\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 timestamp,\n        uint256 releaseTime\n    );\n\n    event PenaltyChanged(uint256 amount);\n    event AirdropChanged(uint256 amount);\n\n    /* ------------------------------------------ Modifier ------------------------------------------ */\n    function isTalax() internal view {\n        // require(msg.sender == _talax, \"Not authorized\");\n        if (msg.sender != _talax) {\n            revert Function__notAuthorized();\n        }\n    }\n\n    modifier onlyTalax() {\n        isTalax();\n        _;\n    }\n\n    function isOwner() internal view {\n        // require(msg.sender == _owner, \"Not authorized\");\n        if (msg.sender != _owner) {\n            revert Function__notAuthorized();\n        }\n    }\n\n    modifier onlyOwner() {\n        isOwner();\n        _;\n    }\n\n    function _isVoter() internal view {\n        // require(voters[msg.sender].votingRight == true, \"You are not a voter\");\n        if (voters[msg.sender].votingRight == false) {\n            revert Function__notAVoter();\n        }\n    }\n\n    modifier isVoter() {\n        _isVoter();\n        _;\n    }\n\n    function _checkVotingStatus() internal view {\n        // require(_votingStatus, \"Voting is not available\");\n        if (!_votingStatus) {\n            revert Function__votingNotAvailable();\n        }\n    }\n\n    modifier votingStatusTrue() {\n        _checkVotingStatus();\n        _;\n    }\n\n    /* ---------------------------------------------- - --------------------------------------------- */\n\n    function changeTalaxAddress(address talax) external onlyOwner {\n        _talax = talax;\n    }\n\n    /**\n     * @notice\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n     * StakeID\n     */\n    function stake(\n        address user,\n        uint256 amount,\n        uint256 stakePeriod,\n        uint256 rewardRate\n    ) external nonReentrant onlyTalax {\n        // Simple check so that user does not stake 0\n        // require(amount > 0, \"Cannot stake nothing\");\n        if (amount <= 0) {\n            revert Staking__cannotStakeNothing();\n        }\n        // require(stakeholders[user].amount == 0, \"User is a staker\");\n        if (stakeholders[user].amount != 0) {\n            revert Staking__userIsStaker();\n        }\n\n        totalVoters += 1;\n        voters[user].votingRight = true;\n\n        // block.timestamp = timestamp of the current block in seconds since the epoch\n        uint256 timestamp = block.timestamp;\n\n        // Use the index to push a new Stake\n        // push a newly created Stake with the current block timestamp.\n\n        stakeholders[user] = Stake(\n            amount,\n            timestamp,\n            rewardRate,\n            (stakePeriod + timestamp),\n            0,\n            0,\n            0\n        );\n        // Emit an event that the stake has occured\n        emit Staked(user, amount, timestamp, (stakePeriod + timestamp));\n    }\n\n    function changePenaltyFee(uint256 amount) external onlyOwner {\n        // require(amount <= 30, \"Penalty fee cannot exceed 3 percent.\");\n        if (amount > 30) {\n            revert Staking__penaltyExceed3Percent();\n        }\n        stakingPenaltyRate = amount;\n        emit PenaltyChanged(amount);\n    }\n\n    function _calculateStakingDuration(uint256 since)\n        internal\n        view\n        returns (uint256)\n    {\n        // times by 1e24 so theres no missing value\n        return\n            SafeMath.div(\n                (block.timestamp - since) * 1e24,\n                365 days,\n                \"Error cannot divide timestamp\"\n            );\n    }\n\n    function _calculateStakeReward(Stake memory user_stake)\n        internal\n        view\n        returns (uint256)\n    {\n        if (user_stake.amount == 0) {\n            return 0;\n        }\n        // divided by 1e26 because 1e2 for APY and 1e24 from calculate staking duration\n        return\n            (user_stake.amount *\n                user_stake.rewardAPY *\n                _calculateStakingDuration(user_stake.since)) / 1e26;\n    }\n\n    function _calculateStakingWithPenalty(uint256 amount, uint256 reward)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        if (amount == 0) {\n            return (0, 0);\n        }\n        return (\n            SafeMath.sub(\n                amount,\n                SafeMath.div(SafeMath.mul(amount, stakingPenaltyRate), 1000)\n            ),\n            SafeMath.sub(\n                reward,\n                SafeMath.div(SafeMath.mul(reward, stakingPenaltyRate), 1000)\n            )\n        );\n    }\n\n    /**\n     * @notice\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\n     * Will return the amount to MINT onto the account\n     * Will also _calculateStakeReward and reset timer\n     */\n    function withdrawStake(address user)\n        external\n        nonReentrant\n        onlyTalax\n        returns (uint256, uint256)\n    {\n        // TODO: can be simplified\n        // Grab user_index which is the index to use to grab the Stake[]\n        Stake memory user_stake = stakeholders[user];\n\n        delete stakeholders[user];\n        totalVoters -= 1;\n        delete voters[user].voted[_votingId];\n\n        if (user_stake.releaseTime > block.timestamp) {\n            return\n                _calculateStakingWithPenalty(\n                    user_stake.amount,\n                    _calculateStakeReward(user_stake)\n                );\n        }\n\n        return (user_stake.amount, _calculateStakeReward(user_stake));\n    }\n\n    function hasStake() external view returns (StakingSummary memory) {\n        Stake memory user_stake = stakeholders[msg.sender];\n        // require(user_stake.amount > 0, \"No Stake Found\");\n        if (user_stake.amount <= 0) {\n            revert Staking__noStakingFound();\n        }\n        StakingSummary memory summary = StakingSummary(0, 0, user_stake);\n\n        uint256 reward = _calculateStakeReward(user_stake);\n\n        if (summary.stake.releaseTime > block.timestamp) {\n            summary.penalty =\n                SafeMath.div(\n                    SafeMath.mul(user_stake.amount, stakingPenaltyRate),\n                    1000\n                ) +\n                SafeMath.div(SafeMath.mul(reward, stakingPenaltyRate), 1000);\n        }\n\n        if (_calculateWeek(user_stake.latestClaimDrop) > 0) {\n            uint256 airdrop = _calculateAirdrop(user_stake.amount);\n            summary.stake.claimableAirdrop = airdrop;\n        } else {\n            summary.stake.claimableAirdrop = 0;\n        }\n\n        summary.stake.claimable = reward;\n        summary.total_amount = user_stake.amount;\n\n        return summary;\n    }\n\n    /* -------------------------------------- Airdrop functions ------------------------------------- */\n\n    function startAirdropSince() external onlyTalax {\n        airdropSince = block.timestamp;\n    }\n\n    function changeAirdropPercentage(uint256 amount) external onlyOwner {\n        if (amount > 200) {\n            revert Staking__airdropExceed20Percent();\n        }\n        airdropRate = amount;\n        emit AirdropChanged(amount);\n    }\n\n    function _calculateWeek(uint256 input) internal view returns (uint256) {\n        return (block.timestamp - input).div(7 days);\n    }\n\n    function _calculateAirdrop(uint256 stakeAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        return ((stakeAmount * airdropRate) / 1000) / 52 weeks;\n    }\n\n    function claimAirdrop(address user) external onlyTalax returns (uint256) {\n        // TODO: can be simplified if using address\n        Stake storage staker = stakeholders[user];\n\n        if (staker.amount > 0) {\n            if (_calculateWeek(staker.latestClaimDrop) == 0) {\n                revert Airdrop__claimableOnceAWeek();\n            }\n\n            staker.claimableAirdrop = 0;\n            staker.latestClaimDrop = block.timestamp;\n\n            return _calculateAirdrop(staker.amount);\n        } else {\n            return 0;\n        }\n    }\n\n    function getLatestClaimDrop() external view returns (uint256) {\n        Stake memory staker = stakeholders[msg.sender];\n        return staker.latestClaimDrop;\n    }\n\n    function airdropWeek() public view returns (uint256) {\n        if (airdropSince != 0) {\n            return (block.timestamp - airdropSince) / 7 days;\n        } else {\n            return 0;\n        }\n    }\n\n    /* -------------------------------- Voting Functions for DAO Pool ------------------------------- */\n\n    function getVoters(address user) external view returns (bool, bool) {\n        return (voters[user].votingRight, voters[user].voted[_votingId]);\n    }\n\n    //can be simplified since not connected directly\n    function startVoting() external nonReentrant onlyTalax {\n        // require(_votingStatus == false, \"Voting is already running\");\n        if (_votingStatus == true) {\n            revert Voting__votingIsRunning();\n        }\n\n        _votingStatus = true;\n        _votingId += 1;\n    }\n\n    function vote() public nonReentrant votingStatusTrue isVoter {\n        // require(\n        //     voters[msg.sender].voted[_votingId] == false,\n        //     \"You have voted before\"\n        // );\n        if (voters[msg.sender].voted[_votingId] == true) {\n            revert Voting__alreadyVoted();\n        }\n\n        voters[msg.sender].voted[_votingId] = true;\n        votedUsers[_votingId] += 1;\n    }\n\n    function retractVote() public nonReentrant votingStatusTrue isVoter {\n        // require(\n        //     voters[msg.sender].voted[_votingId] == true,\n        //     \"You have not voted yet\"\n        // );\n        if (voters[msg.sender].voted[_votingId] == false) {\n            revert Voting__notYetVoted();\n        }\n\n        voters[msg.sender].voted[_votingId] == false;\n        votedUsers[_votingId] -= 1;\n    }\n\n    function getVotingResult()\n        external\n        view\n        onlyTalax\n        votingStatusTrue\n        returns (bool)\n    {\n        // require(totalVoters > 1, \"Not enough voters\");\n        if (totalVoters <= 1) {\n            revert Voting__notEnoughVoters();\n        }\n        uint256 half_voters = SafeMath.div(SafeMath.mul(totalVoters, 5), 10);\n\n        if (votedUsers[_votingId] > half_voters) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function stopVoting() external onlyTalax votingStatusTrue {\n        _votingStatus = false;\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220610f7f374515277c40dc0699c995f2b4c7f397d9f3bfd9ae759628b3f81d334d64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220610f7f374515277c40dc0699c995f2b4c7f397d9f3bfd9ae759628b3f81d334d64736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0xF7F CALLDATACOPY GASLIMIT ISZERO 0x27 PUSH29 0x40DC0699C995F2B4C7F397D9F3BFD9AE759628B3F81D334D64736F6C63 NUMBER STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "467:6301:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;467:6301:1;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220610f7f374515277c40dc0699c995f2b4c7f397d9f3bfd9ae759628b3f81d334d64736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0xF7F CALLDATACOPY GASLIMIT ISZERO 0x27 PUSH29 0x40DC0699C995F2B4C7F397D9F3BFD9AE759628B3F81D334D64736F6C63 NUMBER STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "467:6301:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 1,
									"value": "24"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220610f7f374515277c40dc0699c995f2b4c7f397d9f3bfd9ae759628b3f81d334d64736f6c634300080b0033",
									".code": [
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2\",\"dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Stakable.sol": {
				"Stakable": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "Airdrop__claimableOnceAWeek",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Function__notAVoter",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Function__notAuthorized",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Function__votingNotAvailable",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__airdropExceed20Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__cannotStakeNothing",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__noStakingFound",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__penaltyExceed3Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__userIsStaker",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__alreadyVoted",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__notEnoughVoters",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__notYetVoted",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__votingIsRunning",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AirdropChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PenaltyChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "releaseTime",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "_owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "_talax",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropSince",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropWeek",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changeAirdropPercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changePenaltyFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "talax",
									"type": "address"
								}
							],
							"name": "changeTalaxAddress",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "claimAirdrop",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getLatestClaimDrop",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getVoters",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getVotingResult",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasStake",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "penalty",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimableAirdrop",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "latestClaimDrop",
													"type": "uint256"
												}
											],
											"internalType": "struct Stakable.Stake",
											"name": "stake",
											"type": "tuple"
										}
									],
									"internalType": "struct Stakable.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "retractVote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakePeriod",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardRate",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingPenaltyRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startAirdropSince",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startVoting",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stopVoting",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalVoters",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "vote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "votedUsers",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "voters",
							"outputs": [
								{
									"internalType": "bool",
									"name": "votingRight",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "withdrawStake",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Stakable.sol\":880:13459  contract Stakable is ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Stakable.sol\":1566:1766  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1813  _status */\n  0x00\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  dup2\n  swap1\n  sstore\n    /* \"contracts/Stakable.sol\":1673:1675  15 */\n  0x0f\n    /* \"contracts/Stakable.sol\":1652:1675  stakingPenaltyRate = 15 */\n  swap1\n  sstore\n    /* \"contracts/Stakable.sol\":1699:1701  80 */\n  0x50\n    /* \"contracts/Stakable.sol\":1685:1696  airdropRate */\n  0x02\n    /* \"contracts/Stakable.sol\":1685:1701  airdropRate = 80 */\n  sstore\n    /* \"contracts/Stakable.sol\":1711:1717  _talax */\n  0x09\n    /* \"contracts/Stakable.sol\":1711:1730  _talax = msg.sender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap1\n  dup2\n  and\n    /* \"contracts/Stakable.sol\":1720:1730  msg.sender */\n  caller\n    /* \"contracts/Stakable.sol\":1711:1730  _talax = msg.sender */\n  swap1\n  dup2\n  or\n  swap1\n  swap3\n  sstore\n    /* \"contracts/Stakable.sol\":1740:1746  _owner */\n  0x0a\n    /* \"contracts/Stakable.sol\":1740:1759  _owner = msg.sender */\n  dup1\n  sload\n  swap1\n  swap2\n  and\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"contracts/Stakable.sol\":880:13459  contract Stakable is ReentrancyGuard {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Stakable.sol\":880:13459  contract Stakable is ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8891cf0d\n      gt\n      tag_27\n      jumpi\n      dup1\n      0xc23a5cea\n      gt\n      tag_28\n      jumpi\n      dup1\n      0xd5dbdf1b\n      gt\n      tag_29\n      jumpi\n      dup1\n      0xd5dbdf1b\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xf93d4f8a\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xfab2f86b\n      eq\n      tag_26\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_29:\n      dup1\n      0xc23a5cea\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xcb79c2e1\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xcbb3e152\n      eq\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      dup1\n      0xa3ec138d\n      gt\n      tag_30\n      jumpi\n      dup1\n      0xa3ec138d\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xb2bdfa7b\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xb87da76d\n      eq\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_30:\n      dup1\n      0x8891cf0d\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x8c63f97f\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xa143a5f2\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      0x5f5300ff\n      gt\n      tag_31\n      jumpi\n      dup1\n      0x671d2b75\n      gt\n      tag_32\n      jumpi\n      dup1\n      0x671d2b75\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x69e4591a\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x71e3db87\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      dup1\n      0x5f5300ff\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x632a9a52\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x65f8c6c5\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_31:\n      dup1\n      0x1ec6b60a\n      gt\n      tag_33\n      jumpi\n      dup1\n      0x1ec6b60a\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x2d15cc04\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x5f348b4e\n      eq\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      dup1\n      0x070c8b74\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x10486b6a\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x1d77b00b\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Stakable.sol\":12449:12861  function retractVote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_3:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      stop\n        /* \"contracts/Stakable.sol\":8601:9728  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_4:\n      tag_36\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      tag_38\n      swap2\n      swap1\n        /* \"#utility.yul\":168:172   */\n      0x00\n        /* \"#utility.yul\":210:213   */\n      0x0120\n        /* \"#utility.yul\":199:208   */\n      dup3\n        /* \"#utility.yul\":195:214   */\n      add\n        /* \"#utility.yul\":187:214   */\n      swap1\n      pop\n        /* \"#utility.yul\":247:253   */\n      dup3\n        /* \"#utility.yul\":241:254   */\n      mload\n        /* \"#utility.yul\":230:239   */\n      dup3\n        /* \"#utility.yul\":223:255   */\n      mstore\n        /* \"#utility.yul\":311:315   */\n      0x20\n        /* \"#utility.yul\":303:309   */\n      dup4\n        /* \"#utility.yul\":299:316   */\n      add\n        /* \"#utility.yul\":293:317   */\n      mload\n        /* \"#utility.yul\":286:290   */\n      0x20\n        /* \"#utility.yul\":275:284   */\n      dup4\n        /* \"#utility.yul\":271:291   */\n      add\n        /* \"#utility.yul\":264:318   */\n      mstore\n        /* \"#utility.yul\":365:369   */\n      0x40\n        /* \"#utility.yul\":357:363   */\n      dup4\n        /* \"#utility.yul\":353:370   */\n      add\n        /* \"#utility.yul\":347:371   */\n      mload\n        /* \"#utility.yul\":415:427   */\n      dup1\n        /* \"#utility.yul\":409:428   */\n      mload\n        /* \"#utility.yul\":402:406   */\n      0x40\n        /* \"#utility.yul\":391:400   */\n      dup5\n        /* \"#utility.yul\":387:407   */\n      add\n        /* \"#utility.yul\":380:429   */\n      mstore\n        /* \"#utility.yul\":489:493   */\n      0x20\n        /* \"#utility.yul\":475:487   */\n      dup2\n        /* \"#utility.yul\":471:494   */\n      add\n        /* \"#utility.yul\":465:495   */\n      mload\n        /* \"#utility.yul\":460:462   */\n      0x60\n        /* \"#utility.yul\":449:458   */\n      dup5\n        /* \"#utility.yul\":445:463   */\n      add\n        /* \"#utility.yul\":438:496   */\n      mstore\n        /* \"#utility.yul\":557:561   */\n      0x40\n        /* \"#utility.yul\":543:555   */\n      dup2\n        /* \"#utility.yul\":539:562   */\n      add\n        /* \"#utility.yul\":533:563   */\n      mload\n        /* \"#utility.yul\":527:530   */\n      0x80\n        /* \"#utility.yul\":516:525   */\n      dup5\n        /* \"#utility.yul\":512:531   */\n      add\n        /* \"#utility.yul\":505:564   */\n      mstore\n        /* \"#utility.yul\":625:627   */\n      0x60\n        /* \"#utility.yul\":611:623   */\n      dup2\n        /* \"#utility.yul\":607:628   */\n      add\n        /* \"#utility.yul\":601:629   */\n      mload\n        /* \"#utility.yul\":595:598   */\n      0xa0\n        /* \"#utility.yul\":584:593   */\n      dup5\n        /* \"#utility.yul\":580:599   */\n      add\n        /* \"#utility.yul\":573:630   */\n      mstore\n        /* \"#utility.yul\":691:694   */\n      0x80\n        /* \"#utility.yul\":677:689   */\n      dup2\n        /* \"#utility.yul\":673:695   */\n      add\n        /* \"#utility.yul\":667:696   */\n      mload\n        /* \"#utility.yul\":661:664   */\n      0xc0\n        /* \"#utility.yul\":650:659   */\n      dup5\n        /* \"#utility.yul\":646:665   */\n      add\n        /* \"#utility.yul\":639:697   */\n      mstore\n        /* \"#utility.yul\":758:761   */\n      0xa0\n        /* \"#utility.yul\":744:756   */\n      dup2\n        /* \"#utility.yul\":740:762   */\n      add\n        /* \"#utility.yul\":734:763   */\n      mload\n        /* \"#utility.yul\":728:731   */\n      0xe0\n        /* \"#utility.yul\":717:726   */\n      dup5\n        /* \"#utility.yul\":713:732   */\n      add\n        /* \"#utility.yul\":706:764   */\n      mstore\n        /* \"#utility.yul\":825:828   */\n      0xc0\n        /* \"#utility.yul\":811:823   */\n      dup2\n        /* \"#utility.yul\":807:829   */\n      add\n        /* \"#utility.yul\":801:830   */\n      mload\n        /* \"#utility.yul\":795:798   */\n      0x0100\n        /* \"#utility.yul\":784:793   */\n      dup5\n        /* \"#utility.yul\":780:799   */\n      add\n        /* \"#utility.yul\":773:831   */\n      mstore\n      pop\n        /* \"#utility.yul\":14:837   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"contracts/Stakable.sol\":8601:9728  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_38:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stakable.sol\":4409:4502  function changeTalaxAddress(address talax) external onlyOwner {... */\n    tag_5:\n      tag_34\n      tag_41\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_41:\n      tag_43\n      jump\t// in\n        /* \"contracts/Stakable.sol\":11751:12034  function startVoting() external nonReentrant onlyTalax {... */\n    tag_6:\n      tag_34\n      tag_45\n      jump\t// in\n        /* \"contracts/Stakable.sol\":11543:11692  function getVoters(address user) external view returns (bool, bool) {... */\n    tag_7:\n      tag_46\n      tag_47\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_47:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable.sol\":11629:11641  voters[user] */\n      and\n        /* \"contracts/Stakable.sol\":11599:11603  bool */\n      0x00\n        /* \"contracts/Stakable.sol\":11629:11641  voters[user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":11629:11635  voters */\n      0x07\n        /* \"contracts/Stakable.sol\":11629:11641  voters[user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable.sol\":11629:11653  voters[user].votingRight */\n      dup1\n      sload\n        /* \"contracts/Stakable.sol\":11674:11683  _votingId */\n      sload(0x05)\n        /* \"contracts/Stakable.sol\":11655:11684  voters[user].voted[_votingId] */\n      dup6\n      mstore\n        /* \"contracts/Stakable.sol\":11629:11653  voters[user].votingRight */\n      0x01\n        /* \"contracts/Stakable.sol\":11655:11673  voters[user].voted */\n      swap1\n      swap2\n      add\n        /* \"contracts/Stakable.sol\":11655:11684  voters[user].voted[_votingId] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Stakable.sol\":11629:11653  voters[user].votingRight */\n      0xff\n      swap2\n      dup3\n      and\n      swap3\n        /* \"contracts/Stakable.sol\":11655:11684  voters[user].voted[_votingId] */\n      swap2\n      and\n      swap1\n        /* \"contracts/Stakable.sol\":11543:11692  function getVoters(address user) external view returns (bool, bool) {... */\n      jump\n    tag_46:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":1421:1435   */\n      swap3\n      iszero\n        /* \"#utility.yul\":1414:1436   */\n      iszero\n        /* \"#utility.yul\":1396:1437   */\n      dup4\n      mstore\n        /* \"#utility.yul\":1480:1494   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1473:1495   */\n      iszero\n        /* \"#utility.yul\":1468:1470   */\n      0x20\n        /* \"#utility.yul\":1453:1471   */\n      dup4\n      add\n        /* \"#utility.yul\":1446:1496   */\n      mstore\n        /* \"#utility.yul\":1369:1387   */\n      add\n        /* \"contracts/Stakable.sol\":11543:11692  function getVoters(address user) external view returns (bool, bool) {... */\n      tag_38\n        /* \"#utility.yul\":1234:1502   */\n      jump\n        /* \"contracts/Stakable.sol\":1511:1532  address public _talax */\n    tag_8:\n      sload(0x09)\n      tag_51\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_51:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1671:1726   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1653:1727   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1641:1643   */\n      0x20\n        /* \"#utility.yul\":1626:1644   */\n      add\n        /* \"contracts/Stakable.sol\":1511:1532  address public _talax */\n      tag_38\n        /* \"#utility.yul\":1507:1733   */\n      jump\n        /* \"contracts/Stakable.sol\":1382:1408  uint256 public totalVoters */\n    tag_9:\n      tag_55\n      sload(0x06)\n      dup2\n      jump\n    tag_55:\n      mload(0x40)\n        /* \"#utility.yul\":1884:1909   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1872:1874   */\n      0x20\n        /* \"#utility.yul\":1857:1875   */\n      add\n        /* \"contracts/Stakable.sol\":1382:1408  uint256 public totalVoters */\n      tag_38\n        /* \"#utility.yul\":1738:1915   */\n      jump\n        /* \"contracts/Stakable.sol\":12040:12443  function vote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_10:\n      tag_34\n      tag_60\n      jump\t// in\n        /* \"contracts/Stakable.sol\":10504:11051  function claimAirdrop(address user) external onlyTalax returns (uint256) {... */\n    tag_11:\n      tag_55\n      tag_62\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_62:\n      tag_63\n      jump\t// in\n        /* \"contracts/Stakable.sol\":12867:13355  function getVotingResult()... */\n    tag_12:\n      tag_65\n      tag_66\n      jump\t// in\n    tag_65:\n      mload(0x40)\n        /* \"#utility.yul\":2085:2099   */\n      swap1\n      iszero\n        /* \"#utility.yul\":2078:2100   */\n      iszero\n        /* \"#utility.yul\":2060:2101   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2048:2050   */\n      0x20\n        /* \"#utility.yul\":2033:2051   */\n      add\n        /* \"contracts/Stakable.sol\":12867:13355  function getVotingResult()... */\n      tag_38\n        /* \"#utility.yul\":1920:2107   */\n      jump\n        /* \"contracts/Stakable.sol\":11057:11221  function getLatestClaimDrop() external view returns (uint256) {... */\n    tag_13:\n        /* \"contracts/Stakable.sol\":11164:11174  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":11110:11117  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":11151:11175  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":11151:11163  stakeholders */\n      0x0b\n        /* \"contracts/Stakable.sol\":11151:11175  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/Stakable.sol\":11129:11175  Stake memory staker = stakeholders[msg.sender] */\n      dup3\n      mload\n      0xe0\n      dup2\n      add\n      dup5\n      mstore\n      dup2\n      sload\n      dup2\n      mstore\n      0x01\n      dup3\n      add\n      sload\n      swap3\n      dup2\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x02\n      dup2\n      add\n      sload\n      swap3\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x03\n      dup3\n      add\n      sload\n      0x60\n      dup3\n      add\n      mstore\n      0x04\n      dup3\n      add\n      sload\n      0x80\n      dup3\n      add\n      mstore\n      0x05\n      dup3\n      add\n      sload\n      0xa0\n      dup3\n      add\n      mstore\n      0x06\n      swap1\n      swap2\n      add\n      sload\n      0xc0\n      swap1\n      swap2\n      add\n      dup2\n      swap1\n      mstore\n        /* \"contracts/Stakable.sol\":11057:11221  function getLatestClaimDrop() external view returns (uint256) {... */\n      jump(tag_55)\n        /* \"contracts/Stakable.sol\":9840:9935  function startAirdropSince() external onlyTalax {... */\n    tag_14:\n      tag_34\n      tag_73\n      jump\t// in\n        /* \"contracts/Stakable.sol\":1251:1277  uint256 public airdropRate */\n    tag_15:\n      tag_55\n      sload(0x02)\n      dup2\n      jump\n        /* \"contracts/Stakable.sol\":5893:6199  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_16:\n      tag_34\n      tag_78\n      calldatasize\n      0x04\n      tag_79\n      jump\t// in\n    tag_78:\n      tag_80\n      jump\t// in\n        /* \"contracts/Stakable.sol\":1459:1504  mapping(uint256 => uint256) public votedUsers */\n    tag_17:\n      tag_55\n      tag_82\n      calldatasize\n      0x04\n      tag_79\n      jump\t// in\n    tag_82:\n      mstore(0x20, 0x08)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Stakable.sol\":1414:1453  mapping(address => Voter) public voters */\n    tag_18:\n      tag_65\n      tag_86\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_86:\n      mstore(0x20, 0x07)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n        /* \"contracts/Stakable.sol\":1538:1559  address public _owner */\n    tag_19:\n      sload(0x0a)\n      tag_51\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/Stakable.sol\":1283:1310  uint256 public airdropSince */\n    tag_20:\n      tag_55\n      sload(0x03)\n      dup2\n      jump\n        /* \"contracts/Stakable.sol\":7870:8595  function withdrawStake(address user)... */\n    tag_21:\n      tag_95\n      tag_96\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_96:\n      tag_97\n      jump\t// in\n    tag_95:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":2471:2496   */\n      swap3\n      dup4\n      mstore\n        /* \"#utility.yul\":2527:2529   */\n      0x20\n        /* \"#utility.yul\":2512:2530   */\n      dup4\n      add\n        /* \"#utility.yul\":2505:2539   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":2444:2462   */\n      add\n        /* \"contracts/Stakable.sol\":7870:8595  function withdrawStake(address user)... */\n      tag_38\n        /* \"#utility.yul\":2297:2545   */\n      jump\n        /* \"contracts/Stakable.sol\":1212:1245  uint256 public stakingPenaltyRate */\n    tag_22:\n      tag_55\n      sload(0x01)\n      dup2\n      jump\n        /* \"contracts/Stakable.sol\":11227:11431  function airdropWeek() public view returns (uint256) {... */\n    tag_23:\n      tag_55\n      tag_104\n      jump\t// in\n        /* \"contracts/Stakable.sol\":9941:10175  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_24:\n      tag_34\n      tag_107\n      calldatasize\n      0x04\n      tag_79\n      jump\t// in\n    tag_107:\n      tag_108\n      jump\t// in\n        /* \"contracts/Stakable.sol\":4713:5887  function stake(... */\n    tag_25:\n      tag_34\n      tag_110\n      calldatasize\n      0x04\n      tag_111\n      jump\t// in\n    tag_110:\n      tag_112\n      jump\t// in\n        /* \"contracts/Stakable.sol\":13361:13457  function stopVoting() external onlyTalax votingStatusTrue {... */\n    tag_26:\n      tag_34\n      tag_114\n      jump\t// in\n        /* \"contracts/Stakable.sol\":12449:12861  function retractVote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_35:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_116\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3148:3150   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3130:3151   */\n      mstore\n        /* \"#utility.yul\":3187:3189   */\n      0x1f\n        /* \"#utility.yul\":3167:3185   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3160:3190   */\n      mstore\n        /* \"#utility.yul\":3226:3259   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":3206:3224   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3199:3260   */\n      mstore\n        /* \"#utility.yul\":3277:3295   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_117:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_116:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"contracts/Stakable.sol\":4259:4279  _checkVotingStatus() */\n      tag_120\n        /* \"contracts/Stakable.sol\":4259:4277  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable.sol\":4259:4279  _checkVotingStatus() */\n      jump\t// in\n    tag_120:\n        /* \"contracts/Stakable.sol\":3977:3987  _isVoter() */\n      tag_123\n        /* \"contracts/Stakable.sol\":3977:3985  _isVoter */\n      tag_124\n        /* \"contracts/Stakable.sol\":3977:3987  _isVoter() */\n      jump\t// in\n    tag_123:\n        /* \"contracts/Stakable.sol\":12672:12682  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":12665:12683  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":12665:12671  voters */\n      0x07\n        /* \"contracts/Stakable.sol\":12665:12683  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable.sol\":12690:12699  _votingId */\n      sload(0x05)\n        /* \"contracts/Stakable.sol\":12665:12700  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable.sol\":12665:12689  voters[msg.sender].voted */\n      0x01\n      add\n        /* \"contracts/Stakable.sol\":12665:12700  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable.sol\":12661:12764  if (voters[msg.sender].voted[_votingId] == false) {... */\n      tag_126\n      jumpi\n        /* \"contracts/Stakable.sol\":12732:12753  Voting__notYetVoted() */\n      mload(0x40)\n      0x8b74220000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":12661:12764  if (voters[msg.sender].voted[_votingId] == false) {... */\n    tag_126:\n        /* \"contracts/Stakable.sol\":12799:12808  _votingId */\n      sload(0x05)\n        /* \"contracts/Stakable.sol\":12774:12792  voters[msg.sender] */\n      0x00\n        /* \"contracts/Stakable.sol\":12774:12809  voters[msg.sender].voted[_votingId] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":12828:12838  votedUsers */\n      0x08\n        /* \"contracts/Stakable.sol\":12774:12792  voters[msg.sender] */\n      0x20\n        /* \"contracts/Stakable.sol\":12828:12849  votedUsers[_votingId] */\n      mstore\n        /* \"contracts/Stakable.sol\":12774:12792  voters[msg.sender] */\n      0x40\n        /* \"contracts/Stakable.sol\":12828:12849  votedUsers[_votingId] */\n      dup2\n      keccak256\n        /* \"contracts/Stakable.sol\":12828:12854  votedUsers[_votingId] -= 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable.sol\":12774:12798  voters[msg.sender].voted */\n      0x01\n      swap3\n        /* \"contracts/Stakable.sol\":12774:12792  voters[msg.sender] */\n      swap1\n        /* \"contracts/Stakable.sol\":12828:12854  votedUsers[_votingId] -= 1 */\n      tag_127\n      swap1\n        /* \"contracts/Stakable.sol\":12774:12798  voters[msg.sender].voted */\n      dup5\n      swap1\n        /* \"contracts/Stakable.sol\":12828:12854  votedUsers[_votingId] -= 1 */\n      tag_128\n      jump\t// in\n    tag_127:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n        /* \"contracts/Stakable.sol\":12449:12861  function retractVote() public nonReentrant votingStatusTrue isVoter {... */\n      jump\t// out\n        /* \"contracts/Stakable.sol\":8601:9728  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_37:\n        /* \"contracts/Stakable.sol\":8644:8665  StakingSummary memory */\n      tag_129\n      tag_130\n      jump\t// in\n    tag_129:\n        /* \"contracts/Stakable.sol\":8716:8726  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":8677:8700  Stake memory user_stake */\n      0x00\n        /* \"contracts/Stakable.sol\":8703:8727  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":8703:8715  stakeholders */\n      0x0b\n        /* \"contracts/Stakable.sol\":8703:8727  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/Stakable.sol\":8677:8727  Stake memory user_stake = stakeholders[msg.sender] */\n      dup3\n      mload\n      0xe0\n      dup2\n      add\n      dup5\n      mstore\n      dup2\n      sload\n      dup1\n      dup3\n      mstore\n      0x01\n      dup4\n      add\n      sload\n      swap4\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x02\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x03\n      dup2\n      add\n      sload\n      0x60\n      dup5\n      add\n      mstore\n      0x04\n      dup2\n      add\n      sload\n      0x80\n      dup5\n      add\n      mstore\n      0x05\n      dup2\n      add\n      sload\n      0xa0\n      dup5\n      add\n      mstore\n      0x06\n      add\n      sload\n      0xc0\n      dup4\n      add\n      mstore\n        /* \"contracts/Stakable.sol\":8798:8883  if (user_stake.amount <= 0) {... */\n      tag_132\n      jumpi\n        /* \"contracts/Stakable.sol\":8847:8872  Staking__noStakingFound() */\n      mload(0x40)\n      0xb018f08700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":8798:8883  if (user_stake.amount <= 0) {... */\n    tag_132:\n        /* \"contracts/Stakable.sol\":8924:8956  StakingSummary(0, 0, user_stake) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/Stakable.sol\":8892:8921  StakingSummary memory summary */\n      0x00\n        /* \"contracts/Stakable.sol\":8924:8956  StakingSummary(0, 0, user_stake) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      swap1\n        /* \"contracts/Stakable.sol\":8984:9017  _calculateStakeReward(user_stake) */\n      tag_133\n        /* \"contracts/Stakable.sol\":8945:8955  user_stake */\n      dup4\n        /* \"contracts/Stakable.sol\":8984:9005  _calculateStakeReward */\n      tag_134\n        /* \"contracts/Stakable.sol\":8984:9017  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_133:\n        /* \"contracts/Stakable.sol\":8967:9017  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/Stakable.sol\":9060:9075  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":9032:9039  summary */\n      dup3\n        /* \"contracts/Stakable.sol\":9032:9045  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stakable.sol\":9032:9057  summary.stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/Stakable.sol\":9032:9075  summary.stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/Stakable.sol\":9028:9344  if (summary.stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_135\n      jumpi\n        /* \"contracts/Stakable.sol\":9273:9333  SafeMath.div(SafeMath.mul(reward, stakingPenaltyRate), 1000) */\n      tag_136\n        /* \"contracts/Stakable.sol\":9286:9326  SafeMath.mul(reward, stakingPenaltyRate) */\n      tag_137\n        /* \"contracts/Stakable.sol\":9299:9305  reward */\n      dup3\n        /* \"contracts/Stakable.sol\":9307:9325  stakingPenaltyRate */\n      sload(0x01)\n        /* \"contracts/Stakable.sol\":9286:9298  SafeMath.mul */\n      tag_138\n        /* \"contracts/Stakable.sol\":9286:9326  SafeMath.mul(reward, stakingPenaltyRate) */\n      jump\t// in\n    tag_137:\n        /* \"contracts/Stakable.sol\":9328:9332  1000 */\n      0x03e8\n        /* \"contracts/Stakable.sol\":9273:9285  SafeMath.div */\n      tag_139\n        /* \"contracts/Stakable.sol\":9273:9333  SafeMath.div(SafeMath.mul(reward, stakingPenaltyRate), 1000) */\n      jump\t// in\n    tag_136:\n        /* \"contracts/Stakable.sol\":9125:9254  SafeMath.div(... */\n      tag_140\n        /* \"contracts/Stakable.sol\":9159:9210  SafeMath.mul(user_stake.amount, stakingPenaltyRate) */\n      tag_137\n        /* \"contracts/Stakable.sol\":9172:9182  user_stake */\n      dup6\n        /* \"contracts/Stakable.sol\":9172:9189  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stakable.sol\":9191:9209  stakingPenaltyRate */\n      sload(0x01)\n        /* \"contracts/Stakable.sol\":9159:9171  SafeMath.mul */\n      tag_138\n        /* \"contracts/Stakable.sol\":9159:9210  SafeMath.mul(user_stake.amount, stakingPenaltyRate) */\n      jump\t// in\n        /* \"contracts/Stakable.sol\":9125:9254  SafeMath.div(... */\n    tag_140:\n        /* \"contracts/Stakable.sol\":9125:9333  SafeMath.div(... */\n      tag_142\n      swap2\n      swap1\n      tag_143\n      jump\t// in\n    tag_142:\n        /* \"contracts/Stakable.sol\":9091:9106  summary.penalty */\n      0x20\n      dup4\n      add\n        /* \"contracts/Stakable.sol\":9091:9333  summary.penalty =... */\n      mstore\n        /* \"contracts/Stakable.sol\":9028:9344  if (summary.stake.releaseTime > block.timestamp) {... */\n    tag_135:\n        /* \"contracts/Stakable.sol\":9403:9404  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":9358:9400  _calculateWeek(user_stake.latestClaimDrop) */\n      tag_144\n        /* \"contracts/Stakable.sol\":9373:9383  user_stake */\n      dup5\n        /* \"contracts/Stakable.sol\":9373:9399  user_stake.latestClaimDrop */\n      0xc0\n      add\n      mload\n        /* \"contracts/Stakable.sol\":9358:9372  _calculateWeek */\n      tag_145\n        /* \"contracts/Stakable.sol\":9358:9400  _calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_144:\n        /* \"contracts/Stakable.sol\":9358:9404  _calculateWeek(user_stake.latestClaimDrop) > 0 */\n      gt\n        /* \"contracts/Stakable.sol\":9354:9604  if (_calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      iszero\n      tag_146\n      jumpi\n        /* \"contracts/Stakable.sol\":9420:9435  uint256 airdrop */\n      0x00\n        /* \"contracts/Stakable.sol\":9438:9474  _calculateAirdrop(user_stake.amount) */\n      tag_147\n        /* \"contracts/Stakable.sol\":9456:9466  user_stake */\n      dup5\n        /* \"contracts/Stakable.sol\":9456:9473  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stakable.sol\":9438:9455  _calculateAirdrop */\n      tag_148\n        /* \"contracts/Stakable.sol\":9438:9474  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_147:\n        /* \"contracts/Stakable.sol\":9488:9501  summary.stake */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/Stakable.sol\":9488:9518  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/Stakable.sol\":9488:9528  summary.stake.claimableAirdrop = airdrop */\n      mstore\n      pop\n        /* \"contracts/Stakable.sol\":9354:9604  if (_calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      jump(tag_149)\n    tag_146:\n        /* \"contracts/Stakable.sol\":9559:9572  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/Stakable.sol\":9592:9593  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":9559:9589  summary.stake.claimableAirdrop */\n      0xa0\n      swap1\n      swap2\n      add\n        /* \"contracts/Stakable.sol\":9559:9593  summary.stake.claimableAirdrop = 0 */\n      mstore\n        /* \"contracts/Stakable.sol\":9354:9604  if (_calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n    tag_149:\n        /* \"contracts/Stakable.sol\":9614:9627  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/Stakable.sol\":9614:9637  summary.stake.claimable */\n      0x80\n      add\n        /* \"contracts/Stakable.sol\":9614:9646  summary.stake.claimable = reward */\n      mstore\n        /* \"contracts/Stakable.sol\":9679:9696  user_stake.amount */\n      swap1\n      mload\n        /* \"contracts/Stakable.sol\":9656:9696  summary.total_amount = user_stake.amount */\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":9614:9621  summary */\n      swap2\n        /* \"contracts/Stakable.sol\":8601:9728  function hasStake() external view returns (StakingSummary memory) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":4409:4502  function changeTalaxAddress(address talax) external onlyOwner {... */\n    tag_43:\n        /* \"contracts/Stakable.sol\":3678:3687  isOwner() */\n      tag_151\n        /* \"contracts/Stakable.sol\":3678:3685  isOwner */\n      tag_152\n        /* \"contracts/Stakable.sol\":3678:3687  isOwner() */\n      jump\t// in\n    tag_151:\n        /* \"contracts/Stakable.sol\":4481:4487  _talax */\n      0x09\n        /* \"contracts/Stakable.sol\":4481:4495  _talax = talax */\n      dup1\n      sload\n      0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Stakable.sol\":4409:4502  function changeTalaxAddress(address talax) external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Stakable.sol\":11751:12034  function startVoting() external nonReentrant onlyTalax {... */\n    tag_45:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_155\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3148:3150   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3130:3151   */\n      mstore\n        /* \"#utility.yul\":3187:3189   */\n      0x1f\n        /* \"#utility.yul\":3167:3185   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3160:3190   */\n      mstore\n        /* \"#utility.yul\":3226:3259   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":3206:3224   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3199:3260   */\n      mstore\n        /* \"#utility.yul\":3277:3295   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2946:3301   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_155:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      tag_158\n        /* \"contracts/Stakable.sol\":3416:3423  isTalax */\n      tag_159\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      jump\t// in\n    tag_158:\n        /* \"contracts/Stakable.sol\":11893:11906  _votingStatus */\n      and(0xff, sload(0x04))\n        /* \"contracts/Stakable.sol\":11893:11914  _votingStatus == true */\n      iszero\n      iszero\n        /* \"contracts/Stakable.sol\":11893:11906  _votingStatus */\n      0x01\n        /* \"contracts/Stakable.sol\":11893:11914  _votingStatus == true */\n      eq\n        /* \"contracts/Stakable.sol\":11889:11973  if (_votingStatus == true) {... */\n      iszero\n      tag_161\n      jumpi\n        /* \"contracts/Stakable.sol\":11937:11962  Voting__votingIsRunning() */\n      mload(0x40)\n      0x6da4cd2e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":11889:11973  if (_votingStatus == true) {... */\n    tag_161:\n        /* \"contracts/Stakable.sol\":11983:11996  _votingStatus */\n      0x04\n        /* \"contracts/Stakable.sol\":11983:12003  _votingStatus = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/Stakable.sol\":11999:12003  true */\n      0x01\n        /* \"contracts/Stakable.sol\":11983:12003  _votingStatus = true */\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/Stakable.sol\":12013:12022  _votingId */\n      0x05\n        /* \"contracts/Stakable.sol\":12013:12027  _votingId += 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable.sol\":11983:11996  _votingStatus */\n      0x00\n      swap1\n        /* \"contracts/Stakable.sol\":12013:12027  _votingId += 1 */\n      tag_127\n      swap1\n        /* \"contracts/Stakable.sol\":11999:12003  true */\n      dup5\n      swap1\n        /* \"contracts/Stakable.sol\":12013:12027  _votingId += 1 */\n      tag_143\n      jump\t// in\n        /* \"contracts/Stakable.sol\":12040:12443  function vote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_60:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_165\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3148:3150   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3130:3151   */\n      mstore\n        /* \"#utility.yul\":3187:3189   */\n      0x1f\n        /* \"#utility.yul\":3167:3185   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3160:3190   */\n      mstore\n        /* \"#utility.yul\":3226:3259   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":3206:3224   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3199:3260   */\n      mstore\n        /* \"#utility.yul\":3277:3295   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2946:3301   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_165:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"contracts/Stakable.sol\":4259:4279  _checkVotingStatus() */\n      tag_168\n        /* \"contracts/Stakable.sol\":4259:4277  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable.sol\":4259:4279  _checkVotingStatus() */\n      jump\t// in\n    tag_168:\n        /* \"contracts/Stakable.sol\":3977:3987  _isVoter() */\n      tag_170\n        /* \"contracts/Stakable.sol\":3977:3985  _isVoter */\n      tag_124\n        /* \"contracts/Stakable.sol\":3977:3987  _isVoter() */\n      jump\t// in\n    tag_170:\n        /* \"contracts/Stakable.sol\":12256:12266  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":12249:12267  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":12249:12255  voters */\n      0x07\n        /* \"contracts/Stakable.sol\":12249:12267  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable.sol\":12274:12283  _votingId */\n      sload(0x05)\n        /* \"contracts/Stakable.sol\":12249:12284  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable.sol\":12249:12273  voters[msg.sender].voted */\n      0x01\n      swap1\n      dup2\n      add\n        /* \"contracts/Stakable.sol\":12249:12284  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable.sol\":12249:12292  voters[msg.sender].voted[_votingId] == true */\n      iszero\n      iszero\n      eq\n        /* \"contracts/Stakable.sol\":12245:12348  if (voters[msg.sender].voted[_votingId] == true) {... */\n      iszero\n      tag_172\n      jumpi\n        /* \"contracts/Stakable.sol\":12315:12337  Voting__alreadyVoted() */\n      mload(0x40)\n      0x740e33b000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":12245:12348  if (voters[msg.sender].voted[_votingId] == true) {... */\n    tag_172:\n        /* \"contracts/Stakable.sol\":12365:12375  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":12358:12376  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":12358:12364  voters */\n      0x07\n        /* \"contracts/Stakable.sol\":12358:12376  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable.sol\":12383:12392  _votingId */\n      0x05\n      dup1\n      sload\n        /* \"contracts/Stakable.sol\":12358:12393  voters[msg.sender].voted[_votingId] */\n      dup6\n      mstore\n        /* \"contracts/Stakable.sol\":12396:12400  true */\n      0x01\n        /* \"contracts/Stakable.sol\":12358:12382  voters[msg.sender].voted */\n      swap2\n      dup3\n      add\n        /* \"contracts/Stakable.sol\":12358:12393  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"contracts/Stakable.sol\":12358:12400  voters[msg.sender].voted[_votingId] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup4\n      or\n      swap1\n      sstore\n        /* \"contracts/Stakable.sol\":12421:12430  _votingId */\n      sload\n        /* \"contracts/Stakable.sol\":12410:12431  votedUsers[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable.sol\":12410:12420  votedUsers */\n      0x08\n        /* \"contracts/Stakable.sol\":12410:12431  votedUsers[_votingId] */\n      swap1\n      swap3\n      mstore\n      dup3\n      keccak256\n        /* \"contracts/Stakable.sol\":12410:12436  votedUsers[_votingId] += 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable.sol\":12396:12400  true */\n      swap2\n      swap3\n        /* \"contracts/Stakable.sol\":12410:12431  votedUsers[_votingId] */\n      swap1\n      swap2\n        /* \"contracts/Stakable.sol\":12410:12436  votedUsers[_votingId] += 1 */\n      tag_127\n      swap1\n        /* \"contracts/Stakable.sol\":12396:12400  true */\n      dup5\n      swap1\n        /* \"contracts/Stakable.sol\":12410:12436  votedUsers[_votingId] += 1 */\n      tag_143\n      jump\t// in\n        /* \"contracts/Stakable.sol\":10504:11051  function claimAirdrop(address user) external onlyTalax returns (uint256) {... */\n    tag_63:\n        /* \"contracts/Stakable.sol\":10568:10575  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      tag_175\n        /* \"contracts/Stakable.sol\":3416:3423  isTalax */\n      tag_159\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      jump\t// in\n    tag_175:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable.sol\":10662:10680  stakeholders[user] */\n      dup3\n      and\n        /* \"contracts/Stakable.sol\":10639:10659  Stake storage staker */\n      0x00\n        /* \"contracts/Stakable.sol\":10662:10680  stakeholders[user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":10662:10674  stakeholders */\n      0x0b\n        /* \"contracts/Stakable.sol\":10662:10680  stakeholders[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable.sol\":10695:10708  staker.amount */\n      dup1\n      sload\n        /* \"contracts/Stakable.sol\":10695:10712  staker.amount > 0 */\n      iszero\n        /* \"contracts/Stakable.sol\":10691:11045  if (staker.amount > 0) {... */\n      tag_177\n      jumpi\n        /* \"contracts/Stakable.sol\":10732:10770  _calculateWeek(staker.latestClaimDrop) */\n      tag_178\n        /* \"contracts/Stakable.sol\":10747:10753  staker */\n      dup2\n        /* \"contracts/Stakable.sol\":10747:10769  staker.latestClaimDrop */\n      0x06\n      add\n      sload\n        /* \"contracts/Stakable.sol\":10732:10746  _calculateWeek */\n      tag_145\n        /* \"contracts/Stakable.sol\":10732:10770  _calculateWeek(staker.latestClaimDrop) */\n      jump\t// in\n    tag_178:\n        /* \"contracts/Stakable.sol\":10728:10846  if (_calculateWeek(staker.latestClaimDrop) == 0) {... */\n      tag_179\n      jumpi\n        /* \"contracts/Stakable.sol\":10802:10831  Airdrop__claimableOnceAWeek() */\n      mload(0x40)\n      0xdd8456cc00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":10728:10846  if (_calculateWeek(staker.latestClaimDrop) == 0) {... */\n    tag_179:\n        /* \"contracts/Stakable.sol\":10886:10887  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":10860:10883  staker.claimableAirdrop */\n      0x05\n      dup3\n      add\n        /* \"contracts/Stakable.sol\":10860:10887  staker.claimableAirdrop = 0 */\n      sstore\n        /* \"contracts/Stakable.sol\":10926:10941  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":10901:10923  staker.latestClaimDrop */\n      0x06\n      dup3\n      add\n        /* \"contracts/Stakable.sol\":10901:10941  staker.latestClaimDrop = block.timestamp */\n      sstore\n        /* \"contracts/Stakable.sol\":10981:10994  staker.amount */\n      dup1\n      sload\n        /* \"contracts/Stakable.sol\":10963:10995  _calculateAirdrop(staker.amount) */\n      tag_180\n      swap1\n        /* \"contracts/Stakable.sol\":10963:10980  _calculateAirdrop */\n      tag_148\n        /* \"contracts/Stakable.sol\":10963:10995  _calculateAirdrop(staker.amount) */\n      jump\t// in\n    tag_180:\n        /* \"contracts/Stakable.sol\":10956:10995  return _calculateAirdrop(staker.amount) */\n      swap4\n        /* \"contracts/Stakable.sol\":10504:11051  function claimAirdrop(address user) external onlyTalax returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":10691:11045  if (staker.amount > 0) {... */\n    tag_177:\n      pop\n        /* \"contracts/Stakable.sol\":11033:11034  0 */\n      0x00\n      swap3\n        /* \"contracts/Stakable.sol\":10504:11051  function claimAirdrop(address user) external onlyTalax returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":3435:3436  _ */\n    tag_176:\n        /* \"contracts/Stakable.sol\":10504:11051  function claimAirdrop(address user) external onlyTalax returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":12867:13355  function getVotingResult()... */\n    tag_66:\n        /* \"contracts/Stakable.sol\":12984:12988  bool */\n      0x00\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      tag_183\n        /* \"contracts/Stakable.sol\":3416:3423  isTalax */\n      tag_159\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      jump\t// in\n    tag_183:\n        /* \"contracts/Stakable.sol\":4259:4279  _checkVotingStatus() */\n      tag_185\n        /* \"contracts/Stakable.sol\":4259:4277  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable.sol\":4259:4279  _checkVotingStatus() */\n      jump\t// in\n    tag_185:\n        /* \"contracts/Stakable.sol\":13081:13082  1 */\n      0x01\n        /* \"contracts/Stakable.sol\":13066:13077  totalVoters */\n      sload(0x06)\n        /* \"contracts/Stakable.sol\":13066:13082  totalVoters <= 1 */\n      gt\n        /* \"contracts/Stakable.sol\":13062:13141  if (totalVoters <= 1) {... */\n      tag_187\n      jumpi\n        /* \"contracts/Stakable.sol\":13105:13130  Voting__notEnoughVoters() */\n      mload(0x40)\n      0x2f9686de00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":13062:13141  if (totalVoters <= 1) {... */\n    tag_187:\n        /* \"contracts/Stakable.sol\":13150:13169  uint256 half_voters */\n      0x00\n        /* \"contracts/Stakable.sol\":13172:13218  SafeMath.div(SafeMath.mul(totalVoters, 5), 10) */\n      tag_188\n        /* \"contracts/Stakable.sol\":13185:13213  SafeMath.mul(totalVoters, 5) */\n      tag_189\n        /* \"contracts/Stakable.sol\":13198:13209  totalVoters */\n      sload(0x06)\n        /* \"contracts/Stakable.sol\":13211:13212  5 */\n      0x05\n        /* \"contracts/Stakable.sol\":13185:13197  SafeMath.mul */\n      tag_138\n        /* \"contracts/Stakable.sol\":13185:13213  SafeMath.mul(totalVoters, 5) */\n      jump\t// in\n    tag_189:\n        /* \"contracts/Stakable.sol\":13215:13217  10 */\n      0x0a\n        /* \"contracts/Stakable.sol\":13172:13184  SafeMath.div */\n      tag_139\n        /* \"contracts/Stakable.sol\":13172:13218  SafeMath.div(SafeMath.mul(totalVoters, 5), 10) */\n      jump\t// in\n    tag_188:\n        /* \"contracts/Stakable.sol\":13244:13253  _votingId */\n      sload(0x05)\n        /* \"contracts/Stakable.sol\":13233:13254  votedUsers[_votingId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":13233:13243  votedUsers */\n      0x08\n        /* \"contracts/Stakable.sol\":13233:13254  votedUsers[_votingId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Stakable.sol\":13150:13218  uint256 half_voters = SafeMath.div(SafeMath.mul(totalVoters, 5), 10) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/Stakable.sol\":13233:13268  votedUsers[_votingId] > half_voters */\n      dup2\n      lt\n        /* \"contracts/Stakable.sol\":13229:13349  if (votedUsers[_votingId] > half_voters) {... */\n      iszero\n      tag_190\n      jumpi\n        /* \"contracts/Stakable.sol\":13291:13295  true */\n      0x01\n        /* \"contracts/Stakable.sol\":13284:13295  return true */\n      swap2\n      pop\n      pop\n        /* \"contracts/Stakable.sol\":12867:13355  function getVotingResult()... */\n      swap1\n      jump\t// out\n        /* \"contracts/Stakable.sol\":13229:13349  if (votedUsers[_votingId] > half_voters) {... */\n    tag_190:\n        /* \"contracts/Stakable.sol\":13333:13338  false */\n      0x00\n        /* \"contracts/Stakable.sol\":13326:13338  return false */\n      swap2\n      pop\n      pop\n        /* \"contracts/Stakable.sol\":12867:13355  function getVotingResult()... */\n      swap1\n      jump\t// out\n        /* \"contracts/Stakable.sol\":9840:9935  function startAirdropSince() external onlyTalax {... */\n    tag_73:\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      tag_194\n        /* \"contracts/Stakable.sol\":3416:3423  isTalax */\n      tag_159\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      jump\t// in\n    tag_194:\n        /* \"contracts/Stakable.sol\":9913:9928  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":9898:9910  airdropSince */\n      0x03\n        /* \"contracts/Stakable.sol\":9898:9928  airdropSince = block.timestamp */\n      sstore\n        /* \"contracts/Stakable.sol\":9840:9935  function startAirdropSince() external onlyTalax {... */\n      jump\t// out\n        /* \"contracts/Stakable.sol\":5893:6199  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_80:\n        /* \"contracts/Stakable.sol\":3678:3687  isOwner() */\n      tag_197\n        /* \"contracts/Stakable.sol\":3678:3685  isOwner */\n      tag_152\n        /* \"contracts/Stakable.sol\":3678:3687  isOwner() */\n      jump\t// in\n    tag_197:\n        /* \"contracts/Stakable.sol\":6051:6053  30 */\n      0x1e\n        /* \"contracts/Stakable.sol\":6042:6048  amount */\n      dup2\n        /* \"contracts/Stakable.sol\":6042:6053  amount > 30 */\n      gt\n        /* \"contracts/Stakable.sol\":6038:6119  if (amount > 30) {... */\n      iszero\n      tag_199\n      jumpi\n        /* \"contracts/Stakable.sol\":6076:6108  Staking__penaltyExceed3Percent() */\n      mload(0x40)\n      0xf1a470d700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":6038:6119  if (amount > 30) {... */\n    tag_199:\n        /* \"contracts/Stakable.sol\":6128:6146  stakingPenaltyRate */\n      0x01\n        /* \"contracts/Stakable.sol\":6128:6155  stakingPenaltyRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Stakable.sol\":6170:6192  PenaltyChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1884:1909   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":6170:6192  PenaltyChanged(amount) */\n      0xcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9\n      swap1\n        /* \"#utility.yul\":1872:1874   */\n      0x20\n        /* \"#utility.yul\":1857:1875   */\n      add\n        /* \"contracts/Stakable.sol\":6170:6192  PenaltyChanged(amount) */\n    tag_200:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Stakable.sol\":5893:6199  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":7870:8595  function withdrawStake(address user)... */\n    tag_97:\n        /* \"contracts/Stakable.sol\":7980:7987  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":7989:7996  uint256 */\n      dup1\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_202\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3148:3150   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3130:3151   */\n      mstore\n        /* \"#utility.yul\":3187:3189   */\n      0x1f\n        /* \"#utility.yul\":3167:3185   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3160:3190   */\n      mstore\n        /* \"#utility.yul\":3226:3259   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":3206:3224   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3199:3260   */\n      mstore\n        /* \"#utility.yul\":3277:3295   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2946:3301   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_202:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      tag_205\n        /* \"contracts/Stakable.sol\":3416:3423  isTalax */\n      tag_159\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      jump\t// in\n    tag_205:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable.sol\":8146:8164  stakeholders[user] */\n      dup4\n      and\n        /* \"contracts/Stakable.sol\":8120:8143  Stake memory user_stake */\n      0x00\n        /* \"contracts/Stakable.sol\":8146:8164  stakeholders[user] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":8146:8158  stakeholders */\n      0x0b\n        /* \"contracts/Stakable.sol\":8146:8164  stakeholders[user] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/Stakable.sol\":8120:8164  Stake memory user_stake = stakeholders[user] */\n      dup2\n      mload\n      0xe0\n      dup2\n      add\n      dup4\n      mstore\n      dup2\n      sload\n      dup2\n      mstore\n      0x01\n      dup1\n      dup4\n      add\n      dup1\n      sload\n      dup4\n      dup8\n      add\n      mstore\n      0x02\n      dup5\n      add\n      dup1\n      sload\n      swap6\n      dup5\n      add\n      swap6\n      swap1\n      swap6\n      mstore\n      0x03\n      dup5\n      add\n      dup1\n      sload\n      0x60\n      dup6\n      add\n      mstore\n      0x04\n      dup6\n      add\n      dup1\n      sload\n      0x80\n      dup7\n      add\n      mstore\n      0x05\n      dup7\n      add\n      dup1\n      sload\n      0xa0\n      dup8\n      add\n      mstore\n      0x06\n      dup1\n      dup9\n      add\n      dup1\n      sload\n      0xc0\n      dup10\n      add\n      mstore\n        /* \"contracts/Stakable.sol\":8182:8200  stakeholders[user] */\n      swap13\n      dup13\n      mstore\n      swap10\n      swap1\n      swap9\n      mstore\n        /* \"contracts/Stakable.sol\":8175:8200  delete stakeholders[user] */\n      swap5\n      dup10\n      swap1\n      sstore\n      swap1\n      dup9\n      swap1\n      sstore\n      swap4\n      dup8\n      swap1\n      sstore\n      swap3\n      dup7\n      swap1\n      sstore\n      swap1\n      dup6\n      swap1\n      sstore\n      swap2\n      dup5\n      swap1\n      sstore\n      swap4\n      dup4\n      swap1\n      sstore\n        /* \"contracts/Stakable.sol\":8210:8226  totalVoters -= 1 */\n      dup2\n      sload\n        /* \"contracts/Stakable.sol\":8120:8164  Stake memory user_stake = stakeholders[user] */\n      swap1\n      swap4\n      swap3\n        /* \"contracts/Stakable.sol\":8120:8143  Stake memory user_stake */\n      swap1\n        /* \"contracts/Stakable.sol\":8210:8226  totalVoters -= 1 */\n      tag_207\n      swap1\n        /* \"contracts/Stakable.sol\":8120:8164  Stake memory user_stake = stakeholders[user] */\n      dup5\n      swap1\n        /* \"contracts/Stakable.sol\":8210:8226  totalVoters -= 1 */\n      tag_128\n      jump\t// in\n    tag_207:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable.sol\":8243:8255  voters[user] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":8243:8249  voters */\n      0x07\n        /* \"contracts/Stakable.sol\":8243:8255  voters[user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable.sol\":8262:8271  _votingId */\n      sload(0x05)\n        /* \"contracts/Stakable.sol\":8243:8272  voters[user].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable.sol\":8243:8261  voters[user].voted */\n      0x01\n      add\n        /* \"contracts/Stakable.sol\":8243:8272  voters[user].voted[_votingId] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/Stakable.sol\":8236:8272  delete voters[user].voted[_votingId] */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/Stakable.sol\":8287:8309  user_stake.releaseTime */\n      0x60\n      dup2\n      add\n      mload\n        /* \"contracts/Stakable.sol\":8312:8327  block.timestamp */\n      timestamp\n      lt\n        /* \"contracts/Stakable.sol\":8283:8517  if (user_stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_208\n      jumpi\n        /* \"contracts/Stakable.sol\":8416:8433  user_stake.amount */\n      dup1\n      mload\n        /* \"contracts/Stakable.sol\":8366:8506  _calculateStakingWithPenalty(... */\n      tag_209\n      swap1\n        /* \"contracts/Stakable.sol\":8455:8488  _calculateStakeReward(user_stake) */\n      tag_210\n        /* \"contracts/Stakable.sol\":8416:8426  user_stake */\n      dup4\n        /* \"contracts/Stakable.sol\":8455:8476  _calculateStakeReward */\n      tag_134\n        /* \"contracts/Stakable.sol\":8455:8488  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_210:\n        /* \"contracts/Stakable.sol\":8366:8394  _calculateStakingWithPenalty */\n      tag_211\n        /* \"contracts/Stakable.sol\":8366:8506  _calculateStakingWithPenalty(... */\n      jump\t// in\n    tag_209:\n        /* \"contracts/Stakable.sol\":8343:8506  return... */\n      swap3\n      pop\n      swap3\n      pop\n      pop\n      jump(tag_206)\n        /* \"contracts/Stakable.sol\":8283:8517  if (user_stake.releaseTime > block.timestamp) {... */\n    tag_208:\n        /* \"contracts/Stakable.sol\":8535:8552  user_stake.amount */\n      dup1\n      mload\n        /* \"contracts/Stakable.sol\":8554:8587  _calculateStakeReward(user_stake) */\n      tag_212\n        /* \"contracts/Stakable.sol\":8535:8545  user_stake */\n      dup3\n        /* \"contracts/Stakable.sol\":8554:8575  _calculateStakeReward */\n      tag_134\n        /* \"contracts/Stakable.sol\":8554:8587  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_212:\n        /* \"contracts/Stakable.sol\":8527:8588  return (user_stake.amount, _calculateStakeReward(user_stake)) */\n      swap3\n      pop\n      swap3\n      pop\n      pop\n        /* \"contracts/Stakable.sol\":3435:3436  _ */\n    tag_206:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n        /* \"contracts/Stakable.sol\":7870:8595  function withdrawStake(address user)... */\n      swap1\n      swap3\n      swap1\n      swap2\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":11227:11431  function airdropWeek() public view returns (uint256) {... */\n    tag_104:\n        /* \"contracts/Stakable.sol\":11271:11278  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":11294:11306  airdropSince */\n      sload(0x03)\n        /* \"contracts/Stakable.sol\":11310:11311  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":11294:11311  airdropSince != 0 */\n      eq\n        /* \"contracts/Stakable.sol\":11290:11425  if (airdropSince != 0) {... */\n      tag_214\n      jumpi\n        /* \"contracts/Stakable.sol\":11369:11375  7 days */\n      0x093a80\n        /* \"contracts/Stakable.sol\":11353:11365  airdropSince */\n      sload(0x03)\n        /* \"contracts/Stakable.sol\":11335:11350  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":11335:11365  block.timestamp - airdropSince */\n      tag_215\n      swap2\n      swap1\n      tag_128\n      jump\t// in\n    tag_215:\n        /* \"contracts/Stakable.sol\":11334:11375  (block.timestamp - airdropSince) / 7 days */\n      tag_216\n      swap2\n      swap1\n      tag_217\n      jump\t// in\n    tag_216:\n        /* \"contracts/Stakable.sol\":11327:11375  return (block.timestamp - airdropSince) / 7 days */\n      swap1\n      pop\n        /* \"contracts/Stakable.sol\":11227:11431  function airdropWeek() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Stakable.sol\":11290:11425  if (airdropSince != 0) {... */\n    tag_214:\n      pop\n        /* \"contracts/Stakable.sol\":11413:11414  0 */\n      0x00\n      swap1\n        /* \"contracts/Stakable.sol\":11227:11431  function airdropWeek() public view returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/Stakable.sol\":9941:10175  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_108:\n        /* \"contracts/Stakable.sol\":3678:3687  isOwner() */\n      tag_220\n        /* \"contracts/Stakable.sol\":3678:3685  isOwner */\n      tag_152\n        /* \"contracts/Stakable.sol\":3678:3687  isOwner() */\n      jump\t// in\n    tag_220:\n        /* \"contracts/Stakable.sol\":10032:10035  200 */\n      0xc8\n        /* \"contracts/Stakable.sol\":10023:10029  amount */\n      dup2\n        /* \"contracts/Stakable.sol\":10023:10035  amount > 200 */\n      gt\n        /* \"contracts/Stakable.sol\":10019:10102  if (amount > 200) {... */\n      iszero\n      tag_222\n      jumpi\n        /* \"contracts/Stakable.sol\":10058:10091  Staking__airdropExceed20Percent() */\n      mload(0x40)\n      0xa552cf1000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":10019:10102  if (amount > 200) {... */\n    tag_222:\n        /* \"contracts/Stakable.sol\":10111:10122  airdropRate */\n      0x02\n        /* \"contracts/Stakable.sol\":10111:10131  airdropRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Stakable.sol\":10146:10168  AirdropChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1884:1909   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":10146:10168  AirdropChanged(amount) */\n      0xcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e\n      swap1\n        /* \"#utility.yul\":1872:1874   */\n      0x20\n        /* \"#utility.yul\":1857:1875   */\n      add\n        /* \"contracts/Stakable.sol\":10146:10168  AirdropChanged(amount) */\n      tag_200\n        /* \"#utility.yul\":1738:1915   */\n      jump\n        /* \"contracts/Stakable.sol\":4713:5887  function stake(... */\n    tag_112:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_225\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3148:3150   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3130:3151   */\n      mstore\n        /* \"#utility.yul\":3187:3189   */\n      0x1f\n        /* \"#utility.yul\":3167:3185   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3160:3190   */\n      mstore\n        /* \"#utility.yul\":3226:3259   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":3206:3224   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3199:3260   */\n      mstore\n        /* \"#utility.yul\":3277:3295   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2946:3301   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_225:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      tag_228\n        /* \"contracts/Stakable.sol\":3416:3423  isTalax */\n      tag_159\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      jump\t// in\n    tag_228:\n        /* \"contracts/Stakable.sol\":5003:5004  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":4993:4999  amount */\n      dup4\n        /* \"contracts/Stakable.sol\":4993:5004  amount <= 0 */\n      gt\n        /* \"contracts/Stakable.sol\":4989:5067  if (amount <= 0) {... */\n      tag_230\n      jumpi\n        /* \"contracts/Stakable.sol\":5027:5056  Staking__cannotStakeNothing() */\n      mload(0x40)\n      0x88b440d600000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":4989:5067  if (amount <= 0) {... */\n    tag_230:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable.sol\":5152:5170  stakeholders[user] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":5152:5164  stakeholders */\n      0x0b\n        /* \"contracts/Stakable.sol\":5152:5170  stakeholders[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable.sol\":5152:5177  stakeholders[user].amount */\n      sload\n        /* \"contracts/Stakable.sol\":5152:5182  stakeholders[user].amount != 0 */\n      iszero\n        /* \"contracts/Stakable.sol\":5148:5239  if (stakeholders[user].amount != 0) {... */\n      tag_231\n      jumpi\n        /* \"contracts/Stakable.sol\":5205:5228  Staking__userIsStaker() */\n      mload(0x40)\n      0x04462d2700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":5148:5239  if (stakeholders[user].amount != 0) {... */\n    tag_231:\n        /* \"contracts/Stakable.sol\":5264:5265  1 */\n      0x01\n        /* \"contracts/Stakable.sol\":5249:5260  totalVoters */\n      0x06\n      0x00\n        /* \"contracts/Stakable.sol\":5249:5265  totalVoters += 1 */\n      dup3\n      dup3\n      sload\n      tag_232\n      swap2\n      swap1\n      tag_143\n      jump\t// in\n    tag_232:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable.sol\":5275:5287  voters[user] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":5275:5281  voters */\n      0x07\n        /* \"contracts/Stakable.sol\":5275:5287  voters[user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/Stakable.sol\":5275:5306  voters[user].votingRight = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/Stakable.sol\":5302:5306  true */\n      0x01\n        /* \"contracts/Stakable.sol\":5275:5306  voters[user].votingRight = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/Stakable.sol\":5589:5755  Stake(... */\n      dup2\n      mload\n      0xe0\n      dup2\n      add\n      dup4\n      mstore\n      dup6\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":5424:5439  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":5589:5755  Stake(... */\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      swap2\n      dup3\n      add\n      dup4\n      swap1\n      mstore\n        /* \"contracts/Stakable.sol\":5424:5439  block.timestamp */\n      swap1\n        /* \"contracts/Stakable.sol\":5589:5755  Stake(... */\n      0x60\n      dup2\n      add\n        /* \"contracts/Stakable.sol\":5676:5699  stakePeriod + timestamp */\n      tag_233\n        /* \"contracts/Stakable.sol\":5424:5439  block.timestamp */\n      dup4\n        /* \"contracts/Stakable.sol\":5676:5687  stakePeriod */\n      dup7\n        /* \"contracts/Stakable.sol\":5676:5699  stakePeriod + timestamp */\n      tag_143\n      jump\t// in\n    tag_233:\n        /* \"contracts/Stakable.sol\":5589:5755  Stake(... */\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":5714:5715  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":5589:5755  Stake(... */\n      0x20\n      dup1\n      dup4\n      add\n      dup3\n      swap1\n      mstore\n      0x40\n      dup1\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n      0x60\n      swap4\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable.sol\":5568:5586  stakeholders[user] */\n      dup11\n      and\n      dup1\n      dup5\n      mstore\n        /* \"contracts/Stakable.sol\":5568:5580  stakeholders */\n      0x0b\n        /* \"contracts/Stakable.sol\":5568:5586  stakeholders[user] */\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Stakable.sol\":5568:5755  stakeholders[user] = Stake(... */\n      dup6\n      mload\n      dup2\n      sstore\n      swap2\n      dup6\n      add\n      mload\n      0x01\n      dup4\n      add\n      sstore\n      dup5\n      add\n      mload\n      0x02\n      dup3\n      add\n      sstore\n      swap2\n      dup4\n      add\n      mload\n      0x03\n      dup4\n      add\n      sstore\n      0x80\n      dup4\n      add\n      mload\n      0x04\n      dup4\n      add\n      sstore\n      0xa0\n      dup4\n      add\n      mload\n      0x05\n      dup4\n      add\n      sstore\n      0xc0\n      swap1\n      swap3\n      add\n      mload\n      0x06\n      swap1\n      swap2\n      add\n      sstore\n        /* \"contracts/Stakable.sol\":5822:5880  Staked(user, amount, timestamp, (stakePeriod + timestamp)) */\n      0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed\n        /* \"contracts/Stakable.sol\":5835:5841  amount */\n      dup6\n        /* \"contracts/Stakable.sol\":5843:5852  timestamp */\n      dup4\n        /* \"contracts/Stakable.sol\":5855:5878  stakePeriod + timestamp */\n      tag_234\n        /* \"contracts/Stakable.sol\":5843:5852  timestamp */\n      dup2\n        /* \"contracts/Stakable.sol\":5855:5866  stakePeriod */\n      dup9\n        /* \"contracts/Stakable.sol\":5855:5878  stakePeriod + timestamp */\n      tag_143\n      jump\t// in\n    tag_234:\n        /* \"contracts/Stakable.sol\":5822:5880  Staked(user, amount, timestamp, (stakePeriod + timestamp)) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":4428:4453   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":4484:4486   */\n      0x20\n        /* \"#utility.yul\":4469:4487   */\n      dup5\n      add\n        /* \"#utility.yul\":4462:4496   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":4512:4530   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4505:4539   */\n      mstore\n        /* \"#utility.yul\":4416:4418   */\n      0x60\n        /* \"#utility.yul\":4401:4419   */\n      add\n        /* \"contracts/Stakable.sol\":5822:5880  Staked(user, amount, timestamp, (stakePeriod + timestamp)) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n      pop\n      pop\n      pop\n        /* \"contracts/Stakable.sol\":4713:5887  function stake(... */\n      jump\t// out\n        /* \"contracts/Stakable.sol\":13361:13457  function stopVoting() external onlyTalax votingStatusTrue {... */\n    tag_114:\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      tag_238\n        /* \"contracts/Stakable.sol\":3416:3423  isTalax */\n      tag_159\n        /* \"contracts/Stakable.sol\":3416:3425  isTalax() */\n      jump\t// in\n    tag_238:\n        /* \"contracts/Stakable.sol\":4259:4279  _checkVotingStatus() */\n      tag_240\n        /* \"contracts/Stakable.sol\":4259:4277  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable.sol\":4259:4279  _checkVotingStatus() */\n      jump\t// in\n    tag_240:\n        /* \"contracts/Stakable.sol\":13429:13442  _votingStatus */\n      0x04\n        /* \"contracts/Stakable.sol\":13429:13450  _votingStatus = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/Stakable.sol\":13361:13457  function stopVoting() external onlyTalax votingStatusTrue {... */\n      jump\t// out\n        /* \"contracts/Stakable.sol\":4011:4215  function _checkVotingStatus() internal view {... */\n    tag_121:\n        /* \"contracts/Stakable.sol\":4132:4145  _votingStatus */\n      and(0xff, sload(0x04))\n        /* \"contracts/Stakable.sol\":4127:4209  if (!_votingStatus) {... */\n      tag_243\n      jumpi\n        /* \"contracts/Stakable.sol\":4168:4198  Function__votingNotAvailable() */\n      mload(0x40)\n      0xa1d1891400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":4127:4209  if (!_votingStatus) {... */\n    tag_243:\n        /* \"contracts/Stakable.sol\":4011:4215  function _checkVotingStatus() internal view {... */\n      jump\t// out\n        /* \"contracts/Stakable.sol\":3711:3942  function _isVoter() internal view {... */\n    tag_124:\n        /* \"contracts/Stakable.sol\":3849:3859  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":3842:3860  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":3842:3848  voters */\n      0x07\n        /* \"contracts/Stakable.sol\":3842:3860  voters[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable.sol\":3842:3872  voters[msg.sender].votingRight */\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable.sol\":3838:3936  if (voters[msg.sender].votingRight == false) {... */\n      tag_243\n      jumpi\n        /* \"contracts/Stakable.sol\":3904:3925  Function__notAVoter() */\n      mload(0x40)\n      0x1e567dd400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":6560:6997  function _calculateStakeReward(Stake memory user_stake)... */\n    tag_134:\n        /* \"contracts/Stakable.sol\":6690:6707  user_stake.amount */\n      dup1\n      mload\n        /* \"contracts/Stakable.sol\":6663:6670  uint256 */\n      0x00\n      swap1\n        /* \"contracts/Stakable.sol\":6686:6747  if (user_stake.amount == 0) {... */\n      tag_247\n      jumpi\n      pop\n        /* \"contracts/Stakable.sol\":6735:6736  0 */\n      0x00\n      swap2\n        /* \"contracts/Stakable.sol\":6560:6997  function _calculateStakeReward(Stake memory user_stake)... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":6686:6747  if (user_stake.amount == 0) {... */\n    tag_247:\n        /* \"contracts/Stakable.sol\":6986:6990  1e26 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/Stakable.sol\":6939:6982  _calculateStakingDuration(user_stake.since) */\n      tag_248\n        /* \"contracts/Stakable.sol\":6965:6975  user_stake */\n      dup4\n        /* \"contracts/Stakable.sol\":6965:6981  user_stake.since */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":6939:6964  _calculateStakingDuration */\n      tag_249\n        /* \"contracts/Stakable.sol\":6939:6982  _calculateStakingDuration(user_stake.since) */\n      jump\t// in\n    tag_248:\n        /* \"contracts/Stakable.sol\":6900:6920  user_stake.rewardAPY */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/Stakable.sol\":6864:6881  user_stake.amount */\n      dup5\n      mload\n        /* \"contracts/Stakable.sol\":6864:6920  user_stake.amount *... */\n      tag_250\n      swap2\n        /* \"contracts/Stakable.sol\":6900:6920  user_stake.rewardAPY */\n      swap1\n        /* \"contracts/Stakable.sol\":6864:6920  user_stake.amount *... */\n      tag_251\n      jump\t// in\n    tag_250:\n        /* \"contracts/Stakable.sol\":6864:6982  user_stake.amount *... */\n      tag_252\n      swap2\n      swap1\n      tag_251\n      jump\t// in\n    tag_252:\n        /* \"contracts/Stakable.sol\":6863:6990  (user_stake.amount *... */\n      tag_253\n      swap2\n      swap1\n      tag_217\n      jump\t// in\n    tag_253:\n        /* \"contracts/Stakable.sol\":6844:6990  return... */\n      swap3\n        /* \"contracts/Stakable.sol\":6560:6997  function _calculateStakeReward(Stake memory user_stake)... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3451:3547  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_138:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3509:3516  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3535:3540  a * b */\n      tag_180\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3539:3540  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3535:3536  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3535:3540  a * b */\n      tag_251\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3836:3932  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_139:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3894:3901  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3920:3925  a / b */\n      tag_180\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3924:3925  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3920:3921  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3920:3925  a / b */\n      tag_217\n      jump\t// in\n        /* \"contracts/Stakable.sol\":10181:10313  function _calculateWeek(uint256 input) internal view returns (uint256) {... */\n    tag_145:\n        /* \"contracts/Stakable.sol\":10243:10250  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":10269:10306  (block.timestamp - input).div(7 days) */\n      tag_253\n        /* \"contracts/Stakable.sol\":10299:10305  7 days */\n      0x093a80\n        /* \"contracts/Stakable.sol\":10270:10293  block.timestamp - input */\n      tag_260\n        /* \"contracts/Stakable.sol\":10288:10293  input */\n      dup5\n        /* \"contracts/Stakable.sol\":10270:10285  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":10270:10293  block.timestamp - input */\n      tag_128\n      jump\t// in\n    tag_260:\n        /* \"contracts/Stakable.sol\":10269:10298  (block.timestamp - input).div */\n      swap1\n      tag_139\n        /* \"contracts/Stakable.sol\":10269:10306  (block.timestamp - input).div(7 days) */\n      jump\t// in\n        /* \"contracts/Stakable.sol\":10319:10498  function _calculateAirdrop(uint256 stakeAmount)... */\n    tag_148:\n        /* \"contracts/Stakable.sol\":10414:10421  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":10483:10491  52 weeks */\n      0x01dfe200\n        /* \"contracts/Stakable.sol\":10475:10479  1000 */\n      0x03e8\n        /* \"contracts/Stakable.sol\":10460:10471  airdropRate */\n      sload(0x02)\n        /* \"contracts/Stakable.sol\":10446:10457  stakeAmount */\n      dup5\n        /* \"contracts/Stakable.sol\":10446:10471  stakeAmount * airdropRate */\n      tag_262\n      swap2\n      swap1\n      tag_251\n      jump\t// in\n    tag_262:\n        /* \"contracts/Stakable.sol\":10445:10479  (stakeAmount * airdropRate) / 1000 */\n      tag_252\n      swap2\n      swap1\n      tag_217\n      jump\t// in\n        /* \"contracts/Stakable.sol\":3449:3641  function isOwner() internal view {... */\n    tag_152:\n        /* \"contracts/Stakable.sol\":3570:3576  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x0a))\n        /* \"contracts/Stakable.sol\":3556:3566  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":3556:3576  msg.sender != _owner */\n      eq\n        /* \"contracts/Stakable.sol\":3552:3635  if (msg.sender != _owner) {... */\n      tag_243\n      jumpi\n        /* \"contracts/Stakable.sol\":3599:3624  Function__notAuthorized() */\n      mload(0x40)\n      shl(0xe1, 0x15a678a9)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":3187:3379  function isTalax() internal view {... */\n    tag_159:\n        /* \"contracts/Stakable.sol\":3308:3314  _talax */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x09))\n        /* \"contracts/Stakable.sol\":3294:3304  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":3294:3314  msg.sender != _talax */\n      eq\n        /* \"contracts/Stakable.sol\":3290:3373  if (msg.sender != _talax) {... */\n      tag_243\n      jumpi\n        /* \"contracts/Stakable.sol\":3337:3362  Function__notAuthorized() */\n      mload(0x40)\n      shl(0xe1, 0x15a678a9)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable.sol\":7003:7524  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_211:\n        /* \"contracts/Stakable.sol\":7120:7127  uint256 */\n      0x00\n      dup1\n        /* \"contracts/Stakable.sol\":7156:7167  amount == 0 */\n      dup4\n        /* \"contracts/Stakable.sol\":7152:7207  if (amount == 0) {... */\n      tag_270\n      jumpi\n      pop\n        /* \"contracts/Stakable.sol\":7191:7192  0 */\n      0x00\n      swap1\n      pop\n      dup1\n        /* \"contracts/Stakable.sol\":7183:7196  return (0, 0) */\n      jump(tag_269)\n        /* \"contracts/Stakable.sol\":7152:7207  if (amount == 0) {... */\n    tag_270:\n        /* \"contracts/Stakable.sol\":7237:7365  SafeMath.sub(... */\n      tag_271\n        /* \"contracts/Stakable.sol\":7267:7273  amount */\n      dup5\n        /* \"contracts/Stakable.sol\":7291:7351  SafeMath.div(SafeMath.mul(amount, stakingPenaltyRate), 1000) */\n      tag_272\n        /* \"contracts/Stakable.sol\":7304:7344  SafeMath.mul(amount, stakingPenaltyRate) */\n      tag_137\n        /* \"contracts/Stakable.sol\":7317:7323  amount */\n      dup8\n        /* \"contracts/Stakable.sol\":7325:7343  stakingPenaltyRate */\n      sload(0x01)\n        /* \"contracts/Stakable.sol\":7304:7316  SafeMath.mul */\n      tag_138\n        /* \"contracts/Stakable.sol\":7304:7344  SafeMath.mul(amount, stakingPenaltyRate) */\n      jump\t// in\n        /* \"contracts/Stakable.sol\":7291:7351  SafeMath.div(SafeMath.mul(amount, stakingPenaltyRate), 1000) */\n    tag_272:\n        /* \"contracts/Stakable.sol\":7237:7249  SafeMath.sub */\n      tag_274\n        /* \"contracts/Stakable.sol\":7237:7365  SafeMath.sub(... */\n      jump\t// in\n    tag_271:\n        /* \"contracts/Stakable.sol\":7379:7507  SafeMath.sub(... */\n      tag_275\n        /* \"contracts/Stakable.sol\":7409:7415  reward */\n      dup5\n        /* \"contracts/Stakable.sol\":7433:7493  SafeMath.div(SafeMath.mul(reward, stakingPenaltyRate), 1000) */\n      tag_272\n        /* \"contracts/Stakable.sol\":7446:7486  SafeMath.mul(reward, stakingPenaltyRate) */\n      tag_137\n        /* \"contracts/Stakable.sol\":7459:7465  reward */\n      dup8\n        /* \"contracts/Stakable.sol\":7467:7485  stakingPenaltyRate */\n      sload(0x01)\n        /* \"contracts/Stakable.sol\":7446:7458  SafeMath.mul */\n      tag_138\n        /* \"contracts/Stakable.sol\":7446:7486  SafeMath.mul(reward, stakingPenaltyRate) */\n      jump\t// in\n        /* \"contracts/Stakable.sol\":7379:7507  SafeMath.sub(... */\n    tag_275:\n        /* \"contracts/Stakable.sol\":7216:7517  return (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/Stakable.sol\":7003:7524  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_269:\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":6205:6554  function _calculateStakingDuration(uint256 since)... */\n    tag_249:\n        /* \"contracts/Stakable.sol\":6302:6309  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":6396:6547  SafeMath.div(... */\n      tag_253\n        /* \"contracts/Stakable.sol\":6427:6450  block.timestamp - since */\n      tag_280\n        /* \"contracts/Stakable.sol\":6445:6450  since */\n      dup4\n        /* \"contracts/Stakable.sol\":6427:6442  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":6427:6450  block.timestamp - since */\n      tag_128\n      jump\t// in\n    tag_280:\n        /* \"contracts/Stakable.sol\":6426:6458  (block.timestamp - since) * 1e24 */\n      tag_281\n      swap1\n        /* \"contracts/Stakable.sol\":6454:6458  1e24 */\n      0xd3c21bcecceda1000000\n        /* \"contracts/Stakable.sol\":6426:6458  (block.timestamp - since) * 1e24 */\n      tag_251\n      jump\t// in\n    tag_281:\n        /* \"contracts/Stakable.sol\":6476:6484  365 days */\n      0x01e13380\n        /* \"contracts/Stakable.sol\":6396:6547  SafeMath.div(... */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x1d\n      dup2\n      mstore\n      0x20\n      add\n      0x4572726f722063616e6e6f74206469766964652074696d657374616d70000000\n      dup2\n      mstore\n      pop\n        /* \"contracts/Stakable.sol\":6396:6408  SafeMath.div */\n      tag_282\n        /* \"contracts/Stakable.sol\":6396:6547  SafeMath.div(... */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3108:3204  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_274:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3166:3173  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3192:3197  a - b */\n      tag_180\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3196:3197  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3192:3193  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3192:3197  a - b */\n      tag_128\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5660:5890  function div(... */\n    tag_282:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5776:5783  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5834:5846  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5827:5832  b > 0 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5819:5847  require(b > 0, errorMessage) */\n      tag_286\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_117\n      swap2\n      swap1\n      tag_288\n      jump\t// in\n    tag_286:\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5872:5873  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5868:5869  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5868:5873  a / b */\n      dup2\n      tag_290\n      jumpi\n      tag_290\n      tag_291\n      jump\t// in\n    tag_290:\n      div\n      swap5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5660:5890  function div(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_130:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      tag_292\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\n    tag_292:\n      swap1\n      mstore\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":842:1038   */\n    tag_294:\n        /* \"#utility.yul\":910:930   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":959:1013   */\n      dup2\n      and\n        /* \"#utility.yul\":949:1014   */\n      dup2\n      eq\n        /* \"#utility.yul\":939:1032   */\n      tag_176\n      jumpi\n        /* \"#utility.yul\":1028:1029   */\n      0x00\n        /* \"#utility.yul\":1025:1026   */\n      dup1\n        /* \"#utility.yul\":1018:1030   */\n      revert\n        /* \"#utility.yul\":1043:1229   */\n    tag_42:\n        /* \"#utility.yul\":1102:1108   */\n      0x00\n        /* \"#utility.yul\":1155:1157   */\n      0x20\n        /* \"#utility.yul\":1143:1152   */\n      dup3\n        /* \"#utility.yul\":1134:1141   */\n      dup5\n        /* \"#utility.yul\":1130:1153   */\n      sub\n        /* \"#utility.yul\":1126:1158   */\n      slt\n        /* \"#utility.yul\":1123:1175   */\n      iszero\n      tag_301\n      jumpi\n        /* \"#utility.yul\":1171:1172   */\n      0x00\n        /* \"#utility.yul\":1168:1169   */\n      dup1\n        /* \"#utility.yul\":1161:1173   */\n      revert\n        /* \"#utility.yul\":1123:1175   */\n    tag_301:\n        /* \"#utility.yul\":1194:1223   */\n      tag_180\n        /* \"#utility.yul\":1213:1222   */\n      dup3\n        /* \"#utility.yul\":1194:1223   */\n      tag_294\n      jump\t// in\n        /* \"#utility.yul\":2112:2292   */\n    tag_79:\n        /* \"#utility.yul\":2171:2177   */\n      0x00\n        /* \"#utility.yul\":2224:2226   */\n      0x20\n        /* \"#utility.yul\":2212:2221   */\n      dup3\n        /* \"#utility.yul\":2203:2210   */\n      dup5\n        /* \"#utility.yul\":2199:2222   */\n      sub\n        /* \"#utility.yul\":2195:2227   */\n      slt\n        /* \"#utility.yul\":2192:2244   */\n      iszero\n      tag_308\n      jumpi\n        /* \"#utility.yul\":2240:2241   */\n      0x00\n        /* \"#utility.yul\":2237:2238   */\n      dup1\n        /* \"#utility.yul\":2230:2242   */\n      revert\n        /* \"#utility.yul\":2192:2244   */\n    tag_308:\n      pop\n        /* \"#utility.yul\":2263:2286   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2112:2292   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2550:2941   */\n    tag_111:\n        /* \"#utility.yul\":2636:2642   */\n      0x00\n        /* \"#utility.yul\":2644:2650   */\n      dup1\n        /* \"#utility.yul\":2652:2658   */\n      0x00\n        /* \"#utility.yul\":2660:2666   */\n      dup1\n        /* \"#utility.yul\":2713:2716   */\n      0x80\n        /* \"#utility.yul\":2701:2710   */\n      dup6\n        /* \"#utility.yul\":2692:2699   */\n      dup8\n        /* \"#utility.yul\":2688:2711   */\n      sub\n        /* \"#utility.yul\":2684:2717   */\n      slt\n        /* \"#utility.yul\":2681:2734   */\n      iszero\n      tag_311\n      jumpi\n        /* \"#utility.yul\":2730:2731   */\n      0x00\n        /* \"#utility.yul\":2727:2728   */\n      dup1\n        /* \"#utility.yul\":2720:2732   */\n      revert\n        /* \"#utility.yul\":2681:2734   */\n    tag_311:\n        /* \"#utility.yul\":2753:2782   */\n      tag_312\n        /* \"#utility.yul\":2772:2781   */\n      dup6\n        /* \"#utility.yul\":2753:2782   */\n      tag_294\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":2743:2782   */\n      swap7\n        /* \"#utility.yul\":2829:2831   */\n      0x20\n        /* \"#utility.yul\":2814:2832   */\n      dup7\n      add\n        /* \"#utility.yul\":2801:2833   */\n      calldataload\n      swap7\n      pop\n        /* \"#utility.yul\":2880:2882   */\n      0x40\n        /* \"#utility.yul\":2865:2883   */\n      dup7\n      add\n        /* \"#utility.yul\":2852:2884   */\n      calldataload\n      swap6\n        /* \"#utility.yul\":2931:2933   */\n      0x60\n        /* \"#utility.yul\":2916:2934   */\n      add\n        /* \"#utility.yul\":2903:2935   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":2550:2941   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3306:3490   */\n    tag_295:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":3355:3356   */\n      0x00\n        /* \"#utility.yul\":3348:3436   */\n      mstore\n        /* \"#utility.yul\":3455:3459   */\n      0x11\n        /* \"#utility.yul\":3452:3453   */\n      0x04\n        /* \"#utility.yul\":3445:3460   */\n      mstore\n        /* \"#utility.yul\":3479:3483   */\n      0x24\n        /* \"#utility.yul\":3476:3477   */\n      0x00\n        /* \"#utility.yul\":3469:3484   */\n      revert\n        /* \"#utility.yul\":3495:3620   */\n    tag_128:\n        /* \"#utility.yul\":3535:3539   */\n      0x00\n        /* \"#utility.yul\":3563:3564   */\n      dup3\n        /* \"#utility.yul\":3560:3561   */\n      dup3\n        /* \"#utility.yul\":3557:3565   */\n      lt\n        /* \"#utility.yul\":3554:3588   */\n      iszero\n      tag_317\n      jumpi\n        /* \"#utility.yul\":3568:3586   */\n      tag_317\n      tag_295\n      jump\t// in\n    tag_317:\n      pop\n        /* \"#utility.yul\":3605:3614   */\n      sub\n      swap1\n        /* \"#utility.yul\":3495:3620   */\n      jump\t// out\n        /* \"#utility.yul\":3625:3753   */\n    tag_143:\n        /* \"#utility.yul\":3665:3668   */\n      0x00\n        /* \"#utility.yul\":3696:3697   */\n      dup3\n        /* \"#utility.yul\":3692:3698   */\n      not\n        /* \"#utility.yul\":3689:3690   */\n      dup3\n        /* \"#utility.yul\":3686:3699   */\n      gt\n        /* \"#utility.yul\":3683:3722   */\n      iszero\n      tag_320\n      jumpi\n        /* \"#utility.yul\":3702:3720   */\n      tag_320\n      tag_295\n      jump\t// in\n    tag_320:\n      pop\n        /* \"#utility.yul\":3738:3747   */\n      add\n      swap1\n        /* \"#utility.yul\":3625:3753   */\n      jump\t// out\n        /* \"#utility.yul\":3758:3942   */\n    tag_291:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":3807:3808   */\n      0x00\n        /* \"#utility.yul\":3800:3888   */\n      mstore\n        /* \"#utility.yul\":3907:3911   */\n      0x12\n        /* \"#utility.yul\":3904:3905   */\n      0x04\n        /* \"#utility.yul\":3897:3912   */\n      mstore\n        /* \"#utility.yul\":3931:3935   */\n      0x24\n        /* \"#utility.yul\":3928:3929   */\n      0x00\n        /* \"#utility.yul\":3921:3936   */\n      revert\n        /* \"#utility.yul\":3947:4221   */\n    tag_217:\n        /* \"#utility.yul\":3987:3988   */\n      0x00\n        /* \"#utility.yul\":4013:4014   */\n      dup3\n        /* \"#utility.yul\":4003:4192   */\n      tag_323\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":4045:4046   */\n      0x00\n        /* \"#utility.yul\":4038:4126   */\n      mstore\n        /* \"#utility.yul\":4149:4153   */\n      0x12\n        /* \"#utility.yul\":4146:4147   */\n      0x04\n        /* \"#utility.yul\":4139:4154   */\n      mstore\n        /* \"#utility.yul\":4177:4181   */\n      0x24\n        /* \"#utility.yul\":4174:4175   */\n      0x00\n        /* \"#utility.yul\":4167:4182   */\n      revert\n        /* \"#utility.yul\":4003:4192   */\n    tag_323:\n      pop\n        /* \"#utility.yul\":4206:4215   */\n      div\n      swap1\n        /* \"#utility.yul\":3947:4221   */\n      jump\t// out\n        /* \"#utility.yul\":4550:4718   */\n    tag_251:\n        /* \"#utility.yul\":4590:4597   */\n      0x00\n        /* \"#utility.yul\":4656:4657   */\n      dup2\n        /* \"#utility.yul\":4652:4653   */\n      0x00\n        /* \"#utility.yul\":4648:4654   */\n      not\n        /* \"#utility.yul\":4644:4658   */\n      div\n        /* \"#utility.yul\":4641:4642   */\n      dup4\n        /* \"#utility.yul\":4638:4659   */\n      gt\n        /* \"#utility.yul\":4633:4634   */\n      dup3\n        /* \"#utility.yul\":4626:4635   */\n      iszero\n        /* \"#utility.yul\":4619:4636   */\n      iszero\n        /* \"#utility.yul\":4615:4660   */\n      and\n        /* \"#utility.yul\":4612:4683   */\n      iszero\n      tag_327\n      jumpi\n        /* \"#utility.yul\":4663:4681   */\n      tag_327\n      tag_295\n      jump\t// in\n    tag_327:\n      pop\n        /* \"#utility.yul\":4703:4712   */\n      mul\n      swap1\n        /* \"#utility.yul\":4550:4718   */\n      jump\t// out\n        /* \"#utility.yul\":4723:5320   */\n    tag_288:\n        /* \"#utility.yul\":4835:4839   */\n      0x00\n        /* \"#utility.yul\":4864:4866   */\n      0x20\n        /* \"#utility.yul\":4893:4895   */\n      dup1\n        /* \"#utility.yul\":4882:4891   */\n      dup4\n        /* \"#utility.yul\":4875:4896   */\n      mstore\n        /* \"#utility.yul\":4925:4931   */\n      dup4\n        /* \"#utility.yul\":4919:4932   */\n      mload\n        /* \"#utility.yul\":4968:4974   */\n      dup1\n        /* \"#utility.yul\":4963:4965   */\n      dup3\n        /* \"#utility.yul\":4952:4961   */\n      dup6\n        /* \"#utility.yul\":4948:4966   */\n      add\n        /* \"#utility.yul\":4941:4975   */\n      mstore\n        /* \"#utility.yul\":4993:4994   */\n      0x00\n        /* \"#utility.yul\":5003:5143   */\n    tag_329:\n        /* \"#utility.yul\":5017:5023   */\n      dup2\n        /* \"#utility.yul\":5014:5015   */\n      dup2\n        /* \"#utility.yul\":5011:5024   */\n      lt\n        /* \"#utility.yul\":5003:5143   */\n      iszero\n      tag_331\n      jumpi\n        /* \"#utility.yul\":5112:5126   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":5108:5131   */\n      dup4\n      add\n        /* \"#utility.yul\":5102:5132   */\n      mload\n        /* \"#utility.yul\":5078:5095   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":5097:5099   */\n      0x40\n        /* \"#utility.yul\":5074:5100   */\n      add\n        /* \"#utility.yul\":5067:5133   */\n      mstore\n        /* \"#utility.yul\":5032:5042   */\n      dup3\n      add\n        /* \"#utility.yul\":5003:5143   */\n      jump(tag_329)\n    tag_331:\n        /* \"#utility.yul\":5161:5167   */\n      dup2\n        /* \"#utility.yul\":5158:5159   */\n      dup2\n        /* \"#utility.yul\":5155:5168   */\n      gt\n        /* \"#utility.yul\":5152:5243   */\n      iszero\n      tag_332\n      jumpi\n        /* \"#utility.yul\":5231:5232   */\n      0x00\n        /* \"#utility.yul\":5226:5228   */\n      0x40\n        /* \"#utility.yul\":5217:5223   */\n      dup4\n        /* \"#utility.yul\":5206:5215   */\n      dup8\n        /* \"#utility.yul\":5202:5224   */\n      add\n        /* \"#utility.yul\":5198:5229   */\n      add\n        /* \"#utility.yul\":5191:5233   */\n      mstore\n        /* \"#utility.yul\":5152:5243   */\n    tag_332:\n      pop\n        /* \"#utility.yul\":5304:5306   */\n      0x1f\n        /* \"#utility.yul\":5283:5298   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":5279:5308   */\n      and\n        /* \"#utility.yul\":5264:5309   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":5311:5313   */\n      0x40\n        /* \"#utility.yul\":5260:5314   */\n      add\n      swap4\n        /* \"#utility.yul\":4723:5320   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212203e85ada853fcf490a3a0a2c7e6fe5ac1bbf3387c67f99b04777880d2a71d7e8064736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_18": {
									"entryPoint": null,
									"id": 18,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_444": {
									"entryPoint": null,
									"id": 444,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE PUSH1 0xF SWAP1 SSTORE PUSH1 0x50 PUSH1 0x2 SSTORE PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0xA DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1367 DUP1 PUSH2 0x53 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x198 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8891CF0D GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xC23A5CEA GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD5DBDF1B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x438 JUMPI DUP1 PUSH4 0xF93D4F8A EQ PUSH2 0x44B JUMPI DUP1 PUSH4 0xFAB2F86B EQ PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC23A5CEA EQ PUSH2 0x3FF JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x427 JUMPI DUP1 PUSH4 0xCBB3E152 EQ PUSH2 0x430 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA3EC138D GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x3C0 JUMPI DUP1 PUSH4 0xB2BDFA7B EQ PUSH2 0x3E3 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x3F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x384 JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x38D JUMPI DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5F5300FF GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x671D2B75 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x671D2B75 EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x69E4591A EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x71E3DB87 EQ PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x632A9A52 EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0x65F8C6C5 EQ PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1EC6B60A GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x1EC6B60A EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x2D15CC04 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x5F348B4E EQ PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70C8B74 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x10486B6A EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x1D77B00B EQ PUSH2 0x227 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A5 PUSH2 0x466 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AF PUSH2 0x55A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A5 PUSH2 0x235 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x6BC JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x6FE JUMP JUMPDEST PUSH2 0x288 PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x5 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x21E JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x2B2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21E JUMP JUMPDEST PUSH2 0x2D3 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21E JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x7C2 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x8D1 JUMP JUMPDEST PUSH2 0x304 PUSH2 0x96A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 SWAP1 SWAP2 ADD DUP2 SWAP1 MSTORE PUSH2 0x2D3 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x9FD JUMP JUMPDEST PUSH2 0x2D3 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x39B CALLDATASIZE PUSH1 0x4 PUSH2 0x11EE JUMP JUMPDEST PUSH2 0xA0B JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x3AE CALLDATASIZE PUSH1 0x4 PUSH2 0x11EE JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x304 PUSH2 0x3CE CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x2B2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2D3 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x412 PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0xA8A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x21E JUMP JUMPDEST PUSH2 0x2D3 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x446 CALLDATASIZE PUSH1 0x4 PUSH2 0x11EE JUMP JUMPDEST PUSH2 0xC3C JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x459 CALLDATASIZE PUSH1 0x4 PUSH2 0x1207 JUMP JUMPDEST PUSH2 0xCB4 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0xECA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x4BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x4CB PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0x4D3 PUSH2 0xF24 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x52C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8B74220000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x54E SWAP1 DUP5 SWAP1 PUSH2 0x1256 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x562 PUSH2 0x115E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x5F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x61D DUP4 PUSH2 0xF6D JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x669 JUMPI PUSH2 0x646 PUSH2 0x63E DUP3 PUSH1 0x1 SLOAD PUSH2 0xFC2 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0xFCE JUMP JUMPDEST PUSH2 0x659 PUSH2 0x63E DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 SLOAD PUSH2 0xFC2 JUMP JUMPDEST PUSH2 0x663 SWAP2 SWAP1 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x678 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xFDA JUMP JUMPDEST GT ISZERO PUSH2 0x69C JUMPI PUSH1 0x0 PUSH2 0x68D DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x6AA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6C4 PUSH2 0x1015 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x751 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x75E PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6DA4CD2E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x54E SWAP1 DUP5 SWAP1 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x815 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x822 PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0x82A PUSH2 0xF24 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0x88A JUMPI PUSH1 0x40 MLOAD PUSH32 0x740E33B000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 DUP1 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP2 DUP3 ADD DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE SLOAD DUP5 MSTORE PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x54E SWAP1 DUP5 SWAP1 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8DB PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x95C JUMPI PUSH2 0x907 DUP2 PUSH1 0x6 ADD SLOAD PUSH2 0xFDA JUMP JUMPDEST PUSH2 0x93D JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD8456CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE DUP1 SLOAD PUSH2 0x955 SWAP1 PUSH2 0xFF3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x974 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0x97C PUSH2 0xEE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 SLOAD GT PUSH2 0x9B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2F9686DE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x9D1 PUSH2 0x9CA PUSH1 0x6 SLOAD PUSH1 0x5 PUSH2 0xFC2 JUMP JUMPDEST PUSH1 0xA PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 LT ISZERO PUSH2 0x9F5 JUMPI PUSH1 0x1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0xA05 PUSH2 0x1040 JUMP JUMPDEST TIMESTAMP PUSH1 0x3 SSTORE JUMP JUMPDEST PUSH2 0xA13 PUSH2 0x1015 JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0xA4E JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1A470D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xAE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0xAED PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD DUP4 DUP8 ADD MSTORE PUSH1 0x2 DUP5 ADD DUP1 SLOAD SWAP6 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x3 DUP5 ADD DUP1 SLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x4 DUP6 ADD DUP1 SLOAD PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x5 DUP7 ADD DUP1 SLOAD PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0x6 DUP1 DUP9 ADD DUP1 SLOAD PUSH1 0xC0 DUP10 ADD MSTORE SWAP13 DUP13 MSTORE SWAP10 SWAP1 SWAP9 MSTORE SWAP5 DUP10 SWAP1 SSTORE SWAP1 DUP9 SWAP1 SSTORE SWAP4 DUP8 SWAP1 SSTORE SWAP3 DUP7 SWAP1 SSTORE SWAP1 DUP6 SWAP1 SSTORE SWAP2 DUP5 SWAP1 SSTORE SWAP4 DUP4 SWAP1 SSTORE DUP2 SLOAD SWAP1 SWAP4 SWAP3 SWAP1 PUSH2 0xB8D SWAP1 DUP5 SWAP1 PUSH2 0x1256 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x60 DUP2 ADD MLOAD TIMESTAMP LT ISZERO PUSH2 0xBEC JUMPI DUP1 MLOAD PUSH2 0xBE2 SWAP1 PUSH2 0xBDD DUP4 PUSH2 0xF6D JUMP JUMPDEST PUSH2 0x106B JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH2 0xBFD JUMP JUMPDEST DUP1 MLOAD PUSH2 0xBF7 DUP3 PUSH2 0xF6D JUMP JUMPDEST SWAP3 POP SWAP3 POP POP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SLOAD PUSH1 0x0 EQ PUSH2 0xC36 JUMPI PUSH3 0x93A80 PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0xC27 SWAP2 SWAP1 PUSH2 0x1256 JUMP JUMPDEST PUSH2 0xC31 SWAP2 SWAP1 PUSH2 0x129B JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xC44 PUSH2 0x1015 JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xC7F JUMPI PUSH1 0x40 MLOAD PUSH32 0xA552CF1000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0xA7F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xD07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0xD14 PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0xD4E JUMPI PUSH1 0x40 MLOAD PUSH32 0x88B440D600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xD9E JUMPI PUSH1 0x40 MLOAD PUSH32 0x4462D2700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xDB1 SWAP2 SWAP1 PUSH2 0x126D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP6 DUP2 MSTORE TIMESTAMP SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH1 0x60 DUP2 ADD PUSH2 0xE04 DUP4 DUP7 PUSH2 0x126D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP1 DUP5 MSTORE PUSH1 0xB DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP6 DUP4 PUSH2 0xEA0 DUP2 DUP9 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xED2 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0xEDA PUSH2 0xEE6 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND PUSH2 0xF22 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D1891400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xF22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1E567DD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0xF7E JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0xF97 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x10B5 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0xFA8 SWAP2 SWAP1 PUSH2 0x12BD JUMP JUMPDEST PUSH2 0xFB2 SWAP2 SWAP1 PUSH2 0x12BD JUMP JUMPDEST PUSH2 0xFBC SWAP2 SWAP1 PUSH2 0x129B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x955 DUP3 DUP5 PUSH2 0x12BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x955 DUP3 DUP5 PUSH2 0x129B JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBC PUSH3 0x93A80 PUSH2 0xFED DUP5 TIMESTAMP PUSH2 0x1256 JUMP JUMPDEST SWAP1 PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x2 SLOAD DUP5 PUSH2 0x100B SWAP2 SWAP1 PUSH2 0x12BD JUMP JUMPDEST PUSH2 0xFB2 SWAP2 SWAP1 PUSH2 0x129B JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF22 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15A678A9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF22 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15A678A9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0x107E JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x10AE JUMP JUMPDEST PUSH2 0x1096 DUP5 PUSH2 0x1091 PUSH2 0x63E DUP8 PUSH1 0x1 SLOAD PUSH2 0xFC2 JUMP JUMPDEST PUSH2 0x1118 JUMP JUMPDEST PUSH2 0x10A9 DUP5 PUSH2 0x1091 PUSH2 0x63E DUP8 PUSH1 0x1 SLOAD PUSH2 0xFC2 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBC PUSH2 0x10C4 DUP4 TIMESTAMP PUSH2 0x1256 JUMP JUMPDEST PUSH2 0x10D8 SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x12BD JUMP JUMPDEST PUSH4 0x1E13380 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4572726F722063616E6E6F74206469766964652074696D657374616D70000000 DUP2 MSTORE POP PUSH2 0x1124 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x955 DUP3 DUP5 PUSH2 0x1256 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x1145 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP2 SWAP1 PUSH2 0x12DC JUMP JUMPDEST POP DUP3 DUP5 DUP2 PUSH2 0x1155 JUMPI PUSH2 0x1155 PUSH2 0x1285 JUMP JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11B7 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x955 DUP3 PUSH2 0x11BC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x121D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1226 DUP6 PUSH2 0x11BC JUMP JUMPDEST SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP6 PUSH1 0x60 ADD CALLDATALOAD SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1268 JUMPI PUSH2 0x1268 PUSH2 0x1240 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1280 JUMPI PUSH2 0x1280 PUSH2 0x1240 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x12B8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x12D7 JUMPI PUSH2 0x12D7 PUSH2 0x1240 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1309 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x12ED JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x131B JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY DUP6 0xAD 0xA8 MSTORE8 0xFC DELEGATECALL SWAP1 LOG3 LOG0 LOG2 0xC7 0xE6 INVALID GAS 0xC1 0xBB RETURN CODESIZE PUSH29 0x67F99B04777880D2A71D7E8064736F6C634300080B0033000000000000 ",
							"sourceMap": "880:12579:2:-:0;;;1566:200;;;;;;;;;-1:-1:-1;1701:1:0;1806:7;:22;;;1673:2:2;1652:23;;1699:2;1685:11;:16;1711:6;:19;;-1:-1:-1;;;;;;1711:19:2;;;1720:10;1711:19;;;;;;1740:6;:19;;;;;;;;;;880:12579;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_calculateAirdrop_1041": {
									"entryPoint": 4083,
									"id": 1041,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakeReward_740": {
									"entryPoint": 3949,
									"id": 740,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingDuration_709": {
									"entryPoint": 4277,
									"id": 709,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingWithPenalty_789": {
									"entryPoint": 4203,
									"id": 789,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@_calculateWeek_1023": {
									"entryPoint": 4058,
									"id": 1023,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_checkVotingStatus_566": {
									"entryPoint": 3814,
									"id": 566,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_isVoter_548": {
									"entryPoint": 3876,
									"id": 548,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_owner_422": {
									"entryPoint": null,
									"id": 422,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_talax_420": {
									"entryPoint": null,
									"id": 420,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropRate_401": {
									"entryPoint": null,
									"id": 401,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropSince_403": {
									"entryPoint": null,
									"id": 403,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropWeek_1135": {
									"entryPoint": 3081,
									"id": 1135,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@changeAirdropPercentage_1006": {
									"entryPoint": 3132,
									"id": 1006,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changePenaltyFee_688": {
									"entryPoint": 2571,
									"id": 688,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changeTalaxAddress_585": {
									"entryPoint": 1724,
									"id": 585,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@claimAirdrop_1096": {
									"entryPoint": 2257,
									"id": 1096,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@div_260": {
									"entryPoint": 4046,
									"id": 260,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@div_325": {
									"entryPoint": 4388,
									"id": 325,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getLatestClaimDrop_1113": {
									"entryPoint": null,
									"id": 1113,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getVoters_1157": {
									"entryPoint": null,
									"id": 1157,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"@getVotingResult_1303": {
									"entryPoint": 2410,
									"id": 1303,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@hasStake_971": {
									"entryPoint": 1370,
									"id": 971,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isOwner_525": {
									"entryPoint": 4117,
									"id": 525,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isTalax_505": {
									"entryPoint": 4160,
									"id": 505,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@mul_245": {
									"entryPoint": 4034,
									"id": 245,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@retractVote_1261": {
									"entryPoint": 1126,
									"id": 1261,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@stake_664": {
									"entryPoint": 3252,
									"id": 664,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@stakingPenaltyRate_399": {
									"entryPoint": null,
									"id": 399,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startAirdropSince_982": {
									"entryPoint": 2557,
									"id": 982,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startVoting_1181": {
									"entryPoint": 1790,
									"id": 1181,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@stopVoting_1315": {
									"entryPoint": 3786,
									"id": 1315,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@sub_230": {
									"entryPoint": 4376,
									"id": 230,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalVoters_409": {
									"entryPoint": null,
									"id": 409,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@vote_1221": {
									"entryPoint": 1986,
									"id": 1221,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@votedUsers_418": {
									"entryPoint": null,
									"id": 418,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@voters_414": {
									"entryPoint": null,
									"id": 414,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@withdrawStake_850": {
									"entryPoint": 2698,
									"id": 850,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"abi_decode_address": {
									"entryPoint": 4540,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4563,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_uint256t_uint256": {
									"entryPoint": 4615,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 4590,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4828,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_StakingSummary_$467_memory_ptr__to_t_struct$_StakingSummary_$467_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 4717,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 4763,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 4797,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 4694,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 4672,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 4741,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5322:3",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:3",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:660:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "187:27:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "199:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "210:3:3",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "195:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "195:19:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "187:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "230:9:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "247:6:3"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "241:5:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "241:13:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:32:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "223:32:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "275:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "286:4:3",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "271:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "271:20:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "303:6:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "311:4:3",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "299:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "299:17:3"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "293:5:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "293:24:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "264:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "264:54:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "264:54:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "327:44:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "357:6:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "365:4:3",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "353:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "353:17:3"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "347:5:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "347:24:3"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "331:12:3",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "391:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "402:4:3",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "387:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "387:20:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "415:12:3"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "409:5:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "409:19:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "380:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "380:49:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "380:49:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "449:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "460:2:3",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "445:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "445:18:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "475:12:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "489:4:3",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "471:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "471:23:3"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "465:5:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "465:30:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "438:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:58:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "438:58:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "516:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "527:3:3",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "512:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "512:19:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "543:12:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "557:4:3",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "539:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "539:23:3"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "533:5:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "533:30:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "505:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "505:59:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "505:59:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "584:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "595:3:3",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "580:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "580:19:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "611:12:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "625:2:3",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "607:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "607:21:3"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "601:5:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "601:28:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "573:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "573:57:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "573:57:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "650:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "661:3:3",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "646:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "646:19:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "677:12:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "691:3:3",
																						"type": "",
																						"value": "128"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "673:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "673:22:3"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "667:5:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "667:29:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "639:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "639:58:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "639:58:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "717:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "728:3:3",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "713:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "713:19:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "744:12:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "758:3:3",
																						"type": "",
																						"value": "160"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "740:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "740:22:3"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "734:5:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "734:29:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "706:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "706:58:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "706:58:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "784:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "795:3:3",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "780:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "780:19:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "811:12:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "825:3:3",
																						"type": "",
																						"value": "192"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "807:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "807:22:3"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "801:5:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "801:29:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "773:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "773:58:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "773:58:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_StakingSummary_$467_memory_ptr__to_t_struct$_StakingSummary_$467_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "146:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "157:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "168:4:3",
														"type": ""
													}
												],
												"src": "14:823:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "891:147:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "901:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "923:6:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "910:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "910:20:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "901:5:3"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1016:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1025:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1028:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1018:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1018:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1018:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "952:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "963:5:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "970:42:3",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "959:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "959:54:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "949:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "949:65:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "942:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "942:73:3"
															},
															"nodeType": "YulIf",
															"src": "939:93:3"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "870:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "881:5:3",
														"type": ""
													}
												],
												"src": "842:196:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1113:116:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1159:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1168:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1171:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1161:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1161:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1161:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1134:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1143:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1130:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1130:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1155:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1126:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1126:32:3"
															},
															"nodeType": "YulIf",
															"src": "1123:52:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1184:39:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1213:9:3"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1194:18:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1194:29:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1184:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1079:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1090:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1102:6:3",
														"type": ""
													}
												],
												"src": "1043:186:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1351:151:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1361:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1373:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1384:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1369:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1369:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1361:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1403:9:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1428:6:3"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1421:6:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1421:14:3"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1414:6:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1414:22:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1396:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1396:41:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1396:41:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1457:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1468:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1453:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1453:18:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "1487:6:3"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1480:6:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1480:14:3"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1473:6:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1473:22:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1446:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1446:50:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1446:50:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1312:9:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1323:6:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1331:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1342:4:3",
														"type": ""
													}
												],
												"src": "1234:268:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1608:125:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1618:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1630:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1641:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1626:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1626:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1618:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1660:9:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1675:6:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1683:42:3",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1671:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1671:55:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1653:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1653:74:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1653:74:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1577:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1588:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1599:4:3",
														"type": ""
													}
												],
												"src": "1507:226:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1839:76:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1849:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1861:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1872:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1857:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1857:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1849:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1891:9:3"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1902:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1884:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1884:25:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1884:25:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1808:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1819:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1830:4:3",
														"type": ""
													}
												],
												"src": "1738:177:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2015:92:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2025:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2037:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2048:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2033:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2033:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2025:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2067:9:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "2092:6:3"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2085:6:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2085:14:3"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2078:6:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2078:22:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2060:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2060:41:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2060:41:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1984:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1995:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2006:4:3",
														"type": ""
													}
												],
												"src": "1920:187:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2182:110:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2228:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2237:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2240:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2230:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2230:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2230:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2203:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2212:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2199:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2199:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2224:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2195:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2195:32:3"
															},
															"nodeType": "YulIf",
															"src": "2192:52:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2253:33:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2276:9:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2263:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2263:23:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2253:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2148:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2159:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2171:6:3",
														"type": ""
													}
												],
												"src": "2112:180:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2426:119:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2436:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2448:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2459:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2444:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2444:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2436:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2478:9:3"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2489:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2471:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2471:25:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2471:25:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2516:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2527:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2512:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2512:18:3"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2532:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2505:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2505:34:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2505:34:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2387:9:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2398:6:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2406:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2417:4:3",
														"type": ""
													}
												],
												"src": "2297:248:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2671:270:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2718:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2727:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2730:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2720:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2720:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2720:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2692:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2701:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2688:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2688:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2713:3:3",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2684:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2684:33:3"
															},
															"nodeType": "YulIf",
															"src": "2681:53:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2743:39:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2772:9:3"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2753:18:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2753:29:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2743:6:3"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2791:42:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2818:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2829:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2814:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2814:18:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2801:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2801:32:3"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2791:6:3"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2842:42:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2869:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2880:2:3",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2865:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2865:18:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2852:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2852:32:3"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2842:6:3"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2893:42:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2920:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2931:2:3",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2916:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2916:18:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2903:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2903:32:3"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2893:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2613:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2624:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2636:6:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2644:6:3",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2652:6:3",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2660:6:3",
														"type": ""
													}
												],
												"src": "2550:391:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3120:181:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3137:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3148:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3130:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3130:21:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3130:21:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3171:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3182:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3167:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3167:18:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3187:2:3",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3160:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3160:30:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3160:30:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3210:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3221:2:3",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3206:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3206:18:3"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3226:33:3",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3199:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3199:61:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3199:61:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3269:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3281:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3292:2:3",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3277:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3277:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3269:4:3"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3097:9:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3111:4:3",
														"type": ""
													}
												],
												"src": "2946:355:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3338:152:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3355:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3358:77:3",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3348:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3348:88:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3348:88:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3452:1:3",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3455:4:3",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3445:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3445:15:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3445:15:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3476:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3479:4:3",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3469:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3469:15:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3469:15:3"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "3306:184:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3544:76:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3566:22:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3568:16:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3568:18:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3568:18:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3560:1:3"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3563:1:3"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3557:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3557:8:3"
															},
															"nodeType": "YulIf",
															"src": "3554:34:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3597:17:3",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3609:1:3"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3612:1:3"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3605:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3605:9:3"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "3597:4:3"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3526:1:3",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3529:1:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "3535:4:3",
														"type": ""
													}
												],
												"src": "3495:125:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3673:80:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3700:22:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3702:16:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3702:18:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3702:18:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3689:1:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3696:1:3"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "3692:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3692:6:3"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3686:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3686:13:3"
															},
															"nodeType": "YulIf",
															"src": "3683:39:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3731:16:3",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3742:1:3"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3745:1:3"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3738:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3738:9:3"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "3731:3:3"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3656:1:3",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3659:1:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "3665:3:3",
														"type": ""
													}
												],
												"src": "3625:128:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3790:152:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3807:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3810:77:3",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3800:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3800:88:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3800:88:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3904:1:3",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3907:4:3",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3897:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3897:15:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3897:15:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3928:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3931:4:3",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3921:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3921:15:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3921:15:3"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "3758:184:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3993:228:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4024:168:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4045:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4048:77:3",
																					"type": "",
																					"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4038:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4038:88:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4038:88:3"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4146:1:3",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4149:4:3",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4139:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4139:15:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4139:15:3"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4174:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4177:4:3",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4167:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4167:15:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4167:15:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4013:1:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4006:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4006:9:3"
															},
															"nodeType": "YulIf",
															"src": "4003:189:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4201:14:3",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4210:1:3"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4213:1:3"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "4206:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4206:9:3"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4201:1:3"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3978:1:3",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3981:1:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "3987:1:3",
														"type": ""
													}
												],
												"src": "3947:274:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4383:162:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4393:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4405:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4416:2:3",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4401:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4401:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4393:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4435:9:3"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4446:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4428:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4428:25:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4428:25:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4473:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4484:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4469:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4469:18:3"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4489:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4462:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4462:34:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4462:34:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4516:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4527:2:3",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4512:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4512:18:3"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4532:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4505:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4505:34:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4505:34:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4336:9:3",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4347:6:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4355:6:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4363:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4374:4:3",
														"type": ""
													}
												],
												"src": "4226:319:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4602:116:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4661:22:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4663:16:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4663:18:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4663:18:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4633:1:3"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4626:6:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4626:9:3"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4619:6:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4619:17:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4641:1:3"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4652:1:3",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "4648:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4648:6:3"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4656:1:3"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4644:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4644:14:3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4638:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4638:21:3"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4615:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4615:45:3"
															},
															"nodeType": "YulIf",
															"src": "4612:71:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4692:20:3",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4707:1:3"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4710:1:3"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "4703:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4703:9:3"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "4692:7:3"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4581:1:3",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4584:1:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "4590:7:3",
														"type": ""
													}
												],
												"src": "4550:168:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4844:476:3",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4854:12:3",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4864:2:3",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4858:2:3",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4882:9:3"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4893:2:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4875:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4875:21:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4875:21:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4905:27:3",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4925:6:3"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4919:5:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4919:13:3"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4909:6:3",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4952:9:3"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4963:2:3"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4948:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4948:18:3"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4968:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4941:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4941:34:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4941:34:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4984:10:3",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4993:1:3",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "4988:1:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5053:90:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "5082:9:3"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "5093:1:3"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5078:3:3"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5078:17:3"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5097:2:3",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5074:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5074:26:3"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "5116:6:3"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "5124:1:3"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "5112:3:3"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "5112:14:3"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "5128:2:3"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5108:3:3"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5108:23:3"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "5102:5:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5102:30:3"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5067:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5067:66:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5067:66:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5014:1:3"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5017:6:3"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "5011:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "5011:13:3"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "5025:19:3",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5027:15:3",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "5036:1:3"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "5039:2:3"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5032:3:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5032:10:3"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "5027:1:3"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "5007:3:3",
																"statements": []
															},
															"src": "5003:140:3"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5177:66:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "5206:9:3"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "5217:6:3"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5202:3:3"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5202:22:3"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5226:2:3",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5198:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5198:31:3"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5231:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5191:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5191:42:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5191:42:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5158:1:3"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5161:6:3"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5155:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "5155:13:3"
															},
															"nodeType": "YulIf",
															"src": "5152:91:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5252:62:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5268:9:3"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "5287:6:3"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5295:2:3",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "5283:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5283:15:3"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5304:2:3",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "5300:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5300:7:3"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "5279:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5279:29:3"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5264:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5264:45:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5311:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5260:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "5260:54:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5252:4:3"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4813:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4824:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4835:4:3",
														"type": ""
													}
												],
												"src": "4723:597:3"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_struct$_StakingSummary_$467_memory_ptr__to_t_struct$_StakingSummary_$467_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 288)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        let memberValue0 := mload(add(value0, 0x40))\n        mstore(add(headStart, 0x40), mload(memberValue0))\n        mstore(add(headStart, 96), mload(add(memberValue0, 0x20)))\n        mstore(add(headStart, 128), mload(add(memberValue0, 0x40)))\n        mstore(add(headStart, 160), mload(add(memberValue0, 96)))\n        mstore(add(headStart, 192), mload(add(memberValue0, 128)))\n        mstore(add(headStart, 224), mload(add(memberValue0, 160)))\n        mstore(add(headStart, 256), mload(add(memberValue0, 192)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 3,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x198 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8891CF0D GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xC23A5CEA GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD5DBDF1B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x438 JUMPI DUP1 PUSH4 0xF93D4F8A EQ PUSH2 0x44B JUMPI DUP1 PUSH4 0xFAB2F86B EQ PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC23A5CEA EQ PUSH2 0x3FF JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x427 JUMPI DUP1 PUSH4 0xCBB3E152 EQ PUSH2 0x430 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA3EC138D GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x3C0 JUMPI DUP1 PUSH4 0xB2BDFA7B EQ PUSH2 0x3E3 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x3F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x384 JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x38D JUMPI DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5F5300FF GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x671D2B75 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x671D2B75 EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x69E4591A EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x71E3DB87 EQ PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x632A9A52 EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0x65F8C6C5 EQ PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1EC6B60A GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x1EC6B60A EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x2D15CC04 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x5F348B4E EQ PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70C8B74 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x10486B6A EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x1D77B00B EQ PUSH2 0x227 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A5 PUSH2 0x466 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AF PUSH2 0x55A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A5 PUSH2 0x235 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x6BC JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x6FE JUMP JUMPDEST PUSH2 0x288 PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x5 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x21E JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x2B2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21E JUMP JUMPDEST PUSH2 0x2D3 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21E JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x7C2 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x8D1 JUMP JUMPDEST PUSH2 0x304 PUSH2 0x96A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 SWAP1 SWAP2 ADD DUP2 SWAP1 MSTORE PUSH2 0x2D3 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x9FD JUMP JUMPDEST PUSH2 0x2D3 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x39B CALLDATASIZE PUSH1 0x4 PUSH2 0x11EE JUMP JUMPDEST PUSH2 0xA0B JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x3AE CALLDATASIZE PUSH1 0x4 PUSH2 0x11EE JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x304 PUSH2 0x3CE CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x2B2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2D3 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x412 PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0xA8A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x21E JUMP JUMPDEST PUSH2 0x2D3 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x446 CALLDATASIZE PUSH1 0x4 PUSH2 0x11EE JUMP JUMPDEST PUSH2 0xC3C JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x459 CALLDATASIZE PUSH1 0x4 PUSH2 0x1207 JUMP JUMPDEST PUSH2 0xCB4 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0xECA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x4BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x4CB PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0x4D3 PUSH2 0xF24 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x52C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8B74220000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x54E SWAP1 DUP5 SWAP1 PUSH2 0x1256 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x562 PUSH2 0x115E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x5F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x61D DUP4 PUSH2 0xF6D JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x669 JUMPI PUSH2 0x646 PUSH2 0x63E DUP3 PUSH1 0x1 SLOAD PUSH2 0xFC2 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0xFCE JUMP JUMPDEST PUSH2 0x659 PUSH2 0x63E DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 SLOAD PUSH2 0xFC2 JUMP JUMPDEST PUSH2 0x663 SWAP2 SWAP1 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x678 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xFDA JUMP JUMPDEST GT ISZERO PUSH2 0x69C JUMPI PUSH1 0x0 PUSH2 0x68D DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x6AA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6C4 PUSH2 0x1015 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x751 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x75E PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6DA4CD2E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x54E SWAP1 DUP5 SWAP1 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x815 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x822 PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0x82A PUSH2 0xF24 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0x88A JUMPI PUSH1 0x40 MLOAD PUSH32 0x740E33B000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 DUP1 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP2 DUP3 ADD DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE SLOAD DUP5 MSTORE PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x54E SWAP1 DUP5 SWAP1 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8DB PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x95C JUMPI PUSH2 0x907 DUP2 PUSH1 0x6 ADD SLOAD PUSH2 0xFDA JUMP JUMPDEST PUSH2 0x93D JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD8456CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE DUP1 SLOAD PUSH2 0x955 SWAP1 PUSH2 0xFF3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x974 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0x97C PUSH2 0xEE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 SLOAD GT PUSH2 0x9B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2F9686DE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x9D1 PUSH2 0x9CA PUSH1 0x6 SLOAD PUSH1 0x5 PUSH2 0xFC2 JUMP JUMPDEST PUSH1 0xA PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 LT ISZERO PUSH2 0x9F5 JUMPI PUSH1 0x1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0xA05 PUSH2 0x1040 JUMP JUMPDEST TIMESTAMP PUSH1 0x3 SSTORE JUMP JUMPDEST PUSH2 0xA13 PUSH2 0x1015 JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0xA4E JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1A470D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xAE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0xAED PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD DUP4 DUP8 ADD MSTORE PUSH1 0x2 DUP5 ADD DUP1 SLOAD SWAP6 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x3 DUP5 ADD DUP1 SLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x4 DUP6 ADD DUP1 SLOAD PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x5 DUP7 ADD DUP1 SLOAD PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0x6 DUP1 DUP9 ADD DUP1 SLOAD PUSH1 0xC0 DUP10 ADD MSTORE SWAP13 DUP13 MSTORE SWAP10 SWAP1 SWAP9 MSTORE SWAP5 DUP10 SWAP1 SSTORE SWAP1 DUP9 SWAP1 SSTORE SWAP4 DUP8 SWAP1 SSTORE SWAP3 DUP7 SWAP1 SSTORE SWAP1 DUP6 SWAP1 SSTORE SWAP2 DUP5 SWAP1 SSTORE SWAP4 DUP4 SWAP1 SSTORE DUP2 SLOAD SWAP1 SWAP4 SWAP3 SWAP1 PUSH2 0xB8D SWAP1 DUP5 SWAP1 PUSH2 0x1256 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x60 DUP2 ADD MLOAD TIMESTAMP LT ISZERO PUSH2 0xBEC JUMPI DUP1 MLOAD PUSH2 0xBE2 SWAP1 PUSH2 0xBDD DUP4 PUSH2 0xF6D JUMP JUMPDEST PUSH2 0x106B JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH2 0xBFD JUMP JUMPDEST DUP1 MLOAD PUSH2 0xBF7 DUP3 PUSH2 0xF6D JUMP JUMPDEST SWAP3 POP SWAP3 POP POP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SLOAD PUSH1 0x0 EQ PUSH2 0xC36 JUMPI PUSH3 0x93A80 PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0xC27 SWAP2 SWAP1 PUSH2 0x1256 JUMP JUMPDEST PUSH2 0xC31 SWAP2 SWAP1 PUSH2 0x129B JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xC44 PUSH2 0x1015 JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xC7F JUMPI PUSH1 0x40 MLOAD PUSH32 0xA552CF1000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0xA7F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xD07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0xD14 PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0xD4E JUMPI PUSH1 0x40 MLOAD PUSH32 0x88B440D600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xD9E JUMPI PUSH1 0x40 MLOAD PUSH32 0x4462D2700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xDB1 SWAP2 SWAP1 PUSH2 0x126D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP6 DUP2 MSTORE TIMESTAMP SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH1 0x60 DUP2 ADD PUSH2 0xE04 DUP4 DUP7 PUSH2 0x126D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP1 DUP5 MSTORE PUSH1 0xB DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP6 DUP4 PUSH2 0xEA0 DUP2 DUP9 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xED2 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0xEDA PUSH2 0xEE6 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND PUSH2 0xF22 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D1891400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xF22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1E567DD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0xF7E JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0xF97 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x10B5 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0xFA8 SWAP2 SWAP1 PUSH2 0x12BD JUMP JUMPDEST PUSH2 0xFB2 SWAP2 SWAP1 PUSH2 0x12BD JUMP JUMPDEST PUSH2 0xFBC SWAP2 SWAP1 PUSH2 0x129B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x955 DUP3 DUP5 PUSH2 0x12BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x955 DUP3 DUP5 PUSH2 0x129B JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBC PUSH3 0x93A80 PUSH2 0xFED DUP5 TIMESTAMP PUSH2 0x1256 JUMP JUMPDEST SWAP1 PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x2 SLOAD DUP5 PUSH2 0x100B SWAP2 SWAP1 PUSH2 0x12BD JUMP JUMPDEST PUSH2 0xFB2 SWAP2 SWAP1 PUSH2 0x129B JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF22 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15A678A9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF22 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15A678A9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0x107E JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x10AE JUMP JUMPDEST PUSH2 0x1096 DUP5 PUSH2 0x1091 PUSH2 0x63E DUP8 PUSH1 0x1 SLOAD PUSH2 0xFC2 JUMP JUMPDEST PUSH2 0x1118 JUMP JUMPDEST PUSH2 0x10A9 DUP5 PUSH2 0x1091 PUSH2 0x63E DUP8 PUSH1 0x1 SLOAD PUSH2 0xFC2 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBC PUSH2 0x10C4 DUP4 TIMESTAMP PUSH2 0x1256 JUMP JUMPDEST PUSH2 0x10D8 SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x12BD JUMP JUMPDEST PUSH4 0x1E13380 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4572726F722063616E6E6F74206469766964652074696D657374616D70000000 DUP2 MSTORE POP PUSH2 0x1124 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x955 DUP3 DUP5 PUSH2 0x1256 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x1145 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP2 SWAP1 PUSH2 0x12DC JUMP JUMPDEST POP DUP3 DUP5 DUP2 PUSH2 0x1155 JUMPI PUSH2 0x1155 PUSH2 0x1285 JUMP JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11B7 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x955 DUP3 PUSH2 0x11BC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x121D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1226 DUP6 PUSH2 0x11BC JUMP JUMPDEST SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP6 PUSH1 0x60 ADD CALLDATALOAD SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1268 JUMPI PUSH2 0x1268 PUSH2 0x1240 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1280 JUMPI PUSH2 0x1280 PUSH2 0x1240 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x12B8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x12D7 JUMPI PUSH2 0x12D7 PUSH2 0x1240 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1309 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x12ED JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x131B JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY DUP6 0xAD 0xA8 MSTORE8 0xFC DELEGATECALL SWAP1 LOG3 LOG0 LOG2 0xC7 0xE6 INVALID GAS 0xC1 0xBB RETURN CODESIZE PUSH29 0x67F99B04777880D2A71D7E8064736F6C634300080B0033000000000000 ",
							"sourceMap": "880:12579:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12449:412;;;:::i;:::-;;8601:1127;;;:::i;:::-;;;;;;168:4:3;210:3;199:9;195:19;187:27;;247:6;241:13;230:9;223:32;311:4;303:6;299:17;293:24;286:4;275:9;271:20;264:54;365:4;357:6;353:17;347:24;415:12;409:19;402:4;391:9;387:20;380:49;489:4;475:12;471:23;465:30;460:2;449:9;445:18;438:58;557:4;543:12;539:23;533:30;527:3;516:9;512:19;505:59;625:2;611:12;607:21;601:28;595:3;584:9;580:19;573:57;691:3;677:12;673:22;667:29;661:3;650:9;646:19;639:58;758:3;744:12;740:22;734:29;728:3;717:9;713:19;706:58;825:3;811:12;807:22;801:29;795:3;784:9;780:19;773:58;;14:823;;;;;8601:1127:2;;;;;;;;4409:93;;;;;;:::i;:::-;;:::i;11751:283::-;;;:::i;11543:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;11629:12:2;11599:4;11629:12;;;:6;:12;;;;;;;;:24;;11674:9;;11655:29;;11629:24;11655:18;;;:29;;;;;;;11629:24;;;;;11655:29;;;11543:149;;;;;1421:14:3;;1414:22;1396:41;;1480:14;;1473:22;1468:2;1453:18;;1446:50;1369:18;11543:149:2;1234:268:3;1511:21:2;;;;;-1:-1:-1;;;;;1511:21:2;;;;;;-1:-1:-1;;;;;1671:55:3;;;1653:74;;1641:2;1626:18;1511:21:2;1507:226:3;1382:26:2;;;;;;;;;1884:25:3;;;1872:2;1857:18;1382:26:2;1738:177:3;12040:403:2;;;:::i;10504:547::-;;;;;;:::i;:::-;;:::i;12867:488::-;;;:::i;:::-;;;2085:14:3;;2078:22;2060:41;;2048:2;2033:18;12867:488:2;1920:187:3;11057:164:2;11164:10;11110:7;11151:24;;;:12;:24;;;;;;;;;11129:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11057:164;;9840:95;;;:::i;1251:26::-;;;;;;5893:306;;;;;;:::i;:::-;;:::i;1459:45::-;;;;;;:::i;:::-;;;;;;;;;;;;;;1414:39;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1538:21;;;;;-1:-1:-1;;;;;1538:21:2;;;1283:27;;;;;;7870:725;;;;;;:::i;:::-;;:::i;:::-;;;;2471:25:3;;;2527:2;2512:18;;2505:34;;;;2444:18;7870:725:2;2297:248:3;1212:33:2;;;;;;11227:204;;;:::i;9941:234::-;;;;;;:::i;:::-;;:::i;4713:1174::-;;;;;;:::i;:::-;;:::i;13361:96::-;;;:::i;12449:412::-;1744:1:0;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:0;;3148:2:3;2317:63:0;;;3130:21:3;3187:2;3167:18;;;3160:30;3226:33;3206:18;;;3199:61;3277:18;;2317:63:0;;;;;;;;;1744:1;2455:7;:18;4259:20:2::1;:18;:20::i;:::-;3977:10:::2;:8;:10::i;:::-;12672::::3;12665:18;::::0;;;:6:::3;:18;::::0;;;;;;;12690:9:::3;::::0;12665:35;;:24:::3;;:35:::0;;;;;;::::3;;12661:103;;12732:21;;;;;;;;;;;;;;12661:103;12799:9;::::0;12774:18:::3;:35:::0;;;12828:10:::3;12774:18;12828:21:::0;12774:18;12828:21;;:26;;12774:24:::3;::::0;:18;12828:26:::3;::::0;12774:24;;12828:26:::3;:::i;:::-;::::0;;;-1:-1:-1;;1701:1:0;2628:7;:22;12449:412:2:o;8601:1127::-;8644:21;;:::i;:::-;8716:10;8677:23;8703:24;;;:12;:24;;;;;;;;;8677:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8798:85;;8847:25;;;;;;;;;;;;;;8798:85;8924:32;;;;;;;;8892:29;8924:32;;;;;;;;;;;;;;;;8984:33;8945:10;8984:21;:33::i;:::-;8967:50;;9060:15;9032:7;:13;;;:25;;;:43;9028:316;;;9273:60;9286:40;9299:6;9307:18;;9286:12;:40::i;:::-;9328:4;9273:12;:60::i;:::-;9125:129;9159:51;9172:10;:17;;;9191:18;;9159:12;:51::i;9125:129::-;:208;;;;:::i;:::-;9091:15;;;:242;9028:316;9403:1;9358:42;9373:10;:26;;;9358:14;:42::i;:::-;:46;9354:250;;;9420:15;9438:36;9456:10;:17;;;9438;:36::i;:::-;9488:13;;;;:30;;:40;-1:-1:-1;9354:250:2;;;9559:13;;;;9592:1;9559:30;;;;:34;9354:250;9614:13;;;;:23;;:32;9679:17;;9656:40;;9614:7;8601:1127;-1:-1:-1;8601:1127:2:o;4409:93::-;3678:9;:7;:9::i;:::-;4481:6:::1;:14:::0;;;::::1;-1:-1:-1::0;;;;;4481:14:2;;;::::1;::::0;;;::::1;::::0;;4409:93::o;11751:283::-;1744:1:0;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:0;;3148:2:3;2317:63:0;;;3130:21:3;3187:2;3167:18;;;3160:30;3226:33;3206:18;;;3199:61;3277:18;;2317:63:0;2946:355:3;2317:63:0;1744:1;2455:7;:18;3416:9:2::1;:7;:9::i;:::-;11893:13:::2;::::0;::::2;;:21;;:13:::0;:21:::2;11889:84;;;11937:25;;;;;;;;;;;;;;11889:84;11983:13;:20:::0;;-1:-1:-1;;11983:20:2::2;11999:4;11983:20:::0;;::::2;::::0;;;12013:9:::2;:14:::0;;11983:13:::2;::::0;12013:14:::2;::::0;11999:4;;12013:14:::2;:::i;12040:403::-:0;1744:1:0;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:0;;3148:2:3;2317:63:0;;;3130:21:3;3187:2;3167:18;;;3160:30;3226:33;3206:18;;;3199:61;3277:18;;2317:63:0;2946:355:3;2317:63:0;1744:1;2455:7;:18;4259:20:2::1;:18;:20::i;:::-;3977:10:::2;:8;:10::i;:::-;12256::::3;12249:18;::::0;;;:6:::3;:18;::::0;;;;;;;12274:9:::3;::::0;12249:35;;:24:::3;::::0;;::::3;:35:::0;;;;;;;::::3;;:43;;;12245:103;;;12315:22;;;;;;;;;;;;;;12245:103;12365:10;12358:18;::::0;;;:6:::3;:18;::::0;;;;;;;12383:9:::3;::::0;;12358:35;;12396:4:::3;12358:24:::0;;::::3;:35:::0;;;;;:42;;-1:-1:-1;;12358:42:2::3;::::0;::::3;::::0;;12421:9;12410:21;;:10:::3;:21:::0;;;;;:26;;12396:4;;12410:21;;:26:::3;::::0;12396:4;;12410:26:::3;:::i;10504:547::-:0;10568:7;3416:9;:7;:9::i;:::-;-1:-1:-1;;;;;10662:18:2;::::1;10639:20;10662:18:::0;;;:12:::1;:18;::::0;;;;10695:13;;:17;10691:354:::1;;10732:38;10747:6;:22;;;10732:14;:38::i;:::-;10728:118;;10802:29;;;;;;;;;;;;;;10728:118;10886:1;10860:23;::::0;::::1;:27:::0;10926:15:::1;10901:22;::::0;::::1;:40:::0;10981:13;;10963:32:::1;::::0;:17:::1;:32::i;:::-;10956:39:::0;10504:547;-1:-1:-1;;;10504:547:2:o;10691:354::-:1;-1:-1:-1::0;11033:1:2::1;::::0;10504:547;-1:-1:-1;;10504:547:2:o;3435:1::-:1;10504:547:::0;;;:::o;12867:488::-;12984:4;3416:9;:7;:9::i;:::-;4259:20:::1;:18;:20::i;:::-;13081:1:::2;13066:11;;:16;13062:79;;13105:25;;;;;;;;;;;;;;13062:79;13150:19;13172:46;13185:28;13198:11;;13211:1;13185:12;:28::i;:::-;13215:2;13172:12;:46::i;:::-;13244:9;::::0;13233:21:::2;::::0;;;:10:::2;:21;::::0;;;;;13150:68;;-1:-1:-1;13233:35:2;-1:-1:-1;13229:120:2::2;;;13291:4;13284:11;;;12867:488:::0;:::o;13229:120::-:2;13333:5;13326:12;;;12867:488:::0;:::o;9840:95::-;3416:9;:7;:9::i;:::-;9913:15:::1;9898:12;:30:::0;9840:95::o;5893:306::-;3678:9;:7;:9::i;:::-;6051:2:::1;6042:6;:11;6038:81;;;6076:32;;;;;;;;;;;;;;6038:81;6128:18;:27:::0;;;6170:22:::1;::::0;1884:25:3;;;6170:22:2::1;::::0;1872:2:3;1857:18;6170:22:2::1;;;;;;;;5893:306:::0;:::o;7870:725::-;7980:7;7989;1744:1:0;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:0;;3148:2:3;2317:63:0;;;3130:21:3;3187:2;3167:18;;;3160:30;3226:33;3206:18;;;3199:61;3277:18;;2317:63:0;2946:355:3;2317:63:0;1744:1;2455:7;:18;3416:9:2::1;:7;:9::i;:::-;-1:-1:-1::0;;;;;8146:18:2;::::2;8120:23;8146:18:::0;;;:12:::2;:18;::::0;;;;;;;8120:44;;::::2;::::0;::::2;::::0;;;;;;::::2;::::0;;::::2;::::0;;;;::::2;::::0;::::2;::::0;::::2;::::0;;;;;;;;;::::2;::::0;::::2;::::0;;;;;;::::2;::::0;::::2;::::0;;;;;;::::2;::::0;::::2;::::0;;;;;;::::2;::::0;;::::2;::::0;;;;;;8182:18;;;;;;;8175:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;8210:16;;8120:44;;;:23;8210:16:::2;::::0;8120:44;;8210:16:::2;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;8243:12:2;::::2;;::::0;;;:6:::2;:12;::::0;;;;;;;8262:9:::2;::::0;8243:29;;:18:::2;;:29:::0;;;;;8236:36;;-1:-1:-1;;8236:36:2::2;::::0;;8287:22:::2;::::0;::::2;::::0;8312:15:::2;-1:-1:-1::0;8283:234:2::2;;;8416:17:::0;;8366:140:::2;::::0;8455:33:::2;8416:10:::0;8455:21:::2;:33::i;:::-;8366:28;:140::i;:::-;8343:163;;;;;;;8283:234;8535:17:::0;;8554:33:::2;8535:10:::0;8554:21:::2;:33::i;:::-;8527:61;;;;;3435:1;1701::0::0;2628:7;:22;7870:725:2;;;;-1:-1:-1;7870:725:2:o;11227:204::-;11271:7;11294:12;;11310:1;11294:17;11290:135;;11369:6;11353:12;;11335:15;:30;;;;:::i;:::-;11334:41;;;;:::i;:::-;11327:48;;11227:204;:::o;11290:135::-;-1:-1:-1;11413:1:2;;11227:204::o;9941:234::-;3678:9;:7;:9::i;:::-;10032:3:::1;10023:6;:12;10019:83;;;10058:33;;;;;;;;;;;;;;10019:83;10111:11;:20:::0;;;10146:22:::1;::::0;1884:25:3;;;10146:22:2::1;::::0;1872:2:3;1857:18;10146:22:2::1;1738:177:3::0;4713:1174:2;1744:1:0;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:0;;3148:2:3;2317:63:0;;;3130:21:3;3187:2;3167:18;;;3160:30;3226:33;3206:18;;;3199:61;3277:18;;2317:63:0;2946:355:3;2317:63:0;1744:1;2455:7;:18;3416:9:2::1;:7;:9::i;:::-;5003:1:::2;4993:6;:11;4989:78;;5027:29;;;;;;;;;;;;;;4989:78;-1:-1:-1::0;;;;;5152:18:2;::::2;;::::0;;;:12:::2;:18;::::0;;;;:25;:30;5148:91:::2;;5205:23;;;;;;;;;;;;;;5148:91;5264:1;5249:11;;:16;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;5275:12:2;::::2;;::::0;;;:6:::2;:12;::::0;;;;;;;;:31;;-1:-1:-1;;5275:31:2::2;5302:4;5275:31;::::0;;5589:166;;::::2;::::0;::::2;::::0;;;;;5424:15:::2;5589:166:::0;;::::2;::::0;;;;;;;;;5424:15;5589:166;;;5676:23:::2;5424:15:::0;5676:11;:23:::2;:::i;:::-;5589:166:::0;;5714:1:::2;5589:166;::::0;;::::2;::::0;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5568:18:2;::::2;::::0;;;:12:::2;:18:::0;;;;;;:187;;;;;;::::2;::::0;::::2;::::0;::::2;::::0;;::::2;::::0;::::2;::::0;::::2;::::0;;;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;;::::2;::::0;::::2;::::0;;::::2;::::0;5822:58:::2;5835:6:::0;5843:9;5855:23:::2;5843:9:::0;5855:11;:23:::2;:::i;:::-;5822:58;::::0;;4428:25:3;;;4484:2;4469:18;;4462:34;;;;4512:18;;;4505:34;4416:2;4401:18;5822:58:2::2;;;;;;;-1:-1:-1::0;;1701:1:0;2628:7;:22;-1:-1:-1;;;4713:1174:2:o;13361:96::-;3416:9;:7;:9::i;:::-;4259:20:::1;:18;:20::i;:::-;13429:13:::2;:21:::0;;-1:-1:-1;;13429:21:2::2;::::0;;13361:96::o;4011:204::-;4132:13;;;;4127:82;;4168:30;;;;;;;;;;;;;;4127:82;4011:204::o;3711:231::-;3849:10;3842:18;;;;:6;:18;;;;;:30;;;3838:98;;3904:21;;;;;;;;;;;;;;6560:437;6690:17;;6663:7;;6686:61;;-1:-1:-1;6735:1:2;;6560:437;-1:-1:-1;6560:437:2:o;6686:61::-;6986:4;6939:43;6965:10;:16;;;6939:25;:43::i;:::-;6900:20;;;;6864:17;;:56;;6900:20;6864:56;:::i;:::-;:118;;;;:::i;:::-;6863:127;;;;:::i;:::-;6844:146;6560:437;-1:-1:-1;;6560:437:2:o;3451:96:1:-;3509:7;3535:5;3539:1;3535;:5;:::i;3836:96::-;3894:7;3920:5;3924:1;3920;:5;:::i;10181:132:2:-;10243:7;10269:37;10299:6;10270:23;10288:5;10270:15;:23;:::i;:::-;10269:29;;:37::i;10319:179::-;10414:7;10483:8;10475:4;10460:11;;10446;:25;;;;:::i;:::-;10445:34;;;;:::i;3449:192::-;3570:6;;-1:-1:-1;;;;;3570:6:2;3556:10;:20;3552:83;;3599:25;;-1:-1:-1;;;3599:25:2;;;;;;;;;;;3187:192;3308:6;;-1:-1:-1;;;;;3308:6:2;3294:10;:20;3290:83;;3337:25;;-1:-1:-1;;;3337:25:2;;;;;;;;;;;7003:521;7120:7;;7156:11;7152:55;;-1:-1:-1;7191:1:2;;-1:-1:-1;7191:1:2;7183:13;;7152:55;7237:128;7267:6;7291:60;7304:40;7317:6;7325:18;;7304:12;:40::i;7291:60::-;7237:12;:128::i;:::-;7379;7409:6;7433:60;7446:40;7459:6;7467:18;;7446:12;:40::i;7379:128::-;7216:301;;;;7003:521;;;;;;:::o;6205:349::-;6302:7;6396:151;6427:23;6445:5;6427:15;:23;:::i;:::-;6426:32;;6454:4;6426:32;:::i;:::-;6476:8;6396:151;;;;;;;;;;;;;;;;;:12;:151::i;3108:96:1:-;3166:7;3192:5;3196:1;3192;:5;:::i;5660:230::-;5776:7;5834:12;5827:5;5819:28;;;;-1:-1:-1;;;5819:28:1;;;;;;;;:::i;:::-;;5872:1;5868;:5;;;;;:::i;:::-;;;5660:230;-1:-1:-1;;;;5660:230:1:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;842:196:3:-;910:20;;-1:-1:-1;;;;;959:54:3;;949:65;;939:93;;1028:1;1025;1018:12;1043:186;1102:6;1155:2;1143:9;1134:7;1130:23;1126:32;1123:52;;;1171:1;1168;1161:12;1123:52;1194:29;1213:9;1194:29;:::i;2112:180::-;2171:6;2224:2;2212:9;2203:7;2199:23;2195:32;2192:52;;;2240:1;2237;2230:12;2192:52;-1:-1:-1;2263:23:3;;2112:180;-1:-1:-1;2112:180:3:o;2550:391::-;2636:6;2644;2652;2660;2713:3;2701:9;2692:7;2688:23;2684:33;2681:53;;;2730:1;2727;2720:12;2681:53;2753:29;2772:9;2753:29;:::i;:::-;2743:39;2829:2;2814:18;;2801:32;;-1:-1:-1;2880:2:3;2865:18;;2852:32;;2931:2;2916:18;2903:32;;-1:-1:-1;2550:391:3;-1:-1:-1;;;2550:391:3:o;3306:184::-;-1:-1:-1;;;3355:1:3;3348:88;3455:4;3452:1;3445:15;3479:4;3476:1;3469:15;3495:125;3535:4;3563:1;3560;3557:8;3554:34;;;3568:18;;:::i;:::-;-1:-1:-1;3605:9:3;;3495:125::o;3625:128::-;3665:3;3696:1;3692:6;3689:1;3686:13;3683:39;;;3702:18;;:::i;:::-;-1:-1:-1;3738:9:3;;3625:128::o;3758:184::-;-1:-1:-1;;;3807:1:3;3800:88;3907:4;3904:1;3897:15;3931:4;3928:1;3921:15;3947:274;3987:1;4013;4003:189;;-1:-1:-1;;;4045:1:3;4038:88;4149:4;4146:1;4139:15;4177:4;4174:1;4167:15;4003:189;-1:-1:-1;4206:9:3;;3947:274::o;4550:168::-;4590:7;4656:1;4652;4648:6;4644:14;4641:1;4638:21;4633:1;4626:9;4619:17;4615:45;4612:71;;;4663:18;;:::i;:::-;-1:-1:-1;4703:9:3;;4550:168::o;4723:597::-;4835:4;4864:2;4893;4882:9;4875:21;4925:6;4919:13;4968:6;4963:2;4952:9;4948:18;4941:34;4993:1;5003:140;5017:6;5014:1;5011:13;5003:140;;;5112:14;;;5108:23;;5102:30;5078:17;;;5097:2;5074:26;5067:66;5032:10;;5003:140;;;5161:6;5158:1;5155:13;5152:91;;;5231:1;5226:2;5217:6;5206:9;5202:22;5198:31;5191:42;5152:91;-1:-1:-1;5304:2:3;5283:15;-1:-1:-1;;5279:29:3;5264:45;;;;5311:2;5260:54;;4723:597;-1:-1:-1;;;4723:597:3:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "993400",
								"executionCost": "115835",
								"totalCost": "1109235"
							},
							"external": {
								"_owner()": "2404",
								"_talax()": "2427",
								"airdropRate()": "2341",
								"airdropSince()": "2384",
								"airdropWeek()": "4658",
								"changeAirdropPercentage(uint256)": "25635",
								"changePenaltyFee(uint256)": "25648",
								"changeTalaxAddress(address)": "26811",
								"claimAirdrop(address)": "infinite",
								"getLatestClaimDrop()": "15246",
								"getVoters(address)": "6946",
								"getVotingResult()": "infinite",
								"hasStake()": "infinite",
								"retractVote()": "infinite",
								"stake(address,uint256,uint256,uint256)": "infinite",
								"stakingPenaltyRate()": "2362",
								"startAirdropSince()": "24502",
								"startVoting()": "82258",
								"stopVoting()": "infinite",
								"totalVoters()": "2341",
								"vote()": "infinite",
								"votedUsers(uint256)": "2528",
								"voters(address)": "2576",
								"withdrawStake(address)": "infinite"
							},
							"internal": {
								"_calculateAirdrop(uint256)": "infinite",
								"_calculateStakeReward(struct Stakable.Stake memory)": "infinite",
								"_calculateStakingDuration(uint256)": "infinite",
								"_calculateStakingWithPenalty(uint256,uint256)": "infinite",
								"_calculateWeek(uint256)": "193",
								"_checkVotingStatus()": "infinite",
								"_isVoter()": "infinite",
								"isOwner()": "infinite",
								"isTalax()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 880,
									"end": 13459,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 880,
									"end": 13459,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 880,
									"end": 13459,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1566,
									"end": 1766,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 1566,
									"end": 1766,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1566,
									"end": 1766,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1566,
									"end": 1766,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1566,
									"end": 1766,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1566,
									"end": 1766,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1566,
									"end": 1766,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1566,
									"end": 1766,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1566,
									"end": 1766,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1566,
									"end": 1766,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1813,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1673,
									"end": 1675,
									"name": "PUSH",
									"source": 2,
									"value": "F"
								},
								{
									"begin": 1652,
									"end": 1675,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1652,
									"end": 1675,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1699,
									"end": 1701,
									"name": "PUSH",
									"source": 2,
									"value": "50"
								},
								{
									"begin": 1685,
									"end": 1696,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1685,
									"end": 1701,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1711,
									"end": 1717,
									"name": "PUSH",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 1711,
									"end": 1730,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1711,
									"end": 1730,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1711,
									"end": 1730,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1711,
									"end": 1730,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1711,
									"end": 1730,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1720,
									"end": 1730,
									"name": "CALLER",
									"source": 2
								},
								{
									"begin": 1711,
									"end": 1730,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1711,
									"end": 1730,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1711,
									"end": 1730,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1711,
									"end": 1730,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1711,
									"end": 1730,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1711,
									"end": 1730,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1740,
									"end": 1746,
									"name": "PUSH",
									"source": 2,
									"value": "A"
								},
								{
									"begin": 1740,
									"end": 1759,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1740,
									"end": 1759,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 1740,
									"end": 1759,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1740,
									"end": 1759,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1740,
									"end": 1759,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1740,
									"end": 1759,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1740,
									"end": 1759,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1740,
									"end": 1759,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1740,
									"end": 1759,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1740,
									"end": 1759,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 880,
									"end": 13459,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 880,
									"end": 13459,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 880,
									"end": 13459,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 880,
									"end": 13459,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 880,
									"end": 13459,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 880,
									"end": 13459,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 880,
									"end": 13459,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203e85ada853fcf490a3a0a2c7e6fe5ac1bbf3387c67f99b04777880d2a71d7e8064736f6c634300080b0033",
									".code": [
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "8891CF0D"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "C23A5CEA"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "D5DBDF1B"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "D5DBDF1B"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "F93D4F8A"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "FAB2F86B"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "C23A5CEA"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "CB79C2E1"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "CBB3E152"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "A3EC138D"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "A3EC138D"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "B2BDFA7B"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "B87DA76D"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "8891CF0D"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "8C63F97F"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "A143A5F2"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "5F5300FF"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "671D2B75"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "671D2B75"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "69E4591A"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "71E3DB87"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "5F5300FF"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "632A9A52"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "65F8C6C5"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "1EC6B60A"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "1EC6B60A"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "2D15CC04"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "5F348B4E"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "70C8B74"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "10486B6A"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "1D77B00B"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 880,
											"end": 13459,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12449,
											"end": 12861,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 12449,
											"end": 12861,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12449,
											"end": 12861,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 12449,
											"end": 12861,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 12449,
											"end": 12861,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12449,
											"end": 12861,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 12449,
											"end": 12861,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12449,
											"end": 12861,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 168,
											"end": 172,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 210,
											"end": 213,
											"name": "PUSH",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 199,
											"end": 208,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 195,
											"end": 214,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 187,
											"end": 214,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 187,
											"end": 214,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 247,
											"end": 253,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 241,
											"end": 254,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 230,
											"end": 239,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 223,
											"end": 255,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 311,
											"end": 315,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 303,
											"end": 309,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 299,
											"end": 316,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 293,
											"end": 317,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 286,
											"end": 290,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 275,
											"end": 284,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 271,
											"end": 291,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 264,
											"end": 318,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 365,
											"end": 369,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 357,
											"end": 363,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 353,
											"end": 370,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 347,
											"end": 371,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 415,
											"end": 427,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 409,
											"end": 428,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 402,
											"end": 406,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 391,
											"end": 400,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 387,
											"end": 407,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 380,
											"end": 429,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 489,
											"end": 493,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 475,
											"end": 487,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 471,
											"end": 494,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 465,
											"end": 495,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 460,
											"end": 462,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 449,
											"end": 458,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 445,
											"end": 463,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 438,
											"end": 496,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 557,
											"end": 561,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 543,
											"end": 555,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 539,
											"end": 562,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 533,
											"end": 563,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 527,
											"end": 530,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 516,
											"end": 525,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 512,
											"end": 531,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 505,
											"end": 564,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 625,
											"end": 627,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 611,
											"end": 623,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 607,
											"end": 628,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 601,
											"end": 629,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 595,
											"end": 598,
											"name": "PUSH",
											"source": 3,
											"value": "A0"
										},
										{
											"begin": 584,
											"end": 593,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 580,
											"end": 599,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 573,
											"end": 630,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 691,
											"end": 694,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 677,
											"end": 689,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 673,
											"end": 695,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 667,
											"end": 696,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 661,
											"end": 664,
											"name": "PUSH",
											"source": 3,
											"value": "C0"
										},
										{
											"begin": 650,
											"end": 659,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 646,
											"end": 665,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 639,
											"end": 697,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 758,
											"end": 761,
											"name": "PUSH",
											"source": 3,
											"value": "A0"
										},
										{
											"begin": 744,
											"end": 756,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 740,
											"end": 762,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 734,
											"end": 763,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 728,
											"end": 731,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 717,
											"end": 726,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 713,
											"end": 732,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 706,
											"end": 764,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 825,
											"end": 828,
											"name": "PUSH",
											"source": 3,
											"value": "C0"
										},
										{
											"begin": 811,
											"end": 823,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 807,
											"end": 829,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 801,
											"end": 830,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 795,
											"end": 798,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 784,
											"end": 793,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 780,
											"end": 799,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 773,
											"end": 831,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 773,
											"end": 831,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 14,
											"end": 837,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 14,
											"end": 837,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 14,
											"end": 837,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 14,
											"end": 837,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 14,
											"end": 837,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11751,
											"end": 12034,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 11751,
											"end": 12034,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11751,
											"end": 12034,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 11751,
											"end": 12034,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 11751,
											"end": 12034,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11599,
											"end": 11603,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11635,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11641,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11653,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11653,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11674,
											"end": 11683,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 11674,
											"end": 11683,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11653,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 11655,
											"end": 11673,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11673,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11673,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11653,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 11629,
											"end": 11653,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11653,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11653,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11653,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11684,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1421,
											"end": 1435,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1421,
											"end": 1435,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1414,
											"end": 1436,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1396,
											"end": 1437,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1396,
											"end": 1437,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1494,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1494,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1473,
											"end": 1495,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1468,
											"end": 1470,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1453,
											"end": 1471,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1453,
											"end": 1471,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1446,
											"end": 1496,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1369,
											"end": 1387,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 11543,
											"end": 11692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 1234,
											"end": 1502,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1671,
											"end": 1726,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1671,
											"end": 1726,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1671,
											"end": 1726,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1653,
											"end": 1727,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1653,
											"end": 1727,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1641,
											"end": 1643,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1626,
											"end": 1644,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1511,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 1507,
											"end": 1733,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1872,
											"end": 1874,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1857,
											"end": 1875,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1382,
											"end": 1408,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 1738,
											"end": 1915,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 12040,
											"end": 12443,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 12040,
											"end": 12443,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12040,
											"end": 12443,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 12040,
											"end": 12443,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 12040,
											"end": 12443,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "tag",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2085,
											"end": 2099,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2085,
											"end": 2099,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2078,
											"end": 2100,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2060,
											"end": 2101,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2060,
											"end": 2101,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2048,
											"end": 2050,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2033,
											"end": 2051,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 1920,
											"end": 2107,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11057,
											"end": 11221,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 11057,
											"end": 11221,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11164,
											"end": 11174,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 11110,
											"end": 11117,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11151,
											"end": 11163,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11151,
											"end": 11175,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11175,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11057,
											"end": 11221,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 11057,
											"end": 11221,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9840,
											"end": 9935,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 9840,
											"end": 9935,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9840,
											"end": 9935,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 9840,
											"end": 9935,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 9840,
											"end": 9935,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1251,
											"end": 1277,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 1251,
											"end": 1277,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1251,
											"end": 1277,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1251,
											"end": 1277,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1251,
											"end": 1277,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1251,
											"end": 1277,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1251,
											"end": 1277,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "tag",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1459,
											"end": 1504,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1453,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1538,
											"end": 1559,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 1538,
											"end": 1559,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1538,
											"end": 1559,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 1538,
											"end": 1559,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1538,
											"end": 1559,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 1538,
											"end": 1559,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1538,
											"end": 1559,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1538,
											"end": 1559,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1538,
											"end": 1559,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "tag",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2527,
											"end": 2529,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2512,
											"end": 2530,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2512,
											"end": 2530,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2505,
											"end": 2539,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2505,
											"end": 2539,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2505,
											"end": 2539,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2505,
											"end": 2539,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2444,
											"end": 2462,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2297,
											"end": 2545,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1212,
											"end": 1245,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1212,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1212,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1212,
											"end": 1245,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1212,
											"end": 1245,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1212,
											"end": 1245,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1212,
											"end": 1245,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11227,
											"end": 11431,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 11227,
											"end": 11431,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11227,
											"end": 11431,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 11227,
											"end": 11431,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 11227,
											"end": 11431,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13361,
											"end": 13457,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 13361,
											"end": 13457,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13361,
											"end": 13457,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 13361,
											"end": 13457,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 13361,
											"end": 13457,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12449,
											"end": 12861,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 12449,
											"end": 12861,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3148,
											"end": 3150,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3130,
											"end": 3151,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3187,
											"end": 3189,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3160,
											"end": 3190,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3226,
											"end": 3259,
											"name": "PUSH",
											"source": 3,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3199,
											"end": 3260,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3277,
											"end": 3295,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 3277,
											"end": 3295,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 4259,
											"end": 4277,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "tag",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3977,
											"end": 3987,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 3977,
											"end": 3985,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 3977,
											"end": 3987,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3977,
											"end": 3987,
											"name": "tag",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 3977,
											"end": 3987,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12672,
											"end": 12682,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12671,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 12690,
											"end": 12699,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 12690,
											"end": 12699,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12700,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12700,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12689,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 12665,
											"end": 12689,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12700,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12700,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12700,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12700,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12700,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12700,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12665,
											"end": 12700,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 12665,
											"end": 12700,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 12661,
											"end": 12764,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 12661,
											"end": 12764,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "PUSH",
											"source": 2,
											"value": "8B74220000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12732,
											"end": 12753,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12661,
											"end": 12764,
											"name": "tag",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 12661,
											"end": 12764,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12799,
											"end": 12808,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 12799,
											"end": 12808,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12774,
											"end": 12792,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12774,
											"end": 12809,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12774,
											"end": 12809,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12774,
											"end": 12809,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12828,
											"end": 12838,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 12774,
											"end": 12792,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12828,
											"end": 12849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12774,
											"end": 12792,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12828,
											"end": 12849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12828,
											"end": 12849,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 12828,
											"end": 12854,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12828,
											"end": 12854,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12774,
											"end": 12798,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 12774,
											"end": 12798,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12774,
											"end": 12792,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12828,
											"end": 12854,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 12828,
											"end": 12854,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12774,
											"end": 12798,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12774,
											"end": 12798,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12828,
											"end": 12854,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 12828,
											"end": 12854,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12828,
											"end": 12854,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 12828,
											"end": 12854,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12828,
											"end": 12854,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12828,
											"end": 12854,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12828,
											"end": 12854,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12449,
											"end": 12861,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8644,
											"end": 8665,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 8644,
											"end": 8665,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 8644,
											"end": 8665,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8644,
											"end": 8665,
											"name": "tag",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 8644,
											"end": 8665,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8716,
											"end": 8726,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8700,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8703,
											"end": 8715,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8703,
											"end": 8727,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8677,
											"end": 8727,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8798,
											"end": 8883,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 8798,
											"end": 8883,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "PUSH",
											"source": 2,
											"value": "B018F08700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8798,
											"end": 8883,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 8798,
											"end": 8883,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8892,
											"end": 8921,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8956,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8984,
											"end": 9017,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 8945,
											"end": 8955,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8984,
											"end": 9005,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 8984,
											"end": 9017,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8984,
											"end": 9017,
											"name": "tag",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 8984,
											"end": 9017,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8967,
											"end": 9017,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8967,
											"end": 9017,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9060,
											"end": 9075,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 9032,
											"end": 9039,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9032,
											"end": 9045,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9032,
											"end": 9045,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9032,
											"end": 9045,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9032,
											"end": 9057,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 9032,
											"end": 9057,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9032,
											"end": 9057,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9032,
											"end": 9075,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 9028,
											"end": 9344,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9028,
											"end": 9344,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 9028,
											"end": 9344,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9273,
											"end": 9333,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 9286,
											"end": 9326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 9299,
											"end": 9305,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9307,
											"end": 9325,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9307,
											"end": 9325,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9286,
											"end": 9298,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 9286,
											"end": 9326,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9286,
											"end": 9326,
											"name": "tag",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 9286,
											"end": 9326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9328,
											"end": 9332,
											"name": "PUSH",
											"source": 2,
											"value": "3E8"
										},
										{
											"begin": 9273,
											"end": 9285,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 9273,
											"end": 9333,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9273,
											"end": 9333,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 9273,
											"end": 9333,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9125,
											"end": 9254,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 9159,
											"end": 9210,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 9172,
											"end": 9182,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 9172,
											"end": 9189,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9172,
											"end": 9189,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9172,
											"end": 9189,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9191,
											"end": 9209,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9191,
											"end": 9209,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9159,
											"end": 9171,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 9159,
											"end": 9210,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9125,
											"end": 9254,
											"name": "tag",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 9125,
											"end": 9254,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9125,
											"end": 9333,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 9125,
											"end": 9333,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9125,
											"end": 9333,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9125,
											"end": 9333,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 9125,
											"end": 9333,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9125,
											"end": 9333,
											"name": "tag",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 9125,
											"end": 9333,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9091,
											"end": 9106,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9091,
											"end": 9106,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9091,
											"end": 9106,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9091,
											"end": 9333,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9028,
											"end": 9344,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 9028,
											"end": 9344,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9403,
											"end": 9404,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9358,
											"end": 9400,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 9373,
											"end": 9383,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9373,
											"end": 9399,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 9373,
											"end": 9399,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9373,
											"end": 9399,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9358,
											"end": 9372,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 9358,
											"end": 9400,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9358,
											"end": 9400,
											"name": "tag",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 9358,
											"end": 9400,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9358,
											"end": 9404,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 9354,
											"end": 9604,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9354,
											"end": 9604,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 9354,
											"end": 9604,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9420,
											"end": 9435,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9438,
											"end": 9474,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 9456,
											"end": 9466,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9456,
											"end": 9473,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9456,
											"end": 9473,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9456,
											"end": 9473,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9438,
											"end": 9455,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 9438,
											"end": 9474,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9438,
											"end": 9474,
											"name": "tag",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 9438,
											"end": 9474,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9488,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9488,
											"end": 9501,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9488,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9488,
											"end": 9501,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9488,
											"end": 9518,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 9488,
											"end": 9518,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9488,
											"end": 9528,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9354,
											"end": 9604,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 9354,
											"end": 9604,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9354,
											"end": 9604,
											"name": "tag",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 9354,
											"end": 9604,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9559,
											"end": 9572,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9559,
											"end": 9572,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9559,
											"end": 9572,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9559,
											"end": 9572,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9592,
											"end": 9593,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9559,
											"end": 9589,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 9559,
											"end": 9589,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9559,
											"end": 9589,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9559,
											"end": 9589,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9559,
											"end": 9593,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9354,
											"end": 9604,
											"name": "tag",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 9354,
											"end": 9604,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9614,
											"end": 9627,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9614,
											"end": 9627,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9614,
											"end": 9627,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9614,
											"end": 9627,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9614,
											"end": 9637,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 9614,
											"end": 9637,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9614,
											"end": 9646,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9679,
											"end": 9696,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9679,
											"end": 9696,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9656,
											"end": 9696,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9656,
											"end": 9696,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9614,
											"end": 9621,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8601,
											"end": 9728,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 3678,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "tag",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4487,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000"
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4481,
											"end": 4495,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 4409,
											"end": 4502,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11751,
											"end": 12034,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 11751,
											"end": 12034,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3148,
											"end": 3150,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3130,
											"end": 3151,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3187,
											"end": 3189,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3160,
											"end": 3190,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3226,
											"end": 3259,
											"name": "PUSH",
											"source": 3,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3199,
											"end": 3260,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3277,
											"end": 3295,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 3277,
											"end": 3295,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2946,
											"end": 3301,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 3416,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "tag",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11893,
											"end": 11906,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11893,
											"end": 11906,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11893,
											"end": 11906,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 11893,
											"end": 11906,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11893,
											"end": 11914,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11893,
											"end": 11914,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11893,
											"end": 11906,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 11893,
											"end": 11914,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 11889,
											"end": 11973,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11889,
											"end": 11973,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 11889,
											"end": 11973,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "PUSH",
											"source": 2,
											"value": "6DA4CD2E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11937,
											"end": 11962,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11889,
											"end": 11973,
											"name": "tag",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 11889,
											"end": 11973,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11983,
											"end": 11996,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11983,
											"end": 12003,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11983,
											"end": 12003,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11983,
											"end": 12003,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11999,
											"end": 12003,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 11983,
											"end": 12003,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11983,
											"end": 12003,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11983,
											"end": 12003,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 11983,
											"end": 12003,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11983,
											"end": 12003,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11983,
											"end": 12003,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 12013,
											"end": 12022,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 12013,
											"end": 12027,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12013,
											"end": 12027,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11983,
											"end": 11996,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11983,
											"end": 11996,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12013,
											"end": 12027,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 12013,
											"end": 12027,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11999,
											"end": 12003,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11999,
											"end": 12003,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12013,
											"end": 12027,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 12013,
											"end": 12027,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12040,
											"end": 12443,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 12040,
											"end": 12443,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3148,
											"end": 3150,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3130,
											"end": 3151,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3187,
											"end": 3189,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3160,
											"end": 3190,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3226,
											"end": 3259,
											"name": "PUSH",
											"source": 3,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3199,
											"end": 3260,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3277,
											"end": 3295,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 3277,
											"end": 3295,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2946,
											"end": 3301,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 4259,
											"end": 4277,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "tag",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3977,
											"end": 3987,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 3977,
											"end": 3985,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 3977,
											"end": 3987,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3977,
											"end": 3987,
											"name": "tag",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 3977,
											"end": 3987,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12256,
											"end": 12266,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12255,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12267,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 12274,
											"end": 12283,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 12274,
											"end": 12283,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12284,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12284,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12273,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 12249,
											"end": 12273,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12273,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12273,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12284,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12284,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12284,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12284,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12284,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12284,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 12249,
											"end": 12284,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12292,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12292,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12249,
											"end": 12292,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 12245,
											"end": 12348,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12245,
											"end": 12348,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 12245,
											"end": 12348,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "PUSH",
											"source": 2,
											"value": "740E33B000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12315,
											"end": 12337,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12245,
											"end": 12348,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 12245,
											"end": 12348,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12365,
											"end": 12375,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12364,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12376,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 12383,
											"end": 12392,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 12383,
											"end": 12392,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12383,
											"end": 12392,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12393,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12393,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12396,
											"end": 12400,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 12358,
											"end": 12382,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12382,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12382,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12393,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12393,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12393,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12393,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12393,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12400,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12400,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12358,
											"end": 12400,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12400,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12400,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12400,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12358,
											"end": 12400,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 12421,
											"end": 12430,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12431,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12431,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12420,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 12410,
											"end": 12431,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12431,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12431,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12431,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12431,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12436,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12436,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12396,
											"end": 12400,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12396,
											"end": 12400,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12431,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12431,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 12410,
											"end": 12436,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12396,
											"end": 12400,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12396,
											"end": 12400,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12410,
											"end": 12436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 12410,
											"end": 12436,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10568,
											"end": 10575,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 3416,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "tag",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10662,
											"end": 10680,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10662,
											"end": 10680,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10639,
											"end": 10659,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10662,
											"end": 10680,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10662,
											"end": 10680,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10662,
											"end": 10680,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10662,
											"end": 10674,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 10662,
											"end": 10680,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10662,
											"end": 10680,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10662,
											"end": 10680,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10662,
											"end": 10680,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10662,
											"end": 10680,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10695,
											"end": 10708,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10695,
											"end": 10708,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10695,
											"end": 10712,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10691,
											"end": 11045,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 10691,
											"end": 11045,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10732,
											"end": 10770,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "178"
										},
										{
											"begin": 10747,
											"end": 10753,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10747,
											"end": 10769,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 10747,
											"end": 10769,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10747,
											"end": 10769,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10732,
											"end": 10746,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 10732,
											"end": 10770,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10732,
											"end": 10770,
											"name": "tag",
											"source": 2,
											"value": "178"
										},
										{
											"begin": 10732,
											"end": 10770,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10728,
											"end": 10846,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 10728,
											"end": 10846,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "PUSH",
											"source": 2,
											"value": "DD8456CC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10802,
											"end": 10831,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10728,
											"end": 10846,
											"name": "tag",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 10728,
											"end": 10846,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10886,
											"end": 10887,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10860,
											"end": 10883,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 10860,
											"end": 10883,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10860,
											"end": 10883,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10860,
											"end": 10887,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10926,
											"end": 10941,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 10901,
											"end": 10923,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 10901,
											"end": 10923,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10901,
											"end": 10923,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10901,
											"end": 10941,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10981,
											"end": 10994,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10981,
											"end": 10994,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10963,
											"end": 10995,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 10963,
											"end": 10995,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10963,
											"end": 10980,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 10963,
											"end": 10995,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10963,
											"end": 10995,
											"name": "tag",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 10963,
											"end": 10995,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10956,
											"end": 10995,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10691,
											"end": 11045,
											"name": "tag",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 10691,
											"end": 11045,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11033,
											"end": 11034,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11033,
											"end": 11034,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3435,
											"end": 3436,
											"name": "tag",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 3435,
											"end": 3436,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 11051,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12984,
											"end": 12988,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 3416,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "tag",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "185"
										},
										{
											"begin": 4259,
											"end": 4277,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "tag",
											"source": 2,
											"value": "185"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13081,
											"end": 13082,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 13066,
											"end": 13077,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 13066,
											"end": 13077,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13066,
											"end": 13082,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 13062,
											"end": 13141,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 13062,
											"end": 13141,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "PUSH",
											"source": 2,
											"value": "2F9686DE00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13062,
											"end": 13141,
											"name": "tag",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 13062,
											"end": 13141,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13150,
											"end": 13169,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13172,
											"end": 13218,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "188"
										},
										{
											"begin": 13185,
											"end": 13213,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 13198,
											"end": 13209,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 13198,
											"end": 13209,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13211,
											"end": 13212,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 13185,
											"end": 13197,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 13185,
											"end": 13213,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13185,
											"end": 13213,
											"name": "tag",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 13185,
											"end": 13213,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13215,
											"end": 13217,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 13172,
											"end": 13184,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 13172,
											"end": 13218,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13172,
											"end": 13218,
											"name": "tag",
											"source": 2,
											"value": "188"
										},
										{
											"begin": 13172,
											"end": 13218,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13244,
											"end": 13253,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 13244,
											"end": 13253,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13233,
											"end": 13254,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13233,
											"end": 13254,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13233,
											"end": 13254,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13233,
											"end": 13254,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13233,
											"end": 13243,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 13233,
											"end": 13254,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13233,
											"end": 13254,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13233,
											"end": 13254,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13233,
											"end": 13254,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13233,
											"end": 13254,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 13233,
											"end": 13254,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13150,
											"end": 13218,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13150,
											"end": 13218,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13233,
											"end": 13268,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 13229,
											"end": 13349,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13229,
											"end": 13349,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 13229,
											"end": 13349,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13291,
											"end": 13295,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 13284,
											"end": 13295,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13284,
											"end": 13295,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13284,
											"end": 13295,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 13229,
											"end": 13349,
											"name": "tag",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 13229,
											"end": 13349,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13333,
											"end": 13338,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13326,
											"end": 13338,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13326,
											"end": 13338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13326,
											"end": 13338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12867,
											"end": 13355,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 9840,
											"end": 9935,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 9840,
											"end": 9935,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 3416,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "tag",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9913,
											"end": 9928,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 9898,
											"end": 9910,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 9898,
											"end": 9928,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 9840,
											"end": 9935,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 3678,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "tag",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6051,
											"end": 6053,
											"name": "PUSH",
											"source": 2,
											"value": "1E"
										},
										{
											"begin": 6042,
											"end": 6048,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6042,
											"end": 6053,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 6038,
											"end": 6119,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6038,
											"end": 6119,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 6038,
											"end": 6119,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "PUSH",
											"source": 2,
											"value": "F1A470D700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6108,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6038,
											"end": 6119,
											"name": "tag",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 6038,
											"end": 6119,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6128,
											"end": 6146,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6128,
											"end": 6155,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6128,
											"end": 6155,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6128,
											"end": 6155,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "PUSH",
											"source": 2,
											"value": "CFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9"
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1872,
											"end": 1874,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1857,
											"end": 1875,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "tag",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6170,
											"end": 6192,
											"name": "LOG1",
											"source": 2
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5893,
											"end": 6199,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7980,
											"end": 7987,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7989,
											"end": 7996,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3148,
											"end": 3150,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3130,
											"end": 3151,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3187,
											"end": 3189,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3160,
											"end": 3190,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3226,
											"end": 3259,
											"name": "PUSH",
											"source": 3,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3199,
											"end": 3260,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3277,
											"end": 3295,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 3277,
											"end": 3295,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2946,
											"end": 3301,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 3416,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "tag",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8143,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8146,
											"end": 8158,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8146,
											"end": 8164,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8182,
											"end": 8200,
											"name": "SWAP13",
											"source": 2
										},
										{
											"begin": 8182,
											"end": 8200,
											"name": "DUP13",
											"source": 2
										},
										{
											"begin": 8182,
											"end": 8200,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8182,
											"end": 8200,
											"name": "SWAP10",
											"source": 2
										},
										{
											"begin": 8182,
											"end": 8200,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8182,
											"end": 8200,
											"name": "SWAP9",
											"source": 2
										},
										{
											"begin": 8182,
											"end": 8200,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8175,
											"end": 8200,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8226,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8226,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8143,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8226,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "207"
										},
										{
											"begin": 8210,
											"end": 8226,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8120,
											"end": 8164,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8226,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 8210,
											"end": 8226,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8210,
											"end": 8226,
											"name": "tag",
											"source": 2,
											"value": "207"
										},
										{
											"begin": 8210,
											"end": 8226,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8226,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8226,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8226,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8249,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8255,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8262,
											"end": 8271,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 8262,
											"end": 8271,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8272,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8272,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8261,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 8243,
											"end": 8261,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8272,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8272,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8272,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8272,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8243,
											"end": 8272,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8272,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8272,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8236,
											"end": 8272,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8272,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8236,
											"end": 8272,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8287,
											"end": 8309,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 8287,
											"end": 8309,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8287,
											"end": 8309,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8287,
											"end": 8309,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8312,
											"end": 8327,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 8283,
											"end": 8517,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8283,
											"end": 8517,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 8283,
											"end": 8517,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8416,
											"end": 8433,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8416,
											"end": 8433,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8366,
											"end": 8506,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 8366,
											"end": 8506,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8455,
											"end": 8488,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 8416,
											"end": 8426,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8455,
											"end": 8476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 8455,
											"end": 8488,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8455,
											"end": 8488,
											"name": "tag",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 8455,
											"end": 8488,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8366,
											"end": 8394,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 8366,
											"end": 8506,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8366,
											"end": 8506,
											"name": "tag",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 8366,
											"end": 8506,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8506,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8506,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8506,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8506,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8506,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8506,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 8343,
											"end": 8506,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8283,
											"end": 8517,
											"name": "tag",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 8283,
											"end": 8517,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8535,
											"end": 8552,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8535,
											"end": 8552,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8554,
											"end": 8587,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 8535,
											"end": 8545,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8554,
											"end": 8575,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 8554,
											"end": 8587,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8554,
											"end": 8587,
											"name": "tag",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 8554,
											"end": 8587,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8527,
											"end": 8588,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8527,
											"end": 8588,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8527,
											"end": 8588,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8527,
											"end": 8588,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8527,
											"end": 8588,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3435,
											"end": 3436,
											"name": "tag",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 3435,
											"end": 3436,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7870,
											"end": 8595,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11227,
											"end": 11431,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 11227,
											"end": 11431,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11271,
											"end": 11278,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11294,
											"end": 11306,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 11294,
											"end": 11306,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11310,
											"end": 11311,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11294,
											"end": 11311,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 11290,
											"end": 11425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "214"
										},
										{
											"begin": 11290,
											"end": 11425,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11369,
											"end": 11375,
											"name": "PUSH",
											"source": 2,
											"value": "93A80"
										},
										{
											"begin": 11353,
											"end": 11365,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 11353,
											"end": 11365,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11335,
											"end": 11350,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 11335,
											"end": 11365,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "215"
										},
										{
											"begin": 11335,
											"end": 11365,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11335,
											"end": 11365,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11335,
											"end": 11365,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 11335,
											"end": 11365,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11335,
											"end": 11365,
											"name": "tag",
											"source": 2,
											"value": "215"
										},
										{
											"begin": 11335,
											"end": 11365,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11334,
											"end": 11375,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 11334,
											"end": 11375,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11334,
											"end": 11375,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11334,
											"end": 11375,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 11334,
											"end": 11375,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11334,
											"end": 11375,
											"name": "tag",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 11334,
											"end": 11375,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11327,
											"end": 11375,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11327,
											"end": 11375,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11227,
											"end": 11431,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11227,
											"end": 11431,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11290,
											"end": 11425,
											"name": "tag",
											"source": 2,
											"value": "214"
										},
										{
											"begin": 11290,
											"end": 11425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11413,
											"end": 11414,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11413,
											"end": 11414,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11227,
											"end": 11431,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "tag",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 9941,
											"end": 10175,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 3678,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "tag",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 3678,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10032,
											"end": 10035,
											"name": "PUSH",
											"source": 2,
											"value": "C8"
										},
										{
											"begin": 10023,
											"end": 10029,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10023,
											"end": 10035,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 10019,
											"end": 10102,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10019,
											"end": 10102,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 10019,
											"end": 10102,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "PUSH",
											"source": 2,
											"value": "A552CF1000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10019,
											"end": 10102,
											"name": "tag",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 10019,
											"end": 10102,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10111,
											"end": 10122,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 10111,
											"end": 10131,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10111,
											"end": 10131,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10111,
											"end": 10131,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10146,
											"end": 10168,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10146,
											"end": 10168,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10146,
											"end": 10168,
											"name": "PUSH",
											"source": 2,
											"value": "CC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E"
										},
										{
											"begin": 10146,
											"end": 10168,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1872,
											"end": 1874,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1857,
											"end": 1875,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10146,
											"end": 10168,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 1738,
											"end": 1915,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3148,
											"end": 3150,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3130,
											"end": 3151,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3187,
											"end": 3189,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3160,
											"end": 3190,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3226,
											"end": 3259,
											"name": "PUSH",
											"source": 3,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3199,
											"end": 3260,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3277,
											"end": 3295,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 3277,
											"end": 3295,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2946,
											"end": 3301,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "228"
										},
										{
											"begin": 3416,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "tag",
											"source": 2,
											"value": "228"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5004,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4993,
											"end": 4999,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4993,
											"end": 5004,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 4989,
											"end": 5067,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "230"
										},
										{
											"begin": 4989,
											"end": 5067,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "PUSH",
											"source": 2,
											"value": "88B440D600000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5027,
											"end": 5056,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4989,
											"end": 5067,
											"name": "tag",
											"source": 2,
											"value": "230"
										},
										{
											"begin": 4989,
											"end": 5067,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5152,
											"end": 5170,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5152,
											"end": 5170,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5152,
											"end": 5170,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5152,
											"end": 5170,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5152,
											"end": 5170,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5152,
											"end": 5170,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5152,
											"end": 5164,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 5152,
											"end": 5170,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5152,
											"end": 5170,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5152,
											"end": 5170,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5152,
											"end": 5170,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5152,
											"end": 5170,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5152,
											"end": 5177,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5152,
											"end": 5182,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5148,
											"end": 5239,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "231"
										},
										{
											"begin": 5148,
											"end": 5239,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "PUSH",
											"source": 2,
											"value": "4462D2700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5148,
											"end": 5239,
											"name": "tag",
											"source": 2,
											"value": "231"
										},
										{
											"begin": 5148,
											"end": 5239,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5264,
											"end": 5265,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5249,
											"end": 5260,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 5249,
											"end": 5260,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "tag",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5249,
											"end": 5265,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5281,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5306,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5306,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5275,
											"end": 5306,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5302,
											"end": 5306,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5275,
											"end": 5306,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5306,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5275,
											"end": 5306,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5424,
											"end": 5439,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5424,
											"end": 5439,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5676,
											"end": 5699,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 5424,
											"end": 5439,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5676,
											"end": 5687,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 5676,
											"end": 5699,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 5676,
											"end": 5699,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5676,
											"end": 5699,
											"name": "tag",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 5676,
											"end": 5699,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5714,
											"end": 5715,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5755,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5568,
											"end": 5586,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5586,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5586,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5580,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 5568,
											"end": 5586,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5586,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5586,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5568,
											"end": 5755,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5822,
											"end": 5880,
											"name": "PUSH",
											"source": 2,
											"value": "B4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED"
										},
										{
											"begin": 5835,
											"end": 5841,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5843,
											"end": 5852,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5855,
											"end": 5878,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "234"
										},
										{
											"begin": 5843,
											"end": 5852,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5855,
											"end": 5866,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 5855,
											"end": 5878,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 5855,
											"end": 5878,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5855,
											"end": 5878,
											"name": "tag",
											"source": 2,
											"value": "234"
										},
										{
											"begin": 5855,
											"end": 5878,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5822,
											"end": 5880,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5822,
											"end": 5880,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5822,
											"end": 5880,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4453,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4428,
											"end": 4453,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4428,
											"end": 4453,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4484,
											"end": 4486,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4469,
											"end": 4487,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4469,
											"end": 4487,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4462,
											"end": 4496,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4462,
											"end": 4496,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4462,
											"end": 4496,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4462,
											"end": 4496,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4512,
											"end": 4530,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4512,
											"end": 4530,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4512,
											"end": 4530,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4505,
											"end": 4539,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4416,
											"end": 4418,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 4401,
											"end": 4419,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5822,
											"end": 5880,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5822,
											"end": 5880,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5822,
											"end": 5880,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5822,
											"end": 5880,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5822,
											"end": 5880,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5822,
											"end": 5880,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5822,
											"end": 5880,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4713,
											"end": 5887,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 13361,
											"end": 13457,
											"name": "tag",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 13361,
											"end": 13457,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 3416,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "tag",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 4259,
											"end": 4277,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "tag",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 4259,
											"end": 4279,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13429,
											"end": 13442,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 13429,
											"end": 13450,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13429,
											"end": 13450,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 13429,
											"end": 13450,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 13429,
											"end": 13450,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13429,
											"end": 13450,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 13361,
											"end": 13457,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4011,
											"end": 4215,
											"name": "tag",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 4011,
											"end": 4215,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4132,
											"end": 4145,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4132,
											"end": 4145,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4132,
											"end": 4145,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 4132,
											"end": 4145,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4127,
											"end": 4209,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 4127,
											"end": 4209,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "PUSH",
											"source": 2,
											"value": "A1D1891400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4168,
											"end": 4198,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4127,
											"end": 4209,
											"name": "tag",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 4127,
											"end": 4209,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4011,
											"end": 4215,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3711,
											"end": 3942,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 3711,
											"end": 3942,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3849,
											"end": 3859,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3842,
											"end": 3848,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3842,
											"end": 3872,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3842,
											"end": 3872,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 3842,
											"end": 3872,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3838,
											"end": 3936,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 3838,
											"end": 3936,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "PUSH",
											"source": 2,
											"value": "1E567DD400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3904,
											"end": 3925,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6560,
											"end": 6997,
											"name": "tag",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 6560,
											"end": 6997,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6690,
											"end": 6707,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6690,
											"end": 6707,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6663,
											"end": 6670,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6663,
											"end": 6670,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6686,
											"end": 6747,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "247"
										},
										{
											"begin": 6686,
											"end": 6747,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6735,
											"end": 6736,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6735,
											"end": 6736,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6560,
											"end": 6997,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6560,
											"end": 6997,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 6686,
											"end": 6747,
											"name": "tag",
											"source": 2,
											"value": "247"
										},
										{
											"begin": 6686,
											"end": 6747,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6986,
											"end": 6990,
											"name": "PUSH",
											"source": 2,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 6939,
											"end": 6982,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "248"
										},
										{
											"begin": 6965,
											"end": 6975,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6965,
											"end": 6981,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6965,
											"end": 6981,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6965,
											"end": 6981,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6939,
											"end": 6964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 6939,
											"end": 6982,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6939,
											"end": 6982,
											"name": "tag",
											"source": 2,
											"value": "248"
										},
										{
											"begin": 6939,
											"end": 6982,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6900,
											"end": 6920,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6900,
											"end": 6920,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6900,
											"end": 6920,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6900,
											"end": 6920,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6864,
											"end": 6881,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6864,
											"end": 6881,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6864,
											"end": 6920,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "250"
										},
										{
											"begin": 6864,
											"end": 6920,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6900,
											"end": 6920,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6864,
											"end": 6920,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 6864,
											"end": 6920,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6864,
											"end": 6920,
											"name": "tag",
											"source": 2,
											"value": "250"
										},
										{
											"begin": 6864,
											"end": 6920,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6864,
											"end": 6982,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 6864,
											"end": 6982,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6864,
											"end": 6982,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6864,
											"end": 6982,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 6864,
											"end": 6982,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6864,
											"end": 6982,
											"name": "tag",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 6864,
											"end": 6982,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6863,
											"end": 6990,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 6863,
											"end": 6990,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6863,
											"end": 6990,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6863,
											"end": 6990,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 6863,
											"end": 6990,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6863,
											"end": 6990,
											"name": "tag",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 6863,
											"end": 6990,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 6990,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6560,
											"end": 6997,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6560,
											"end": 6997,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3451,
											"end": 3547,
											"name": "tag",
											"source": 1,
											"value": "138"
										},
										{
											"begin": 3451,
											"end": 3547,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3509,
											"end": 3516,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "180"
										},
										{
											"begin": 3539,
											"end": 3540,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3535,
											"end": 3536,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "251"
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3836,
											"end": 3932,
											"name": "tag",
											"source": 1,
											"value": "139"
										},
										{
											"begin": 3836,
											"end": 3932,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3894,
											"end": 3901,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3920,
											"end": 3925,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "180"
										},
										{
											"begin": 3924,
											"end": 3925,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3920,
											"end": 3921,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3920,
											"end": 3925,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "217"
										},
										{
											"begin": 3920,
											"end": 3925,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10181,
											"end": 10313,
											"name": "tag",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 10181,
											"end": 10313,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10243,
											"end": 10250,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10269,
											"end": 10306,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 10299,
											"end": 10305,
											"name": "PUSH",
											"source": 2,
											"value": "93A80"
										},
										{
											"begin": 10270,
											"end": 10293,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "260"
										},
										{
											"begin": 10288,
											"end": 10293,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10270,
											"end": 10285,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 10270,
											"end": 10293,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 10270,
											"end": 10293,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10270,
											"end": 10293,
											"name": "tag",
											"source": 2,
											"value": "260"
										},
										{
											"begin": 10270,
											"end": 10293,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10269,
											"end": 10298,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10269,
											"end": 10298,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 10269,
											"end": 10306,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10319,
											"end": 10498,
											"name": "tag",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 10319,
											"end": 10498,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10414,
											"end": 10421,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10483,
											"end": 10491,
											"name": "PUSH",
											"source": 2,
											"value": "1DFE200"
										},
										{
											"begin": 10475,
											"end": 10479,
											"name": "PUSH",
											"source": 2,
											"value": "3E8"
										},
										{
											"begin": 10460,
											"end": 10471,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 10460,
											"end": 10471,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10446,
											"end": 10457,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10446,
											"end": 10471,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 10446,
											"end": 10471,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10446,
											"end": 10471,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10446,
											"end": 10471,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 10446,
											"end": 10471,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10446,
											"end": 10471,
											"name": "tag",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 10446,
											"end": 10471,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10445,
											"end": 10479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 10445,
											"end": 10479,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10445,
											"end": 10479,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10445,
											"end": 10479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 10445,
											"end": 10479,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3449,
											"end": 3641,
											"name": "tag",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 3449,
											"end": 3641,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3570,
											"end": 3576,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 3570,
											"end": 3576,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3570,
											"end": 3576,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3556,
											"end": 3566,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 3556,
											"end": 3576,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 3552,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 3552,
											"end": 3635,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "15A678A9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3624,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3187,
											"end": 3379,
											"name": "tag",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 3187,
											"end": 3379,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3308,
											"end": 3314,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3308,
											"end": 3314,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3308,
											"end": 3314,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3294,
											"end": 3304,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 3290,
											"end": 3373,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 3290,
											"end": 3373,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "15A678A9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3337,
											"end": 3362,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7003,
											"end": 7524,
											"name": "tag",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 7003,
											"end": 7524,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7120,
											"end": 7127,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7120,
											"end": 7127,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7156,
											"end": 7167,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7152,
											"end": 7207,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "270"
										},
										{
											"begin": 7152,
											"end": 7207,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7191,
											"end": 7192,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7191,
											"end": 7192,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7191,
											"end": 7192,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7183,
											"end": 7196,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "269"
										},
										{
											"begin": 7183,
											"end": 7196,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7152,
											"end": 7207,
											"name": "tag",
											"source": 2,
											"value": "270"
										},
										{
											"begin": 7152,
											"end": 7207,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7237,
											"end": 7365,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "271"
										},
										{
											"begin": 7267,
											"end": 7273,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7291,
											"end": 7351,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "272"
										},
										{
											"begin": 7304,
											"end": 7344,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 7317,
											"end": 7323,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7325,
											"end": 7343,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 7325,
											"end": 7343,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7304,
											"end": 7316,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 7304,
											"end": 7344,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7291,
											"end": 7351,
											"name": "tag",
											"source": 2,
											"value": "272"
										},
										{
											"begin": 7291,
											"end": 7351,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7237,
											"end": 7249,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "274"
										},
										{
											"begin": 7237,
											"end": 7365,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7237,
											"end": 7365,
											"name": "tag",
											"source": 2,
											"value": "271"
										},
										{
											"begin": 7237,
											"end": 7365,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7379,
											"end": 7507,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "275"
										},
										{
											"begin": 7409,
											"end": 7415,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7433,
											"end": 7493,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "272"
										},
										{
											"begin": 7446,
											"end": 7486,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 7459,
											"end": 7465,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7467,
											"end": 7485,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 7467,
											"end": 7485,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7446,
											"end": 7458,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 7446,
											"end": 7486,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7379,
											"end": 7507,
											"name": "tag",
											"source": 2,
											"value": "275"
										},
										{
											"begin": 7379,
											"end": 7507,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7216,
											"end": 7517,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7216,
											"end": 7517,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7216,
											"end": 7517,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7216,
											"end": 7517,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7003,
											"end": 7524,
											"name": "tag",
											"source": 2,
											"value": "269"
										},
										{
											"begin": 7003,
											"end": 7524,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7003,
											"end": 7524,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7003,
											"end": 7524,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7003,
											"end": 7524,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7003,
											"end": 7524,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7003,
											"end": 7524,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7003,
											"end": 7524,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 6205,
											"end": 6554,
											"name": "tag",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 6205,
											"end": 6554,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6302,
											"end": 6309,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 6427,
											"end": 6450,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "280"
										},
										{
											"begin": 6445,
											"end": 6450,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6427,
											"end": 6442,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 6427,
											"end": 6450,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 6427,
											"end": 6450,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6427,
											"end": 6450,
											"name": "tag",
											"source": 2,
											"value": "280"
										},
										{
											"begin": 6427,
											"end": 6450,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6426,
											"end": 6458,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "281"
										},
										{
											"begin": 6426,
											"end": 6458,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6454,
											"end": 6458,
											"name": "PUSH",
											"source": 2,
											"value": "D3C21BCECCEDA1000000"
										},
										{
											"begin": 6426,
											"end": 6458,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 6426,
											"end": 6458,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6426,
											"end": 6458,
											"name": "tag",
											"source": 2,
											"value": "281"
										},
										{
											"begin": 6426,
											"end": 6458,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6476,
											"end": 6484,
											"name": "PUSH",
											"source": 2,
											"value": "1E13380"
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "PUSH",
											"source": 2,
											"value": "1D"
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "PUSH",
											"source": 2,
											"value": "4572726F722063616E6E6F74206469766964652074696D657374616D70000000"
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6408,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "282"
										},
										{
											"begin": 6396,
											"end": 6547,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3108,
											"end": 3204,
											"name": "tag",
											"source": 1,
											"value": "274"
										},
										{
											"begin": 3108,
											"end": 3204,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3166,
											"end": 3173,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3192,
											"end": 3197,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "180"
										},
										{
											"begin": 3196,
											"end": 3197,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3192,
											"end": 3193,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3192,
											"end": 3197,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 3192,
											"end": 3197,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5660,
											"end": 5890,
											"name": "tag",
											"source": 1,
											"value": "282"
										},
										{
											"begin": 5660,
											"end": 5890,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5776,
											"end": 5783,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5834,
											"end": 5846,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5827,
											"end": 5832,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "286"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "288"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "tag",
											"source": 1,
											"value": "286"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5872,
											"end": 5873,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5868,
											"end": 5869,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "290"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "290"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "291"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "tag",
											"source": 1,
											"value": "290"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 5660,
											"end": 5890,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5660,
											"end": 5890,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "130"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "292"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "292"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 842,
											"end": 1038,
											"name": "tag",
											"source": 3,
											"value": "294"
										},
										{
											"begin": 842,
											"end": 1038,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 910,
											"end": 930,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 910,
											"end": 930,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 959,
											"end": 1013,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 959,
											"end": 1013,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 949,
											"end": 1014,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 949,
											"end": 1014,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 939,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 939,
											"end": 1032,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1028,
											"end": 1029,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1025,
											"end": 1026,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1018,
											"end": 1030,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1043,
											"end": 1229,
											"name": "tag",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 1043,
											"end": 1229,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1102,
											"end": 1108,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1155,
											"end": 1157,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1143,
											"end": 1152,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1134,
											"end": 1141,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1130,
											"end": 1153,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1126,
											"end": 1158,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1123,
											"end": 1175,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1123,
											"end": 1175,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "301"
										},
										{
											"begin": 1123,
											"end": 1175,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1171,
											"end": 1172,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1168,
											"end": 1169,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1161,
											"end": 1173,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1123,
											"end": 1175,
											"name": "tag",
											"source": 3,
											"value": "301"
										},
										{
											"begin": 1123,
											"end": 1175,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1194,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 1213,
											"end": 1222,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1194,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "294"
										},
										{
											"begin": 1194,
											"end": 1223,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2112,
											"end": 2292,
											"name": "tag",
											"source": 3,
											"value": "79"
										},
										{
											"begin": 2112,
											"end": 2292,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2171,
											"end": 2177,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2224,
											"end": 2226,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2212,
											"end": 2221,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2203,
											"end": 2210,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2199,
											"end": 2222,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2195,
											"end": 2227,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 2192,
											"end": 2244,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2192,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "308"
										},
										{
											"begin": 2192,
											"end": 2244,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2240,
											"end": 2241,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2237,
											"end": 2238,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2230,
											"end": 2242,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2192,
											"end": 2244,
											"name": "tag",
											"source": 3,
											"value": "308"
										},
										{
											"begin": 2192,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2263,
											"end": 2286,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 2263,
											"end": 2286,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2112,
											"end": 2292,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2112,
											"end": 2292,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2550,
											"end": 2941,
											"name": "tag",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 2550,
											"end": 2941,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2636,
											"end": 2642,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2644,
											"end": 2650,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2652,
											"end": 2658,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2660,
											"end": 2666,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2713,
											"end": 2716,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 2701,
											"end": 2710,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 2692,
											"end": 2699,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 2688,
											"end": 2711,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2684,
											"end": 2717,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 2681,
											"end": 2734,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2681,
											"end": 2734,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "311"
										},
										{
											"begin": 2681,
											"end": 2734,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2730,
											"end": 2731,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2727,
											"end": 2728,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2720,
											"end": 2732,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2681,
											"end": 2734,
											"name": "tag",
											"source": 3,
											"value": "311"
										},
										{
											"begin": 2681,
											"end": 2734,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2782,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "312"
										},
										{
											"begin": 2772,
											"end": 2781,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2782,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "294"
										},
										{
											"begin": 2753,
											"end": 2782,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2753,
											"end": 2782,
											"name": "tag",
											"source": 3,
											"value": "312"
										},
										{
											"begin": 2753,
											"end": 2782,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2743,
											"end": 2782,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": 2829,
											"end": 2831,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2814,
											"end": 2832,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2814,
											"end": 2832,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2801,
											"end": 2833,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 2801,
											"end": 2833,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2880,
											"end": 2882,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2865,
											"end": 2883,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2865,
											"end": 2883,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2852,
											"end": 2884,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 2852,
											"end": 2884,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 2931,
											"end": 2933,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2916,
											"end": 2934,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2903,
											"end": 2935,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 2903,
											"end": 2935,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2550,
											"end": 2941,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2550,
											"end": 2941,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3306,
											"end": 3490,
											"name": "tag",
											"source": 3,
											"value": "295"
										},
										{
											"begin": 3306,
											"end": 3490,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3355,
											"end": 3356,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3348,
											"end": 3436,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3455,
											"end": 3459,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 3452,
											"end": 3453,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3445,
											"end": 3460,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3479,
											"end": 3483,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 3476,
											"end": 3477,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3469,
											"end": 3484,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3495,
											"end": 3620,
											"name": "tag",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 3495,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3535,
											"end": 3539,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3563,
											"end": 3564,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3560,
											"end": 3561,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3557,
											"end": 3565,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 3554,
											"end": 3588,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3554,
											"end": 3588,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "317"
										},
										{
											"begin": 3554,
											"end": 3588,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3568,
											"end": 3586,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "317"
										},
										{
											"begin": 3568,
											"end": 3586,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "295"
										},
										{
											"begin": 3568,
											"end": 3586,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3568,
											"end": 3586,
											"name": "tag",
											"source": 3,
											"value": "317"
										},
										{
											"begin": 3568,
											"end": 3586,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3605,
											"end": 3614,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3605,
											"end": 3614,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3495,
											"end": 3620,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3625,
											"end": 3753,
											"name": "tag",
											"source": 3,
											"value": "143"
										},
										{
											"begin": 3625,
											"end": 3753,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3665,
											"end": 3668,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3696,
											"end": 3697,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3692,
											"end": 3698,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 3689,
											"end": 3690,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3686,
											"end": 3699,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 3683,
											"end": 3722,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3683,
											"end": 3722,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "320"
										},
										{
											"begin": 3683,
											"end": 3722,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3702,
											"end": 3720,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "320"
										},
										{
											"begin": 3702,
											"end": 3720,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "295"
										},
										{
											"begin": 3702,
											"end": 3720,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3702,
											"end": 3720,
											"name": "tag",
											"source": 3,
											"value": "320"
										},
										{
											"begin": 3702,
											"end": 3720,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3738,
											"end": 3747,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3738,
											"end": 3747,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3625,
											"end": 3753,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3758,
											"end": 3942,
											"name": "tag",
											"source": 3,
											"value": "291"
										},
										{
											"begin": 3758,
											"end": 3942,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3807,
											"end": 3808,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3800,
											"end": 3888,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3907,
											"end": 3911,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 3904,
											"end": 3905,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3897,
											"end": 3912,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3931,
											"end": 3935,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 3928,
											"end": 3929,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3921,
											"end": 3936,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3947,
											"end": 4221,
											"name": "tag",
											"source": 3,
											"value": "217"
										},
										{
											"begin": 3947,
											"end": 4221,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3987,
											"end": 3988,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4013,
											"end": 4014,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "323"
										},
										{
											"begin": 4003,
											"end": 4192,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4045,
											"end": 4046,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4038,
											"end": 4126,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4149,
											"end": 4153,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 4146,
											"end": 4147,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4139,
											"end": 4154,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4177,
											"end": 4181,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 4174,
											"end": 4175,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4167,
											"end": 4182,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 4192,
											"name": "tag",
											"source": 3,
											"value": "323"
										},
										{
											"begin": 4003,
											"end": 4192,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4206,
											"end": 4215,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 4206,
											"end": 4215,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3947,
											"end": 4221,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4550,
											"end": 4718,
											"name": "tag",
											"source": 3,
											"value": "251"
										},
										{
											"begin": 4550,
											"end": 4718,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4590,
											"end": 4597,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4656,
											"end": 4657,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4652,
											"end": 4653,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4648,
											"end": 4654,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 4644,
											"end": 4658,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 4641,
											"end": 4642,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4638,
											"end": 4659,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 4633,
											"end": 4634,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4626,
											"end": 4635,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4619,
											"end": 4636,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4615,
											"end": 4660,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4612,
											"end": 4683,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4612,
											"end": 4683,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "327"
										},
										{
											"begin": 4612,
											"end": 4683,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4663,
											"end": 4681,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "327"
										},
										{
											"begin": 4663,
											"end": 4681,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "295"
										},
										{
											"begin": 4663,
											"end": 4681,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4663,
											"end": 4681,
											"name": "tag",
											"source": 3,
											"value": "327"
										},
										{
											"begin": 4663,
											"end": 4681,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4703,
											"end": 4712,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4703,
											"end": 4712,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4550,
											"end": 4718,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4723,
											"end": 5320,
											"name": "tag",
											"source": 3,
											"value": "288"
										},
										{
											"begin": 4723,
											"end": 5320,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4835,
											"end": 4839,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4864,
											"end": 4866,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4893,
											"end": 4895,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4882,
											"end": 4891,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4875,
											"end": 4896,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4925,
											"end": 4931,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4919,
											"end": 4932,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4968,
											"end": 4974,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4963,
											"end": 4965,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4952,
											"end": 4961,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4948,
											"end": 4966,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4941,
											"end": 4975,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4993,
											"end": 4994,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5003,
											"end": 5143,
											"name": "tag",
											"source": 3,
											"value": "329"
										},
										{
											"begin": 5003,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5017,
											"end": 5023,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5015,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5011,
											"end": 5024,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 5003,
											"end": 5143,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5003,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "331"
										},
										{
											"begin": 5003,
											"end": 5143,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5112,
											"end": 5126,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5112,
											"end": 5126,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5112,
											"end": 5126,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5108,
											"end": 5131,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5108,
											"end": 5131,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5102,
											"end": 5132,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5078,
											"end": 5095,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5078,
											"end": 5095,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5078,
											"end": 5095,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5097,
											"end": 5099,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5074,
											"end": 5100,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5067,
											"end": 5133,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5032,
											"end": 5042,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5032,
											"end": 5042,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5003,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "329"
										},
										{
											"begin": 5003,
											"end": 5143,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5003,
											"end": 5143,
											"name": "tag",
											"source": 3,
											"value": "331"
										},
										{
											"begin": 5003,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5161,
											"end": 5167,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5158,
											"end": 5159,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5155,
											"end": 5168,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 5152,
											"end": 5243,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5152,
											"end": 5243,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "332"
										},
										{
											"begin": 5152,
											"end": 5243,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5231,
											"end": 5232,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5226,
											"end": 5228,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5217,
											"end": 5223,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5206,
											"end": 5215,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5202,
											"end": 5224,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5198,
											"end": 5229,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5191,
											"end": 5233,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5152,
											"end": 5243,
											"name": "tag",
											"source": 3,
											"value": "332"
										},
										{
											"begin": 5152,
											"end": 5243,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5304,
											"end": 5306,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 5283,
											"end": 5298,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5279,
											"end": 5308,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5264,
											"end": 5309,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5264,
											"end": 5309,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5264,
											"end": 5309,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5264,
											"end": 5309,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5311,
											"end": 5313,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5260,
											"end": 5314,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5260,
											"end": 5314,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4723,
											"end": 5320,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4723,
											"end": 5320,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"_owner()": "b2bdfa7b",
							"_talax()": "5f348b4e",
							"airdropRate()": "8891cf0d",
							"airdropSince()": "b87da76d",
							"airdropWeek()": "cbb3e152",
							"changeAirdropPercentage(uint256)": "d5dbdf1b",
							"changePenaltyFee(uint256)": "8c63f97f",
							"changeTalaxAddress(address)": "1d77b00b",
							"claimAirdrop(address)": "65f8c6c5",
							"getLatestClaimDrop()": "69e4591a",
							"getVoters(address)": "2d15cc04",
							"getVotingResult()": "671d2b75",
							"hasStake()": "10486b6a",
							"retractVote()": "070c8b74",
							"stake(address,uint256,uint256,uint256)": "f93d4f8a",
							"stakingPenaltyRate()": "cb79c2e1",
							"startAirdropSince()": "71e3db87",
							"startVoting()": "1ec6b60a",
							"stopVoting()": "fab2f86b",
							"totalVoters()": "5f5300ff",
							"vote()": "632a9a52",
							"votedUsers(uint256)": "a143a5f2",
							"voters(address)": "a3ec138d",
							"withdrawStake(address)": "c23a5cea"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Airdrop__claimableOnceAWeek\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Function__notAVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Function__notAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Function__votingNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__airdropExceed20Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__cannotStakeNothing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__noStakingFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__penaltyExceed3Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__userIsStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__alreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__notEnoughVoters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__notYetVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__votingIsRunning\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_talax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeAirdropPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changePenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"talax\",\"type\":\"address\"}],\"name\":\"changeTalaxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestClaimDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimDrop\",\"type\":\"uint256\"}],\"internalType\":\"struct Stakable.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"internalType\":\"struct Stakable.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retractVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAirdropSince\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"votingRight\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"Airdrop__claimableOnceAWeek()\":[{\"notice\":\"Error handling message for Airdrop functions\"}],\"Function__notAuthorized()\":[{\"notice\":\"Error handling message for Modifier\"}],\"Staking__cannotStakeNothing()\":[{\"notice\":\"Error handling message for Staking functions\"}],\"Voting__votingIsRunning()\":[{\"notice\":\"Error handling message for Voting functions\"}]},\"events\":{\"Staked(address,uint256,uint256,uint256)\":{\"notice\":\"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\"}},\"kind\":\"user\",\"methods\":{\"stake(address,uint256,uint256,uint256)\":{\"notice\":\"_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID\"},\"withdrawStake(address)\":{\"notice\":\"withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stakable.sol\":\"Stakable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2\",\"dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y\"]},\"contracts/Stakable.sol\":{\"keccak256\":\"0x772764407d90f87d8009c530faeaf9c33fdcc5f600935413f432088b9e5b4526\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://825ca53dd2d1d19424cd0a0742967ece22f950e6a7f5fbcbc4817b672e6b659e\",\"dweb:/ipfs/QmYjdiKfd78HEXeJDNJfsXyys472xq8kRGE4DsxkZkTKzw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 10,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 399,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "stakingPenaltyRate",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 401,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "airdropRate",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 403,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "airdropSince",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 405,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "_votingStatus",
								"offset": 0,
								"slot": "4",
								"type": "t_bool"
							},
							{
								"astId": 407,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "_votingId",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 409,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "totalVoters",
								"offset": 0,
								"slot": "6",
								"type": "t_uint256"
							},
							{
								"astId": 414,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "voters",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Voter)397_storage)"
							},
							{
								"astId": 418,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "votedUsers",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 420,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "_talax",
								"offset": 0,
								"slot": "9",
								"type": "t_address"
							},
							{
								"astId": 422,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "_owner",
								"offset": 0,
								"slot": "10",
								"type": "t_address"
							},
							{
								"astId": 473,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "stakeholders",
								"offset": 0,
								"slot": "11",
								"type": "t_mapping(t_address,t_struct(Stake)459_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Stake)459_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Stakable.Stake)",
								"numberOfBytes": "32",
								"value": "t_struct(Stake)459_storage"
							},
							"t_mapping(t_address,t_struct(Voter)397_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Stakable.Voter)",
								"numberOfBytes": "32",
								"value": "t_struct(Voter)397_storage"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Stake)459_storage": {
								"encoding": "inplace",
								"label": "struct Stakable.Stake",
								"members": [
									{
										"astId": 446,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "amount",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 448,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "since",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 450,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "rewardAPY",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 452,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "releaseTime",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 454,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "claimable",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 456,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "claimableAirdrop",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 458,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "latestClaimDrop",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_struct(Voter)397_storage": {
								"encoding": "inplace",
								"label": "struct Stakable.Voter",
								"members": [
									{
										"astId": 392,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "votingRight",
										"offset": 0,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 396,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "voted",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_uint256,t_bool)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"Airdrop__claimableOnceAWeek()": [
								{
									"notice": "Error handling message for Airdrop functions"
								}
							],
							"Function__notAuthorized()": [
								{
									"notice": "Error handling message for Modifier"
								}
							],
							"Staking__cannotStakeNothing()": [
								{
									"notice": "Error handling message for Staking functions"
								}
							],
							"Voting__votingIsRunning()": [
								{
									"notice": "Error handling message for Voting functions"
								}
							]
						},
						"events": {
							"Staked(address,uint256,uint256,uint256)": {
								"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
							}
						},
						"kind": "user",
						"methods": {
							"stake(address,uint256,uint256,uint256)": {
								"notice": "_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID"
							},
							"withdrawStake(address)": {
								"notice": "withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							39
						]
					},
					"id": 40,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:0",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 39,
							"linearizedBaseContracts": [
								39
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 5,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 39,
									"src": "1661:41:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 4,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 8,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 39,
									"src": "1708:37:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 6,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 7,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 39,
									"src": "1752:23:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 9,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 17,
										"nodeType": "Block",
										"src": "1796:39:0",
										"statements": [
											{
												"expression": {
													"id": 15,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 13,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "1806:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 14,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "1816:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 16,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:0"
											}
										]
									},
									"id": 18,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:0"
									},
									"returnParameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:0"
									},
									"scope": 39,
									"src": "1782:53:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "2236:421:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 24,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 22,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 10,
																"src": "2325:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 23,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 8,
																"src": "2336:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 25,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 21,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:0"
											},
											{
												"expression": {
													"id": 30,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 28,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2455:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 29,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "2465:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 31,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:0"
											},
											{
												"id": 32,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:0"
											},
											{
												"expression": {
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 33,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2628:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 34,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "2638:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 36,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:0"
											}
										]
									},
									"documentation": {
										"id": 19,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:0",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 38,
									"name": "nonReentrant",
									"nameLocation": "2221:12:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:0"
									},
									"src": "2212:445:0",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 40,
							"src": "873:1786:0",
							"usedErrors": []
						}
					],
					"src": "97:2563:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							351
						]
					},
					"id": 352,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 41,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "92:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 42,
								"nodeType": "StructuredDocumentation",
								"src": "270:196:1",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 351,
							"linearizedBaseContracts": [
								351
							],
							"name": "SafeMath",
							"nameLocation": "475:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "702:140:1",
										"statements": [
											{
												"id": 72,
												"nodeType": "UncheckedBlock",
												"src": "712:124:1",
												"statements": [
													{
														"assignments": [
															55
														],
														"declarations": [
															{
																"constant": false,
																"id": 55,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "744:1:1",
																"nodeType": "VariableDeclaration",
																"scope": 72,
																"src": "736:9:1",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 54,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "736:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 59,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 58,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 56,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 45,
																"src": "748:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 57,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 47,
																"src": "752:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "748:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "736:17:1"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 62,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 60,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "771:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 61,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 45,
																"src": "775:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "771:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 67,
														"nodeType": "IfStatement",
														"src": "767:28:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 63,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "786:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 64,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "793:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 65,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "785:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 53,
															"id": 66,
															"nodeType": "Return",
															"src": "778:17:1"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 68,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "817:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 69,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 55,
																	"src": "823:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 70,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "816:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 53,
														"id": 71,
														"nodeType": "Return",
														"src": "809:16:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "490:131:1",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 74,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "635:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "650:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "642:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 44,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "642:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "661:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "653:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 46,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "641:22:1"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "687:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 49,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "687:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "693:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "686:15:1"
									},
									"scope": 351,
									"src": "626:216:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 101,
										"nodeType": "Block",
										"src": "1064:113:1",
										"statements": [
											{
												"id": 100,
												"nodeType": "UncheckedBlock",
												"src": "1074:97:1",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 88,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 86,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 79,
																"src": "1102:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 87,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 77,
																"src": "1106:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1102:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 93,
														"nodeType": "IfStatement",
														"src": "1098:28:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 89,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1117:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 90,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1124:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 91,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1116:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 85,
															"id": 92,
															"nodeType": "Return",
															"src": "1109:17:1"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 94,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1148:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 97,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 95,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 77,
																		"src": "1154:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 96,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 79,
																		"src": "1158:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1154:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 98,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1147:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 85,
														"id": 99,
														"nodeType": "Return",
														"src": "1140:20:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "848:135:1",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 102,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "997:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1012:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "1004:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1004:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1023:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "1015:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1015:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1003:22:1"
									},
									"returnParameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "1049:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 81,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1049:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "1055:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 83,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1055:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1048:15:1"
									},
									"scope": 351,
									"src": "988:189:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 143,
										"nodeType": "Block",
										"src": "1401:417:1",
										"statements": [
											{
												"id": 142,
												"nodeType": "UncheckedBlock",
												"src": "1411:401:1",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 116,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 114,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 105,
																"src": "1669:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 115,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1674:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1669:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 121,
														"nodeType": "IfStatement",
														"src": "1665:28:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 117,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1685:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 118,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1691:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 119,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1684:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 113,
															"id": 120,
															"nodeType": "Return",
															"src": "1677:16:1"
														}
													},
													{
														"assignments": [
															123
														],
														"declarations": [
															{
																"constant": false,
																"id": 123,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1715:1:1",
																"nodeType": "VariableDeclaration",
																"scope": 142,
																"src": "1707:9:1",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 122,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1707:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 127,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 126,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 124,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 105,
																"src": "1719:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 125,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 107,
																"src": "1723:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1719:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1707:17:1"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 128,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 123,
																	"src": "1742:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 129,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 105,
																	"src": "1746:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1742:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 131,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 107,
																"src": "1751:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1742:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 137,
														"nodeType": "IfStatement",
														"src": "1738:33:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 133,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1762:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1769:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 135,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1761:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 113,
															"id": 136,
															"nodeType": "Return",
															"src": "1754:17:1"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 138,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1793:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 139,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 123,
																	"src": "1799:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 140,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1792:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 113,
														"id": 141,
														"nodeType": "Return",
														"src": "1785:16:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 103,
										"nodeType": "StructuredDocumentation",
										"src": "1183:137:1",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 144,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1334:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1349:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1341:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1341:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1360:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1352:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1352:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1340:22:1"
									},
									"returnParameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1386:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 109,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1386:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1392:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 111,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1392:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1385:15:1"
									},
									"scope": 351,
									"src": "1325:493:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 171,
										"nodeType": "Block",
										"src": "2043:114:1",
										"statements": [
											{
												"id": 170,
												"nodeType": "UncheckedBlock",
												"src": "2053:98:1",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 158,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 156,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 149,
																"src": "2081:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 157,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2086:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2081:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 163,
														"nodeType": "IfStatement",
														"src": "2077:29:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2097:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 160,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2104:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 161,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2096:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 155,
															"id": 162,
															"nodeType": "Return",
															"src": "2089:17:1"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 164,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2128:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 167,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 165,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 147,
																		"src": "2134:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 166,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 149,
																		"src": "2138:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2134:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 168,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2127:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 155,
														"id": 169,
														"nodeType": "Return",
														"src": "2120:20:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 145,
										"nodeType": "StructuredDocumentation",
										"src": "1824:138:1",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 172,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1976:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1991:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 172,
												"src": "1983:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1983:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2002:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 172,
												"src": "1994:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1982:22:1"
									},
									"returnParameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 172,
												"src": "2028:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 151,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2028:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 172,
												"src": "2034:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2034:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2027:15:1"
									},
									"scope": 351,
									"src": "1967:190:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 199,
										"nodeType": "Block",
										"src": "2392:114:1",
										"statements": [
											{
												"id": 198,
												"nodeType": "UncheckedBlock",
												"src": "2402:98:1",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 186,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 184,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 177,
																"src": "2430:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 185,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2435:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2430:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 191,
														"nodeType": "IfStatement",
														"src": "2426:29:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 187,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2446:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 188,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2453:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 189,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2445:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 183,
															"id": 190,
															"nodeType": "Return",
															"src": "2438:17:1"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 192,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2477:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 195,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 193,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 175,
																		"src": "2483:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 194,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 177,
																		"src": "2487:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2483:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 196,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2476:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 183,
														"id": 197,
														"nodeType": "Return",
														"src": "2469:20:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 173,
										"nodeType": "StructuredDocumentation",
										"src": "2163:148:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 200,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2325:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2340:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2332:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2332:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2351:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2343:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2331:22:1"
									},
									"returnParameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2377:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 179,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2377:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2383:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2383:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2376:15:1"
									},
									"scope": 351,
									"src": "2316:190:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "2808:29:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 210,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 203,
														"src": "2825:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 211,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 205,
														"src": "2829:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2825:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 209,
												"id": 213,
												"nodeType": "Return",
												"src": "2818:12:1"
											}
										]
									},
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "2512:224:1",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "2750:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2762:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "2754:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2754:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2773:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "2765:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2753:22:1"
									},
									"returnParameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "2799:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2799:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2798:9:1"
									},
									"scope": 351,
									"src": "2741:96:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 229,
										"nodeType": "Block",
										"src": "3175:29:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 225,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "3192:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 226,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 220,
														"src": "3196:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3192:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 224,
												"id": 228,
												"nodeType": "Return",
												"src": "3185:12:1"
											}
										]
									},
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "2843:260:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 230,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "3117:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3129:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "3121:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3121:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3140:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "3132:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 219,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3132:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3120:22:1"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "3166:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3166:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3165:9:1"
									},
									"scope": 351,
									"src": "3108:96:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 244,
										"nodeType": "Block",
										"src": "3518:29:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 240,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 233,
														"src": "3535:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 241,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 235,
														"src": "3539:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3535:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 239,
												"id": 243,
												"nodeType": "Return",
												"src": "3528:12:1"
											}
										]
									},
									"documentation": {
										"id": 231,
										"nodeType": "StructuredDocumentation",
										"src": "3210:236:1",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 245,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "3460:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3472:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "3464:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3464:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3483:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "3475:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3463:22:1"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "3509:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3509:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3508:9:1"
									},
									"scope": 351,
									"src": "3451:96:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 259,
										"nodeType": "Block",
										"src": "3903:29:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 255,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "3920:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 256,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 250,
														"src": "3924:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3920:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 254,
												"id": 258,
												"nodeType": "Return",
												"src": "3913:12:1"
											}
										]
									},
									"documentation": {
										"id": 246,
										"nodeType": "StructuredDocumentation",
										"src": "3553:278:1",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3845:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3857:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "3849:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3849:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3868:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "3860:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 249,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3860:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3848:22:1"
									},
									"returnParameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "3894:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3894:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:9:1"
									},
									"scope": 351,
									"src": "3836:96:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 274,
										"nodeType": "Block",
										"src": "4452:29:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 270,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 263,
														"src": "4469:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 271,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 265,
														"src": "4473:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4469:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 269,
												"id": 273,
												"nodeType": "Return",
												"src": "4462:12:1"
											}
										]
									},
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "3938:442:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 275,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4394:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4406:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "4398:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4398:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4417:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "4409:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4409:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4397:22:1"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "4443:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4443:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4442:9:1"
									},
									"scope": 351,
									"src": "4385:96:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 299,
										"nodeType": "Block",
										"src": "5070:106:1",
										"statements": [
											{
												"id": 298,
												"nodeType": "UncheckedBlock",
												"src": "5080:90:1",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 290,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 288,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 280,
																		"src": "5112:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 289,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 278,
																		"src": "5117:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5112:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 291,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 282,
																	"src": "5120:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 287,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5104:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 292,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5104:29:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 293,
														"nodeType": "ExpressionStatement",
														"src": "5104:29:1"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 294,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 278,
																"src": "5154:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 295,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 280,
																"src": "5158:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5154:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 286,
														"id": 297,
														"nodeType": "Return",
														"src": "5147:12:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 276,
										"nodeType": "StructuredDocumentation",
										"src": "4487:453:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 300,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "4954:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4975:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "4967:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4967:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4994:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "4986:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 279,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4986:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5019:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "5005:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 281,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5005:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4957:80:1"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "5061:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 284,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:9:1"
									},
									"scope": 351,
									"src": "4945:231:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 324,
										"nodeType": "Block",
										"src": "5785:105:1",
										"statements": [
											{
												"id": 323,
												"nodeType": "UncheckedBlock",
												"src": "5795:89:1",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 315,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 313,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 305,
																		"src": "5827:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 314,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5831:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5827:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 316,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 307,
																	"src": "5834:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 312,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5819:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 317,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5819:28:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 318,
														"nodeType": "ExpressionStatement",
														"src": "5819:28:1"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 321,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 319,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 303,
																"src": "5868:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 320,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 305,
																"src": "5872:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5868:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 311,
														"id": 322,
														"nodeType": "Return",
														"src": "5861:12:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 301,
										"nodeType": "StructuredDocumentation",
										"src": "5182:473:1",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 325,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "5669:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5690:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "5682:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5682:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5709:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "5701:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 304,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5734:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "5720:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 306,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5720:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5672:80:1"
									},
									"returnParameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "5776:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 309,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5776:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5775:9:1"
									},
									"scope": 351,
									"src": "5660:230:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 349,
										"nodeType": "Block",
										"src": "6661:105:1",
										"statements": [
											{
												"id": 348,
												"nodeType": "UncheckedBlock",
												"src": "6671:89:1",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 340,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 338,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 330,
																		"src": "6703:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 339,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6707:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6703:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 341,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 332,
																	"src": "6710:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 337,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6695:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 342,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6695:28:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 343,
														"nodeType": "ExpressionStatement",
														"src": "6695:28:1"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 346,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 344,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 328,
																"src": "6744:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 345,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 330,
																"src": "6748:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6744:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 336,
														"id": 347,
														"nodeType": "Return",
														"src": "6737:12:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 326,
										"nodeType": "StructuredDocumentation",
										"src": "5896:635:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 350,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "6545:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6566:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "6558:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 327,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6558:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "6585:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "6577:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6577:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6610:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "6596:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 331,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6596:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6548:80:1"
									},
									"returnParameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "6652:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6652:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6651:9:1"
									},
									"scope": 351,
									"src": "6536:230:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 352,
							"src": "467:6301:1",
							"usedErrors": []
						}
					],
					"src": "92:6677:1"
				},
				"id": 1
			},
			"contracts/Stakable.sol": {
				"ast": {
					"absolutePath": "contracts/Stakable.sol",
					"exportedSymbols": {
						"Airdrop__claimableOnceAWeek": [
							376
						],
						"Function__notAVoter": [
							360
						],
						"Function__notAuthorized": [
							358
						],
						"Function__votingNotAvailable": [
							362
						],
						"ReentrancyGuard": [
							39
						],
						"SafeMath": [
							351
						],
						"Stakable": [
							1316
						],
						"Staking__airdropExceed20Percent": [
							371
						],
						"Staking__cannotStakeNothing": [
							365
						],
						"Staking__noStakingFound": [
							373
						],
						"Staking__penaltyExceed3Percent": [
							369
						],
						"Staking__userIsStaker": [
							367
						],
						"Voting__alreadyVoted": [
							381
						],
						"Voting__notEnoughVoters": [
							385
						],
						"Voting__notYetVoted": [
							383
						],
						"Voting__votingIsRunning": [
							379
						]
					},
					"id": 1317,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 353,
							"literals": [
								"solidity",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 354,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1317,
							"sourceUnit": 352,
							"src": "64:57:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 355,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1317,
							"sourceUnit": 40,
							"src": "122:62:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"documentation": {
								"id": 356,
								"nodeType": "StructuredDocumentation",
								"src": "186:54:2",
								"text": " @notice Error handling message for Modifier"
							},
							"id": 358,
							"name": "Function__notAuthorized",
							"nameLocation": "247:23:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 357,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "270:2:2"
							},
							"src": "241:32:2"
						},
						{
							"id": 360,
							"name": "Function__notAVoter",
							"nameLocation": "280:19:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 359,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "299:2:2"
							},
							"src": "274:28:2"
						},
						{
							"id": 362,
							"name": "Function__votingNotAvailable",
							"nameLocation": "309:28:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 361,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "337:2:2"
							},
							"src": "303:37:2"
						},
						{
							"documentation": {
								"id": 363,
								"nodeType": "StructuredDocumentation",
								"src": "342:63:2",
								"text": " @notice Error handling message for Staking functions"
							},
							"id": 365,
							"name": "Staking__cannotStakeNothing",
							"nameLocation": "412:27:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 364,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "439:2:2"
							},
							"src": "406:36:2"
						},
						{
							"id": 367,
							"name": "Staking__userIsStaker",
							"nameLocation": "449:21:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 366,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "470:2:2"
							},
							"src": "443:30:2"
						},
						{
							"id": 369,
							"name": "Staking__penaltyExceed3Percent",
							"nameLocation": "480:30:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 368,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "510:2:2"
							},
							"src": "474:39:2"
						},
						{
							"id": 371,
							"name": "Staking__airdropExceed20Percent",
							"nameLocation": "520:31:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 370,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "551:2:2"
							},
							"src": "514:40:2"
						},
						{
							"id": 373,
							"name": "Staking__noStakingFound",
							"nameLocation": "561:23:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 372,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "584:2:2"
							},
							"src": "555:32:2"
						},
						{
							"documentation": {
								"id": 374,
								"nodeType": "StructuredDocumentation",
								"src": "589:63:2",
								"text": " @notice Error handling message for Airdrop functions"
							},
							"id": 376,
							"name": "Airdrop__claimableOnceAWeek",
							"nameLocation": "659:27:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 375,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "686:2:2"
							},
							"src": "653:36:2"
						},
						{
							"documentation": {
								"id": 377,
								"nodeType": "StructuredDocumentation",
								"src": "691:62:2",
								"text": " @notice Error handling message for Voting functions"
							},
							"id": 379,
							"name": "Voting__votingIsRunning",
							"nameLocation": "760:23:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 378,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "783:2:2"
							},
							"src": "754:32:2"
						},
						{
							"id": 381,
							"name": "Voting__alreadyVoted",
							"nameLocation": "793:20:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 380,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "813:2:2"
							},
							"src": "787:29:2"
						},
						{
							"id": 383,
							"name": "Voting__notYetVoted",
							"nameLocation": "823:19:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 382,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "842:2:2"
							},
							"src": "817:28:2"
						},
						{
							"id": 385,
							"name": "Voting__notEnoughVoters",
							"nameLocation": "852:23:2",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 384,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "875:2:2"
							},
							"src": "846:32:2"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 386,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 39,
										"src": "901:15:2"
									},
									"id": 387,
									"nodeType": "InheritanceSpecifier",
									"src": "901:15:2"
								}
							],
							"canonicalName": "Stakable",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1316,
							"linearizedBaseContracts": [
								1316,
								39
							],
							"name": "Stakable",
							"nameLocation": "889:8:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 390,
									"libraryName": {
										"id": 388,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 351,
										"src": "929:8:2"
									},
									"nodeType": "UsingForDirective",
									"src": "923:27:2",
									"typeName": {
										"id": 389,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "942:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "Stakable.Voter",
									"id": 397,
									"members": [
										{
											"constant": false,
											"id": 392,
											"mutability": "mutable",
											"name": "votingRight",
											"nameLocation": "1148:11:2",
											"nodeType": "VariableDeclaration",
											"scope": 397,
											"src": "1143:16:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 391,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1143:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 396,
											"mutability": "mutable",
											"name": "voted",
											"nameLocation": "1194:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 397,
											"src": "1169:30:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"typeName": {
												"id": 395,
												"keyType": {
													"id": 393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1177:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "1169:24:2",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
													"typeString": "mapping(uint256 => bool)"
												},
												"valueType": {
													"id": 394,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1188:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Voter",
									"nameLocation": "1127:5:2",
									"nodeType": "StructDefinition",
									"scope": 1316,
									"src": "1120:86:2",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "cb79c2e1",
									"id": 399,
									"mutability": "mutable",
									"name": "stakingPenaltyRate",
									"nameLocation": "1227:18:2",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1212:33:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 398,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1212:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8891cf0d",
									"id": 401,
									"mutability": "mutable",
									"name": "airdropRate",
									"nameLocation": "1266:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1251:26:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 400,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1251:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b87da76d",
									"id": 403,
									"mutability": "mutable",
									"name": "airdropSince",
									"nameLocation": "1298:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1283:27:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 402,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1283:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 405,
									"mutability": "mutable",
									"name": "_votingStatus",
									"nameLocation": "1331:13:2",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1317:27:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 404,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1317:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 407,
									"mutability": "mutable",
									"name": "_votingId",
									"nameLocation": "1367:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1350:26:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 406,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1350:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "5f5300ff",
									"id": 409,
									"mutability": "mutable",
									"name": "totalVoters",
									"nameLocation": "1397:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1382:26:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 408,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1382:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a3ec138d",
									"id": 414,
									"mutability": "mutable",
									"name": "voters",
									"nameLocation": "1447:6:2",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1414:39:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$397_storage_$",
										"typeString": "mapping(address => struct Stakable.Voter)"
									},
									"typeName": {
										"id": 413,
										"keyType": {
											"id": 410,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1422:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1414:25:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$397_storage_$",
											"typeString": "mapping(address => struct Stakable.Voter)"
										},
										"valueType": {
											"id": 412,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 411,
												"name": "Voter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 397,
												"src": "1433:5:2"
											},
											"referencedDeclaration": 397,
											"src": "1433:5:2",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Voter_$397_storage_ptr",
												"typeString": "struct Stakable.Voter"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a143a5f2",
									"id": 418,
									"mutability": "mutable",
									"name": "votedUsers",
									"nameLocation": "1494:10:2",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1459:45:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 417,
										"keyType": {
											"id": 415,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1467:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1459:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 416,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1478:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "5f348b4e",
									"id": 420,
									"mutability": "mutable",
									"name": "_talax",
									"nameLocation": "1526:6:2",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1511:21:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 419,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1511:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b2bdfa7b",
									"id": 422,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "1553:6:2",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1538:21:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 421,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1538:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 443,
										"nodeType": "Block",
										"src": "1580:186:2",
										"statements": [
											{
												"expression": {
													"id": 427,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 425,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 399,
														"src": "1652:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3135",
														"id": 426,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1673:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_15_by_1",
															"typeString": "int_const 15"
														},
														"value": "15"
													},
													"src": "1652:23:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 428,
												"nodeType": "ExpressionStatement",
												"src": "1652:23:2"
											},
											{
												"expression": {
													"id": 431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 429,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 401,
														"src": "1685:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3830",
														"id": 430,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1699:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_80_by_1",
															"typeString": "int_const 80"
														},
														"value": "80"
													},
													"src": "1685:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 432,
												"nodeType": "ExpressionStatement",
												"src": "1685:16:2"
											},
											{
												"expression": {
													"id": 436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 433,
														"name": "_talax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 420,
														"src": "1711:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 434,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1720:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 435,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1720:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1711:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 437,
												"nodeType": "ExpressionStatement",
												"src": "1711:19:2"
											},
											{
												"expression": {
													"id": 441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 438,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 422,
														"src": "1740:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 439,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1749:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 440,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1749:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1740:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 442,
												"nodeType": "ExpressionStatement",
												"src": "1740:19:2"
											}
										]
									},
									"id": 444,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1577:2:2"
									},
									"returnParameters": {
										"id": 424,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1580:0:2"
									},
									"scope": 1316,
									"src": "1566:200:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"canonicalName": "Stakable.Stake",
									"id": 459,
									"members": [
										{
											"constant": false,
											"id": 446,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "2030:6:2",
											"nodeType": "VariableDeclaration",
											"scope": 459,
											"src": "2022:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 445,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2022:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 448,
											"mutability": "mutable",
											"name": "since",
											"nameLocation": "2054:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 459,
											"src": "2046:13:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 447,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2046:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 450,
											"mutability": "mutable",
											"name": "rewardAPY",
											"nameLocation": "2077:9:2",
											"nodeType": "VariableDeclaration",
											"scope": 459,
											"src": "2069:17:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 449,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2069:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 452,
											"mutability": "mutable",
											"name": "releaseTime",
											"nameLocation": "2104:11:2",
											"nodeType": "VariableDeclaration",
											"scope": 459,
											"src": "2096:19:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 451,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2096:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 454,
											"mutability": "mutable",
											"name": "claimable",
											"nameLocation": "2232:9:2",
											"nodeType": "VariableDeclaration",
											"scope": 459,
											"src": "2224:17:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 453,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2224:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 456,
											"mutability": "mutable",
											"name": "claimableAirdrop",
											"nameLocation": "2259:16:2",
											"nodeType": "VariableDeclaration",
											"scope": 459,
											"src": "2251:24:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 455,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2251:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 458,
											"mutability": "mutable",
											"name": "latestClaimDrop",
											"nameLocation": "2293:15:2",
											"nodeType": "VariableDeclaration",
											"scope": 459,
											"src": "2285:23:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 457,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2285:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stake",
									"nameLocation": "2006:5:2",
									"nodeType": "StructDefinition",
									"scope": 1316,
									"src": "1999:316:2",
									"visibility": "public"
								},
								{
									"canonicalName": "Stakable.StakingSummary",
									"id": 467,
									"members": [
										{
											"constant": false,
											"id": 461,
											"mutability": "mutable",
											"name": "total_amount",
											"nameLocation": "2492:12:2",
											"nodeType": "VariableDeclaration",
											"scope": 467,
											"src": "2484:20:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 460,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2484:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 463,
											"mutability": "mutable",
											"name": "penalty",
											"nameLocation": "2522:7:2",
											"nodeType": "VariableDeclaration",
											"scope": 467,
											"src": "2514:15:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 462,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2514:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 466,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "2545:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 467,
											"src": "2539:11:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
												"typeString": "struct Stakable.Stake"
											},
											"typeName": {
												"id": 465,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 464,
													"name": "Stake",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 459,
													"src": "2539:5:2"
												},
												"referencedDeclaration": 459,
												"src": "2539:5:2",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
													"typeString": "struct Stakable.Stake"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakingSummary",
									"nameLocation": "2459:14:2",
									"nodeType": "StructDefinition",
									"scope": 1316,
									"src": "2452:105:2",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 468,
										"nodeType": "StructuredDocumentation",
										"src": "2563:111:2",
										"text": " @notice\n stakes is used to keep track of the INDEX for the stakers in the stakes array"
									},
									"id": 473,
									"mutability": "mutable",
									"name": "stakeholders",
									"nameLocation": "2714:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "2679:47:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$459_storage_$",
										"typeString": "mapping(address => struct Stakable.Stake)"
									},
									"typeName": {
										"id": 472,
										"keyType": {
											"id": 469,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2687:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2679:25:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$459_storage_$",
											"typeString": "mapping(address => struct Stakable.Stake)"
										},
										"valueType": {
											"id": 471,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 470,
												"name": "Stake",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 459,
												"src": "2698:5:2"
											},
											"referencedDeclaration": 459,
											"src": "2698:5:2",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
												"typeString": "struct Stakable.Stake"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "2733:124:2",
										"text": " @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
									},
									"id": 484,
									"name": "Staked",
									"nameLocation": "2868:6:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2900:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "2884:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 475,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2884:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 478,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2922:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "2914:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2914:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2946:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "2938:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2938:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 482,
												"indexed": false,
												"mutability": "mutable",
												"name": "releaseTime",
												"nameLocation": "2973:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "2965:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2874:116:2"
									},
									"src": "2862:129:2"
								},
								{
									"anonymous": false,
									"id": 488,
									"name": "PenaltyChanged",
									"nameLocation": "3003:14:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3026:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "3018:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3018:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3017:16:2"
									},
									"src": "2997:37:2"
								},
								{
									"anonymous": false,
									"id": 492,
									"name": "AirdropChanged",
									"nameLocation": "3045:14:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 490,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3068:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "3060:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 489,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3060:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3059:16:2"
									},
									"src": "3039:37:2"
								},
								{
									"body": {
										"id": 504,
										"nodeType": "Block",
										"src": "3220:159:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 495,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3294:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 496,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3294:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 497,
														"name": "_talax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 420,
														"src": "3308:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3294:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 503,
												"nodeType": "IfStatement",
												"src": "3290:83:2",
												"trueBody": {
													"id": 502,
													"nodeType": "Block",
													"src": "3316:57:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 499,
																	"name": "Function__notAuthorized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 358,
																	"src": "3337:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 500,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3337:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 501,
															"nodeType": "RevertStatement",
															"src": "3330:32:2"
														}
													]
												}
											}
										]
									},
									"id": 505,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isTalax",
									"nameLocation": "3196:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 493,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3203:2:2"
									},
									"returnParameters": {
										"id": 494,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3220:0:2"
									},
									"scope": 1316,
									"src": "3187:192:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 511,
										"nodeType": "Block",
										"src": "3406:37:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 507,
														"name": "isTalax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 505,
														"src": "3416:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 508,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3416:9:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 509,
												"nodeType": "ExpressionStatement",
												"src": "3416:9:2"
											},
											{
												"id": 510,
												"nodeType": "PlaceholderStatement",
												"src": "3435:1:2"
											}
										]
									},
									"id": 512,
									"name": "onlyTalax",
									"nameLocation": "3394:9:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3403:2:2"
									},
									"src": "3385:58:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 524,
										"nodeType": "Block",
										"src": "3482:159:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 518,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 515,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3556:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 516,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3556:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 517,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 422,
														"src": "3570:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3556:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 523,
												"nodeType": "IfStatement",
												"src": "3552:83:2",
												"trueBody": {
													"id": 522,
													"nodeType": "Block",
													"src": "3578:57:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 519,
																	"name": "Function__notAuthorized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 358,
																	"src": "3599:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 520,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3599:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 521,
															"nodeType": "RevertStatement",
															"src": "3592:32:2"
														}
													]
												}
											}
										]
									},
									"id": 525,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isOwner",
									"nameLocation": "3458:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3465:2:2"
									},
									"returnParameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3482:0:2"
									},
									"scope": 1316,
									"src": "3449:192:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 531,
										"nodeType": "Block",
										"src": "3668:37:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 527,
														"name": "isOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 525,
														"src": "3678:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3678:9:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 529,
												"nodeType": "ExpressionStatement",
												"src": "3678:9:2"
											},
											{
												"id": 530,
												"nodeType": "PlaceholderStatement",
												"src": "3697:1:2"
											}
										]
									},
									"id": 532,
									"name": "onlyOwner",
									"nameLocation": "3656:9:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3665:2:2"
									},
									"src": "3647:58:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 547,
										"nodeType": "Block",
										"src": "3745:197:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 535,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 414,
																"src": "3842:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$397_storage_$",
																	"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																}
															},
															"id": 538,
															"indexExpression": {
																"expression": {
																	"id": 536,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3849:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 537,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3849:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3842:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$397_storage",
																"typeString": "struct Stakable.Voter storage ref"
															}
														},
														"id": 539,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 392,
														"src": "3842:30:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 540,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3876:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3842:39:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 546,
												"nodeType": "IfStatement",
												"src": "3838:98:2",
												"trueBody": {
													"id": 545,
													"nodeType": "Block",
													"src": "3883:53:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 542,
																	"name": "Function__notAVoter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 360,
																	"src": "3904:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 543,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3904:21:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 544,
															"nodeType": "RevertStatement",
															"src": "3897:28:2"
														}
													]
												}
											}
										]
									},
									"id": 548,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isVoter",
									"nameLocation": "3720:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3728:2:2"
									},
									"returnParameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3745:0:2"
									},
									"scope": 1316,
									"src": "3711:231:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "3967:38:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 550,
														"name": "_isVoter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 548,
														"src": "3977:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3977:10:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 552,
												"nodeType": "ExpressionStatement",
												"src": "3977:10:2"
											},
											{
												"id": 553,
												"nodeType": "PlaceholderStatement",
												"src": "3997:1:2"
											}
										]
									},
									"id": 555,
									"name": "isVoter",
									"nameLocation": "3957:7:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 549,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3964:2:2"
									},
									"src": "3948:57:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 565,
										"nodeType": "Block",
										"src": "4055:160:2",
										"statements": [
											{
												"condition": {
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4131:14:2",
													"subExpression": {
														"id": 558,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 405,
														"src": "4132:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 564,
												"nodeType": "IfStatement",
												"src": "4127:82:2",
												"trueBody": {
													"id": 563,
													"nodeType": "Block",
													"src": "4147:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 560,
																	"name": "Function__votingNotAvailable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "4168:28:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4168:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 562,
															"nodeType": "RevertStatement",
															"src": "4161:37:2"
														}
													]
												}
											}
										]
									},
									"id": 566,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkVotingStatus",
									"nameLocation": "4020:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4038:2:2"
									},
									"returnParameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4055:0:2"
									},
									"scope": 1316,
									"src": "4011:204:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 572,
										"nodeType": "Block",
										"src": "4249:48:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 568,
														"name": "_checkVotingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 566,
														"src": "4259:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4259:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 570,
												"nodeType": "ExpressionStatement",
												"src": "4259:20:2"
											},
											{
												"id": 571,
												"nodeType": "PlaceholderStatement",
												"src": "4289:1:2"
											}
										]
									},
									"id": 573,
									"name": "votingStatusTrue",
									"nameLocation": "4230:16:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4246:2:2"
									},
									"src": "4221:76:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 584,
										"nodeType": "Block",
										"src": "4471:31:2",
										"statements": [
											{
												"expression": {
													"id": 582,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 580,
														"name": "_talax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 420,
														"src": "4481:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 581,
														"name": "talax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 575,
														"src": "4490:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4481:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 583,
												"nodeType": "ExpressionStatement",
												"src": "4481:14:2"
											}
										]
									},
									"functionSelector": "1d77b00b",
									"id": 585,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 578,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 577,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 532,
												"src": "4461:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "4461:9:2"
										}
									],
									"name": "changeTalaxAddress",
									"nameLocation": "4418:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "talax",
												"nameLocation": "4445:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "4437:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4437:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4436:15:2"
									},
									"returnParameters": {
										"id": 579,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4471:0:2"
									},
									"scope": 1316,
									"src": "4409:93:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 663,
										"nodeType": "Block",
										"src": "4869:1018:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 601,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 590,
														"src": "4993:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "30",
														"id": 602,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5003:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4993:11:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 608,
												"nodeType": "IfStatement",
												"src": "4989:78:2",
												"trueBody": {
													"id": 607,
													"nodeType": "Block",
													"src": "5006:61:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 604,
																	"name": "Staking__cannotStakeNothing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 365,
																	"src": "5027:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 605,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5027:29:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 606,
															"nodeType": "RevertStatement",
															"src": "5020:36:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 609,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 473,
																"src": "5152:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$459_storage_$",
																	"typeString": "mapping(address => struct Stakable.Stake storage ref)"
																}
															},
															"id": 611,
															"indexExpression": {
																"id": 610,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "5165:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5152:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_storage",
																"typeString": "struct Stakable.Stake storage ref"
															}
														},
														"id": 612,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 446,
														"src": "5152:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 613,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5181:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5152:30:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 619,
												"nodeType": "IfStatement",
												"src": "5148:91:2",
												"trueBody": {
													"id": 618,
													"nodeType": "Block",
													"src": "5184:55:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 615,
																	"name": "Staking__userIsStaker",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "5205:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 616,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5205:23:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 617,
															"nodeType": "RevertStatement",
															"src": "5198:30:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 620,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "5249:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 621,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5264:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "5249:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 623,
												"nodeType": "ExpressionStatement",
												"src": "5249:16:2"
											},
											{
												"expression": {
													"id": 629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 624,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 414,
																"src": "5275:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$397_storage_$",
																	"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																}
															},
															"id": 626,
															"indexExpression": {
																"id": 625,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "5282:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5275:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$397_storage",
																"typeString": "struct Stakable.Voter storage ref"
															}
														},
														"id": 627,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 392,
														"src": "5275:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 628,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5302:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "5275:31:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 630,
												"nodeType": "ExpressionStatement",
												"src": "5275:31:2"
											},
											{
												"assignments": [
													632
												],
												"declarations": [
													{
														"constant": false,
														"id": 632,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "5412:9:2",
														"nodeType": "VariableDeclaration",
														"scope": 663,
														"src": "5404:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 631,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5404:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 635,
												"initialValue": {
													"expression": {
														"id": 633,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "5424:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "5424:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5404:35:2"
											},
											{
												"expression": {
													"id": 651,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 636,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 473,
															"src": "5568:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$459_storage_$",
																"typeString": "mapping(address => struct Stakable.Stake storage ref)"
															}
														},
														"id": 638,
														"indexExpression": {
															"id": 637,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "5581:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5568:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$459_storage",
															"typeString": "struct Stakable.Stake storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 640,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 590,
																"src": "5608:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 641,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 632,
																"src": "5628:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 642,
																"name": "rewardRate",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 594,
																"src": "5651:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 645,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 643,
																			"name": "stakePeriod",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 592,
																			"src": "5676:11:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 644,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 632,
																			"src": "5690:9:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5676:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 646,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5675:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 647,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5714:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 648,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5729:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 649,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5744:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 639,
															"name": "Stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 459,
															"src": "5589:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Stake_$459_storage_ptr_$",
																"typeString": "type(struct Stakable.Stake storage pointer)"
															}
														},
														"id": 650,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5589:166:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
															"typeString": "struct Stakable.Stake memory"
														}
													},
													"src": "5568:187:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$459_storage",
														"typeString": "struct Stakable.Stake storage ref"
													}
												},
												"id": 652,
												"nodeType": "ExpressionStatement",
												"src": "5568:187:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 654,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "5829:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 655,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "5835:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 656,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 632,
															"src": "5843:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 659,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 657,
																		"name": "stakePeriod",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 592,
																		"src": "5855:11:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 658,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 632,
																		"src": "5869:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5855:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 660,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5854:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 653,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 484,
														"src": "5822:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5822:58:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 662,
												"nodeType": "EmitStatement",
												"src": "5817:63:2"
											}
										]
									},
									"documentation": {
										"id": 586,
										"nodeType": "StructuredDocumentation",
										"src": "4508:200:2",
										"text": " @notice\n _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n StakeID"
									},
									"functionSelector": "f93d4f8a",
									"id": 664,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 597,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 596,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "4846:12:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "4846:12:2"
										},
										{
											"id": 599,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 598,
												"name": "onlyTalax",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 512,
												"src": "4859:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "4859:9:2"
										}
									],
									"name": "stake",
									"nameLocation": "4722:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 588,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "4745:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "4737:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 587,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4737:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4767:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "4759:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4759:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "stakePeriod",
												"nameLocation": "4791:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "4783:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 591,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4783:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "rewardRate",
												"nameLocation": "4820:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "4812:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 593,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4812:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4727:109:2"
									},
									"returnParameters": {
										"id": 600,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4869:0:2"
									},
									"scope": 1316,
									"src": "4713:1174:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 687,
										"nodeType": "Block",
										"src": "5954:245:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 671,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 666,
														"src": "6042:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3330",
														"id": 672,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6051:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_30_by_1",
															"typeString": "int_const 30"
														},
														"value": "30"
													},
													"src": "6042:11:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 678,
												"nodeType": "IfStatement",
												"src": "6038:81:2",
												"trueBody": {
													"id": 677,
													"nodeType": "Block",
													"src": "6055:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 674,
																	"name": "Staking__penaltyExceed3Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 369,
																	"src": "6076:30:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 675,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6076:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 676,
															"nodeType": "RevertStatement",
															"src": "6069:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 679,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 399,
														"src": "6128:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 680,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 666,
														"src": "6149:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6128:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 682,
												"nodeType": "ExpressionStatement",
												"src": "6128:27:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 684,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 666,
															"src": "6185:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 683,
														"name": "PenaltyChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 488,
														"src": "6170:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 685,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6170:22:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 686,
												"nodeType": "EmitStatement",
												"src": "6165:27:2"
											}
										]
									},
									"functionSelector": "8c63f97f",
									"id": 688,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 669,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 668,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 532,
												"src": "5944:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "5944:9:2"
										}
									],
									"name": "changePenaltyFee",
									"nameLocation": "5902:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5927:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "5919:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 665,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5919:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5918:16:2"
									},
									"returnParameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5954:0:2"
									},
									"scope": 1316,
									"src": "5893:306:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 708,
										"nodeType": "Block",
										"src": "6315:239:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 703,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 700,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 697,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "6427:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 698,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "6427:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 699,
																			"name": "since",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 690,
																			"src": "6445:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6427:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 701,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6426:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"hexValue": "31653234",
																"id": 702,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6454:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000000000"
																},
																"value": "1e24"
															},
															"src": "6426:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "333635",
															"id": 704,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6476:8:2",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															"value": "365"
														},
														{
															"hexValue": "4572726f722063616e6e6f74206469766964652074696d657374616d70",
															"id": 705,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6502:31:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1ba63f68453a968478e961499d34536225d92ab3a3ce82e5cf26f86ae6edd90d",
																"typeString": "literal_string \"Error cannot divide timestamp\""
															},
															"value": "Error cannot divide timestamp"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															{
																"typeIdentifier": "t_stringliteral_1ba63f68453a968478e961499d34536225d92ab3a3ce82e5cf26f86ae6edd90d",
																"typeString": "literal_string \"Error cannot divide timestamp\""
															}
														],
														"expression": {
															"id": 695,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "6396:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 696,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 325,
														"src": "6396:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6396:151:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 694,
												"id": 707,
												"nodeType": "Return",
												"src": "6377:170:2"
											}
										]
									},
									"id": 709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingDuration",
									"nameLocation": "6214:25:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "since",
												"nameLocation": "6248:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "6240:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 689,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6240:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6239:15:2"
									},
									"returnParameters": {
										"id": 694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "6302:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 692,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6301:9:2"
									},
									"scope": 1316,
									"src": "6205:349:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 739,
										"nodeType": "Block",
										"src": "6676:321:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 717,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 712,
															"src": "6690:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 718,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 446,
														"src": "6690:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 719,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6711:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6690:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 724,
												"nodeType": "IfStatement",
												"src": "6686:61:2",
												"trueBody": {
													"id": 723,
													"nodeType": "Block",
													"src": "6714:33:2",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 721,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6735:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 716,
															"id": 722,
															"nodeType": "Return",
															"src": "6728:8:2"
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 737,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 729,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 725,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 712,
																			"src": "6864:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 726,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 446,
																		"src": "6864:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"expression": {
																			"id": 727,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 712,
																			"src": "6900:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 728,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardAPY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 450,
																		"src": "6900:20:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6864:56:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 731,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 712,
																				"src": "6965:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																					"typeString": "struct Stakable.Stake memory"
																				}
																			},
																			"id": 732,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "since",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 448,
																			"src": "6965:16:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 730,
																		"name": "_calculateStakingDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 709,
																		"src": "6939:25:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 733,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6939:43:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6864:118:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 735,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6863:120:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653236",
														"id": 736,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6986:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000000000"
														},
														"value": "1e26"
													},
													"src": "6863:127:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 716,
												"id": 738,
												"nodeType": "Return",
												"src": "6844:146:2"
											}
										]
									},
									"id": 740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakeReward",
									"nameLocation": "6569:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 713,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "user_stake",
												"nameLocation": "6604:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "6591:23:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
													"typeString": "struct Stakable.Stake"
												},
												"typeName": {
													"id": 711,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 710,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 459,
														"src": "6591:5:2"
													},
													"referencedDeclaration": 459,
													"src": "6591:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
														"typeString": "struct Stakable.Stake"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6590:25:2"
									},
									"returnParameters": {
										"id": 716,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "6663:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 714,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6663:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6662:9:2"
									},
									"scope": 1316,
									"src": "6560:437:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 788,
										"nodeType": "Block",
										"src": "7142:382:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 751,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 742,
														"src": "7156:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 752,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7166:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7156:11:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 759,
												"nodeType": "IfStatement",
												"src": "7152:55:2",
												"trueBody": {
													"id": 758,
													"nodeType": "Block",
													"src": "7169:38:2",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"hexValue": "30",
																		"id": 754,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7191:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	{
																		"hexValue": "30",
																		"id": 755,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7194:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 756,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7190:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$",
																	"typeString": "tuple(int_const 0,int_const 0)"
																}
															},
															"functionReturnParameters": 750,
															"id": 757,
															"nodeType": "Return",
															"src": "7183:13:2"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"arguments": [
																{
																	"id": 762,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 742,
																	"src": "7267:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 767,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 742,
																					"src": "7317:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 768,
																					"name": "stakingPenaltyRate",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 399,
																					"src": "7325:18:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 765,
																					"name": "SafeMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 351,
																					"src": "7304:8:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																						"typeString": "type(library SafeMath)"
																					}
																				},
																				"id": 766,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "mul",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 245,
																				"src": "7304:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 769,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7304:40:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"hexValue": "31303030",
																			"id": 770,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7346:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			}
																		],
																		"expression": {
																			"id": 763,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 351,
																			"src": "7291:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 764,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "div",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 260,
																		"src": "7291:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 771,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7291:60:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 760,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 351,
																	"src": "7237:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 761,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 230,
																"src": "7237:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 772,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7237:128:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 775,
																	"name": "reward",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 744,
																	"src": "7409:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 780,
																					"name": "reward",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 744,
																					"src": "7459:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 781,
																					"name": "stakingPenaltyRate",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 399,
																					"src": "7467:18:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 778,
																					"name": "SafeMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 351,
																					"src": "7446:8:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																						"typeString": "type(library SafeMath)"
																					}
																				},
																				"id": 779,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "mul",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 245,
																				"src": "7446:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 782,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7446:40:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"hexValue": "31303030",
																			"id": 783,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7488:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			}
																		],
																		"expression": {
																			"id": 776,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 351,
																			"src": "7433:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 777,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "div",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 260,
																		"src": "7433:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 784,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7433:60:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 773,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 351,
																	"src": "7379:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 774,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 230,
																"src": "7379:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 785,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7379:128:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 786,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7223:294:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 750,
												"id": 787,
												"nodeType": "Return",
												"src": "7216:301:2"
											}
										]
									},
									"id": 789,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingWithPenalty",
									"nameLocation": "7012:28:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7049:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "7041:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 741,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7041:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "7065:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "7057:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7057:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7040:32:2"
									},
									"returnParameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "7120:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 746,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7120:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "7129:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 748,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7129:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7119:18:2"
									},
									"scope": 1316,
									"src": "7003:521:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 849,
										"nodeType": "Block",
										"src": "8002:593:2",
										"statements": [
											{
												"assignments": [
													805
												],
												"declarations": [
													{
														"constant": false,
														"id": 805,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "8133:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 849,
														"src": "8120:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
															"typeString": "struct Stakable.Stake"
														},
														"typeName": {
															"id": 804,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 803,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 459,
																"src": "8120:5:2"
															},
															"referencedDeclaration": 459,
															"src": "8120:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
																"typeString": "struct Stakable.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 809,
												"initialValue": {
													"baseExpression": {
														"id": 806,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 473,
														"src": "8146:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$459_storage_$",
															"typeString": "mapping(address => struct Stakable.Stake storage ref)"
														}
													},
													"id": 808,
													"indexExpression": {
														"id": 807,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 792,
														"src": "8159:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8146:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$459_storage",
														"typeString": "struct Stakable.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8120:44:2"
											},
											{
												"expression": {
													"id": 813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "8175:25:2",
													"subExpression": {
														"baseExpression": {
															"id": 810,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 473,
															"src": "8182:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$459_storage_$",
																"typeString": "mapping(address => struct Stakable.Stake storage ref)"
															}
														},
														"id": 812,
														"indexExpression": {
															"id": 811,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 792,
															"src": "8195:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8182:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$459_storage",
															"typeString": "struct Stakable.Stake storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 814,
												"nodeType": "ExpressionStatement",
												"src": "8175:25:2"
											},
											{
												"expression": {
													"id": 817,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 815,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "8210:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 816,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8225:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "8210:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 818,
												"nodeType": "ExpressionStatement",
												"src": "8210:16:2"
											},
											{
												"expression": {
													"id": 825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "8236:36:2",
													"subExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 819,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 414,
																	"src": "8243:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$397_storage_$",
																		"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																	}
																},
																"id": 821,
																"indexExpression": {
																	"id": 820,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 792,
																	"src": "8250:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8243:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$397_storage",
																	"typeString": "struct Stakable.Voter storage ref"
																}
															},
															"id": 822,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 396,
															"src": "8243:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 824,
														"indexExpression": {
															"id": 823,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "8262:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8243:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 826,
												"nodeType": "ExpressionStatement",
												"src": "8236:36:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 831,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 827,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 805,
															"src": "8287:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 828,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 452,
														"src": "8287:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 829,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "8312:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 830,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "8312:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8287:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 841,
												"nodeType": "IfStatement",
												"src": "8283:234:2",
												"trueBody": {
													"id": 840,
													"nodeType": "Block",
													"src": "8329:188:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 833,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 805,
																			"src": "8416:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 834,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 446,
																		"src": "8416:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 836,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 805,
																				"src": "8477:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																					"typeString": "struct Stakable.Stake memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																					"typeString": "struct Stakable.Stake memory"
																				}
																			],
																			"id": 835,
																			"name": "_calculateStakeReward",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 740,
																			"src": "8455:21:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$459_memory_ptr_$returns$_t_uint256_$",
																				"typeString": "function (struct Stakable.Stake memory) view returns (uint256)"
																			}
																		},
																		"id": 837,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8455:33:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 832,
																	"name": "_calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 789,
																	"src": "8366:28:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 838,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8366:140:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"functionReturnParameters": 802,
															"id": 839,
															"nodeType": "Return",
															"src": "8343:163:2"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"expression": {
																"id": 842,
																"name": "user_stake",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 805,
																"src": "8535:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																	"typeString": "struct Stakable.Stake memory"
																}
															},
															"id": 843,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 446,
															"src": "8535:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 845,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 805,
																	"src": "8576:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																		"typeString": "struct Stakable.Stake memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																		"typeString": "struct Stakable.Stake memory"
																	}
																],
																"id": 844,
																"name": "_calculateStakeReward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 740,
																"src": "8554:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$459_memory_ptr_$returns$_t_uint256_$",
																	"typeString": "function (struct Stakable.Stake memory) view returns (uint256)"
																}
															},
															"id": 846,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8554:33:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 847,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "8534:54:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 802,
												"id": 848,
												"nodeType": "Return",
												"src": "8527:61:2"
											}
										]
									},
									"documentation": {
										"id": 790,
										"nodeType": "StructuredDocumentation",
										"src": "7530:335:2",
										"text": " @notice\n withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n Notice index of the stake is the users stake counter, starting at 0 for the first stake\n Will return the amount to MINT onto the account\n Will also _calculateStakeReward and reset timer"
									},
									"functionSelector": "c23a5cea",
									"id": 850,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 795,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 794,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "7932:12:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "7932:12:2"
										},
										{
											"id": 797,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 796,
												"name": "onlyTalax",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 512,
												"src": "7953:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "7953:9:2"
										}
									],
									"name": "withdrawStake",
									"nameLocation": "7879:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "7901:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "7893:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 791,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7893:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7892:14:2"
									},
									"returnParameters": {
										"id": 802,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "7980:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7980:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 801,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "7989:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 800,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7989:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7979:18:2"
									},
									"scope": 1316,
									"src": "7870:725:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 970,
										"nodeType": "Block",
										"src": "8667:1061:2",
										"statements": [
											{
												"assignments": [
													858
												],
												"declarations": [
													{
														"constant": false,
														"id": 858,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "8690:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 970,
														"src": "8677:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
															"typeString": "struct Stakable.Stake"
														},
														"typeName": {
															"id": 857,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 856,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 459,
																"src": "8677:5:2"
															},
															"referencedDeclaration": 459,
															"src": "8677:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
																"typeString": "struct Stakable.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 863,
												"initialValue": {
													"baseExpression": {
														"id": 859,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 473,
														"src": "8703:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$459_storage_$",
															"typeString": "mapping(address => struct Stakable.Stake storage ref)"
														}
													},
													"id": 862,
													"indexExpression": {
														"expression": {
															"id": 860,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "8716:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 861,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "8716:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8703:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$459_storage",
														"typeString": "struct Stakable.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8677:50:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 867,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 864,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "8802:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 865,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 446,
														"src": "8802:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "30",
														"id": 866,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8823:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8802:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 872,
												"nodeType": "IfStatement",
												"src": "8798:85:2",
												"trueBody": {
													"id": 871,
													"nodeType": "Block",
													"src": "8826:57:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 868,
																	"name": "Staking__noStakingFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 373,
																	"src": "8847:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 869,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8847:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 870,
															"nodeType": "RevertStatement",
															"src": "8840:32:2"
														}
													]
												}
											},
											{
												"assignments": [
													875
												],
												"declarations": [
													{
														"constant": false,
														"id": 875,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "8914:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 970,
														"src": "8892:29:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$467_memory_ptr",
															"typeString": "struct Stakable.StakingSummary"
														},
														"typeName": {
															"id": 874,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 873,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 467,
																"src": "8892:14:2"
															},
															"referencedDeclaration": 467,
															"src": "8892:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$467_storage_ptr",
																"typeString": "struct Stakable.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 881,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 877,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8939:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 878,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8942:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 879,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "8945:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														],
														"id": 876,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 467,
														"src": "8924:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$467_storage_ptr_$",
															"typeString": "type(struct Stakable.StakingSummary storage pointer)"
														}
													},
													"id": 880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8924:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$467_memory_ptr",
														"typeString": "struct Stakable.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8892:64:2"
											},
											{
												"assignments": [
													883
												],
												"declarations": [
													{
														"constant": false,
														"id": 883,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "8975:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 970,
														"src": "8967:14:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 882,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8967:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 887,
												"initialValue": {
													"arguments": [
														{
															"id": 885,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "9006:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														],
														"id": 884,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "8984:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$459_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Stakable.Stake memory) view returns (uint256)"
														}
													},
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8984:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8967:50:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 893,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 888,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 875,
																"src": "9032:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$467_memory_ptr",
																	"typeString": "struct Stakable.StakingSummary memory"
																}
															},
															"id": 889,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 466,
															"src": "9032:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 890,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 452,
														"src": "9032:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 891,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "9060:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 892,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "9060:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9032:43:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 920,
												"nodeType": "IfStatement",
												"src": "9028:316:2",
												"trueBody": {
													"id": 919,
													"nodeType": "Block",
													"src": "9077:267:2",
													"statements": [
														{
															"expression": {
																"id": 917,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 894,
																		"name": "summary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 875,
																		"src": "9091:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StakingSummary_$467_memory_ptr",
																			"typeString": "struct Stakable.StakingSummary memory"
																		}
																	},
																	"id": 896,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "penalty",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 463,
																	"src": "9091:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 916,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"expression": {
																							"id": 901,
																							"name": "user_stake",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 858,
																							"src": "9172:10:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																								"typeString": "struct Stakable.Stake memory"
																							}
																						},
																						"id": 902,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "amount",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 446,
																						"src": "9172:17:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					{
																						"id": 903,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 399,
																						"src": "9191:18:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"id": 899,
																						"name": "SafeMath",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 351,
																						"src": "9159:8:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																							"typeString": "type(library SafeMath)"
																						}
																					},
																					"id": 900,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "mul",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 245,
																					"src": "9159:12:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 904,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "9159:51:2",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "31303030",
																				"id": 905,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9232:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1000_by_1",
																					"typeString": "int_const 1000"
																				},
																				"value": "1000"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_rational_1000_by_1",
																					"typeString": "int_const 1000"
																				}
																			],
																			"expression": {
																				"id": 897,
																				"name": "SafeMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 351,
																				"src": "9125:8:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																					"typeString": "type(library SafeMath)"
																				}
																			},
																			"id": 898,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "div",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 260,
																			"src": "9125:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 906,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9125:129:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 911,
																						"name": "reward",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 883,
																						"src": "9299:6:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					{
																						"id": 912,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 399,
																						"src": "9307:18:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"id": 909,
																						"name": "SafeMath",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 351,
																						"src": "9286:8:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																							"typeString": "type(library SafeMath)"
																						}
																					},
																					"id": 910,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "mul",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 245,
																					"src": "9286:12:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 913,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "9286:40:2",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "31303030",
																				"id": 914,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9328:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1000_by_1",
																					"typeString": "int_const 1000"
																				},
																				"value": "1000"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_rational_1000_by_1",
																					"typeString": "int_const 1000"
																				}
																			],
																			"expression": {
																				"id": 907,
																				"name": "SafeMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 351,
																				"src": "9273:8:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																					"typeString": "type(library SafeMath)"
																				}
																			},
																			"id": 908,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "div",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 260,
																			"src": "9273:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 915,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9273:60:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "9125:208:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9091:242:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 918,
															"nodeType": "ExpressionStatement",
															"src": "9091:242:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 926,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 922,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 858,
																	"src": "9373:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																		"typeString": "struct Stakable.Stake memory"
																	}
																},
																"id": 923,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "latestClaimDrop",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 458,
																"src": "9373:26:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 921,
															"name": "_calculateWeek",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1023,
															"src": "9358:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256) view returns (uint256)"
															}
														},
														"id": 924,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9358:42:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 925,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9403:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "9358:46:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 951,
													"nodeType": "Block",
													"src": "9545:59:2",
													"statements": [
														{
															"expression": {
																"id": 949,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 943,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 875,
																			"src": "9559:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$467_memory_ptr",
																				"typeString": "struct Stakable.StakingSummary memory"
																			}
																		},
																		"id": 946,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 466,
																		"src": "9559:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																			"typeString": "struct Stakable.Stake memory"
																		}
																	},
																	"id": 947,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 456,
																	"src": "9559:30:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 948,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9592:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9559:34:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 950,
															"nodeType": "ExpressionStatement",
															"src": "9559:34:2"
														}
													]
												},
												"id": 952,
												"nodeType": "IfStatement",
												"src": "9354:250:2",
												"trueBody": {
													"id": 942,
													"nodeType": "Block",
													"src": "9406:133:2",
													"statements": [
														{
															"assignments": [
																928
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 928,
																	"mutability": "mutable",
																	"name": "airdrop",
																	"nameLocation": "9428:7:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 942,
																	"src": "9420:15:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 927,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "9420:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 933,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 930,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 858,
																			"src": "9456:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 931,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 446,
																		"src": "9456:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 929,
																	"name": "_calculateAirdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1041,
																	"src": "9438:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 932,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9438:36:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "9420:54:2"
														},
														{
															"expression": {
																"id": 940,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 934,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 875,
																			"src": "9488:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$467_memory_ptr",
																				"typeString": "struct Stakable.StakingSummary memory"
																			}
																		},
																		"id": 937,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 466,
																		"src": "9488:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																			"typeString": "struct Stakable.Stake memory"
																		}
																	},
																	"id": 938,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 456,
																	"src": "9488:30:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 939,
																	"name": "airdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 928,
																	"src": "9521:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9488:40:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 941,
															"nodeType": "ExpressionStatement",
															"src": "9488:40:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 959,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"expression": {
																"id": 953,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 875,
																"src": "9614:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$467_memory_ptr",
																	"typeString": "struct Stakable.StakingSummary memory"
																}
															},
															"id": 956,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 466,
															"src": "9614:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 957,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimable",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 454,
														"src": "9614:23:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 958,
														"name": "reward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 883,
														"src": "9640:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9614:32:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 960,
												"nodeType": "ExpressionStatement",
												"src": "9614:32:2"
											},
											{
												"expression": {
													"id": 966,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 961,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "9656:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$467_memory_ptr",
																"typeString": "struct Stakable.StakingSummary memory"
															}
														},
														"id": 963,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 461,
														"src": "9656:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 964,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "9679:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 965,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 446,
														"src": "9679:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9656:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 967,
												"nodeType": "ExpressionStatement",
												"src": "9656:40:2"
											},
											{
												"expression": {
													"id": 968,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 875,
													"src": "9714:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$467_memory_ptr",
														"typeString": "struct Stakable.StakingSummary memory"
													}
												},
												"functionReturnParameters": 855,
												"id": 969,
												"nodeType": "Return",
												"src": "9707:14:2"
											}
										]
									},
									"functionSelector": "10486b6a",
									"id": 971,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasStake",
									"nameLocation": "8610:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8618:2:2"
									},
									"returnParameters": {
										"id": 855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 854,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "8644:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$467_memory_ptr",
													"typeString": "struct Stakable.StakingSummary"
												},
												"typeName": {
													"id": 853,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 852,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 467,
														"src": "8644:14:2"
													},
													"referencedDeclaration": 467,
													"src": "8644:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$467_storage_ptr",
														"typeString": "struct Stakable.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8643:23:2"
									},
									"scope": 1316,
									"src": "8601:1127:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 981,
										"nodeType": "Block",
										"src": "9888:47:2",
										"statements": [
											{
												"expression": {
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 976,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 403,
														"src": "9898:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 977,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "9913:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 978,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "9913:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9898:30:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 980,
												"nodeType": "ExpressionStatement",
												"src": "9898:30:2"
											}
										]
									},
									"functionSelector": "71e3db87",
									"id": 982,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 974,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 973,
												"name": "onlyTalax",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 512,
												"src": "9878:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "9878:9:2"
										}
									],
									"name": "startAirdropSince",
									"nameLocation": "9849:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9866:2:2"
									},
									"returnParameters": {
										"id": 975,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9888:0:2"
									},
									"scope": 1316,
									"src": "9840:95:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1005,
										"nodeType": "Block",
										"src": "10009:166:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 991,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 989,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 984,
														"src": "10023:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "323030",
														"id": 990,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10032:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_200_by_1",
															"typeString": "int_const 200"
														},
														"value": "200"
													},
													"src": "10023:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 996,
												"nodeType": "IfStatement",
												"src": "10019:83:2",
												"trueBody": {
													"id": 995,
													"nodeType": "Block",
													"src": "10037:65:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 992,
																	"name": "Staking__airdropExceed20Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 371,
																	"src": "10058:31:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 993,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10058:33:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 994,
															"nodeType": "RevertStatement",
															"src": "10051:40:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 999,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 997,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 401,
														"src": "10111:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 998,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 984,
														"src": "10125:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10111:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1000,
												"nodeType": "ExpressionStatement",
												"src": "10111:20:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1002,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 984,
															"src": "10161:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1001,
														"name": "AirdropChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 492,
														"src": "10146:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1003,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10146:22:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1004,
												"nodeType": "EmitStatement",
												"src": "10141:27:2"
											}
										]
									},
									"functionSelector": "d5dbdf1b",
									"id": 1006,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 987,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 986,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 532,
												"src": "9999:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "9999:9:2"
										}
									],
									"name": "changeAirdropPercentage",
									"nameLocation": "9950:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 985,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 984,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9982:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "9974:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 983,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9974:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9973:16:2"
									},
									"returnParameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10009:0:2"
									},
									"scope": 1316,
									"src": "9941:234:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1022,
										"nodeType": "Block",
										"src": "10252:61:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "37",
															"id": 1019,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10299:6:2",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_604800_by_1",
																"typeString": "int_const 604800"
															},
															"value": "7"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_604800_by_1",
																"typeString": "int_const 604800"
															}
														],
														"expression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1016,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1013,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "10270:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 1014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "10270:15:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1015,
																		"name": "input",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1008,
																		"src": "10288:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10270:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1017,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "10269:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1018,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 260,
														"src": "10269:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10269:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1012,
												"id": 1021,
												"nodeType": "Return",
												"src": "10262:44:2"
											}
										]
									},
									"id": 1023,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateWeek",
									"nameLocation": "10190:14:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "input",
												"nameLocation": "10213:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "10205:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1007,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10205:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10204:15:2"
									},
									"returnParameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "10243:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10243:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10242:9:2"
									},
									"scope": 1316,
									"src": "10181:132:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1040,
										"nodeType": "Block",
										"src": "10427:71:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1038,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1035,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1032,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1030,
																				"name": "stakeAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1025,
																				"src": "10446:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1031,
																				"name": "airdropRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 401,
																				"src": "10460:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10446:25:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1033,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10445:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 1034,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10475:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "10445:34:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1036,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "10444:36:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3532",
														"id": 1037,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10483:8:2",
														"subdenomination": "weeks",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31449600_by_1",
															"typeString": "int_const 31449600"
														},
														"value": "52"
													},
													"src": "10444:47:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1029,
												"id": 1039,
												"nodeType": "Return",
												"src": "10437:54:2"
											}
										]
									},
									"id": 1041,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateAirdrop",
									"nameLocation": "10328:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1025,
												"mutability": "mutable",
												"name": "stakeAmount",
												"nameLocation": "10354:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 1041,
												"src": "10346:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1024,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10346:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10345:21:2"
									},
									"returnParameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1041,
												"src": "10414:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1027,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10414:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10413:9:2"
									},
									"scope": 1316,
									"src": "10319:179:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1095,
										"nodeType": "Block",
										"src": "10577:474:2",
										"statements": [
											{
												"assignments": [
													1052
												],
												"declarations": [
													{
														"constant": false,
														"id": 1052,
														"mutability": "mutable",
														"name": "staker",
														"nameLocation": "10653:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 1095,
														"src": "10639:20:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
															"typeString": "struct Stakable.Stake"
														},
														"typeName": {
															"id": 1051,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1050,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 459,
																"src": "10639:5:2"
															},
															"referencedDeclaration": 459,
															"src": "10639:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
																"typeString": "struct Stakable.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1056,
												"initialValue": {
													"baseExpression": {
														"id": 1053,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 473,
														"src": "10662:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$459_storage_$",
															"typeString": "mapping(address => struct Stakable.Stake storage ref)"
														}
													},
													"id": 1055,
													"indexExpression": {
														"id": 1054,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1043,
														"src": "10675:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10662:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$459_storage",
														"typeString": "struct Stakable.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10639:41:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1060,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1057,
															"name": "staker",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1052,
															"src": "10695:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
																"typeString": "struct Stakable.Stake storage pointer"
															}
														},
														"id": 1058,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 446,
														"src": "10695:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1059,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10711:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10695:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1093,
													"nodeType": "Block",
													"src": "11012:33:2",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1091,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11033:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1049,
															"id": 1092,
															"nodeType": "Return",
															"src": "11026:8:2"
														}
													]
												},
												"id": 1094,
												"nodeType": "IfStatement",
												"src": "10691:354:2",
												"trueBody": {
													"id": 1090,
													"nodeType": "Block",
													"src": "10714:292:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1066,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1062,
																				"name": "staker",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1052,
																				"src": "10747:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
																					"typeString": "struct Stakable.Stake storage pointer"
																				}
																			},
																			"id": 1063,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "latestClaimDrop",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 458,
																			"src": "10747:22:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1061,
																		"name": "_calculateWeek",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1023,
																		"src": "10732:14:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1064,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10732:38:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1065,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10774:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10732:43:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1071,
															"nodeType": "IfStatement",
															"src": "10728:118:2",
															"trueBody": {
																"id": 1070,
																"nodeType": "Block",
																"src": "10777:69:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1067,
																				"name": "Airdrop__claimableOnceAWeek",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 376,
																				"src": "10802:27:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1068,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10802:29:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1069,
																		"nodeType": "RevertStatement",
																		"src": "10795:36:2"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1076,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1072,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1052,
																		"src": "10860:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
																			"typeString": "struct Stakable.Stake storage pointer"
																		}
																	},
																	"id": 1074,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 456,
																	"src": "10860:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1075,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10886:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10860:27:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1077,
															"nodeType": "ExpressionStatement",
															"src": "10860:27:2"
														},
														{
															"expression": {
																"id": 1083,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1078,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1052,
																		"src": "10901:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
																			"typeString": "struct Stakable.Stake storage pointer"
																		}
																	},
																	"id": 1080,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "latestClaimDrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 458,
																	"src": "10901:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 1081,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "10926:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1082,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "10926:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10901:40:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1084,
															"nodeType": "ExpressionStatement",
															"src": "10901:40:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1086,
																			"name": "staker",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1052,
																			"src": "10981:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
																				"typeString": "struct Stakable.Stake storage pointer"
																			}
																		},
																		"id": 1087,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 446,
																		"src": "10981:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1085,
																	"name": "_calculateAirdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1041,
																	"src": "10963:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 1088,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10963:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1049,
															"id": 1089,
															"nodeType": "Return",
															"src": "10956:39:2"
														}
													]
												}
											}
										]
									},
									"functionSelector": "65f8c6c5",
									"id": 1096,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1046,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1045,
												"name": "onlyTalax",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 512,
												"src": "10549:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "10549:9:2"
										}
									],
									"name": "claimAirdrop",
									"nameLocation": "10513:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "10534:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "10526:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1042,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10526:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10525:14:2"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "10568:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1047,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10568:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10567:9:2"
									},
									"scope": 1316,
									"src": "10504:547:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1112,
										"nodeType": "Block",
										"src": "11119:102:2",
										"statements": [
											{
												"assignments": [
													1103
												],
												"declarations": [
													{
														"constant": false,
														"id": 1103,
														"mutability": "mutable",
														"name": "staker",
														"nameLocation": "11142:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 1112,
														"src": "11129:19:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
															"typeString": "struct Stakable.Stake"
														},
														"typeName": {
															"id": 1102,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1101,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 459,
																"src": "11129:5:2"
															},
															"referencedDeclaration": 459,
															"src": "11129:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$459_storage_ptr",
																"typeString": "struct Stakable.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1108,
												"initialValue": {
													"baseExpression": {
														"id": 1104,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 473,
														"src": "11151:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$459_storage_$",
															"typeString": "mapping(address => struct Stakable.Stake storage ref)"
														}
													},
													"id": 1107,
													"indexExpression": {
														"expression": {
															"id": 1105,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "11164:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1106,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "11164:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "11151:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$459_storage",
														"typeString": "struct Stakable.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11129:46:2"
											},
											{
												"expression": {
													"expression": {
														"id": 1109,
														"name": "staker",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1103,
														"src": "11192:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$459_memory_ptr",
															"typeString": "struct Stakable.Stake memory"
														}
													},
													"id": 1110,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "latestClaimDrop",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 458,
													"src": "11192:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1100,
												"id": 1111,
												"nodeType": "Return",
												"src": "11185:29:2"
											}
										]
									},
									"functionSelector": "69e4591a",
									"id": 1113,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLatestClaimDrop",
									"nameLocation": "11066:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11084:2:2"
									},
									"returnParameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1113,
												"src": "11110:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11110:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11109:9:2"
									},
									"scope": 1316,
									"src": "11057:164:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1134,
										"nodeType": "Block",
										"src": "11280:151:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1118,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 403,
														"src": "11294:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1119,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11310:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "11294:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1132,
													"nodeType": "Block",
													"src": "11392:33:2",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1130,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11413:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1117,
															"id": 1131,
															"nodeType": "Return",
															"src": "11406:8:2"
														}
													]
												},
												"id": 1133,
												"nodeType": "IfStatement",
												"src": "11290:135:2",
												"trueBody": {
													"id": 1129,
													"nodeType": "Block",
													"src": "11313:73:2",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1127,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1124,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1121,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "11335:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1122,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "11335:15:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1123,
																				"name": "airdropSince",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 403,
																				"src": "11353:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "11335:30:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1125,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "11334:32:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "37",
																	"id": 1126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11369:6:2",
																	"subdenomination": "days",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_604800_by_1",
																		"typeString": "int_const 604800"
																	},
																	"value": "7"
																},
																"src": "11334:41:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1117,
															"id": 1128,
															"nodeType": "Return",
															"src": "11327:48:2"
														}
													]
												}
											}
										]
									},
									"functionSelector": "cbb3e152",
									"id": 1135,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "airdropWeek",
									"nameLocation": "11236:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11247:2:2"
									},
									"returnParameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "11271:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11271:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11270:9:2"
									},
									"scope": 1316,
									"src": "11227:204:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1156,
										"nodeType": "Block",
										"src": "11611:81:2",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1144,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 414,
																	"src": "11629:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$397_storage_$",
																		"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																	}
																},
																"id": 1146,
																"indexExpression": {
																	"id": 1145,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1137,
																	"src": "11636:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "11629:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$397_storage",
																	"typeString": "struct Stakable.Voter storage ref"
																}
															},
															"id": 1147,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "votingRight",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 392,
															"src": "11629:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"baseExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1148,
																		"name": "voters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 414,
																		"src": "11655:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$397_storage_$",
																			"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																		}
																	},
																	"id": 1150,
																	"indexExpression": {
																		"id": 1149,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1137,
																		"src": "11662:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11655:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Voter_$397_storage",
																		"typeString": "struct Stakable.Voter storage ref"
																	}
																},
																"id": 1151,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "voted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 396,
																"src": "11655:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																	"typeString": "mapping(uint256 => bool)"
																}
															},
															"id": 1153,
															"indexExpression": {
																"id": 1152,
																"name": "_votingId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 407,
																"src": "11674:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11655:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 1154,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "11628:57:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bool_$",
														"typeString": "tuple(bool,bool)"
													}
												},
												"functionReturnParameters": 1143,
												"id": 1155,
												"nodeType": "Return",
												"src": "11621:64:2"
											}
										]
									},
									"functionSelector": "2d15cc04",
									"id": 1157,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getVoters",
									"nameLocation": "11552:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "11570:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1157,
												"src": "11562:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11562:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11561:14:2"
									},
									"returnParameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1157,
												"src": "11599:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1139,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11599:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1157,
												"src": "11605:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1141,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11605:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11598:12:2"
									},
									"scope": 1316,
									"src": "11543:149:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1180,
										"nodeType": "Block",
										"src": "11806:228:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1164,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 405,
														"src": "11893:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "74727565",
														"id": 1165,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11910:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "11893:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1171,
												"nodeType": "IfStatement",
												"src": "11889:84:2",
												"trueBody": {
													"id": 1170,
													"nodeType": "Block",
													"src": "11916:57:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1167,
																	"name": "Voting__votingIsRunning",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 379,
																	"src": "11937:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1168,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11937:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1169,
															"nodeType": "RevertStatement",
															"src": "11930:32:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1172,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 405,
														"src": "11983:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1173,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11999:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "11983:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1175,
												"nodeType": "ExpressionStatement",
												"src": "11983:20:2"
											},
											{
												"expression": {
													"id": 1178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1176,
														"name": "_votingId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 407,
														"src": "12013:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1177,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12026:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "12013:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1179,
												"nodeType": "ExpressionStatement",
												"src": "12013:14:2"
											}
										]
									},
									"functionSelector": "1ec6b60a",
									"id": 1181,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1160,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1159,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "11783:12:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "11783:12:2"
										},
										{
											"id": 1162,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1161,
												"name": "onlyTalax",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 512,
												"src": "11796:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "11796:9:2"
										}
									],
									"name": "startVoting",
									"nameLocation": "11760:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11771:2:2"
									},
									"returnParameters": {
										"id": 1163,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11806:0:2"
									},
									"scope": 1316,
									"src": "11751:283:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1220,
										"nodeType": "Block",
										"src": "12101:342:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1190,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 414,
																	"src": "12249:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$397_storage_$",
																		"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																	}
																},
																"id": 1193,
																"indexExpression": {
																	"expression": {
																		"id": 1191,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "12256:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1192,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "12256:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "12249:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$397_storage",
																	"typeString": "struct Stakable.Voter storage ref"
																}
															},
															"id": 1194,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 396,
															"src": "12249:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1196,
														"indexExpression": {
															"id": 1195,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "12274:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "12249:35:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "74727565",
														"id": 1197,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12288:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "12249:43:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1203,
												"nodeType": "IfStatement",
												"src": "12245:103:2",
												"trueBody": {
													"id": 1202,
													"nodeType": "Block",
													"src": "12294:54:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1199,
																	"name": "Voting__alreadyVoted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 381,
																	"src": "12315:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1200,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12315:22:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1201,
															"nodeType": "RevertStatement",
															"src": "12308:29:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1204,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 414,
																	"src": "12358:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$397_storage_$",
																		"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																	}
																},
																"id": 1207,
																"indexExpression": {
																	"expression": {
																		"id": 1205,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "12365:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "12365:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "12358:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$397_storage",
																	"typeString": "struct Stakable.Voter storage ref"
																}
															},
															"id": 1208,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 396,
															"src": "12358:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1210,
														"indexExpression": {
															"id": 1209,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "12383:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12358:35:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1211,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12396:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "12358:42:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1213,
												"nodeType": "ExpressionStatement",
												"src": "12358:42:2"
											},
											{
												"expression": {
													"id": 1218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1214,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 418,
															"src": "12410:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1216,
														"indexExpression": {
															"id": 1215,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "12421:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12410:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1217,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12435:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "12410:26:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1219,
												"nodeType": "ExpressionStatement",
												"src": "12410:26:2"
											}
										]
									},
									"functionSelector": "632a9a52",
									"id": 1221,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1184,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1183,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "12063:12:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "12063:12:2"
										},
										{
											"id": 1186,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1185,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 573,
												"src": "12076:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "12076:16:2"
										},
										{
											"id": 1188,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1187,
												"name": "isVoter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 555,
												"src": "12093:7:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "12093:7:2"
										}
									],
									"name": "vote",
									"nameLocation": "12049:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1182,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12053:2:2"
									},
									"returnParameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12101:0:2"
									},
									"scope": 1316,
									"src": "12040:403:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1260,
										"nodeType": "Block",
										"src": "12517:344:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1230,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 414,
																	"src": "12665:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$397_storage_$",
																		"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																	}
																},
																"id": 1233,
																"indexExpression": {
																	"expression": {
																		"id": 1231,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "12672:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1232,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "12672:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "12665:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$397_storage",
																	"typeString": "struct Stakable.Voter storage ref"
																}
															},
															"id": 1234,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 396,
															"src": "12665:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1236,
														"indexExpression": {
															"id": 1235,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "12690:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "12665:35:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 1237,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12704:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "12665:44:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1243,
												"nodeType": "IfStatement",
												"src": "12661:103:2",
												"trueBody": {
													"id": 1242,
													"nodeType": "Block",
													"src": "12711:53:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1239,
																	"name": "Voting__notYetVoted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 383,
																	"src": "12732:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1240,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12732:21:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1241,
															"nodeType": "RevertStatement",
															"src": "12725:28:2"
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1244,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 414,
																	"src": "12774:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$397_storage_$",
																		"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																	}
																},
																"id": 1247,
																"indexExpression": {
																	"expression": {
																		"id": 1245,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "12781:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "12781:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "12774:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$397_storage",
																	"typeString": "struct Stakable.Voter storage ref"
																}
															},
															"id": 1248,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 396,
															"src": "12774:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1250,
														"indexExpression": {
															"id": 1249,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "12799:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "12774:35:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 1251,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12813:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "12774:44:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1253,
												"nodeType": "ExpressionStatement",
												"src": "12774:44:2"
											},
											{
												"expression": {
													"id": 1258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1254,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 418,
															"src": "12828:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1256,
														"indexExpression": {
															"id": 1255,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "12839:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12828:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1257,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12853:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "12828:26:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1259,
												"nodeType": "ExpressionStatement",
												"src": "12828:26:2"
											}
										]
									},
									"functionSelector": "070c8b74",
									"id": 1261,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1224,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1223,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "12479:12:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "12479:12:2"
										},
										{
											"id": 1226,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1225,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 573,
												"src": "12492:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "12492:16:2"
										},
										{
											"id": 1228,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1227,
												"name": "isVoter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 555,
												"src": "12509:7:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "12509:7:2"
										}
									],
									"name": "retractVote",
									"nameLocation": "12458:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12469:2:2"
									},
									"returnParameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12517:0:2"
									},
									"scope": 1316,
									"src": "12449:412:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1302,
										"nodeType": "Block",
										"src": "12994:361:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1270,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "13066:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "31",
														"id": 1271,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "13081:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "13066:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1277,
												"nodeType": "IfStatement",
												"src": "13062:79:2",
												"trueBody": {
													"id": 1276,
													"nodeType": "Block",
													"src": "13084:57:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1273,
																	"name": "Voting__notEnoughVoters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 385,
																	"src": "13105:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1274,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13105:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1275,
															"nodeType": "RevertStatement",
															"src": "13098:32:2"
														}
													]
												}
											},
											{
												"assignments": [
													1279
												],
												"declarations": [
													{
														"constant": false,
														"id": 1279,
														"mutability": "mutable",
														"name": "half_voters",
														"nameLocation": "13158:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 1302,
														"src": "13150:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1278,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13150:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1289,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1284,
																	"name": "totalVoters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 409,
																	"src": "13198:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "35",
																	"id": 1285,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13211:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_5_by_1",
																		"typeString": "int_const 5"
																	},
																	"value": "5"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_rational_5_by_1",
																		"typeString": "int_const 5"
																	}
																],
																"expression": {
																	"id": 1282,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 351,
																	"src": "13185:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1283,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 245,
																"src": "13185:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1286,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13185:28:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "3130",
															"id": 1287,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13215:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															},
															"value": "10"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															}
														],
														"expression": {
															"id": 1280,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "13172:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$351_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1281,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 260,
														"src": "13172:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13172:46:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13150:68:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1294,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 1290,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 418,
															"src": "13233:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1292,
														"indexExpression": {
															"id": 1291,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "13244:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "13233:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1293,
														"name": "half_voters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1279,
														"src": "13257:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "13233:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1300,
													"nodeType": "Block",
													"src": "13312:37:2",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1298,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13333:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1269,
															"id": 1299,
															"nodeType": "Return",
															"src": "13326:12:2"
														}
													]
												},
												"id": 1301,
												"nodeType": "IfStatement",
												"src": "13229:120:2",
												"trueBody": {
													"id": 1297,
													"nodeType": "Block",
													"src": "13270:36:2",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1295,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13291:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1269,
															"id": 1296,
															"nodeType": "Return",
															"src": "13284:11:2"
														}
													]
												}
											}
										]
									},
									"functionSelector": "671d2b75",
									"id": 1303,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1264,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1263,
												"name": "onlyTalax",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 512,
												"src": "12932:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "12932:9:2"
										},
										{
											"id": 1266,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1265,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 573,
												"src": "12950:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "12950:16:2"
										}
									],
									"name": "getVotingResult",
									"nameLocation": "12876:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12891:2:2"
									},
									"returnParameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1268,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "12984:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1267,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12984:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12983:6:2"
									},
									"scope": 1316,
									"src": "12867:488:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1314,
										"nodeType": "Block",
										"src": "13419:38:2",
										"statements": [
											{
												"expression": {
													"id": 1312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1310,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 405,
														"src": "13429:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1311,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "13445:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "13429:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1313,
												"nodeType": "ExpressionStatement",
												"src": "13429:21:2"
											}
										]
									},
									"functionSelector": "fab2f86b",
									"id": 1315,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1306,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1305,
												"name": "onlyTalax",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 512,
												"src": "13392:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "13392:9:2"
										},
										{
											"id": 1308,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1307,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 573,
												"src": "13402:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "13402:16:2"
										}
									],
									"name": "stopVoting",
									"nameLocation": "13370:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13380:2:2"
									},
									"returnParameters": {
										"id": 1309,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13419:0:2"
									},
									"scope": 1316,
									"src": "13361:96:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1317,
							"src": "880:12579:2",
							"usedErrors": [
								358,
								360,
								362,
								365,
								367,
								369,
								371,
								373,
								376,
								379,
								381,
								383,
								385
							]
						}
					],
					"src": "39:13421:2"
				},
				"id": 2
			}
		}
	}
}