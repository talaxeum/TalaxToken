{
	"id": "9ce700f30c326e6aacb5b758c9340343",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Stakable-2.0.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @notice Error handling message for Modifier\r\n */\r\nerror Function__notAuthorized();\r\nerror Function__notAVoter();\r\nerror Function__votingNotAvailable();\r\n\r\n/**\r\n * @notice Error handling message for Staking functions\r\n */\r\nerror Staking__cannotStakeNothing();\r\nerror Staking__userIsStaker();\r\nerror Staking__penaltyExceed3Percent();\r\nerror Staking__airdropExceed20Percent();\r\nerror Staking__noStakingFound();\r\nerror Staking_noStakingPackageFound();\r\n\r\n/**\r\n * @notice Error handling message for Airdrop functions\r\n */\r\nerror Airdrop__claimableOnceAWeek();\r\nerror Airdrop__notYetStarted();\r\n\r\n/**\r\n * @notice Error handling message for Voting functions\r\n */\r\nerror Voting__votingIsRunning();\r\nerror Voting__alreadyVoted();\r\nerror Voting__notYetVoted();\r\nerror Voting__notEnoughVoters();\r\n\r\ncontract Staking is ReentrancyGuard, Ownable {\r\n    /**\r\n     * @notice Constructor since this contract is not meant to be used without inheritance\r\n     * push once to stakeholders for it to work properly\r\n     */\r\n\r\n    struct Voter {\r\n        bool votingRight;\r\n        mapping(uint256 => bool) voted;\r\n    }\r\n\r\n    mapping(uint256 => uint256) internal stakingPackage;\r\n\r\n    uint256 public stakingPenaltyRate;\r\n    uint256 public airdropRate;\r\n    uint256 public airdropSince;\r\n\r\n    bool internal _votingStatus;\r\n    uint256 internal _votingId;\r\n    uint256 public totalVoters;\r\n    mapping(address => Voter) public voters;\r\n    mapping(uint256 => uint256) public votedUsers;\r\n\r\n    address public token_address;\r\n\r\n    constructor(address token) {\r\n        //Staking penalty and Airdrop in 0.1 times percentage\r\n        stakingPenaltyRate = 15;\r\n        airdropRate = 80;\r\n\r\n        token_address = token;\r\n\r\n        stakingPackage[90 days] = 6;\r\n        stakingPackage[180 days] = 7;\r\n        stakingPackage[365 days] = 8;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * A stake struct is used to represent the way we store stakes,\r\n     * A Stake will contain the users address, the amount staked and a timestamp,\r\n     * Since which is when the stake was made\r\n     */\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 since;\r\n        uint256 rewardAPY;\r\n        uint256 releaseTime;\r\n        // This claimable field is new and used to tell how big of a reward is currently available\r\n        uint256 claimable;\r\n        uint256 claimableAirdrop;\r\n        uint256 latestClaimDrop;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\r\n     */\r\n    struct StakingSummary {\r\n        uint256 total_amount;\r\n        uint256 penalty;\r\n        Stake stake;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\r\n     */\r\n    mapping(address => Stake) internal stakeholders;\r\n\r\n    /**\r\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\r\n     */\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp,\r\n        uint256 releaseTime\r\n    );\r\n\r\n    event PenaltyChanged(uint256 amount);\r\n    event AirdropChanged(uint256 amount);\r\n\r\n    /* ------------------------------------------ Modifier ------------------------------------------ */\r\n\r\n    function _isVoter() internal view {\r\n        // require(voters[msg.sender].votingRight == true, \"You are not a voter\");\r\n        if (voters[msg.sender].votingRight == false) {\r\n            revert Function__notAVoter();\r\n        }\r\n    }\r\n\r\n    modifier isVoter() {\r\n        _isVoter();\r\n        _;\r\n    }\r\n\r\n    function _checkVotingStatus() internal view {\r\n        // require(_votingStatus, \"Voting is not available\");\r\n        if (!_votingStatus) {\r\n            revert Function__votingNotAvailable();\r\n        }\r\n    }\r\n\r\n    modifier votingStatusTrue() {\r\n        _checkVotingStatus();\r\n        _;\r\n    }\r\n\r\n    /* ---------------------------------------------- - --------------------------------------------- */\r\n\r\n    /**\r\n     * @notice\r\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\r\n     * StakeID\r\n     */\r\n    function stake(uint256 amount, uint256 stakePeriod)\r\n        external\r\n        nonReentrant\r\n    {\r\n        // Simple check so that user does not stake 0\r\n        // require(amount > 0, \"Cannot stake nothing\");\r\n        if (amount <= 0) {\r\n            revert Staking__cannotStakeNothing();\r\n        }\r\n        // require(stakeholders[user].amount == 0, \"User is a staker\");\r\n        if (stakeholders[msg.sender].amount != 0) {\r\n            revert Staking__userIsStaker();\r\n        }\r\n\r\n        if (stakingPackage[stakePeriod] == 0) {\r\n            revert Staking_noStakingPackageFound();\r\n        }\r\n\r\n        totalVoters += 1;\r\n        voters[msg.sender].votingRight = true;\r\n\r\n        // block.timestamp = timestamp of the current block in seconds since the epoch\r\n        uint256 timestamp = block.timestamp;\r\n\r\n        // Use the index to push a new Stake\r\n        // push a newly created Stake with the current block timestamp.\r\n\r\n        stakeholders[msg.sender] = Stake(\r\n            amount,\r\n            timestamp,\r\n            stakingPackage[stakePeriod],\r\n            (stakePeriod + timestamp),\r\n            0,\r\n            0,\r\n            0\r\n        );\r\n\r\n        SafeERC20.safeTransferFrom(\r\n            IERC20(token_address),\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n        // Emit an event that the stake has occured\r\n        emit Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp));\r\n    }\r\n\r\n    function changePenaltyFee(uint256 amount) external onlyOwner {\r\n        // require(amount <= 30, \"Penalty fee cannot exceed 3 percent.\");\r\n        if (amount > 30) {\r\n            revert Staking__penaltyExceed3Percent();\r\n        }\r\n        stakingPenaltyRate = amount;\r\n        emit PenaltyChanged(amount);\r\n    }\r\n\r\n    function _calculateStakingDuration(uint256 since)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // times by 1e24 so theres no missing value\r\n        return ((block.timestamp - since) * 1e24) / 365 days;\r\n    }\r\n\r\n    function _calculateStakeReward(Stake memory user_stake)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (user_stake.amount == 0) {\r\n            return 0;\r\n        }\r\n        // divided by 1e26 because 1e2 for APY and 1e24 from calculate staking duration\r\n        return\r\n            (user_stake.amount *\r\n                user_stake.rewardAPY *\r\n                _calculateStakingDuration(user_stake.since)) / 1e26;\r\n    }\r\n\r\n    function _calculateStakingWithPenalty(uint256 amount, uint256 reward)\r\n        internal\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        if (amount == 0) {\r\n            return (0, 0);\r\n        }\r\n        return (\r\n            amount - ((amount * stakingPenaltyRate) / 1000),\r\n            reward - ((reward * stakingPenaltyRate) / 1000)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\r\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\r\n     * Will return the amount to MINT onto the account\r\n     * Will also _calculateStakeReward and reset timer\r\n     */\r\n\r\n    // ! TODO: ganti function _calculateStakingWithPenalty dan _calculateStakingReward menjadi single return\r\n    function withdrawStake() external nonReentrant {\r\n        // TODO: can be simplified\r\n        // Grab user_index which is the index to use to grab the Stake[]\r\n        Stake memory user_stake = stakeholders[msg.sender];\r\n        uint256 reward = _calculateStakeReward(user_stake);\r\n\r\n        delete stakeholders[msg.sender];\r\n        totalVoters -= 1;\r\n        delete voters[msg.sender].voted[_votingId];\r\n\r\n        if (user_stake.releaseTime > block.timestamp) {\r\n            (\r\n                uint256 amount_reduced,\r\n                uint256 reward_reduced\r\n            ) = _calculateStakingWithPenalty(user_stake.amount, reward);\r\n\r\n            SafeERC20.safeTransfer(\r\n                IERC20(token_address),\r\n                msg.sender,\r\n                (amount_reduced + reward_reduced)\r\n            );\r\n        } else {\r\n            SafeERC20.safeTransfer(\r\n                IERC20(token_address),\r\n                msg.sender,\r\n                (user_stake.amount + reward)\r\n            );\r\n        }\r\n    }\r\n\r\n    function hasStake() external view returns (StakingSummary memory) {\r\n        Stake memory user_stake = stakeholders[msg.sender];\r\n        // require(user_stake.amount > 0, \"No Stake Found\");\r\n        if (user_stake.amount <= 0) {\r\n            revert Staking__noStakingFound();\r\n        }\r\n        StakingSummary memory summary = StakingSummary(0, 0, user_stake);\r\n\r\n        uint256 reward = _calculateStakeReward(user_stake);\r\n\r\n        if (summary.stake.releaseTime > block.timestamp) {\r\n            summary.penalty =\r\n                ((user_stake.amount * stakingPenaltyRate) / 1000) +\r\n                ((reward * stakingPenaltyRate) / 1000);\r\n        }\r\n\r\n        if (calculateWeek(user_stake.latestClaimDrop) > 0) {\r\n            uint256 airdrop = _calculateAirdrop(user_stake.amount);\r\n            summary.stake.claimableAirdrop = airdrop;\r\n        } else {\r\n            summary.stake.claimableAirdrop = 0;\r\n        }\r\n\r\n        summary.stake.claimable = reward;\r\n        summary.total_amount = user_stake.amount;\r\n\r\n        return summary;\r\n    }\r\n\r\n    /* -------------------------------------- Airdrop functions ------------------------------------- */\r\n\r\n    function startAirdrop() external onlyOwner {\r\n        airdropSince = block.timestamp;\r\n    }\r\n\r\n    function changeAirdropPercentage(uint256 amount) external onlyOwner {\r\n        if (amount > 200) {\r\n            revert Staking__airdropExceed20Percent();\r\n        }\r\n        airdropRate = amount;\r\n        emit AirdropChanged(amount);\r\n    }\r\n\r\n    function _blockTimestamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function calculateWeek(uint256 timestamp) public view returns (uint256) {\r\n        return (block.timestamp - timestamp) / 7 days;\r\n    }\r\n\r\n    function _calculateAirdrop(uint256 stakeAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ((stakeAmount * airdropRate) / 1000) / 52 weeks;\r\n    }\r\n\r\n    function claimAirdrop(address user) external {\r\n        // TODO: can be simplified if using address\r\n        Stake storage staker = stakeholders[user];\r\n\r\n        if (airdropSince == 0) {\r\n            revert Airdrop__notYetStarted();\r\n        }\r\n\r\n        if (staker.amount > 0) {\r\n            if (calculateWeek(staker.latestClaimDrop) == 0) {\r\n                revert Airdrop__claimableOnceAWeek();\r\n            }\r\n\r\n            staker.claimableAirdrop = 0;\r\n            staker.latestClaimDrop = block.timestamp;\r\n\r\n            SafeERC20.safeTransfer(\r\n                IERC20(token_address),\r\n                msg.sender,\r\n                _calculateAirdrop(staker.amount)\r\n            );\r\n        }\r\n    }\r\n\r\n    /* -------------------------------- Voting Functions for DAO Pool ------------------------------- */\r\n    // ! Replaceable with Governance token\r\n\r\n    function getVoters(address user) external view returns (bool, bool) {\r\n        return (voters[user].votingRight, voters[user].voted[_votingId]);\r\n    }\r\n\r\n    // TODO: can be simplified since not connected directly\r\n    function startVoting() external nonReentrant onlyOwner {\r\n        if (_votingStatus == true) {\r\n            revert Voting__votingIsRunning();\r\n        }\r\n\r\n        _votingStatus = true;\r\n        _votingId += 1;\r\n    }\r\n\r\n    function vote() public nonReentrant votingStatusTrue isVoter {\r\n        if (voters[msg.sender].voted[_votingId] == true) {\r\n            revert Voting__alreadyVoted();\r\n        }\r\n\r\n        voters[msg.sender].voted[_votingId] = true;\r\n        votedUsers[_votingId] += 1;\r\n    }\r\n\r\n    function retractVote() public nonReentrant votingStatusTrue isVoter {\r\n        if (voters[msg.sender].voted[_votingId] == false) {\r\n            revert Voting__notYetVoted();\r\n        }\r\n\r\n        voters[msg.sender].voted[_votingId] == false;\r\n        votedUsers[_votingId] -= 1;\r\n    }\r\n\r\n    function getVotingResult()\r\n        external\r\n        view\r\n        onlyOwner\r\n        votingStatusTrue\r\n        returns (bool)\r\n    {\r\n        if (totalVoters <= 1) {\r\n            revert Voting__notEnoughVoters();\r\n        }\r\n        uint256 half_voters = (totalVoters * 5) / 10;\r\n\r\n        if (votedUsers[_votingId] > half_voters) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function stopVoting() external onlyOwner votingStatusTrue {\r\n        _votingStatus = false;\r\n    }\r\n}"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A 0xF7 DUP8 EXTCODECOPY 0xCE 0xD4 SLT MLOAD DUP2 0xAA 0xAF RETURNDATACOPY 0xE1 0xF8 0xB1 RETURNDATACOPY 0xC0 0xB6 EQ JUMPDEST NUMBER 0xAC 0x24 0x27 0xEA 0xCC PUSH2 0xDF4E EQ 0x2C 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;645:3270:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A 0xF7 DUP8 EXTCODECOPY 0xCE 0xD4 SLT MLOAD DUP2 0xAA 0xAF RETURNDATACOPY 0xE1 0xF8 0xB1 RETURNDATACOPY 0xC0 0xB6 EQ JUMPDEST NUMBER 0xAC 0x24 0x27 0xEA 0xCC PUSH2 0xDF4E EQ 0x2C 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033",
									".code": [
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xE6 0xEE 0xDF DIFFICULTY 0xD6 0x5F MSTORE PUSH2 0x3BCF 0xAB SWAP4 DUP3 SHR SWAP15 CREATE2 PUSH13 0x2157C74D9DB29E16940B500A4C SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8061:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xE6 0xEE 0xDF DIFFICULTY 0xD6 0x5F MSTORE PUSH2 0x3BCF 0xAB SWAP4 DUP3 SHR SWAP15 CREATE2 PUSH13 0x2157C74D9DB29E16940B500A4C SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033",
									".code": [
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Stakable-2.0.sol": {
				"Staking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "Airdrop__claimableOnceAWeek",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Airdrop__notYetStarted",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Function__notAVoter",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Function__votingNotAvailable",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__airdropExceed20Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__cannotStakeNothing",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__noStakingFound",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__penaltyExceed3Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__userIsStaker",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking_noStakingPackageFound",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__alreadyVoted",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__notEnoughVoters",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__notYetVoted",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__votingIsRunning",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AirdropChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PenaltyChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "releaseTime",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "_blockTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropSince",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "calculateWeek",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changeAirdropPercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changePenaltyFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "claimAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getVoters",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getVotingResult",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasStake",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "penalty",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimableAirdrop",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "latestClaimDrop",
													"type": "uint256"
												}
											],
											"internalType": "struct Staking.Stake",
											"name": "stake",
											"type": "tuple"
										}
									],
									"internalType": "struct Staking.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "retractVote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakePeriod",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingPenaltyRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startVoting",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stopVoting",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token_address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalVoters",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "vote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "votedUsers",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "voters",
							"outputs": [
								{
									"internalType": "bool",
									"name": "votingRight",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Stakable-2.0.sol\":1050:13221  contract Staking is ReentrancyGuard, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Stakable-2.0.sol\":1775:2086  constructor(address token) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1813  _status */\n  0x00\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_9\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  tag_12\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_9:\n    /* \"contracts/Stakable-2.0.sol\":1897:1899  15 */\n  0x0f\n    /* \"contracts/Stakable-2.0.sol\":1876:1894  stakingPenaltyRate */\n  0x03\n    /* \"contracts/Stakable-2.0.sol\":1876:1899  stakingPenaltyRate = 15 */\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":1924:1926  80 */\n  0x50\n    /* \"contracts/Stakable-2.0.sol\":1910:1921  airdropRate */\n  0x04\n    /* \"contracts/Stakable-2.0.sol\":1910:1926  airdropRate = 80 */\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":1939:1952  token_address */\n  0x0b\n    /* \"contracts/Stakable-2.0.sol\":1939:1960  token_address = token */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":1973:1987  stakingPackage */\n  0x02\n    /* \"contracts/Stakable-2.0.sol\":1973:1996  stakingPackage[90 days] */\n  0x20\n  mstore\n    /* \"contracts/Stakable-2.0.sol\":1999:2000  6 */\n  0x06\n    /* \"contracts/Stakable-2.0.sol\":1973:1996  stakingPackage[90 days] */\n  0xa1ef5b42f18533d67a183a193ea6c3fabfaa3bdabc3fc0e3f65b19b517df6e8c\n    /* \"contracts/Stakable-2.0.sol\":1973:2000  stakingPackage[90 days] = 6 */\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":2038:2039  7 */\n  0x07\n    /* \"contracts/Stakable-2.0.sol\":2011:2035  stakingPackage[180 days] */\n  0x089cfcbf844e824feee5f634cbc488382291f3c9e0de5905f3c30812390dd832\n    /* \"contracts/Stakable-2.0.sol\":2011:2039  stakingPackage[180 days] = 7 */\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":2065:2073  365 days */\n  0x01e13380\n  0x00\n    /* \"contracts/Stakable-2.0.sol\":2050:2074  stakingPackage[365 days] */\n  mstore\n    /* \"contracts/Stakable-2.0.sol\":2077:2078  8 */\n  0x08\n    /* \"contracts/Stakable-2.0.sol\":2050:2074  stakingPackage[365 days] */\n  0xdc083eb4da7563bbd761324b5158d9d40af7c7174afe39b0b31a7577c44fc33b\n    /* \"contracts/Stakable-2.0.sol\":2050:2078  stakingPackage[365 days] = 8 */\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":1050:13221  contract Staking is ReentrancyGuard, Ownable {... */\n  jump(tag_17)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_12:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  0x01\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_19\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_19:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_20\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_20:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_17:\n    /* \"contracts/Stakable-2.0.sol\":1050:13221  contract Staking is ReentrancyGuard, Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Stakable-2.0.sol\":1050:13221  contract Staking is ReentrancyGuard, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8c8e8fee\n      gt\n      tag_28\n      jumpi\n      dup1\n      0xbed9d861\n      gt\n      tag_29\n      jumpi\n      dup1\n      0xd2a569c3\n      gt\n      tag_30\n      jumpi\n      dup1\n      0xd2a569c3\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xd5dbdf1b\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xfab2f86b\n      eq\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_30:\n      dup1\n      0xbed9d861\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xc63aa3e7\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xcb79c2e1\n      eq\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_29:\n      dup1\n      0xa3ec138d\n      gt\n      tag_31\n      jumpi\n      dup1\n      0xa3ec138d\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xb5d9df83\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xb87da76d\n      eq\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_31:\n      dup1\n      0x8c8e8fee\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xa143a5f2\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      dup1\n      0x65f8c6c5\n      gt\n      tag_32\n      jumpi\n      dup1\n      0x7b0472f0\n      gt\n      tag_33\n      jumpi\n      dup1\n      0x7b0472f0\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x8891cf0d\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x8c63f97f\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      dup1\n      0x65f8c6c5\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x671d2b75\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      dup1\n      0x2d15cc04\n      gt\n      tag_34\n      jumpi\n      dup1\n      0x2d15cc04\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x5f5300ff\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x632a9a52\n      eq\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_34:\n      dup1\n      0x070c8b74\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x10486b6a\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x1ec6b60a\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":12396:12681  function retractVote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_3:\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n      stop\n        /* \"contracts/Stakable-2.0.sol\":8845:9896  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_4:\n      tag_37\n      tag_38\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      tag_39\n      swap2\n      swap1\n        /* \"#utility.yul\":168:172   */\n      0x00\n        /* \"#utility.yul\":210:213   */\n      0x0120\n        /* \"#utility.yul\":199:208   */\n      dup3\n        /* \"#utility.yul\":195:214   */\n      add\n        /* \"#utility.yul\":187:214   */\n      swap1\n      pop\n        /* \"#utility.yul\":247:253   */\n      dup3\n        /* \"#utility.yul\":241:254   */\n      mload\n        /* \"#utility.yul\":230:239   */\n      dup3\n        /* \"#utility.yul\":223:255   */\n      mstore\n        /* \"#utility.yul\":311:315   */\n      0x20\n        /* \"#utility.yul\":303:309   */\n      dup4\n        /* \"#utility.yul\":299:316   */\n      add\n        /* \"#utility.yul\":293:317   */\n      mload\n        /* \"#utility.yul\":286:290   */\n      0x20\n        /* \"#utility.yul\":275:284   */\n      dup4\n        /* \"#utility.yul\":271:291   */\n      add\n        /* \"#utility.yul\":264:318   */\n      mstore\n        /* \"#utility.yul\":365:369   */\n      0x40\n        /* \"#utility.yul\":357:363   */\n      dup4\n        /* \"#utility.yul\":353:370   */\n      add\n        /* \"#utility.yul\":347:371   */\n      mload\n        /* \"#utility.yul\":415:427   */\n      dup1\n        /* \"#utility.yul\":409:428   */\n      mload\n        /* \"#utility.yul\":402:406   */\n      0x40\n        /* \"#utility.yul\":391:400   */\n      dup5\n        /* \"#utility.yul\":387:407   */\n      add\n        /* \"#utility.yul\":380:429   */\n      mstore\n        /* \"#utility.yul\":489:493   */\n      0x20\n        /* \"#utility.yul\":475:487   */\n      dup2\n        /* \"#utility.yul\":471:494   */\n      add\n        /* \"#utility.yul\":465:495   */\n      mload\n        /* \"#utility.yul\":460:462   */\n      0x60\n        /* \"#utility.yul\":449:458   */\n      dup5\n        /* \"#utility.yul\":445:463   */\n      add\n        /* \"#utility.yul\":438:496   */\n      mstore\n        /* \"#utility.yul\":557:561   */\n      0x40\n        /* \"#utility.yul\":543:555   */\n      dup2\n        /* \"#utility.yul\":539:562   */\n      add\n        /* \"#utility.yul\":533:563   */\n      mload\n        /* \"#utility.yul\":527:530   */\n      0x80\n        /* \"#utility.yul\":516:525   */\n      dup5\n        /* \"#utility.yul\":512:531   */\n      add\n        /* \"#utility.yul\":505:564   */\n      mstore\n        /* \"#utility.yul\":625:627   */\n      0x60\n        /* \"#utility.yul\":611:623   */\n      dup2\n        /* \"#utility.yul\":607:628   */\n      add\n        /* \"#utility.yul\":601:629   */\n      mload\n        /* \"#utility.yul\":595:598   */\n      0xa0\n        /* \"#utility.yul\":584:593   */\n      dup5\n        /* \"#utility.yul\":580:599   */\n      add\n        /* \"#utility.yul\":573:630   */\n      mstore\n        /* \"#utility.yul\":691:694   */\n      0x80\n        /* \"#utility.yul\":677:689   */\n      dup2\n        /* \"#utility.yul\":673:695   */\n      add\n        /* \"#utility.yul\":667:696   */\n      mload\n        /* \"#utility.yul\":661:664   */\n      0xc0\n        /* \"#utility.yul\":650:659   */\n      dup5\n        /* \"#utility.yul\":646:665   */\n      add\n        /* \"#utility.yul\":639:697   */\n      mstore\n        /* \"#utility.yul\":758:761   */\n      0xa0\n        /* \"#utility.yul\":744:756   */\n      dup2\n        /* \"#utility.yul\":740:762   */\n      add\n        /* \"#utility.yul\":734:763   */\n      mload\n        /* \"#utility.yul\":728:731   */\n      0xe0\n        /* \"#utility.yul\":717:726   */\n      dup5\n        /* \"#utility.yul\":713:732   */\n      add\n        /* \"#utility.yul\":706:764   */\n      mstore\n        /* \"#utility.yul\":825:828   */\n      0xc0\n        /* \"#utility.yul\":811:823   */\n      dup2\n        /* \"#utility.yul\":807:829   */\n      add\n        /* \"#utility.yul\":801:830   */\n      mload\n        /* \"#utility.yul\":795:798   */\n      0x0100\n        /* \"#utility.yul\":784:793   */\n      dup5\n        /* \"#utility.yul\":780:799   */\n      add\n        /* \"#utility.yul\":773:831   */\n      mstore\n      pop\n        /* \"#utility.yul\":14:837   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"contracts/Stakable-2.0.sol\":8845:9896  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_39:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stakable-2.0.sol\":11887:12104  function startVoting() external nonReentrant onlyOwner {... */\n    tag_5:\n      tag_35\n      tag_42\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":11667:11818  function getVoters(address user) external view returns (bool, bool) {... */\n    tag_6:\n      tag_43\n      tag_44\n      calldatasize\n      0x04\n      tag_45\n      jump\t// in\n    tag_44:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":11754:11766  voters[user] */\n      and\n        /* \"contracts/Stakable-2.0.sol\":11723:11727  bool */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":11754:11766  voters[user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":11754:11760  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":11754:11766  voters[user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":11754:11778  voters[user].votingRight */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":11799:11808  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":11780:11809  voters[user].voted[_votingId] */\n      dup6\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":11754:11778  voters[user].votingRight */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":11780:11798  voters[user].voted */\n      swap1\n      swap2\n      add\n        /* \"contracts/Stakable-2.0.sol\":11780:11809  voters[user].voted[_votingId] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Stakable-2.0.sol\":11754:11778  voters[user].votingRight */\n      0xff\n      swap2\n      dup3\n      and\n      swap3\n        /* \"contracts/Stakable-2.0.sol\":11780:11809  voters[user].voted[_votingId] */\n      swap2\n      and\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":11667:11818  function getVoters(address user) external view returns (bool, bool) {... */\n      jump\n    tag_43:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":1343:1357   */\n      swap3\n      iszero\n        /* \"#utility.yul\":1336:1358   */\n      iszero\n        /* \"#utility.yul\":1318:1359   */\n      dup4\n      mstore\n        /* \"#utility.yul\":1402:1416   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1395:1417   */\n      iszero\n        /* \"#utility.yul\":1390:1392   */\n      0x20\n        /* \"#utility.yul\":1375:1393   */\n      dup4\n      add\n        /* \"#utility.yul\":1368:1418   */\n      mstore\n        /* \"#utility.yul\":1291:1309   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":11667:11818  function getVoters(address user) external view returns (bool, bool) {... */\n      tag_39\n        /* \"#utility.yul\":1156:1424   */\n      jump\n        /* \"contracts/Stakable-2.0.sol\":1605:1631  uint256 public totalVoters */\n    tag_7:\n      tag_49\n      sload(0x08)\n      dup2\n      jump\n    tag_49:\n      mload(0x40)\n        /* \"#utility.yul\":1575:1600   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1563:1565   */\n      0x20\n        /* \"#utility.yul\":1548:1566   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":1605:1631  uint256 public totalVoters */\n      tag_39\n        /* \"#utility.yul\":1429:1606   */\n      jump\n        /* \"contracts/Stakable-2.0.sol\":12112:12388  function vote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_8:\n      tag_35\n      tag_54\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":10803:11507  function claimAirdrop(address user) external {... */\n    tag_9:\n      tag_35\n      tag_56\n      calldatasize\n      0x04\n      tag_45\n      jump\t// in\n    tag_56:\n      tag_57\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":12689:13112  function getVotingResult()... */\n    tag_10:\n      tag_58\n      tag_59\n      jump\t// in\n    tag_58:\n      mload(0x40)\n        /* \"#utility.yul\":1776:1790   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1769:1791   */\n      iszero\n        /* \"#utility.yul\":1751:1792   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1739:1741   */\n      0x20\n        /* \"#utility.yul\":1724:1742   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":12689:13112  function getVotingResult()... */\n      tag_39\n        /* \"#utility.yul\":1611:1798   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_11:\n      tag_35\n      tag_63\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":4492:5954  function stake(uint256 amount, uint256 stakePeriod)... */\n    tag_12:\n      tag_35\n      tag_65\n      calldatasize\n      0x04\n      tag_66\n      jump\t// in\n    tag_65:\n      tag_67\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":1469:1495  uint256 public airdropRate */\n    tag_13:\n      tag_49\n      sload(0x04)\n      dup2\n      jump\n        /* \"contracts/Stakable-2.0.sol\":5962:6275  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_14:\n      tag_35\n      tag_72\n      calldatasize\n      0x04\n      tag_73\n      jump\t// in\n    tag_72:\n      tag_74\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":1738:1766  address public token_address */\n    tag_15:\n      sload(0x0b)\n      tag_75\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_75:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2405:2460   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2387:2461   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2375:2377   */\n      0x20\n        /* \"#utility.yul\":2360:2378   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":1738:1766  address public token_address */\n      tag_39\n        /* \"#utility.yul\":2241:2467   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n      jump(tag_75)\n        /* \"contracts/Stakable-2.0.sol\":1684:1729  mapping(uint256 => uint256) public votedUsers */\n    tag_17:\n      tag_49\n      tag_83\n      calldatasize\n      0x04\n      tag_73\n      jump\t// in\n    tag_83:\n      mstore(0x20, 0x0a)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Stakable-2.0.sol\":1638:1677  mapping(address => Voter) public voters */\n    tag_18:\n      tag_58\n      tag_87\n      calldatasize\n      0x04\n      tag_45\n      jump\t// in\n    tag_87:\n      mstore(0x20, 0x09)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n        /* \"contracts/Stakable-2.0.sol\":10466:10602  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_19:\n      tag_49\n      tag_91\n      calldatasize\n      0x04\n      tag_73\n      jump\t// in\n    tag_91:\n      tag_92\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":1502:1529  uint256 public airdropSince */\n    tag_20:\n      tag_49\n      sload(0x05)\n      dup2\n      jump\n        /* \"contracts/Stakable-2.0.sol\":7825:8837  function withdrawStake() external nonReentrant {... */\n    tag_21:\n      tag_35\n      tag_98\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":10360:10458  function _blockTimestamp() public view returns (uint256) {... */\n    tag_22:\n        /* \"contracts/Stakable-2.0.sol\":10435:10450  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":10360:10458  function _blockTimestamp() public view returns (uint256) {... */\n      jump(tag_49)\n        /* \"contracts/Stakable-2.0.sol\":1429:1462  uint256 public stakingPenaltyRate */\n    tag_23:\n      tag_49\n      sload(0x03)\n      dup2\n      jump\n        /* \"contracts/Stakable-2.0.sol\":10012:10104  function startAirdrop() external onlyOwner {... */\n    tag_24:\n      tag_35\n      tag_106\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":10112:10352  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_25:\n      tag_35\n      tag_108\n      calldatasize\n      0x04\n      tag_73\n      jump\t// in\n    tag_108:\n      tag_109\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_26:\n      tag_35\n      tag_111\n      calldatasize\n      0x04\n      tag_45\n      jump\t// in\n    tag_111:\n      tag_112\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":13120:13218  function stopVoting() external onlyOwner votingStatusTrue {... */\n    tag_27:\n      tag_35\n      tag_114\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":12396:12681  function retractVote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_36:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_116\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2674:2676   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2656:2677   */\n      mstore\n        /* \"#utility.yul\":2713:2715   */\n      0x1f\n        /* \"#utility.yul\":2693:2711   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2686:2716   */\n      mstore\n        /* \"#utility.yul\":2752:2785   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":2732:2750   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2725:2786   */\n      mstore\n        /* \"#utility.yul\":2803:2821   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_117:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_116:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":4126:4146  _checkVotingStatus() */\n      tag_120\n        /* \"contracts/Stakable-2.0.sol\":4126:4144  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable-2.0.sol\":4126:4146  _checkVotingStatus() */\n      jump\t// in\n    tag_120:\n        /* \"contracts/Stakable-2.0.sol\":3832:3842  _isVoter() */\n      tag_123\n        /* \"contracts/Stakable-2.0.sol\":3832:3840  _isVoter */\n      tag_124\n        /* \"contracts/Stakable-2.0.sol\":3832:3842  _isVoter() */\n      jump\t// in\n    tag_123:\n        /* \"contracts/Stakable-2.0.sol\":12486:12496  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":12479:12497  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12479:12485  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":12479:12497  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":12504:12513  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":12479:12514  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12479:12503  voters[msg.sender].voted */\n      0x01\n      add\n        /* \"contracts/Stakable-2.0.sol\":12479:12514  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable-2.0.sol\":12475:12580  if (voters[msg.sender].voted[_votingId] == false) {... */\n      tag_126\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":12547:12568  Voting__notYetVoted() */\n      mload(0x40)\n      0x8b74220000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":12475:12580  if (voters[msg.sender].voted[_votingId] == false) {... */\n    tag_126:\n        /* \"contracts/Stakable-2.0.sol\":12617:12626  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":12592:12610  voters[msg.sender] */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":12592:12627  voters[msg.sender].voted[_votingId] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12647:12657  votedUsers */\n      0x0a\n        /* \"contracts/Stakable-2.0.sol\":12592:12610  voters[msg.sender] */\n      0x20\n        /* \"contracts/Stakable-2.0.sol\":12647:12668  votedUsers[_votingId] */\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12592:12610  voters[msg.sender] */\n      0x40\n        /* \"contracts/Stakable-2.0.sol\":12647:12668  votedUsers[_votingId] */\n      dup2\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":12647:12673  votedUsers[_votingId] -= 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":12592:12616  voters[msg.sender].voted */\n      0x01\n      swap3\n        /* \"contracts/Stakable-2.0.sol\":12592:12610  voters[msg.sender] */\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":12647:12673  votedUsers[_votingId] -= 1 */\n      tag_127\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":12592:12616  voters[msg.sender].voted */\n      dup5\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":12647:12673  votedUsers[_votingId] -= 1 */\n      tag_128\n      jump\t// in\n    tag_127:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":12396:12681  function retractVote() public nonReentrant votingStatusTrue isVoter {... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":8845:9896  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_38:\n        /* \"contracts/Stakable-2.0.sol\":8888:8909  StakingSummary memory */\n      tag_129\n      tag_130\n      jump\t// in\n    tag_129:\n        /* \"contracts/Stakable-2.0.sol\":8961:8971  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":8922:8945  Stake memory user_stake */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":8948:8972  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":8948:8960  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":8948:8972  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":8922:8972  Stake memory user_stake = stakeholders[msg.sender] */\n      dup3\n      mload\n      0xe0\n      dup2\n      add\n      dup5\n      mstore\n      dup2\n      sload\n      dup1\n      dup3\n      mstore\n      0x01\n      dup4\n      add\n      sload\n      swap4\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x02\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x03\n      dup2\n      add\n      sload\n      0x60\n      dup5\n      add\n      mstore\n      0x04\n      dup2\n      add\n      sload\n      0x80\n      dup5\n      add\n      mstore\n      0x05\n      dup2\n      add\n      sload\n      0xa0\n      dup5\n      add\n      mstore\n      0x06\n      add\n      sload\n      0xc0\n      dup4\n      add\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":9045:9132  if (user_stake.amount <= 0) {... */\n      tag_132\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":9095:9120  Staking__noStakingFound() */\n      mload(0x40)\n      0xb018f08700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":9045:9132  if (user_stake.amount <= 0) {... */\n    tag_132:\n        /* \"contracts/Stakable-2.0.sol\":9174:9206  StakingSummary(0, 0, user_stake) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":9142:9171  StakingSummary memory summary */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":9174:9206  StakingSummary(0, 0, user_stake) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":9236:9269  _calculateStakeReward(user_stake) */\n      tag_133\n        /* \"contracts/Stakable-2.0.sol\":9195:9205  user_stake */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":9236:9257  _calculateStakeReward */\n      tag_134\n        /* \"contracts/Stakable-2.0.sol\":9236:9269  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_133:\n        /* \"contracts/Stakable-2.0.sol\":9219:9269  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/Stakable-2.0.sol\":9314:9329  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":9286:9293  summary */\n      dup3\n        /* \"contracts/Stakable-2.0.sol\":9286:9299  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9286:9311  summary.stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9286:9329  summary.stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/Stakable-2.0.sol\":9282:9500  if (summary.stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_135\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":9483:9487  1000 */\n      0x03e8\n        /* \"contracts/Stakable-2.0.sol\":9461:9479  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stakable-2.0.sol\":9452:9458  reward */\n      dup3\n        /* \"contracts/Stakable-2.0.sol\":9452:9479  reward * stakingPenaltyRate */\n      tag_136\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_136:\n        /* \"contracts/Stakable-2.0.sol\":9451:9487  (reward * stakingPenaltyRate) / 1000 */\n      tag_138\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_138:\n        /* \"contracts/Stakable-2.0.sol\":9403:9421  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stakable-2.0.sol\":9383:9400  user_stake.amount */\n      dup5\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9425:9429  1000 */\n      0x03e8\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":9383:9421  user_stake.amount * stakingPenaltyRate */\n      tag_140\n      swap2\n      tag_137\n      jump\t// in\n    tag_140:\n        /* \"contracts/Stakable-2.0.sol\":9382:9429  (user_stake.amount * stakingPenaltyRate) / 1000 */\n      tag_141\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_141:\n        /* \"contracts/Stakable-2.0.sol\":9381:9488  ((user_stake.amount * stakingPenaltyRate) / 1000) +... */\n      tag_142\n      swap2\n      swap1\n      tag_143\n      jump\t// in\n    tag_142:\n        /* \"contracts/Stakable-2.0.sol\":9346:9361  summary.penalty */\n      0x20\n      dup4\n      add\n        /* \"contracts/Stakable-2.0.sol\":9346:9488  summary.penalty =... */\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":9282:9500  if (summary.stake.releaseTime > block.timestamp) {... */\n    tag_135:\n        /* \"contracts/Stakable-2.0.sol\":9560:9561  0 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":9516:9557  calculateWeek(user_stake.latestClaimDrop) */\n      tag_144\n        /* \"contracts/Stakable-2.0.sol\":9530:9540  user_stake */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":9530:9556  user_stake.latestClaimDrop */\n      0xc0\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9516:9529  calculateWeek */\n      tag_92\n        /* \"contracts/Stakable-2.0.sol\":9516:9557  calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_144:\n        /* \"contracts/Stakable-2.0.sol\":9516:9561  calculateWeek(user_stake.latestClaimDrop) > 0 */\n      gt\n        /* \"contracts/Stakable-2.0.sol\":9512:9766  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      iszero\n      tag_145\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":9578:9593  uint256 airdrop */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":9596:9632  _calculateAirdrop(user_stake.amount) */\n      tag_146\n        /* \"contracts/Stakable-2.0.sol\":9614:9624  user_stake */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":9614:9631  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9596:9613  _calculateAirdrop */\n      tag_147\n        /* \"contracts/Stakable-2.0.sol\":9596:9632  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_146:\n        /* \"contracts/Stakable-2.0.sol\":9647:9660  summary.stake */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9647:9677  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/Stakable-2.0.sol\":9647:9687  summary.stake.claimableAirdrop = airdrop */\n      mstore\n      pop\n        /* \"contracts/Stakable-2.0.sol\":9512:9766  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      jump(tag_148)\n    tag_145:\n        /* \"contracts/Stakable-2.0.sol\":9720:9733  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9753:9754  0 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":9720:9750  summary.stake.claimableAirdrop */\n      0xa0\n      swap1\n      swap2\n      add\n        /* \"contracts/Stakable-2.0.sol\":9720:9754  summary.stake.claimableAirdrop = 0 */\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":9512:9766  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n    tag_148:\n        /* \"contracts/Stakable-2.0.sol\":9778:9791  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9778:9801  summary.stake.claimable */\n      0x80\n      add\n        /* \"contracts/Stakable-2.0.sol\":9778:9810  summary.stake.claimable = reward */\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":9844:9861  user_stake.amount */\n      swap1\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9821:9861  summary.total_amount = user_stake.amount */\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":9778:9785  summary */\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":8845:9896  function hasStake() external view returns (StakingSummary memory) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":11887:12104  function startVoting() external nonReentrant onlyOwner {... */\n    tag_42:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_150\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2674:2676   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2656:2677   */\n      mstore\n        /* \"#utility.yul\":2713:2715   */\n      0x1f\n        /* \"#utility.yul\":2693:2711   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2686:2716   */\n      mstore\n        /* \"#utility.yul\":2752:2785   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":2732:2750   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2725:2786   */\n      mstore\n        /* \"#utility.yul\":2803:2821   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2472:2827   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_150:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_156\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3938:3940   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3920:3941   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3957:3975   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3950:3980   */\n      mstore\n        /* \"#utility.yul\":4016:4050   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3996:4014   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3989:4051   */\n      mstore\n        /* \"#utility.yul\":4068:4086   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3736:4092   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_156:\n        /* \"contracts/Stakable-2.0.sol\":11957:11970  _votingStatus */\n      and(0xff, sload(0x06))\n        /* \"contracts/Stakable-2.0.sol\":11957:11978  _votingStatus == true */\n      iszero\n      iszero\n        /* \"contracts/Stakable-2.0.sol\":11957:11970  _votingStatus */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":11957:11978  _votingStatus == true */\n      eq\n        /* \"contracts/Stakable-2.0.sol\":11953:12039  if (_votingStatus == true) {... */\n      iszero\n      tag_160\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":12002:12027  Voting__votingIsRunning() */\n      mload(0x40)\n      0x6da4cd2e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":11953:12039  if (_votingStatus == true) {... */\n    tag_160:\n        /* \"contracts/Stakable-2.0.sol\":12051:12064  _votingStatus */\n      0x06\n        /* \"contracts/Stakable-2.0.sol\":12051:12071  _votingStatus = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/Stakable-2.0.sol\":12067:12071  true */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":12051:12071  _votingStatus = true */\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":12082:12091  _votingId */\n      0x07\n        /* \"contracts/Stakable-2.0.sol\":12082:12096  _votingId += 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":12051:12064  _votingStatus */\n      0x00\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":12082:12096  _votingId += 1 */\n      tag_127\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":12067:12071  true */\n      dup5\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":12082:12096  _votingId += 1 */\n      tag_143\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":12112:12388  function vote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_54:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_164\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2674:2676   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2656:2677   */\n      mstore\n        /* \"#utility.yul\":2713:2715   */\n      0x1f\n        /* \"#utility.yul\":2693:2711   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2686:2716   */\n      mstore\n        /* \"#utility.yul\":2752:2785   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":2732:2750   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2725:2786   */\n      mstore\n        /* \"#utility.yul\":2803:2821   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2472:2827   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_164:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":4126:4146  _checkVotingStatus() */\n      tag_167\n        /* \"contracts/Stakable-2.0.sol\":4126:4144  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable-2.0.sol\":4126:4146  _checkVotingStatus() */\n      jump\t// in\n    tag_167:\n        /* \"contracts/Stakable-2.0.sol\":3832:3842  _isVoter() */\n      tag_169\n        /* \"contracts/Stakable-2.0.sol\":3832:3840  _isVoter */\n      tag_124\n        /* \"contracts/Stakable-2.0.sol\":3832:3842  _isVoter() */\n      jump\t// in\n    tag_169:\n        /* \"contracts/Stakable-2.0.sol\":12195:12205  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":12188:12206  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12188:12194  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":12188:12206  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":12213:12222  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":12188:12223  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12188:12212  voters[msg.sender].voted */\n      0x01\n      swap1\n      dup2\n      add\n        /* \"contracts/Stakable-2.0.sol\":12188:12223  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable-2.0.sol\":12188:12231  voters[msg.sender].voted[_votingId] == true */\n      iszero\n      iszero\n      eq\n        /* \"contracts/Stakable-2.0.sol\":12184:12289  if (voters[msg.sender].voted[_votingId] == true) {... */\n      iszero\n      tag_171\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":12255:12277  Voting__alreadyVoted() */\n      mload(0x40)\n      0x740e33b000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":12184:12289  if (voters[msg.sender].voted[_votingId] == true) {... */\n    tag_171:\n        /* \"contracts/Stakable-2.0.sol\":12308:12318  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":12301:12319  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12301:12307  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":12301:12319  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":12326:12335  _votingId */\n      0x07\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":12301:12336  voters[msg.sender].voted[_votingId] */\n      dup6\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12339:12343  true */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":12301:12325  voters[msg.sender].voted */\n      swap2\n      dup3\n      add\n        /* \"contracts/Stakable-2.0.sol\":12301:12336  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":12301:12343  voters[msg.sender].voted[_votingId] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup4\n      or\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":12365:12374  _votingId */\n      sload\n        /* \"contracts/Stakable-2.0.sol\":12354:12375  votedUsers[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12354:12364  votedUsers */\n      0x0a\n        /* \"contracts/Stakable-2.0.sol\":12354:12375  votedUsers[_votingId] */\n      swap1\n      swap3\n      mstore\n      dup3\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":12354:12380  votedUsers[_votingId] += 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":12339:12343  true */\n      swap2\n      swap3\n        /* \"contracts/Stakable-2.0.sol\":12354:12375  votedUsers[_votingId] */\n      swap1\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":12354:12380  votedUsers[_votingId] += 1 */\n      tag_127\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":12339:12343  true */\n      dup5\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":12354:12380  votedUsers[_votingId] += 1 */\n      tag_143\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":10803:11507  function claimAirdrop(address user) external {... */\n    tag_57:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":10935:10953  stakeholders[user] */\n      dup2\n      and\n        /* \"contracts/Stakable-2.0.sol\":10912:10932  Stake storage staker */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":10935:10953  stakeholders[user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":10935:10947  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":10935:10953  stakeholders[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":10970:10982  airdropSince */\n      sload(0x05)\n        /* \"contracts/Stakable-2.0.sol\":10966:11047  if (airdropSince == 0) {... */\n      tag_174\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":11011:11035  Airdrop__notYetStarted() */\n      mload(0x40)\n      0xb347374f00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":10966:11047  if (airdropSince == 0) {... */\n    tag_174:\n        /* \"contracts/Stakable-2.0.sol\":11063:11076  staker.amount */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":11063:11080  staker.amount > 0 */\n      iszero\n        /* \"contracts/Stakable-2.0.sol\":11059:11500  if (staker.amount > 0) {... */\n      tag_178\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":11101:11138  calculateWeek(staker.latestClaimDrop) */\n      tag_176\n        /* \"contracts/Stakable-2.0.sol\":11115:11121  staker */\n      dup2\n        /* \"contracts/Stakable-2.0.sol\":11115:11137  staker.latestClaimDrop */\n      0x06\n      add\n      sload\n        /* \"contracts/Stakable-2.0.sol\":11101:11114  calculateWeek */\n      tag_92\n        /* \"contracts/Stakable-2.0.sol\":11101:11138  calculateWeek(staker.latestClaimDrop) */\n      jump\t// in\n    tag_176:\n        /* \"contracts/Stakable-2.0.sol\":11097:11216  if (calculateWeek(staker.latestClaimDrop) == 0) {... */\n      tag_177\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":11171:11200  Airdrop__claimableOnceAWeek() */\n      mload(0x40)\n      0xdd8456cc00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":11097:11216  if (calculateWeek(staker.latestClaimDrop) == 0) {... */\n    tag_177:\n        /* \"contracts/Stakable-2.0.sol\":11258:11259  0 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":11232:11255  staker.claimableAirdrop */\n      0x05\n      dup3\n      add\n        /* \"contracts/Stakable-2.0.sol\":11232:11259  staker.claimableAirdrop = 0 */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":11299:11314  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":11274:11296  staker.latestClaimDrop */\n      0x06\n      dup3\n      add\n        /* \"contracts/Stakable-2.0.sol\":11274:11314  staker.latestClaimDrop = block.timestamp */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":11379:11392  token_address */\n      sload(0x0b)\n        /* \"contracts/Stakable-2.0.sol\":11459:11472  staker.amount */\n      dup2\n      sload\n        /* \"contracts/Stakable-2.0.sol\":11331:11488  SafeERC20.safeTransfer(... */\n      tag_178\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":11379:11392  token_address */\n      and\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":11412:11422  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":11441:11473  _calculateAirdrop(staker.amount) */\n      tag_179\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":11441:11458  _calculateAirdrop */\n      tag_147\n        /* \"contracts/Stakable-2.0.sol\":11441:11473  _calculateAirdrop(staker.amount) */\n      jump\t// in\n    tag_179:\n        /* \"contracts/Stakable-2.0.sol\":11331:11353  SafeERC20.safeTransfer */\n      tag_180\n        /* \"contracts/Stakable-2.0.sol\":11331:11488  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_178:\n        /* \"contracts/Stakable-2.0.sol\":10848:11507  {... */\n      pop\n        /* \"contracts/Stakable-2.0.sol\":10803:11507  function claimAirdrop(address user) external {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":12689:13112  function getVotingResult()... */\n    tag_59:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload(0x01)\n        /* \"contracts/Stakable-2.0.sol\":12811:12815  bool */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_184\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3938:3940   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3920:3941   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3957:3975   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3950:3980   */\n      mstore\n        /* \"#utility.yul\":4016:4050   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3996:4014   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3989:4051   */\n      mstore\n        /* \"#utility.yul\":4068:4086   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3736:4092   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_184:\n        /* \"contracts/Stakable-2.0.sol\":4126:4146  _checkVotingStatus() */\n      tag_187\n        /* \"contracts/Stakable-2.0.sol\":4126:4144  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable-2.0.sol\":4126:4146  _checkVotingStatus() */\n      jump\t// in\n    tag_187:\n        /* \"contracts/Stakable-2.0.sol\":12852:12853  1 */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":12837:12848  totalVoters */\n      sload(0x08)\n        /* \"contracts/Stakable-2.0.sol\":12837:12853  totalVoters <= 1 */\n      gt\n        /* \"contracts/Stakable-2.0.sol\":12833:12914  if (totalVoters <= 1) {... */\n      tag_189\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":12877:12902  Voting__notEnoughVoters() */\n      mload(0x40)\n      0x2f9686de00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":12833:12914  if (totalVoters <= 1) {... */\n    tag_189:\n        /* \"contracts/Stakable-2.0.sol\":12924:12943  uint256 half_voters */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":12966:12968  10 */\n      0x0a\n        /* \"contracts/Stakable-2.0.sol\":12947:12958  totalVoters */\n      sload(0x08)\n        /* \"contracts/Stakable-2.0.sol\":12961:12962  5 */\n      0x05\n        /* \"contracts/Stakable-2.0.sol\":12947:12962  totalVoters * 5 */\n      tag_190\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_190:\n        /* \"contracts/Stakable-2.0.sol\":12946:12968  (totalVoters * 5) / 10 */\n      tag_191\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_191:\n        /* \"contracts/Stakable-2.0.sol\":12996:13005  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":12985:13006  votedUsers[_votingId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12985:12995  votedUsers */\n      0x0a\n        /* \"contracts/Stakable-2.0.sol\":12985:13006  votedUsers[_votingId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Stakable-2.0.sol\":12924:12968  uint256 half_voters = (totalVoters * 5) / 10 */\n      swap1\n      swap2\n      pop\n        /* \"contracts/Stakable-2.0.sol\":12985:13020  votedUsers[_votingId] > half_voters */\n      dup2\n      lt\n        /* \"contracts/Stakable-2.0.sol\":12981:13105  if (votedUsers[_votingId] > half_voters) {... */\n      iszero\n      tag_192\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":13044:13048  true */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":13037:13048  return true */\n      swap2\n      pop\n      pop\n        /* \"contracts/Stakable-2.0.sol\":12689:13112  function getVotingResult()... */\n      swap1\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":12981:13105  if (votedUsers[_votingId] > half_voters) {... */\n    tag_192:\n        /* \"contracts/Stakable-2.0.sol\":13088:13093  false */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":13081:13093  return false */\n      swap2\n      pop\n      pop\n        /* \"contracts/Stakable-2.0.sol\":12689:13112  function getVotingResult()... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_63:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_197\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3938:3940   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3920:3941   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3957:3975   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3950:3980   */\n      mstore\n        /* \"#utility.yul\":4016:4050   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3996:4014   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3989:4051   */\n      mstore\n        /* \"#utility.yul\":4068:4086   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3736:4092   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_197:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_200\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_201\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_200:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":4492:5954  function stake(uint256 amount, uint256 stakePeriod)... */\n    tag_67:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_203\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2674:2676   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2656:2677   */\n      mstore\n        /* \"#utility.yul\":2713:2715   */\n      0x1f\n        /* \"#utility.yul\":2693:2711   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2686:2716   */\n      mstore\n        /* \"#utility.yul\":2752:2785   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":2732:2750   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2725:2786   */\n      mstore\n        /* \"#utility.yul\":2803:2821   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2472:2827   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_203:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":4716:4727  amount <= 0 */\n      dup2\n        /* \"contracts/Stakable-2.0.sol\":4712:4792  if (amount <= 0) {... */\n      tag_206\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":4751:4780  Staking__cannotStakeNothing() */\n      mload(0x40)\n      0x88b440d600000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":4712:4792  if (amount <= 0) {... */\n    tag_206:\n        /* \"contracts/Stakable-2.0.sol\":4892:4902  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":4879:4903  stakeholders[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":4879:4891  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":4879:4903  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":4879:4910  stakeholders[msg.sender].amount */\n      sload\n        /* \"contracts/Stakable-2.0.sol\":4879:4915  stakeholders[msg.sender].amount != 0 */\n      iszero\n        /* \"contracts/Stakable-2.0.sol\":4875:4974  if (stakeholders[msg.sender].amount != 0) {... */\n      tag_207\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":4939:4962  Staking__userIsStaker() */\n      mload(0x40)\n      0x04462d2700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":4875:4974  if (stakeholders[msg.sender].amount != 0) {... */\n    tag_207:\n        /* \"contracts/Stakable-2.0.sol\":4990:5017  stakingPackage[stakePeriod] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":4990:5004  stakingPackage */\n      0x02\n        /* \"contracts/Stakable-2.0.sol\":4990:5017  stakingPackage[stakePeriod] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Stakable-2.0.sol\":4986:5089  if (stakingPackage[stakePeriod] == 0) {... */\n      tag_208\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":5046:5077  Staking_noStakingPackageFound() */\n      mload(0x40)\n      0x95377be400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":4986:5089  if (stakingPackage[stakePeriod] == 0) {... */\n    tag_208:\n        /* \"contracts/Stakable-2.0.sol\":5116:5117  1 */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":5101:5112  totalVoters */\n      0x08\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":5101:5117  totalVoters += 1 */\n      dup3\n      dup3\n      sload\n      tag_209\n      swap2\n      swap1\n      tag_143\n      jump\t// in\n    tag_209:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Stakable-2.0.sol\":5135:5145  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":5128:5146  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5128:5134  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":5128:5146  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":5128:5165  voters[msg.sender].votingRight = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/Stakable-2.0.sol\":5161:5165  true */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":5128:5165  voters[msg.sender].votingRight = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":5462:5653  Stake(... */\n      dup1\n      mload\n      0xe0\n      dup2\n      add\n      dup3\n      mstore\n      dup6\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5286:5301  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":5462:5653  Stake(... */\n      dup2\n      dup5\n      add\n      dup2\n      swap1\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5527:5554  stakingPackage[stakePeriod] */\n      dup6\n      dup6\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5527:5541  stakingPackage */\n      0x02\n        /* \"contracts/Stakable-2.0.sol\":5527:5554  stakingPackage[stakePeriod] */\n      swap1\n      swap4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Stakable-2.0.sol\":5462:5653  Stake(... */\n      swap1\n      dup4\n      add\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5286:5301  block.timestamp */\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":5462:5653  Stake(... */\n      0x60\n      dup2\n      add\n        /* \"contracts/Stakable-2.0.sol\":5570:5593  stakePeriod + timestamp */\n      tag_210\n        /* \"contracts/Stakable-2.0.sol\":5286:5301  block.timestamp */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":5542:5553  stakePeriod */\n      dup6\n        /* \"contracts/Stakable-2.0.sol\":5570:5593  stakePeriod + timestamp */\n      tag_143\n      jump\t// in\n    tag_210:\n        /* \"contracts/Stakable-2.0.sol\":5462:5653  Stake(... */\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5609:5610  0 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":5462:5653  Stake(... */\n      0x20\n      dup1\n      dup4\n      add\n      dup3\n      swap1\n      mstore\n      0x40\n      dup1\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n      0x60\n      swap4\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5448:5458  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":5435:5459  stakeholders[msg.sender] */\n      dup1\n      dup5\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5435:5447  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":5435:5459  stakeholders[msg.sender] */\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":5435:5653  stakeholders[msg.sender] = Stake(... */\n      dup6\n      mload\n      dup2\n      sstore\n      swap2\n      dup6\n      add\n      mload\n      0x01\n      dup4\n      add\n      sstore\n      dup5\n      add\n      mload\n      0x02\n      dup3\n      add\n      sstore\n      swap2\n      dup4\n      add\n      mload\n      0x03\n      dup4\n      add\n      sstore\n      0x80\n      dup4\n      add\n      mload\n      0x04\n      dup4\n      add\n      sstore\n      0xa0\n      dup4\n      add\n      mload\n      0x05\n      dup4\n      add\n      sstore\n      0xc0\n      swap1\n      swap3\n      add\n      mload\n      0x06\n      swap1\n      swap2\n      add\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":5714:5727  token_address */\n      sload(0x0b)\n        /* \"contracts/Stakable-2.0.sol\":5666:5813  SafeERC20.safeTransferFrom(... */\n      tag_211\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":5714:5727  token_address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":5776:5780  this */\n      address\n        /* \"contracts/Stakable-2.0.sol\":5796:5802  amount */\n      dup7\n        /* \"contracts/Stakable-2.0.sol\":5666:5692  SafeERC20.safeTransferFrom */\n      tag_212\n        /* \"contracts/Stakable-2.0.sol\":5666:5813  SafeERC20.safeTransferFrom(... */\n      jump\t// in\n    tag_211:\n        /* \"contracts/Stakable-2.0.sol\":5889:5899  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":5882:5946  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed\n        /* \"contracts/Stakable-2.0.sol\":5901:5907  amount */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":5909:5918  timestamp */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":5921:5944  stakePeriod + timestamp */\n      tag_213\n        /* \"contracts/Stakable-2.0.sol\":5909:5918  timestamp */\n      dup2\n        /* \"contracts/Stakable-2.0.sol\":5921:5932  stakePeriod */\n      dup8\n        /* \"contracts/Stakable-2.0.sol\":5921:5944  stakePeriod + timestamp */\n      tag_143\n      jump\t// in\n    tag_213:\n        /* \"contracts/Stakable-2.0.sol\":5882:5946  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":4299:4324   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":4355:4357   */\n      0x20\n        /* \"#utility.yul\":4340:4358   */\n      dup5\n      add\n        /* \"#utility.yul\":4333:4367   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":4383:4401   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4376:4410   */\n      mstore\n        /* \"#utility.yul\":4287:4289   */\n      0x60\n        /* \"#utility.yul\":4272:4290   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":5882:5946  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n      pop\n        /* \"contracts/Stakable-2.0.sol\":4492:5954  function stake(uint256 amount, uint256 stakePeriod)... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":5962:6275  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_74:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_219\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3938:3940   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3920:3941   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3957:3975   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3950:3980   */\n      mstore\n        /* \"#utility.yul\":4016:4050   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3996:4014   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3989:4051   */\n      mstore\n        /* \"#utility.yul\":4068:4086   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3736:4092   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_219:\n        /* \"contracts/Stakable-2.0.sol\":6122:6124  30 */\n      0x1e\n        /* \"contracts/Stakable-2.0.sol\":6113:6119  amount */\n      dup2\n        /* \"contracts/Stakable-2.0.sol\":6113:6124  amount > 30 */\n      gt\n        /* \"contracts/Stakable-2.0.sol\":6109:6192  if (amount > 30) {... */\n      iszero\n      tag_222\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":6148:6180  Staking__penaltyExceed3Percent() */\n      mload(0x40)\n      0xf1a470d700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":6109:6192  if (amount > 30) {... */\n    tag_222:\n        /* \"contracts/Stakable-2.0.sol\":6202:6220  stakingPenaltyRate */\n      0x03\n        /* \"contracts/Stakable-2.0.sol\":6202:6229  stakingPenaltyRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":6245:6267  PenaltyChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1575:1600   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":6245:6267  PenaltyChanged(amount) */\n      0xcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9\n      swap1\n        /* \"#utility.yul\":1563:1565   */\n      0x20\n        /* \"#utility.yul\":1548:1566   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":6245:6267  PenaltyChanged(amount) */\n    tag_223:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Stakable-2.0.sol\":5962:6275  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":10466:10602  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_92:\n        /* \"contracts/Stakable-2.0.sol\":10529:10536  uint256 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":10588:10594  7 days */\n      0x093a80\n        /* \"contracts/Stakable-2.0.sol\":10557:10584  block.timestamp - timestamp */\n      tag_226\n        /* \"contracts/Stakable-2.0.sol\":10575:10584  timestamp */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":10557:10572  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":10557:10584  block.timestamp - timestamp */\n      tag_128\n      jump\t// in\n    tag_226:\n        /* \"contracts/Stakable-2.0.sol\":10556:10594  (block.timestamp - timestamp) / 7 days */\n      tag_227\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_227:\n        /* \"contracts/Stakable-2.0.sol\":10549:10594  return (block.timestamp - timestamp) / 7 days */\n      swap3\n        /* \"contracts/Stakable-2.0.sol\":10466:10602  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":7825:8837  function withdrawStake() external nonReentrant {... */\n    tag_98:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_229\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2674:2676   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2656:2677   */\n      mstore\n        /* \"#utility.yul\":2713:2715   */\n      0x1f\n        /* \"#utility.yul\":2693:2711   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2686:2716   */\n      mstore\n        /* \"#utility.yul\":2752:2785   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":2732:2750   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2725:2786   */\n      mstore\n        /* \"#utility.yul\":2803:2821   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2472:2827   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_229:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      dup2\n      dup2\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":8032:8042  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":8019:8043  stakeholders[msg.sender] */\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":8019:8031  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":8019:8043  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":7993:8043  Stake memory user_stake = stakeholders[msg.sender] */\n      dup2\n      mload\n      0xe0\n      dup2\n      add\n      dup4\n      mstore\n      dup2\n      sload\n      dup2\n      mstore\n      0x01\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      swap4\n      dup5\n      add\n      sload\n      swap1\n      dup3\n      add\n      mstore\n      0x03\n      dup4\n      add\n      sload\n      0x60\n      dup3\n      add\n      mstore\n      0x04\n      dup4\n      add\n      sload\n      0x80\n      dup3\n      add\n      mstore\n      0x05\n      dup4\n      add\n      sload\n      0xa0\n      dup3\n      add\n      mstore\n      0x06\n      swap1\n      swap3\n      add\n      sload\n      0xc0\n      dup4\n      add\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":8071:8104  _calculateStakeReward(user_stake) */\n      tag_232\n        /* \"contracts/Stakable-2.0.sol\":7993:8043  Stake memory user_stake = stakeholders[msg.sender] */\n      dup3\n        /* \"contracts/Stakable-2.0.sol\":8071:8092  _calculateStakeReward */\n      tag_134\n        /* \"contracts/Stakable-2.0.sol\":8071:8104  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_232:\n        /* \"contracts/Stakable-2.0.sol\":8137:8147  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":8124:8148  stakeholders[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":8124:8136  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":8124:8148  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":8117:8148  delete stakeholders[msg.sender] */\n      dup2\n      dup2\n      sstore\n      0x01\n      dup1\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x02\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x03\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x04\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x05\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x06\n      swap1\n      swap2\n      add\n      dup3\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":8159:8170  totalVoters */\n      0x08\n        /* \"contracts/Stakable-2.0.sol\":8159:8175  totalVoters -= 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":8054:8104  uint256 reward = _calculateStakeReward(user_stake) */\n      swap4\n      swap5\n      pop\n        /* \"contracts/Stakable-2.0.sol\":8117:8148  delete stakeholders[msg.sender] */\n      swap1\n      swap3\n        /* \"contracts/Stakable-2.0.sol\":8159:8170  totalVoters */\n      swap1\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":8124:8148  stakeholders[msg.sender] */\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8159:8175  totalVoters -= 1 */\n      tag_233\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8117:8148  delete stakeholders[msg.sender] */\n      dup5\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8159:8175  totalVoters -= 1 */\n      tag_128\n      jump\t// in\n    tag_233:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Stakable-2.0.sol\":8200:8210  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":8193:8211  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":8193:8199  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":8193:8211  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":8218:8227  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":8193:8228  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":8193:8217  voters[msg.sender].voted */\n      0x01\n      add\n        /* \"contracts/Stakable-2.0.sol\":8193:8228  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":8186:8228  delete voters[msg.sender].voted[_votingId] */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":8245:8267  user_stake.releaseTime */\n      0x60\n      dup3\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":8270:8285  block.timestamp */\n      timestamp\n      lt\n        /* \"contracts/Stakable-2.0.sol\":8241:8830  if (user_stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_234\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":8321:8343  uint256 amount_reduced */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":8362:8384  uint256 reward_reduced */\n      dup1\n        /* \"contracts/Stakable-2.0.sol\":8402:8457  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      tag_235\n        /* \"contracts/Stakable-2.0.sol\":8431:8441  user_stake */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":8431:8448  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":8450:8456  reward */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":8402:8430  _calculateStakingWithPenalty */\n      tag_236\n        /* \"contracts/Stakable-2.0.sol\":8402:8457  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      jump\t// in\n    tag_235:\n        /* \"contracts/Stakable-2.0.sol\":8522:8535  token_address */\n      sload(0x0b)\n        /* \"contracts/Stakable-2.0.sol\":8302:8457  (... */\n      swap2\n      swap4\n      pop\n      swap2\n      pop\n        /* \"contracts/Stakable-2.0.sol\":8474:8632  SafeERC20.safeTransfer(... */\n      tag_237\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":8522:8535  token_address */\n      and\n        /* \"contracts/Stakable-2.0.sol\":8555:8565  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":8585:8616  amount_reduced + reward_reduced */\n      tag_179\n        /* \"contracts/Stakable-2.0.sol\":8302:8457  (... */\n      dup5\n      dup7\n        /* \"contracts/Stakable-2.0.sol\":8585:8616  amount_reduced + reward_reduced */\n      tag_143\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":8474:8632  SafeERC20.safeTransfer(... */\n    tag_237:\n        /* \"contracts/Stakable-2.0.sol\":8287:8644  {... */\n      pop\n      pop\n        /* \"contracts/Stakable-2.0.sol\":8241:8830  if (user_stake.releaseTime > block.timestamp) {... */\n      jump(tag_240)\n    tag_234:\n        /* \"contracts/Stakable-2.0.sol\":8713:8726  token_address */\n      sload(0x0b)\n        /* \"contracts/Stakable-2.0.sol\":8776:8793  user_stake.amount */\n      dup3\n      mload\n        /* \"contracts/Stakable-2.0.sol\":8665:8818  SafeERC20.safeTransfer(... */\n      tag_240\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":8713:8726  token_address */\n      and\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8746:8756  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8776:8802  user_stake.amount + reward */\n      tag_179\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8796:8802  reward */\n      dup6\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8776:8802  user_stake.amount + reward */\n      tag_143\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":8665:8818  SafeERC20.safeTransfer(... */\n    tag_240:\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":7825:8837  function withdrawStake() external nonReentrant {... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":10012:10104  function startAirdrop() external onlyOwner {... */\n    tag_106:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_246\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3938:3940   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3920:3941   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3957:3975   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3950:3980   */\n      mstore\n        /* \"#utility.yul\":4016:4050   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3996:4014   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3989:4051   */\n      mstore\n        /* \"#utility.yul\":4068:4086   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3736:4092   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_246:\n        /* \"contracts/Stakable-2.0.sol\":10081:10096  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":10066:10078  airdropSince */\n      0x05\n        /* \"contracts/Stakable-2.0.sol\":10066:10096  airdropSince = block.timestamp */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":10012:10104  function startAirdrop() external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":10112:10352  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_109:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_252\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3938:3940   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3920:3941   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3957:3975   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3950:3980   */\n      mstore\n        /* \"#utility.yul\":4016:4050   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3996:4014   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3989:4051   */\n      mstore\n        /* \"#utility.yul\":4068:4086   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3736:4092   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_252:\n        /* \"contracts/Stakable-2.0.sol\":10204:10207  200 */\n      0xc8\n        /* \"contracts/Stakable-2.0.sol\":10195:10201  amount */\n      dup2\n        /* \"contracts/Stakable-2.0.sol\":10195:10207  amount > 200 */\n      gt\n        /* \"contracts/Stakable-2.0.sol\":10191:10276  if (amount > 200) {... */\n      iszero\n      tag_255\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":10231:10264  Staking__airdropExceed20Percent() */\n      mload(0x40)\n      0xa552cf1000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":10191:10276  if (amount > 200) {... */\n    tag_255:\n        /* \"contracts/Stakable-2.0.sol\":10286:10297  airdropRate */\n      0x04\n        /* \"contracts/Stakable-2.0.sol\":10286:10306  airdropRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":10322:10344  AirdropChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1575:1600   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":10322:10344  AirdropChanged(amount) */\n      0xcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e\n      swap1\n        /* \"#utility.yul\":1563:1565   */\n      0x20\n        /* \"#utility.yul\":1548:1566   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":10322:10344  AirdropChanged(amount) */\n      tag_223\n        /* \"#utility.yul\":1429:1606   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_112:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_260\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3938:3940   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3920:3941   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3957:3975   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3950:3980   */\n      mstore\n        /* \"#utility.yul\":4016:4050   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3996:4014   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3989:4051   */\n      mstore\n        /* \"#utility.yul\":4068:4086   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3736:4092   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_260:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_263\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4623:4625   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4605:4626   */\n      mstore\n        /* \"#utility.yul\":4662:4664   */\n      0x26\n        /* \"#utility.yul\":4642:4660   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4635:4665   */\n      mstore\n        /* \"#utility.yul\":4701:4735   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":4681:4699   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4674:4736   */\n      mstore\n        /* \"#utility.yul\":4772:4780   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4752:4770   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4745:4781   */\n      mstore\n        /* \"#utility.yul\":4798:4817   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_117\n        /* \"#utility.yul\":4421:4823   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_263:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_266\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2099  _transferOwnership */\n      tag_201\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_266:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":13120:13218  function stopVoting() external onlyOwner votingStatusTrue {... */\n    tag_114:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_270\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3938:3940   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3920:3941   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3957:3975   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3950:3980   */\n      mstore\n        /* \"#utility.yul\":4016:4050   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3996:4014   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3989:4051   */\n      mstore\n        /* \"#utility.yul\":4068:4086   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3736:4092   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_270:\n        /* \"contracts/Stakable-2.0.sol\":4126:4146  _checkVotingStatus() */\n      tag_273\n        /* \"contracts/Stakable-2.0.sol\":4126:4144  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable-2.0.sol\":4126:4146  _checkVotingStatus() */\n      jump\t// in\n    tag_273:\n        /* \"contracts/Stakable-2.0.sol\":13189:13202  _votingStatus */\n      0x06\n        /* \"contracts/Stakable-2.0.sol\":13189:13210  _votingStatus = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":13120:13218  function stopVoting() external onlyOwner votingStatusTrue {... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":3870:4079  function _checkVotingStatus() internal view {... */\n    tag_121:\n        /* \"contracts/Stakable-2.0.sol\":3993:4006  _votingStatus */\n      and(0xff, sload(0x06))\n        /* \"contracts/Stakable-2.0.sol\":3988:4072  if (!_votingStatus) {... */\n      tag_200\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":4030:4060  Function__votingNotAvailable() */\n      mload(0x40)\n      0xa1d1891400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":3558:3794  function _isVoter() internal view {... */\n    tag_124:\n        /* \"contracts/Stakable-2.0.sol\":3698:3708  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":3691:3709  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":3691:3697  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":3691:3709  voters[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":3691:3721  voters[msg.sender].votingRight */\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable-2.0.sol\":3687:3787  if (voters[msg.sender].votingRight == false) {... */\n      tag_200\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":3754:3775  Function__notAVoter() */\n      mload(0x40)\n      0x1e567dd400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":6529:6979  function _calculateStakeReward(Stake memory user_stake)... */\n    tag_134:\n        /* \"contracts/Stakable-2.0.sol\":6664:6681  user_stake.amount */\n      dup1\n      mload\n        /* \"contracts/Stakable-2.0.sol\":6635:6642  uint256 */\n      0x00\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":6660:6723  if (user_stake.amount == 0) {... */\n      tag_280\n      jumpi\n      pop\n        /* \"contracts/Stakable-2.0.sol\":6710:6711  0 */\n      0x00\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":6529:6979  function _calculateStakeReward(Stake memory user_stake)... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":6660:6723  if (user_stake.amount == 0) {... */\n    tag_280:\n        /* \"contracts/Stakable-2.0.sol\":6967:6971  1e26 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/Stakable-2.0.sol\":6920:6963  _calculateStakingDuration(user_stake.since) */\n      tag_281\n        /* \"contracts/Stakable-2.0.sol\":6946:6956  user_stake */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":6946:6962  user_stake.since */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":6920:6945  _calculateStakingDuration */\n      tag_282\n        /* \"contracts/Stakable-2.0.sol\":6920:6963  _calculateStakingDuration(user_stake.since) */\n      jump\t// in\n    tag_281:\n        /* \"contracts/Stakable-2.0.sol\":6880:6900  user_stake.rewardAPY */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":6843:6860  user_stake.amount */\n      dup5\n      mload\n        /* \"contracts/Stakable-2.0.sol\":6843:6900  user_stake.amount *... */\n      tag_283\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":6880:6900  user_stake.rewardAPY */\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":6843:6900  user_stake.amount *... */\n      tag_137\n      jump\t// in\n    tag_283:\n        /* \"contracts/Stakable-2.0.sol\":6843:6963  user_stake.amount *... */\n      tag_226\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":10610:10795  function _calculateAirdrop(uint256 stakeAmount)... */\n    tag_147:\n        /* \"contracts/Stakable-2.0.sol\":10708:10715  uint256 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":10779:10787  52 weeks */\n      0x01dfe200\n        /* \"contracts/Stakable-2.0.sol\":10771:10775  1000 */\n      0x03e8\n        /* \"contracts/Stakable-2.0.sol\":10756:10767  airdropRate */\n      sload(0x04)\n        /* \"contracts/Stakable-2.0.sol\":10742:10753  stakeAmount */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":10742:10767  stakeAmount * airdropRate */\n      tag_287\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_287:\n        /* \"contracts/Stakable-2.0.sol\":10741:10775  (stakeAmount * airdropRate) / 1000 */\n      tag_226\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n    tag_180:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5020:5075   */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5002:5076   */\n      mstore\n        /* \"#utility.yul\":5092:5110   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":5085:5119   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_292\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":833:838  token */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":863:886  token.transfer.selector */\n      0xa9059cbb00000000000000000000000000000000000000000000000000000000\n      swap1\n        /* \"#utility.yul\":4975:4993   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n    tag_293:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:832  _callOptionalReturn */\n      tag_295\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_292:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_201:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      dup4\n      dup2\n      and\n      0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":912:1153  function safeTransferFrom(... */\n    tag_212:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1077:1145  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5411:5426   */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1077:1145  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":5393:5427   */\n      mstore\n        /* \"#utility.yul\":5463:5478   */\n      dup4\n      and\n        /* \"#utility.yul\":5443:5461   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5436:5479   */\n      mstore\n        /* \"#utility.yul\":5495:5513   */\n      0x64\n      dup2\n      add\n        /* \"#utility.yul\":5488:5522   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1146  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_298\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1070:1075  token */\n      dup6\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1100:1127  token.transferFrom.selector */\n      0x23b872dd00000000000000000000000000000000000000000000000000000000\n      swap1\n        /* \"#utility.yul\":5305:5323   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1077:1145  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      tag_293\n        /* \"#utility.yul\":5130:5528   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1146  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n    tag_298:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":912:1153  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":6987:7358  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_236:\n        /* \"contracts/Stakable-2.0.sol\":7107:7114  uint256 */\n      0x00\n      dup1\n        /* \"contracts/Stakable-2.0.sol\":7145:7156  amount == 0 */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":7141:7198  if (amount == 0) {... */\n      tag_302\n      jumpi\n      pop\n        /* \"contracts/Stakable-2.0.sol\":7181:7182  0 */\n      0x00\n      swap1\n      pop\n      dup1\n        /* \"contracts/Stakable-2.0.sol\":7173:7186  return (0, 0) */\n      jump(tag_301)\n        /* \"contracts/Stakable-2.0.sol\":7141:7198  if (amount == 0) {... */\n    tag_302:\n        /* \"contracts/Stakable-2.0.sol\":7272:7276  1000 */\n      0x03e8\n        /* \"contracts/Stakable-2.0.sol\":7250:7268  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stakable-2.0.sol\":7241:7247  amount */\n      dup6\n        /* \"contracts/Stakable-2.0.sol\":7241:7268  amount * stakingPenaltyRate */\n      tag_303\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_303:\n        /* \"contracts/Stakable-2.0.sol\":7240:7276  (amount * stakingPenaltyRate) / 1000 */\n      tag_304\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_304:\n        /* \"contracts/Stakable-2.0.sol\":7230:7277  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_305\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":7230:7236  amount */\n      dup6\n        /* \"contracts/Stakable-2.0.sol\":7230:7277  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_128\n      jump\t// in\n    tag_305:\n        /* \"contracts/Stakable-2.0.sol\":7334:7338  1000 */\n      0x03e8\n        /* \"contracts/Stakable-2.0.sol\":7312:7330  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stakable-2.0.sol\":7303:7309  reward */\n      dup6\n        /* \"contracts/Stakable-2.0.sol\":7303:7330  reward * stakingPenaltyRate */\n      tag_306\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_306:\n        /* \"contracts/Stakable-2.0.sol\":7302:7338  (reward * stakingPenaltyRate) / 1000 */\n      tag_307\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_307:\n        /* \"contracts/Stakable-2.0.sol\":7292:7339  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_308\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":7292:7298  reward */\n      dup6\n        /* \"contracts/Stakable-2.0.sol\":7292:7339  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_128\n      jump\t// in\n    tag_308:\n        /* \"contracts/Stakable-2.0.sol\":7208:7350  return (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/Stakable-2.0.sol\":6987:7358  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_301:\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":6283:6521  function _calculateStakingDuration(uint256 since)... */\n    tag_282:\n        /* \"contracts/Stakable-2.0.sol\":6383:6390  uint256 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":6505:6513  365 days */\n      0x01e13380\n        /* \"contracts/Stakable-2.0.sol\":6470:6493  block.timestamp - since */\n      tag_310\n        /* \"contracts/Stakable-2.0.sol\":6488:6493  since */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":6470:6485  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":6470:6493  block.timestamp - since */\n      tag_128\n      jump\t// in\n    tag_310:\n        /* \"contracts/Stakable-2.0.sol\":6469:6501  (block.timestamp - since) * 1e24 */\n      tag_226\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":6497:6501  1e24 */\n      0xd3c21bcecceda1000000\n        /* \"contracts/Stakable-2.0.sol\":6469:6501  (block.timestamp - since) * 1e24 */\n      tag_137\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3207:3913  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_295:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3649  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_314\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3680:3684  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3660:3665  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3679  address(token).functionCall */\n      and\n      tag_315\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_314:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3752  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3721  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3756  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3731:3907  if (returndata.length > 0) {... */\n      tag_292\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3830:3840  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3819:3849  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_317\n      swap2\n      swap1\n      tag_318\n      jump\t// in\n    tag_317:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_292\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6017:6019   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5999:6020   */\n      mstore\n        /* \"#utility.yul\":6056:6058   */\n      0x2a\n        /* \"#utility.yul\":6036:6054   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6029:6059   */\n      mstore\n        /* \"#utility.yul\":6095:6129   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":6075:6093   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6068:6130   */\n      mstore\n        /* \"#utility.yul\":6166:6178   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6146:6164   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6139:6179   */\n      mstore\n        /* \"#utility.yul\":6196:6215   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_117\n        /* \"#utility.yul\":5815:6221   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n    tag_315:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3994:4006  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_323\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4047:4053  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4055:4059  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4061:4062  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4064:4076  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4046  functionCallWithValue */\n      tag_324\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_323:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4018:4077  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n    tag_322:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n    tag_324:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5113:5125  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5170:5175  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5166  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5175  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_326\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6428:6430   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6410:6431   */\n      mstore\n        /* \"#utility.yul\":6467:6469   */\n      0x26\n        /* \"#utility.yul\":6447:6465   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6440:6470   */\n      mstore\n        /* \"#utility.yul\":6506:6540   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":6486:6504   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6479:6541   */\n      mstore\n        /* \"#utility.yul\":6577:6585   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6557:6575   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6550:6586   */\n      mstore\n        /* \"#utility.yul\":6603:6622   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_117\n        /* \"#utility.yul\":6226:6628   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_326:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_331\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6835:6837   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6817:6838   */\n      mstore\n        /* \"#utility.yul\":6874:6876   */\n      0x1d\n        /* \"#utility.yul\":6854:6872   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6847:6877   */\n      mstore\n        /* \"#utility.yul\":6913:6944   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":6893:6911   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6886:6945   */\n      mstore\n        /* \"#utility.yul\":6962:6980   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_117\n        /* \"#utility.yul\":6633:6986   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n    tag_331:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5300:5312  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5314:5337  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5347  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5352  target.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5360:5365  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5367:5371  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5372  target.call{value: value}(data) */\n      mload(0x40)\n      tag_334\n      swap2\n      swap1\n      tag_335\n      jump\t// in\n    tag_334:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_338\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_337)\n    tag_338:\n      0x60\n      swap2\n      pop\n    tag_337:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5299:5372  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      tag_339\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5406:5413  success */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5415:5425  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5427:5439  errorMessage */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5405  verifyCallResult */\n      tag_340\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_339:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5382:5440  return verifyCallResult(success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7561:8253  function verifyCallResult(... */\n    tag_340:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7707:7719  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7735:7742  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n      iszero\n      tag_343\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7765:7775  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7758:7775  return returndata */\n      jump(tag_322)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n    tag_343:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7893  returndata.length */\n      dup3\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7897  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n      tag_345\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8070:8080  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8081  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8130:8145  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8117:8127  returndata */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8113:8115  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8109:8128  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8102:8146  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n    tag_345:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8209:8221  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8202:8222  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_117\n      swap2\n      swap1\n      tag_348\n      jump\t// in\n    tag_130:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      tag_349\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\n    tag_349:\n      swap1\n      mstore\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":842:1151   */\n    tag_45:\n        /* \"#utility.yul\":901:907   */\n      0x00\n        /* \"#utility.yul\":954:956   */\n      0x20\n        /* \"#utility.yul\":942:951   */\n      dup3\n        /* \"#utility.yul\":933:940   */\n      dup5\n        /* \"#utility.yul\":929:952   */\n      sub\n        /* \"#utility.yul\":925:957   */\n      slt\n        /* \"#utility.yul\":922:974   */\n      iszero\n      tag_356\n      jumpi\n        /* \"#utility.yul\":970:971   */\n      0x00\n        /* \"#utility.yul\":967:968   */\n      dup1\n        /* \"#utility.yul\":960:972   */\n      revert\n        /* \"#utility.yul\":922:974   */\n    tag_356:\n        /* \"#utility.yul\":1009:1018   */\n      dup2\n        /* \"#utility.yul\":996:1019   */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1052:1057   */\n      dup2\n        /* \"#utility.yul\":1048:1102   */\n      and\n        /* \"#utility.yul\":1041:1046   */\n      dup2\n        /* \"#utility.yul\":1038:1103   */\n      eq\n        /* \"#utility.yul\":1028:1121   */\n      tag_322\n      jumpi\n        /* \"#utility.yul\":1117:1118   */\n      0x00\n        /* \"#utility.yul\":1114:1115   */\n      dup1\n        /* \"#utility.yul\":1107:1119   */\n      revert\n        /* \"#utility.yul\":1803:2051   */\n    tag_66:\n        /* \"#utility.yul\":1871:1877   */\n      0x00\n        /* \"#utility.yul\":1879:1885   */\n      dup1\n        /* \"#utility.yul\":1932:1934   */\n      0x40\n        /* \"#utility.yul\":1920:1929   */\n      dup4\n        /* \"#utility.yul\":1911:1918   */\n      dup6\n        /* \"#utility.yul\":1907:1930   */\n      sub\n        /* \"#utility.yul\":1903:1935   */\n      slt\n        /* \"#utility.yul\":1900:1952   */\n      iszero\n      tag_362\n      jumpi\n        /* \"#utility.yul\":1948:1949   */\n      0x00\n        /* \"#utility.yul\":1945:1946   */\n      dup1\n        /* \"#utility.yul\":1938:1950   */\n      revert\n        /* \"#utility.yul\":1900:1952   */\n    tag_362:\n      pop\n      pop\n        /* \"#utility.yul\":1971:1994   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":2041:2043   */\n      0x20\n        /* \"#utility.yul\":2026:2044   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":2013:2045   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1803:2051   */\n      jump\t// out\n        /* \"#utility.yul\":2056:2236   */\n    tag_73:\n        /* \"#utility.yul\":2115:2121   */\n      0x00\n        /* \"#utility.yul\":2168:2170   */\n      0x20\n        /* \"#utility.yul\":2156:2165   */\n      dup3\n        /* \"#utility.yul\":2147:2154   */\n      dup5\n        /* \"#utility.yul\":2143:2166   */\n      sub\n        /* \"#utility.yul\":2139:2171   */\n      slt\n        /* \"#utility.yul\":2136:2188   */\n      iszero\n      tag_364\n      jumpi\n        /* \"#utility.yul\":2184:2185   */\n      0x00\n        /* \"#utility.yul\":2181:2182   */\n      dup1\n        /* \"#utility.yul\":2174:2186   */\n      revert\n        /* \"#utility.yul\":2136:2188   */\n    tag_364:\n      pop\n        /* \"#utility.yul\":2207:2230   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2056:2236   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2832:3016   */\n    tag_351:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":2881:2882   */\n      0x00\n        /* \"#utility.yul\":2874:2962   */\n      mstore\n        /* \"#utility.yul\":2981:2985   */\n      0x11\n        /* \"#utility.yul\":2978:2979   */\n      0x04\n        /* \"#utility.yul\":2971:2986   */\n      mstore\n        /* \"#utility.yul\":3005:3009   */\n      0x24\n        /* \"#utility.yul\":3002:3003   */\n      0x00\n        /* \"#utility.yul\":2995:3010   */\n      revert\n        /* \"#utility.yul\":3021:3146   */\n    tag_128:\n        /* \"#utility.yul\":3061:3065   */\n      0x00\n        /* \"#utility.yul\":3089:3090   */\n      dup3\n        /* \"#utility.yul\":3086:3087   */\n      dup3\n        /* \"#utility.yul\":3083:3091   */\n      lt\n        /* \"#utility.yul\":3080:3114   */\n      iszero\n      tag_370\n      jumpi\n        /* \"#utility.yul\":3094:3112   */\n      tag_370\n      tag_351\n      jump\t// in\n    tag_370:\n      pop\n        /* \"#utility.yul\":3131:3140   */\n      sub\n      swap1\n        /* \"#utility.yul\":3021:3146   */\n      jump\t// out\n        /* \"#utility.yul\":3151:3319   */\n    tag_137:\n        /* \"#utility.yul\":3191:3198   */\n      0x00\n        /* \"#utility.yul\":3257:3258   */\n      dup2\n        /* \"#utility.yul\":3253:3254   */\n      0x00\n        /* \"#utility.yul\":3249:3255   */\n      not\n        /* \"#utility.yul\":3245:3259   */\n      div\n        /* \"#utility.yul\":3242:3243   */\n      dup4\n        /* \"#utility.yul\":3239:3260   */\n      gt\n        /* \"#utility.yul\":3234:3235   */\n      dup3\n        /* \"#utility.yul\":3227:3236   */\n      iszero\n        /* \"#utility.yul\":3220:3237   */\n      iszero\n        /* \"#utility.yul\":3216:3261   */\n      and\n        /* \"#utility.yul\":3213:3284   */\n      iszero\n      tag_373\n      jumpi\n        /* \"#utility.yul\":3264:3282   */\n      tag_373\n      tag_351\n      jump\t// in\n    tag_373:\n      pop\n        /* \"#utility.yul\":3304:3313   */\n      mul\n      swap1\n        /* \"#utility.yul\":3151:3319   */\n      jump\t// out\n        /* \"#utility.yul\":3324:3598   */\n    tag_139:\n        /* \"#utility.yul\":3364:3365   */\n      0x00\n        /* \"#utility.yul\":3390:3391   */\n      dup3\n        /* \"#utility.yul\":3380:3569   */\n      tag_375\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":3422:3423   */\n      0x00\n        /* \"#utility.yul\":3415:3503   */\n      mstore\n        /* \"#utility.yul\":3526:3530   */\n      0x12\n        /* \"#utility.yul\":3523:3524   */\n      0x04\n        /* \"#utility.yul\":3516:3531   */\n      mstore\n        /* \"#utility.yul\":3554:3558   */\n      0x24\n        /* \"#utility.yul\":3551:3552   */\n      0x00\n        /* \"#utility.yul\":3544:3559   */\n      revert\n        /* \"#utility.yul\":3380:3569   */\n    tag_375:\n      pop\n        /* \"#utility.yul\":3583:3592   */\n      div\n      swap1\n        /* \"#utility.yul\":3324:3598   */\n      jump\t// out\n        /* \"#utility.yul\":3603:3731   */\n    tag_143:\n        /* \"#utility.yul\":3643:3646   */\n      0x00\n        /* \"#utility.yul\":3674:3675   */\n      dup3\n        /* \"#utility.yul\":3670:3676   */\n      not\n        /* \"#utility.yul\":3667:3668   */\n      dup3\n        /* \"#utility.yul\":3664:3677   */\n      gt\n        /* \"#utility.yul\":3661:3700   */\n      iszero\n      tag_378\n      jumpi\n        /* \"#utility.yul\":3680:3698   */\n      tag_378\n      tag_351\n      jump\t// in\n    tag_378:\n      pop\n        /* \"#utility.yul\":3716:3725   */\n      add\n      swap1\n        /* \"#utility.yul\":3603:3731   */\n      jump\t// out\n        /* \"#utility.yul\":5533:5810   */\n    tag_318:\n        /* \"#utility.yul\":5600:5606   */\n      0x00\n        /* \"#utility.yul\":5653:5655   */\n      0x20\n        /* \"#utility.yul\":5641:5650   */\n      dup3\n        /* \"#utility.yul\":5632:5639   */\n      dup5\n        /* \"#utility.yul\":5628:5651   */\n      sub\n        /* \"#utility.yul\":5624:5656   */\n      slt\n        /* \"#utility.yul\":5621:5673   */\n      iszero\n      tag_385\n      jumpi\n        /* \"#utility.yul\":5669:5670   */\n      0x00\n        /* \"#utility.yul\":5666:5667   */\n      dup1\n        /* \"#utility.yul\":5659:5671   */\n      revert\n        /* \"#utility.yul\":5621:5673   */\n    tag_385:\n        /* \"#utility.yul\":5701:5710   */\n      dup2\n        /* \"#utility.yul\":5695:5711   */\n      mload\n        /* \"#utility.yul\":5754:5759   */\n      dup1\n        /* \"#utility.yul\":5747:5760   */\n      iszero\n        /* \"#utility.yul\":5740:5761   */\n      iszero\n        /* \"#utility.yul\":5733:5738   */\n      dup2\n        /* \"#utility.yul\":5730:5762   */\n      eq\n        /* \"#utility.yul\":5720:5780   */\n      tag_322\n      jumpi\n        /* \"#utility.yul\":5776:5777   */\n      0x00\n        /* \"#utility.yul\":5773:5774   */\n      dup1\n        /* \"#utility.yul\":5766:5778   */\n      revert\n        /* \"#utility.yul\":6991:7249   */\n    tag_352:\n        /* \"#utility.yul\":7063:7064   */\n      0x00\n        /* \"#utility.yul\":7073:7186   */\n    tag_391:\n        /* \"#utility.yul\":7087:7093   */\n      dup4\n        /* \"#utility.yul\":7084:7085   */\n      dup2\n        /* \"#utility.yul\":7081:7094   */\n      lt\n        /* \"#utility.yul\":7073:7186   */\n      iszero\n      tag_393\n      jumpi\n        /* \"#utility.yul\":7163:7174   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":7157:7175   */\n      mload\n        /* \"#utility.yul\":7144:7155   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":7137:7176   */\n      mstore\n        /* \"#utility.yul\":7109:7111   */\n      0x20\n        /* \"#utility.yul\":7102:7112   */\n      add\n        /* \"#utility.yul\":7073:7186   */\n      jump(tag_391)\n    tag_393:\n        /* \"#utility.yul\":7204:7210   */\n      dup4\n        /* \"#utility.yul\":7201:7202   */\n      dup2\n        /* \"#utility.yul\":7198:7211   */\n      gt\n        /* \"#utility.yul\":7195:7243   */\n      iszero\n      tag_298\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":7239:7240   */\n      0x00\n        /* \"#utility.yul\":7221:7237   */\n      swap2\n      add\n        /* \"#utility.yul\":7214:7241   */\n      mstore\n        /* \"#utility.yul\":6991:7249   */\n      jump\t// out\n        /* \"#utility.yul\":7254:7528   */\n    tag_335:\n        /* \"#utility.yul\":7383:7386   */\n      0x00\n        /* \"#utility.yul\":7421:7427   */\n      dup3\n        /* \"#utility.yul\":7415:7428   */\n      mload\n        /* \"#utility.yul\":7437:7490   */\n      tag_396\n        /* \"#utility.yul\":7483:7489   */\n      dup2\n        /* \"#utility.yul\":7478:7481   */\n      dup5\n        /* \"#utility.yul\":7471:7475   */\n      0x20\n        /* \"#utility.yul\":7463:7469   */\n      dup8\n        /* \"#utility.yul\":7459:7476   */\n      add\n        /* \"#utility.yul\":7437:7490   */\n      tag_352\n      jump\t// in\n    tag_396:\n        /* \"#utility.yul\":7506:7522   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":7254:7528   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7533:7916   */\n    tag_348:\n        /* \"#utility.yul\":7682:7684   */\n      0x20\n        /* \"#utility.yul\":7671:7680   */\n      dup2\n        /* \"#utility.yul\":7664:7685   */\n      mstore\n        /* \"#utility.yul\":7645:7649   */\n      0x00\n        /* \"#utility.yul\":7714:7720   */\n      dup3\n        /* \"#utility.yul\":7708:7721   */\n      mload\n        /* \"#utility.yul\":7757:7763   */\n      dup1\n        /* \"#utility.yul\":7752:7754   */\n      0x20\n        /* \"#utility.yul\":7741:7750   */\n      dup5\n        /* \"#utility.yul\":7737:7755   */\n      add\n        /* \"#utility.yul\":7730:7764   */\n      mstore\n        /* \"#utility.yul\":7773:7839   */\n      tag_398\n        /* \"#utility.yul\":7832:7838   */\n      dup2\n        /* \"#utility.yul\":7827:7829   */\n      0x40\n        /* \"#utility.yul\":7816:7825   */\n      dup6\n        /* \"#utility.yul\":7812:7830   */\n      add\n        /* \"#utility.yul\":7807:7809   */\n      0x20\n        /* \"#utility.yul\":7799:7805   */\n      dup8\n        /* \"#utility.yul\":7795:7810   */\n      add\n        /* \"#utility.yul\":7773:7839   */\n      tag_352\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":7900:7902   */\n      0x1f\n        /* \"#utility.yul\":7879:7894   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":7875:7904   */\n      and\n        /* \"#utility.yul\":7860:7905   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":7907:7909   */\n      0x40\n        /* \"#utility.yul\":7856:7910   */\n      add\n      swap3\n        /* \"#utility.yul\":7533:7916   */\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122032d4b1343c4f110a93a396d4650b258125c044074f1438737d322c3d73caa7ba64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_123": {
									"entryPoint": null,
									"id": 123,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_876": {
									"entryPoint": null,
									"id": 876,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": null,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 229,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 311,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:306:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:209:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:7"
															},
															"nodeType": "YulIf",
															"src": "105:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "179:16:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "170:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "258:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "267:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "270:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "243:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "248:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "252:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "207:50:7"
															},
															"nodeType": "YulIf",
															"src": "204:70:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "283:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "293:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:7",
														"type": ""
													}
												],
												"src": "14:290:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50604051611b0c380380611b0c83398101604081905261002f91610137565b600160005561003d336100e5565b600f6003556050600455600b80546001600160a01b0319166001600160a01b0392909216919091179055600260205260067fa1ef5b42f18533d67a183a193ea6c3fabfaa3bdabc3fc0e3f65b19b517df6e8c5560077f089cfcbf844e824feee5f634cbc488382291f3c9e0de5905f3c30812390dd832556301e1338060005260087fdc083eb4da7563bbd761324b5158d9d40af7c7174afe39b0b31a7577c44fc33b55610167565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006020828403121561014957600080fd5b81516001600160a01b038116811461016057600080fd5b9392505050565b611996806101766000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80638c8e8fee116100ee578063bed9d86111610097578063d2a569c311610071578063d2a569c3146103ca578063d5dbdf1b146103d2578063f2fde38b146103e5578063fab2f86b146103f857600080fd5b8063bed9d861146103b3578063c63aa3e7146103bb578063cb79c2e1146103c157600080fd5b8063a3ec138d116100c8578063a3ec138d14610374578063b5d9df8314610397578063b87da76d146103aa57600080fd5b80638c8e8fee146103185780638da5cb5b14610343578063a143a5f21461035457600080fd5b806365f8c6c5116101505780637b0472f01161012a5780637b0472f0146102e95780638891cf0d146102fc5780638c63f97f1461030557600080fd5b806365f8c6c5146102b6578063671d2b75146102c9578063715018a6146102e157600080fd5b80632d15cc04116101815780632d15cc041461023a5780635f5300ff14610297578063632a9a52146102ae57600080fd5b8063070c8b74146101a857806310486b6a146101b25780631ec6b60a14610232575b600080fd5b6101b0610400565b005b6101ba6104f4565b604051610229919060006101208201905082518252602083015160208301526040830151805160408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a081015160e084015260c08101516101008401525092915050565b60405180910390f35b6101b0610663565b6102806102483660046117d9565b6001600160a01b031660009081526009602090815260408083208054600754855260019091019092529091205460ff91821692911690565b604080519215158352901515602083015201610229565b6102a060085481565b604051908152602001610229565b6101b0610779565b6101b06102c43660046117d9565b610888565b6102d1610957565b6040519015158152602001610229565b6101b0610a41565b6101b06102f7366004611802565b610aa7565b6102a060045481565b6101b0610313366004611824565b610cff565b600b5461032b906001600160a01b031681565b6040516001600160a01b039091168152602001610229565b6001546001600160a01b031661032b565b6102a0610362366004611824565b600a6020526000908152604090205481565b6102d16103823660046117d9565b60096020526000908152604090205460ff1681565b6102a06103a5366004611824565b610dd0565b6102a060055481565b6101b0610df0565b426102a0565b6102a060035481565b6101b0610f99565b6101b06103e0366004611824565b610ff9565b6101b06103f33660046117d9565b6110c3565b6101b06111a5565b600260005414156104585760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055610465611213565b61046d61124f565b336000908152600960209081526040808320600754845260010190915290205460ff166104c6576040517f8b74220000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6007546000908152600a602052604081208054600192906104e8908490611853565b90915550506001600055565b6104fc61177b565b336000908152600c6020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c0830152610591576040517fb018f08700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606081018252600080825260208201819052918101839052906105b783611298565b9050428260400151606001511115610610576103e8600354826105da919061186a565b6105e49190611889565b60035484516103e8916105f69161186a565b6106009190611889565b61060a91906118ab565b60208301525b600061061f8460c00151610dd0565b111561064357600061063484600001516112dd565b604084015160a0015250610651565b6040820151600060a0909101525b60408201516080015290518152919050565b600260005414156106b65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161044f565b60026000556001546001600160a01b031633146107155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b60065460ff16151560011415610757576040517f6da4cd2e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006805460ff19166001908117909155600780546000906104e89084906118ab565b600260005414156107cc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161044f565b60026000556107d9611213565b6107e161124f565b336000908152600960209081526040808320600754845260019081019092529091205460ff1615151415610841576040517f740e33b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260096020908152604080832060078054855260019182018452828520805460ff191683179055548452600a90925282208054919290916104e89084906118ab565b6001600160a01b0381166000908152600c602052604090206005546108d9576040517fb347374f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805415610953576108ed8160060154610dd0565b610923576040517fdd8456cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006005820155426006820155600b548154610953916001600160a01b031690339061094e906112dd565b6112ff565b5050565b6001546000906001600160a01b031633146109b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b6109bc611213565b6001600854116109f8576040517f2f9686de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a6008546005610a0b919061186a565b610a159190611889565b6007546000908152600a6020526040902054909150811015610a3957600191505090565b600091505090565b6001546001600160a01b03163314610a9b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b610aa560006113ad565b565b60026000541415610afa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161044f565b600260005581610b36576040517f88b440d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c602052604090205415610b7d576040517f04462d2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260026020526040902054610bc2576040517f95377be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160086000828254610bd591906118ab565b9091555050336000908152600960209081526040808320805460ff19166001179055805160e0810182528581524281840181905285855260029093529281902054908301529060608101610c2983856118ab565b8152600060208083018290526040808401839052606093840183905233808452600c8352928190208551815591850151600183015584015160028201559183015160038301556080830151600483015560a0830151600583015560c090920151600690910155600b54610ca9916001600160a01b03909116903086611417565b337fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed8483610cd781876118ab565b6040805193845260208401929092529082015260600160405180910390a25050600160005550565b6001546001600160a01b03163314610d595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b601e811115610d94576040517ff1a470d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038190556040518181527fcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9906020015b60405180910390a150565b600062093a80610de08342611853565b610dea9190611889565b92915050565b60026000541415610e435760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161044f565b60026000818155338152600c60209081526040808320815160e0810183528154815260018201549381019390935293840154908201526003830154606082015260048301546080820152600583015460a082015260069092015460c0830152610eab82611298565b336000908152600c602052604081208181556001808201839055600282018390556003820183905560048201839055600582018390556006909101829055600880549394509092909190610f00908490611853565b909155505033600090815260096020908152604080832060075484526001019091529020805460ff191690556060820151421015610f7057600080610f4984600001518461146e565b600b549193509150610f69906001600160a01b03163361094e84866118ab565b5050610f90565b600b548251610f90916001600160a01b031690339061094e9085906118ab565b50506001600055565b6001546001600160a01b03163314610ff35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b42600555565b6001546001600160a01b031633146110535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b60c881111561108e576040517fa552cf1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048190556040518181527fcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e90602001610dc5565b6001546001600160a01b0316331461111d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b6001600160a01b0381166111995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161044f565b6111a2816113ad565b50565b6001546001600160a01b031633146111ff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b611207611213565b6006805460ff19169055565b60065460ff16610aa5576040517fa1d1891400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526009602052604090205460ff16610aa5576040517f1e567dd400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516000906112a957506000919050565b6a52b7d2dcc80cd2e40000006112c283602001516114d7565b604084015184516112d3919061186a565b610de0919061186a565b60006301dfe2006103e8600454846112f5919061186a565b610de09190611889565b6040516001600160a01b0383166024820152604481018290526113a89084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526114fc565b505050565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526114689085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611344565b50505050565b60008083611481575060009050806114d0565b6103e860035485611492919061186a565b61149c9190611889565b6114a69085611853565b6103e8600354856114b7919061186a565b6114c19190611889565b6114cb9085611853565b915091505b9250929050565b60006301e133806114e88342611853565b610de09069d3c21bcecceda100000061186a565b6000611551826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115e19092919063ffffffff16565b8051909150156113a8578080602001905181019061156f91906118c3565b6113a85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161044f565b60606115f084846000856115fa565b90505b9392505050565b6060824710156116725760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161044f565b6001600160a01b0385163b6116c95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161044f565b600080866001600160a01b031685876040516116e59190611911565b60006040518083038185875af1925050503d8060008114611722576040519150601f19603f3d011682016040523d82523d6000602084013e611727565b606091505b5091509150611737828286611742565b979650505050505050565b606083156117515750816115f3565b8251156117615782518084602001fd5b8160405162461bcd60e51b815260040161044f919061192d565b604051806060016040528060008152602001600081526020016117d46040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b6000602082840312156117eb57600080fd5b81356001600160a01b03811681146115f357600080fd5b6000806040838503121561181557600080fd5b50508035926020909101359150565b60006020828403121561183657600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156118655761186561183d565b500390565b60008160001904831182151516156118845761188461183d565b500290565b6000826118a657634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156118be576118be61183d565b500190565b6000602082840312156118d557600080fd5b815180151581146115f357600080fd5b60005b838110156119005781810151838201526020016118e8565b838111156114685750506000910152565b600082516119238184602087016118e5565b9190910192915050565b602081526000825180602084015261194c8160408501602087016118e5565b601f01601f1916919091016040019291505056fea264697066735822122032d4b1343c4f110a93a396d4650b258125c044074f1438737d322c3d73caa7ba64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1B0C CODESIZE SUB DUP1 PUSH2 0x1B0C DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x137 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE PUSH2 0x3D CALLER PUSH2 0xE5 JUMP JUMPDEST PUSH1 0xF PUSH1 0x3 SSTORE PUSH1 0x50 PUSH1 0x4 SSTORE PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x6 PUSH32 0xA1EF5B42F18533D67A183A193EA6C3FABFAA3BDABC3FC0E3F65B19B517DF6E8C SSTORE PUSH1 0x7 PUSH32 0x89CFCBF844E824FEEE5F634CBC488382291F3C9E0DE5905F3C30812390DD832 SSTORE PUSH4 0x1E13380 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH32 0xDC083EB4DA7563BBD761324B5158D9D40AF7C7174AFE39B0B31A7577C44FC33B SSTORE PUSH2 0x167 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1996 DUP1 PUSH2 0x176 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C8E8FEE GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xBED9D861 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD2A569C3 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0xFAB2F86B EQ PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0xC63AA3E7 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x3C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA3EC138D GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x374 JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65F8C6C5 GT PUSH2 0x150 JUMPI DUP1 PUSH4 0x7B0472F0 GT PUSH2 0x12A JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65F8C6C5 EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x671D2B75 EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D15CC04 GT PUSH2 0x181 JUMPI DUP1 PUSH4 0x2D15CC04 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x632A9A52 EQ PUSH2 0x2AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70C8B74 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x10486B6A EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x1EC6B60A EQ PUSH2 0x232 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0 PUSH2 0x400 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BA PUSH2 0x4F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x229 SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH2 0x663 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x248 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x7 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x229 JUMP JUMPDEST PUSH2 0x2A0 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x229 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x779 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x2C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D9 JUMP JUMPDEST PUSH2 0x888 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x957 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x229 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xA41 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1802 JUMP JUMPDEST PUSH2 0xAA7 JUMP JUMPDEST PUSH2 0x2A0 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0xCFF JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x32B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x229 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x32B JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1824 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D9 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x3A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0xDD0 JUMP JUMPDEST PUSH2 0x2A0 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xDF0 JUMP JUMPDEST TIMESTAMP PUSH2 0x2A0 JUMP JUMPDEST PUSH2 0x2A0 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xF99 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x3E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0xFF9 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x3F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D9 JUMP JUMPDEST PUSH2 0x10C3 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x11A5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x458 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x465 PUSH2 0x1213 JUMP JUMPDEST PUSH2 0x46D PUSH2 0x124F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8B74220000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x1853 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x4FC PUSH2 0x177B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x591 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x5B7 DUP4 PUSH2 0x1298 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x610 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x5DA SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0x5E4 SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP5 MLOAD PUSH2 0x3E8 SWAP2 PUSH2 0x5F6 SWAP2 PUSH2 0x186A JUMP JUMPDEST PUSH2 0x600 SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0x60A SWAP2 SWAP1 PUSH2 0x18AB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x61F DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xDD0 JUMP JUMPDEST GT ISZERO PUSH2 0x643 JUMPI PUSH1 0x0 PUSH2 0x634 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x12DD JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x651 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x6B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x715 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0x757 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6DA4CD2E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x18AB JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x7CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x7D9 PUSH2 0x1213 JUMP JUMPDEST PUSH2 0x7E1 PUSH2 0x124F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0x841 JUMPI PUSH1 0x40 MLOAD PUSH32 0x740E33B000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 DUP1 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP2 DUP3 ADD DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE SLOAD DUP5 MSTORE PUSH1 0xA SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x18AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SLOAD PUSH2 0x8D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB347374F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD ISZERO PUSH2 0x953 JUMPI PUSH2 0x8ED DUP2 PUSH1 0x6 ADD SLOAD PUSH2 0xDD0 JUMP JUMPDEST PUSH2 0x923 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD8456CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xB SLOAD DUP2 SLOAD PUSH2 0x953 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0x94E SWAP1 PUSH2 0x12DD JUMP JUMPDEST PUSH2 0x12FF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0x9BC PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x8 SLOAD GT PUSH2 0x9F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2F9686DE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x8 SLOAD PUSH1 0x5 PUSH2 0xA0B SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0xA15 SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 LT ISZERO PUSH2 0xA39 JUMPI PUSH1 0x1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA9B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0xAA5 PUSH1 0x0 PUSH2 0x13AD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xAFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE DUP2 PUSH2 0xB36 JUMPI PUSH1 0x40 MLOAD PUSH32 0x88B440D600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xB7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x4462D2700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xBC2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x95377BE400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xBD5 SWAP2 SWAP1 PUSH2 0x18AB JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP6 DUP2 MSTORE TIMESTAMP DUP2 DUP5 ADD DUP2 SWAP1 MSTORE DUP6 DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP4 ADD MSTORE SWAP1 PUSH1 0x60 DUP2 ADD PUSH2 0xC29 DUP4 DUP6 PUSH2 0x18AB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE CALLER DUP1 DUP5 MSTORE PUSH1 0xC DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE PUSH1 0xB SLOAD PUSH2 0xCA9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP7 PUSH2 0x1417 JUMP JUMPDEST CALLER PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 PUSH2 0xCD7 DUP2 DUP8 PUSH2 0x18AB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0xD94 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1A470D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 PUSH2 0xDE0 DUP4 TIMESTAMP PUSH2 0x1853 JUMP JUMPDEST PUSH2 0xDEA SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xE43 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP4 DUP5 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0xEAB DUP3 PUSH2 0x1298 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xF00 SWAP1 DUP5 SWAP1 PUSH2 0x1853 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x60 DUP3 ADD MLOAD TIMESTAMP LT ISZERO PUSH2 0xF70 JUMPI PUSH1 0x0 DUP1 PUSH2 0xF49 DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x146E JUMP JUMPDEST PUSH1 0xB SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0xF69 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0x94E DUP5 DUP7 PUSH2 0x18AB JUMP JUMPDEST POP POP PUSH2 0xF90 JUMP JUMPDEST PUSH1 0xB SLOAD DUP3 MLOAD PUSH2 0xF90 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0x94E SWAP1 DUP6 SWAP1 PUSH2 0x18AB JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST TIMESTAMP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0x108E JUMPI PUSH1 0x40 MLOAD PUSH32 0xA552CF1000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0xDC5 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x111D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1199 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0x11A2 DUP2 PUSH2 0x13AD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x11FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0x1207 PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0xAA5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D1891400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xAA5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1E567DD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x12A9 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x12C2 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x14D7 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0x12D3 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0xDE0 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0x12F5 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0xDE0 SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x13A8 SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x14FC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1468 SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD PUSH2 0x1344 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0x1481 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x14D0 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x1492 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0x149C SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0x14A6 SWAP1 DUP6 PUSH2 0x1853 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x14B7 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0x14C1 SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0x14CB SWAP1 DUP6 PUSH2 0x1853 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH2 0x14E8 DUP4 TIMESTAMP PUSH2 0x1853 JUMP JUMPDEST PUSH2 0xDE0 SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x186A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1551 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x15E1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x13A8 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x156F SWAP2 SWAP1 PUSH2 0x18C3 JUMP JUMPDEST PUSH2 0x13A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x60 PUSH2 0x15F0 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x15FA JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1672 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x16C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x16E5 SWAP2 SWAP1 PUSH2 0x1911 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1722 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1727 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1737 DUP3 DUP3 DUP7 PUSH2 0x1742 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1751 JUMPI POP DUP2 PUSH2 0x15F3 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1761 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP2 SWAP1 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x17D4 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x15F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1836 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1865 JUMPI PUSH2 0x1865 PUSH2 0x183D JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1884 JUMPI PUSH2 0x1884 PUSH2 0x183D JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x18A6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x18BE JUMPI PUSH2 0x18BE PUSH2 0x183D JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x15F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1900 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x18E8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1468 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1923 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x18E5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x194C DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x18E5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0xD4 0xB1 CALLVALUE EXTCODECOPY 0x4F GT EXP SWAP4 LOG3 SWAP7 0xD4 PUSH6 0xB258125C044 SMOD 0x4F EQ CODESIZE PUSH20 0x7D322C3D73CAA7BA64736F6C634300080B003300 ",
							"sourceMap": "1050:12171:6:-:0;;;1775:311;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1701:1:1;1806:7;:22;921:32:0;719:10:5;921:18:0;:32::i;:::-;1897:2:6;1876:18;:23;1924:2;1910:11;:16;1939:13;:21;;-1:-1:-1;;;;;;1939:21:6;-1:-1:-1;;;;;1939:21:6;;;;;;;;;;1973:14;:23;;1999:1;1973:23;:27;2038:1;2011:24;:28;2065:8;-1:-1:-1;2050:24:6;2077:1;2050:24;:28;1050:12171;;2270:187:0;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;14:290:7:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:7;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:7:o;:::-;1050:12171:6;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_blockTimestamp_1432": {
									"entryPoint": null,
									"id": 1432,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_calculateAirdrop_1466": {
									"entryPoint": 4829,
									"id": 1466,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakeReward_1143": {
									"entryPoint": 4760,
									"id": 1143,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingDuration_1112": {
									"entryPoint": 5335,
									"id": 1112,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingWithPenalty_1184": {
									"entryPoint": 5230,
									"id": 1184,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@_callOptionalReturn_445": {
									"entryPoint": 5372,
									"id": 445,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkVotingStatus_958": {
									"entryPoint": 4627,
									"id": 958,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_isVoter_940": {
									"entryPoint": 4687,
									"id": 940,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": null,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 5037,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@airdropRate_821": {
									"entryPoint": null,
									"id": 821,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropSince_823": {
									"entryPoint": null,
									"id": 823,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@calculateWeek_1448": {
									"entryPoint": 3536,
									"id": 1448,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@changeAirdropPercentage_1423": {
									"entryPoint": 4089,
									"id": 1423,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changePenaltyFee_1093": {
									"entryPoint": 3327,
									"id": 1093,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@claimAirdrop_1531": {
									"entryPoint": 2184,
									"id": 1531,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@functionCallWithValue_605": {
									"entryPoint": 5626,
									"id": 605,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_535": {
									"entryPoint": 5601,
									"id": 535,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getVoters_1553": {
									"entryPoint": null,
									"id": 1553,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"@getVotingResult_1696": {
									"entryPoint": 2391,
									"id": 1696,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@hasStake_1388": {
									"entryPoint": 1268,
									"id": 1388,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isContract_464": {
									"entryPoint": null,
									"id": 464,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_32": {
									"entryPoint": null,
									"id": 32,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_60": {
									"entryPoint": 2625,
									"id": 60,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@retractVote_1657": {
									"entryPoint": 1024,
									"id": 1657,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_279": {
									"entryPoint": 5143,
									"id": 279,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_253": {
									"entryPoint": 4863,
									"id": 253,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@stake_1069": {
									"entryPoint": 2727,
									"id": 1069,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@stakingPenaltyRate_819": {
									"entryPoint": null,
									"id": 819,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startAirdrop_1399": {
									"entryPoint": 3993,
									"id": 1399,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startVoting_1577": {
									"entryPoint": 1635,
									"id": 1577,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@stopVoting_1708": {
									"entryPoint": 4517,
									"id": 1708,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@token_address_840": {
									"entryPoint": null,
									"id": 840,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalVoters_829": {
									"entryPoint": null,
									"id": 829,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_83": {
									"entryPoint": 4291,
									"id": 83,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResult_740": {
									"entryPoint": 5954,
									"id": 740,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@vote_1617": {
									"entryPoint": 1913,
									"id": 1617,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@votedUsers_838": {
									"entryPoint": null,
									"id": 838,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@voters_834": {
									"entryPoint": null,
									"id": 834,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@withdrawStake_1271": {
									"entryPoint": 3568,
									"id": 1271,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 6105,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 6339,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 6180,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 6146,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 6417,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6445,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_StakingSummary_$899_memory_ptr__to_t_struct$_StakingSummary_$899_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 6315,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 6281,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 6250,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 6227,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 6373,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 6205,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:7918:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:660:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "187:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "199:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "210:3:7",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "195:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "195:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "187:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "230:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "247:6:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "241:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "241:13:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:32:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "223:32:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "275:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "286:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "271:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "271:20:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "303:6:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "311:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "299:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "299:17:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "293:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "293:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "264:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "264:54:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "264:54:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "327:44:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "357:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "365:4:7",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "353:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "353:17:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "347:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "347:24:7"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "331:12:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "391:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "402:4:7",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "387:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "387:20:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "415:12:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "409:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "409:19:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "380:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "380:49:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "380:49:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "449:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "460:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "445:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "445:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "475:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "489:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "471:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "471:23:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "465:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "465:30:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "438:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "438:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "516:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "527:3:7",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "512:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "512:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "543:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "557:4:7",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "539:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "539:23:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "533:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "533:30:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "505:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "505:59:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "505:59:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "584:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "595:3:7",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "580:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "580:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "611:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "625:2:7",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "607:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "607:21:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "601:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "601:28:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "573:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "573:57:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "573:57:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "650:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "661:3:7",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "646:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "646:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "677:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "691:3:7",
																						"type": "",
																						"value": "128"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "673:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "673:22:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "667:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "667:29:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "639:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "639:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "639:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "717:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "728:3:7",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "713:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "713:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "744:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "758:3:7",
																						"type": "",
																						"value": "160"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "740:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "740:22:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "734:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "734:29:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "706:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "706:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "706:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "784:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "795:3:7",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "780:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "780:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "811:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "825:3:7",
																						"type": "",
																						"value": "192"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "807:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "807:22:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "801:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "801:29:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "773:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "773:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "773:58:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_StakingSummary_$899_memory_ptr__to_t_struct$_StakingSummary_$899_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "146:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "157:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "168:4:7",
														"type": ""
													}
												],
												"src": "14:823:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "912:239:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "958:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "967:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "970:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "960:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "960:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "960:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "933:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "942:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "929:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "929:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "954:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "925:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "925:32:7"
															},
															"nodeType": "YulIf",
															"src": "922:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "983:36:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1009:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "996:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "996:23:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "987:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1105:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1114:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1117:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1107:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1107:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1107:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1041:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1052:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1059:42:7",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1048:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1048:54:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1038:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1038:65:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1031:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1031:73:7"
															},
															"nodeType": "YulIf",
															"src": "1028:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1130:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1140:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1130:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "878:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "889:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "901:6:7",
														"type": ""
													}
												],
												"src": "842:309:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1273:151:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1283:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1295:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1306:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1291:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1291:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1283:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1325:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1350:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1343:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1343:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1336:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1336:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1318:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1318:41:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1318:41:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1379:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1390:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1375:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1375:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "1409:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1402:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1402:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1395:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1395:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1368:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1368:50:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1368:50:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1234:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1245:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1253:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1264:4:7",
														"type": ""
													}
												],
												"src": "1156:268:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1530:76:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1540:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1552:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1563:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1548:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1548:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1540:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1582:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1593:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1575:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1575:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1575:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1499:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1510:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1521:4:7",
														"type": ""
													}
												],
												"src": "1429:177:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1706:92:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1716:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1728:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1739:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1724:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1724:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1716:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1758:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1783:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1776:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1776:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1769:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1769:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1751:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1751:41:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1751:41:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1675:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1686:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1697:4:7",
														"type": ""
													}
												],
												"src": "1611:187:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1890:161:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1936:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1945:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1948:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1938:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1938:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1938:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1911:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1920:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1907:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1907:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1932:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1903:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1903:32:7"
															},
															"nodeType": "YulIf",
															"src": "1900:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1961:33:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1984:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1971:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1971:23:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1961:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2003:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2030:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2041:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2026:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2026:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2013:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2013:32:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2003:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1848:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1859:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1871:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1879:6:7",
														"type": ""
													}
												],
												"src": "1803:248:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2126:110:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2172:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2181:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2184:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2174:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2174:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2174:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2147:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2156:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2143:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2143:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2168:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2139:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2139:32:7"
															},
															"nodeType": "YulIf",
															"src": "2136:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2197:33:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2220:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2207:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2207:23:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2197:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2092:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2103:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2115:6:7",
														"type": ""
													}
												],
												"src": "2056:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2342:125:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2352:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2364:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2375:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2360:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2360:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2352:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2394:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2409:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2417:42:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2405:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2405:55:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2387:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2387:74:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2387:74:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2311:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2322:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2333:4:7",
														"type": ""
													}
												],
												"src": "2241:226:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2646:181:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2663:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2674:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2656:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2656:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2656:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2697:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2708:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2693:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2693:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2713:2:7",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2686:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2686:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2686:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2736:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2747:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2732:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2732:18:7"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2752:33:7",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2725:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2725:61:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2725:61:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2795:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2807:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2818:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2803:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2803:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2795:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2623:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2637:4:7",
														"type": ""
													}
												],
												"src": "2472:355:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2864:152:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2881:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2884:77:7",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2874:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2874:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2874:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2978:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2981:4:7",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2971:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2971:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2971:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3002:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3005:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2995:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2995:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2995:15:7"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2832:184:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3070:76:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3092:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3094:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3094:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3094:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3086:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3089:1:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3083:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3083:8:7"
															},
															"nodeType": "YulIf",
															"src": "3080:34:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3123:17:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3135:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3138:1:7"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3131:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3131:9:7"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "3123:4:7"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3052:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3055:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "3061:4:7",
														"type": ""
													}
												],
												"src": "3021:125:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3203:116:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3262:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3264:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3264:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3264:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "3234:1:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3227:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3227:9:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3220:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3220:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3242:1:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3253:1:7",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "3249:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3249:6:7"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "3257:1:7"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "3245:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3245:14:7"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3239:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3239:21:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3216:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3216:45:7"
															},
															"nodeType": "YulIf",
															"src": "3213:71:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3293:20:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3308:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3311:1:7"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "3304:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3304:9:7"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "3293:7:7"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3182:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3185:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "3191:7:7",
														"type": ""
													}
												],
												"src": "3151:168:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3370:228:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3401:168:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3422:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3425:77:7",
																					"type": "",
																					"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3415:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3415:88:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3415:88:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3523:1:7",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3526:4:7",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3516:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3516:15:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3516:15:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3551:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3554:4:7",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3544:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3544:15:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3544:15:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3390:1:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3383:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3383:9:7"
															},
															"nodeType": "YulIf",
															"src": "3380:189:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3578:14:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3587:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3590:1:7"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3583:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3583:9:7"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "3578:1:7"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3355:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3358:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "3364:1:7",
														"type": ""
													}
												],
												"src": "3324:274:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3651:80:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3678:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3680:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3680:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3680:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3667:1:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3674:1:7"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "3670:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3670:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3664:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3664:13:7"
															},
															"nodeType": "YulIf",
															"src": "3661:39:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3709:16:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3720:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3723:1:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3716:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3716:9:7"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "3709:3:7"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3634:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3637:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "3643:3:7",
														"type": ""
													}
												],
												"src": "3603:128:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3910:182:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3927:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3938:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3920:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3920:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3920:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3961:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3972:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3957:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3957:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3977:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3950:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3950:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3950:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4000:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4011:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3996:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3996:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4016:34:7",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3989:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3989:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3989:62:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4060:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4072:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4083:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4068:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4068:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4060:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3887:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3901:4:7",
														"type": ""
													}
												],
												"src": "3736:356:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4254:162:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4264:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4276:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4287:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4272:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4272:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4264:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4306:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4317:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4299:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4299:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4299:25:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4344:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4355:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4340:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4340:18:7"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4360:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4333:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4333:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4333:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4387:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4398:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4383:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4383:18:7"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4403:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4376:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4376:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4376:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4207:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4218:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4226:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4234:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4245:4:7",
														"type": ""
													}
												],
												"src": "4097:319:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4595:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4612:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4623:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4605:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4605:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4605:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4646:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4657:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4642:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4642:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4662:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4635:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4635:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4635:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4685:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4696:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4681:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4681:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4701:34:7",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4674:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4674:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4674:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4756:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4767:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4752:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4752:18:7"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4772:8:7",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4745:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4745:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4745:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4790:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4802:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4813:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4798:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4798:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4790:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4572:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4586:4:7",
														"type": ""
													}
												],
												"src": "4421:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4957:168:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4967:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4979:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4990:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4975:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4975:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4967:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5009:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5024:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5032:42:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5020:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5020:55:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5002:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5002:74:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5002:74:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5096:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5107:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5092:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5092:18:7"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5112:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5085:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5085:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5085:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4918:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4929:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4937:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4948:4:7",
														"type": ""
													}
												],
												"src": "4828:297:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5287:241:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5297:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5309:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5320:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5305:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5305:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5297:4:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5332:52:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5342:42:7",
																"type": "",
																"value": "0xffffffffffffffffffffffffffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5336:2:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5400:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5415:6:7"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5423:2:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5411:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5411:15:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5393:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5393:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5393:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5447:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5458:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5443:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5443:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5467:6:7"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5475:2:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5463:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5463:15:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5436:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5436:43:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5436:43:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5499:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5510:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5495:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5495:18:7"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5515:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5488:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5488:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5488:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5240:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5251:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5259:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5267:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5278:4:7",
														"type": ""
													}
												],
												"src": "5130:398:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5611:199:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5657:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5666:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5669:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5659:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5659:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5659:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5632:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5641:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5628:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5628:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5653:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5624:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5624:32:7"
															},
															"nodeType": "YulIf",
															"src": "5621:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5682:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5701:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5695:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5695:16:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5686:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5764:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5773:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5776:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5766:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5766:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5766:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5733:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "5754:5:7"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "5747:6:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5747:13:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5740:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5740:21:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5730:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5730:32:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5723:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5723:40:7"
															},
															"nodeType": "YulIf",
															"src": "5720:60:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5789:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "5799:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5789:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5577:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5588:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5600:6:7",
														"type": ""
													}
												],
												"src": "5533:277:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5989:232:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6006:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6017:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5999:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5999:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5999:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6040:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6051:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6036:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6036:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6056:2:7",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6029:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6029:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6029:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6079:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6090:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6075:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6075:18:7"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6095:34:7",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6068:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6068:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6068:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6150:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6161:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6146:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6146:18:7"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6166:12:7",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6139:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6139:40:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6139:40:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6188:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6200:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6211:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6196:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6196:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6188:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5966:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5980:4:7",
														"type": ""
													}
												],
												"src": "5815:406:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6400:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6417:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6428:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6410:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6410:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6410:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6451:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6462:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6447:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6447:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6467:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6440:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6440:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6440:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6490:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6501:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6486:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6486:18:7"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6506:34:7",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6479:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6479:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6479:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6561:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6572:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6557:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6557:18:7"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6577:8:7",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6550:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6550:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6550:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6595:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6607:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6618:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6603:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6603:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6595:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6377:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6391:4:7",
														"type": ""
													}
												],
												"src": "6226:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6807:179:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6824:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6835:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6817:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6817:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6817:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6858:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6869:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6854:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6854:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6874:2:7",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6847:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6847:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6847:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6897:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6908:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6893:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6893:18:7"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6913:31:7",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6886:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6886:59:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6886:59:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6954:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6966:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6977:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6962:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6962:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6954:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6784:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6798:4:7",
														"type": ""
													}
												],
												"src": "6633:353:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7044:205:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7054:10:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7063:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "7058:1:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7123:63:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "7148:3:7"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "7153:1:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "7144:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7144:11:7"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "7167:3:7"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "7172:1:7"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "7163:3:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7163:11:7"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "7157:5:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7157:18:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7137:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7137:39:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7137:39:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "7084:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7087:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "7081:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7081:13:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "7095:19:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7097:15:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "7106:1:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7109:2:7",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7102:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7102:10:7"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "7097:1:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "7077:3:7",
																"statements": []
															},
															"src": "7073:113:7"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7212:31:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "7225:3:7"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "7230:6:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "7221:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7221:16:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7239:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7214:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7214:27:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7214:27:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "7201:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7204:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7198:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7198:13:7"
															},
															"nodeType": "YulIf",
															"src": "7195:48:7"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "7022:3:7",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "7027:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7032:6:7",
														"type": ""
													}
												],
												"src": "6991:258:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7391:137:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7401:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7421:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7415:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7415:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7405:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7463:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7471:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7459:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7459:17:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7478:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7483:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "7437:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7437:53:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7437:53:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7499:23:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7510:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7515:6:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7506:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7506:16:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7499:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7367:3:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7372:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7383:3:7",
														"type": ""
													}
												],
												"src": "7254:274:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7654:262:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7671:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7682:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7664:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7664:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7664:21:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7694:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7714:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7708:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7708:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7698:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7741:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7752:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7737:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7737:18:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7757:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7730:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7730:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7730:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7799:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7807:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7795:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7795:15:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7816:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7827:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7812:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7812:18:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7832:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "7773:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7773:66:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7773:66:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7848:62:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7864:9:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "7883:6:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7891:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "7879:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7879:15:7"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7900:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "7896:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7896:7:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "7875:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7875:29:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7860:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7860:45:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7907:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7856:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7856:54:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7848:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7623:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7634:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7645:4:7",
														"type": ""
													}
												],
												"src": "7533:383:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_struct$_StakingSummary_$899_memory_ptr__to_t_struct$_StakingSummary_$899_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 288)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        let memberValue0 := mload(add(value0, 0x40))\n        mstore(add(headStart, 0x40), mload(memberValue0))\n        mstore(add(headStart, 96), mload(add(memberValue0, 0x20)))\n        mstore(add(headStart, 128), mload(add(memberValue0, 0x40)))\n        mstore(add(headStart, 160), mload(add(memberValue0, 96)))\n        mstore(add(headStart, 192), mload(add(memberValue0, 128)))\n        mstore(add(headStart, 224), mload(add(memberValue0, 160)))\n        mstore(add(headStart, 256), mload(add(memberValue0, 192)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C8E8FEE GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xBED9D861 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD2A569C3 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0xFAB2F86B EQ PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0xC63AA3E7 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x3C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA3EC138D GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x374 JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65F8C6C5 GT PUSH2 0x150 JUMPI DUP1 PUSH4 0x7B0472F0 GT PUSH2 0x12A JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65F8C6C5 EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x671D2B75 EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D15CC04 GT PUSH2 0x181 JUMPI DUP1 PUSH4 0x2D15CC04 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x632A9A52 EQ PUSH2 0x2AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70C8B74 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x10486B6A EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x1EC6B60A EQ PUSH2 0x232 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0 PUSH2 0x400 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BA PUSH2 0x4F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x229 SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH2 0x663 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x248 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x7 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x229 JUMP JUMPDEST PUSH2 0x2A0 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x229 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x779 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x2C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D9 JUMP JUMPDEST PUSH2 0x888 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x957 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x229 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xA41 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1802 JUMP JUMPDEST PUSH2 0xAA7 JUMP JUMPDEST PUSH2 0x2A0 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0xCFF JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x32B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x229 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x32B JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1824 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D9 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x3A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0xDD0 JUMP JUMPDEST PUSH2 0x2A0 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xDF0 JUMP JUMPDEST TIMESTAMP PUSH2 0x2A0 JUMP JUMPDEST PUSH2 0x2A0 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xF99 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x3E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0xFF9 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x3F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D9 JUMP JUMPDEST PUSH2 0x10C3 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x11A5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x458 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x465 PUSH2 0x1213 JUMP JUMPDEST PUSH2 0x46D PUSH2 0x124F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8B74220000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x1853 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x4FC PUSH2 0x177B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x591 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x5B7 DUP4 PUSH2 0x1298 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x610 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x5DA SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0x5E4 SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP5 MLOAD PUSH2 0x3E8 SWAP2 PUSH2 0x5F6 SWAP2 PUSH2 0x186A JUMP JUMPDEST PUSH2 0x600 SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0x60A SWAP2 SWAP1 PUSH2 0x18AB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x61F DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xDD0 JUMP JUMPDEST GT ISZERO PUSH2 0x643 JUMPI PUSH1 0x0 PUSH2 0x634 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x12DD JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x651 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x6B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x715 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0x757 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6DA4CD2E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x18AB JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x7CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x7D9 PUSH2 0x1213 JUMP JUMPDEST PUSH2 0x7E1 PUSH2 0x124F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0x841 JUMPI PUSH1 0x40 MLOAD PUSH32 0x740E33B000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 DUP1 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP2 DUP3 ADD DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE SLOAD DUP5 MSTORE PUSH1 0xA SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x18AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 SLOAD PUSH2 0x8D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB347374F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD ISZERO PUSH2 0x953 JUMPI PUSH2 0x8ED DUP2 PUSH1 0x6 ADD SLOAD PUSH2 0xDD0 JUMP JUMPDEST PUSH2 0x923 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD8456CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xB SLOAD DUP2 SLOAD PUSH2 0x953 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0x94E SWAP1 PUSH2 0x12DD JUMP JUMPDEST PUSH2 0x12FF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0x9BC PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x8 SLOAD GT PUSH2 0x9F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2F9686DE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x8 SLOAD PUSH1 0x5 PUSH2 0xA0B SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0xA15 SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 LT ISZERO PUSH2 0xA39 JUMPI PUSH1 0x1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA9B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0xAA5 PUSH1 0x0 PUSH2 0x13AD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xAFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE DUP2 PUSH2 0xB36 JUMPI PUSH1 0x40 MLOAD PUSH32 0x88B440D600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xB7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x4462D2700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xBC2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x95377BE400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xBD5 SWAP2 SWAP1 PUSH2 0x18AB JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP6 DUP2 MSTORE TIMESTAMP DUP2 DUP5 ADD DUP2 SWAP1 MSTORE DUP6 DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP4 ADD MSTORE SWAP1 PUSH1 0x60 DUP2 ADD PUSH2 0xC29 DUP4 DUP6 PUSH2 0x18AB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE CALLER DUP1 DUP5 MSTORE PUSH1 0xC DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE PUSH1 0xB SLOAD PUSH2 0xCA9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP7 PUSH2 0x1417 JUMP JUMPDEST CALLER PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 PUSH2 0xCD7 DUP2 DUP8 PUSH2 0x18AB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0xD94 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1A470D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 PUSH2 0xDE0 DUP4 TIMESTAMP PUSH2 0x1853 JUMP JUMPDEST PUSH2 0xDEA SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xE43 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP4 DUP5 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0xEAB DUP3 PUSH2 0x1298 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xF00 SWAP1 DUP5 SWAP1 PUSH2 0x1853 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x60 DUP3 ADD MLOAD TIMESTAMP LT ISZERO PUSH2 0xF70 JUMPI PUSH1 0x0 DUP1 PUSH2 0xF49 DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x146E JUMP JUMPDEST PUSH1 0xB SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0xF69 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0x94E DUP5 DUP7 PUSH2 0x18AB JUMP JUMPDEST POP POP PUSH2 0xF90 JUMP JUMPDEST PUSH1 0xB SLOAD DUP3 MLOAD PUSH2 0xF90 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0x94E SWAP1 DUP6 SWAP1 PUSH2 0x18AB JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST TIMESTAMP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0x108E JUMPI PUSH1 0x40 MLOAD PUSH32 0xA552CF1000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0xDC5 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x111D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1199 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0x11A2 DUP2 PUSH2 0x13AD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x11FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0x1207 PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0xAA5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D1891400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xAA5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1E567DD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x12A9 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x12C2 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x14D7 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0x12D3 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0xDE0 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0x12F5 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0xDE0 SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x13A8 SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x14FC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1468 SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD PUSH2 0x1344 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0x1481 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x14D0 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x1492 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0x149C SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0x14A6 SWAP1 DUP6 PUSH2 0x1853 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x14B7 SWAP2 SWAP1 PUSH2 0x186A JUMP JUMPDEST PUSH2 0x14C1 SWAP2 SWAP1 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0x14CB SWAP1 DUP6 PUSH2 0x1853 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH2 0x14E8 DUP4 TIMESTAMP PUSH2 0x1853 JUMP JUMPDEST PUSH2 0xDE0 SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x186A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1551 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x15E1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x13A8 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x156F SWAP2 SWAP1 PUSH2 0x18C3 JUMP JUMPDEST PUSH2 0x13A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x60 PUSH2 0x15F0 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x15FA JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1672 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x16C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x16E5 SWAP2 SWAP1 PUSH2 0x1911 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1722 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1727 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1737 DUP3 DUP3 DUP7 PUSH2 0x1742 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1751 JUMPI POP DUP2 PUSH2 0x15F3 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1761 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP2 SWAP1 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x17D4 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x15F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1836 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1865 JUMPI PUSH2 0x1865 PUSH2 0x183D JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1884 JUMPI PUSH2 0x1884 PUSH2 0x183D JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x18A6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x18BE JUMPI PUSH2 0x18BE PUSH2 0x183D JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x15F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1900 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x18E8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1468 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1923 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x18E5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x194C DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x18E5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0xD4 0xB1 CALLVALUE EXTCODECOPY 0x4F GT EXP SWAP4 LOG3 SWAP7 0xD4 PUSH6 0xB258125C044 SMOD 0x4F EQ CODESIZE PUSH20 0x7D322C3D73CAA7BA64736F6C634300080B003300 ",
							"sourceMap": "1050:12171:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12396:285;;;:::i;:::-;;8845:1051;;;:::i;:::-;;;;;;168:4:7;210:3;199:9;195:19;187:27;;247:6;241:13;230:9;223:32;311:4;303:6;299:17;293:24;286:4;275:9;271:20;264:54;365:4;357:6;353:17;347:24;415:12;409:19;402:4;391:9;387:20;380:49;489:4;475:12;471:23;465:30;460:2;449:9;445:18;438:58;557:4;543:12;539:23;533:30;527:3;516:9;512:19;505:59;625:2;611:12;607:21;601:28;595:3;584:9;580:19;573:57;691:3;677:12;673:22;667:29;661:3;650:9;646:19;639:58;758:3;744:12;740:22;734:29;728:3;717:9;713:19;706:58;825:3;811:12;807:22;801:29;795:3;784:9;780:19;773:58;;14:823;;;;;8845:1051:6;;;;;;;;11887:217;;;:::i;11667:151::-;;;;;;:::i;:::-;-1:-1:-1;;;;;11754:12:6;11723:4;11754:12;;;:6;:12;;;;;;;;:24;;11799:9;;11780:29;;11754:24;11780:18;;;:29;;;;;;;11754:24;;;;;11780:29;;;11667:151;;;;;1343:14:7;;1336:22;1318:41;;1402:14;;1395:22;1390:2;1375:18;;1368:50;1291:18;11667:151:6;1156:268:7;1605:26:6;;;;;;;;;1575:25:7;;;1563:2;1548:18;1605:26:6;1429:177:7;12112:276:6;;;:::i;10803:704::-;;;;;;:::i;:::-;;:::i;12689:423::-;;;:::i;:::-;;;1776:14:7;;1769:22;1751:41;;1739:2;1724:18;12689:423:6;1611:187:7;1668:101:0;;;:::i;4492:1462:6:-;;;;;;:::i;:::-;;:::i;1469:26::-;;;;;;5962:313;;;;;;:::i;:::-;;:::i;1738:28::-;;;;;-1:-1:-1;;;;;1738:28:6;;;;;;-1:-1:-1;;;;;2405:55:7;;;2387:74;;2375:2;2360:18;1738:28:6;2241:226:7;1036:85:0;1108:6;;-1:-1:-1;;;;;1108:6:0;1036:85;;1684:45:6;;;;;;:::i;:::-;;;;;;;;;;;;;;1638:39;;;;;;:::i;:::-;;;;;;;;;;;;;;;;10466:136;;;;;;:::i;:::-;;:::i;1502:27::-;;;;;;7825:1012;;;:::i;10360:98::-;10435:15;10360:98;;1429:33;;;;;;10012:92;;;:::i;10112:240::-;;;;;;:::i;:::-;;:::i;1918:198:0:-;;;;;;:::i;:::-;;:::i;13120:98:6:-;;;:::i;12396:285::-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;2674:2:7;2317:63:1;;;2656:21:7;2713:2;2693:18;;;2686:30;2752:33;2732:18;;;2725:61;2803:18;;2317:63:1;;;;;;;;;1744:1;2455:7;:18;4126:20:6::1;:18;:20::i;:::-;3832:10:::2;:8;:10::i;:::-;12486::::3;12479:18;::::0;;;:6:::3;:18;::::0;;;;;;;12504:9:::3;::::0;12479:35;;:24:::3;;:35:::0;;;;;;::::3;;12475:105;;12547:21;;;;;;;;;;;;;;12475:105;12617:9;::::0;12592:18:::3;:35:::0;;;12647:10:::3;12592:18;12647:21:::0;12592:18;12647:21;;:26;;12592:24:::3;::::0;:18;12647:26:::3;::::0;12592:24;;12647:26:::3;:::i;:::-;::::0;;;-1:-1:-1;;1701:1:1;2628:7;:22;12396:285:6:o;8845:1051::-;8888:21;;:::i;:::-;8961:10;8922:23;8948:24;;;:12;:24;;;;;;;;;8922:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9045:87;;9095:25;;;;;;;;;;;;;;9045:87;9174:32;;;;;;;;9142:29;9174:32;;;;;;;;;;;;;;;;9236:33;9195:10;9236:21;:33::i;:::-;9219:50;;9314:15;9286:7;:13;;;:25;;;:43;9282:218;;;9483:4;9461:18;;9452:6;:27;;;;:::i;:::-;9451:36;;;;:::i;:::-;9403:18;;9383:17;;9425:4;;9383:38;;;:::i;:::-;9382:47;;;;:::i;:::-;9381:107;;;;:::i;:::-;9346:15;;;:142;9282:218;9560:1;9516:41;9530:10;:26;;;9516:13;:41::i;:::-;:45;9512:254;;;9578:15;9596:36;9614:10;:17;;;9596;:36::i;:::-;9647:13;;;;:30;;:40;-1:-1:-1;9512:254:6;;;9720:13;;;;9753:1;9720:30;;;;:34;9512:254;9778:13;;;;:23;;:32;9844:17;;9821:40;;9778:7;8845:1051;-1:-1:-1;8845:1051:6:o;11887:217::-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;2674:2:7;2317:63:1;;;2656:21:7;2713:2;2693:18;;;2686:30;2752:33;2732:18;;;2725:61;2803:18;;2317:63:1;2472:355:7;2317:63:1;1744:1;2455:7;:18;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0::1;1240:68;;;::::0;-1:-1:-1;;;1240:68:0;;3938:2:7;1240:68:0::1;::::0;::::1;3920:21:7::0;;;3957:18;;;3950:30;4016:34;3996:18;;;3989:62;4068:18;;1240:68:0::1;3736:356:7::0;1240:68:0::1;11957:13:6::2;::::0;::::2;;:21;;:13:::0;:21:::2;11953:86;;;12002:25;;;;;;;;;;;;;;11953:86;12051:13;:20:::0;;-1:-1:-1;;12051:20:6::2;12067:4;12051:20:::0;;::::2;::::0;;;12082:9:::2;:14:::0;;12051:13:::2;::::0;12082:14:::2;::::0;12067:4;;12082:14:::2;:::i;12112:276::-:0;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;2674:2:7;2317:63:1;;;2656:21:7;2713:2;2693:18;;;2686:30;2752:33;2732:18;;;2725:61;2803:18;;2317:63:1;2472:355:7;2317:63:1;1744:1;2455:7;:18;4126:20:6::1;:18;:20::i;:::-;3832:10:::2;:8;:10::i;:::-;12195::::3;12188:18;::::0;;;:6:::3;:18;::::0;;;;;;;12213:9:::3;::::0;12188:35;;:24:::3;::::0;;::::3;:35:::0;;;;;;;::::3;;:43;;;12184:105;;;12255:22;;;;;;;;;;;;;;12184:105;12308:10;12301:18;::::0;;;:6:::3;:18;::::0;;;;;;;12326:9:::3;::::0;;12301:35;;12339:4:::3;12301:24:::0;;::::3;:35:::0;;;;;:42;;-1:-1:-1;;12301:42:6::3;::::0;::::3;::::0;;12365:9;12354:21;;:10:::3;:21:::0;;;;;:26;;12339:4;;12354:21;;:26:::3;::::0;12339:4;;12354:26:::3;:::i;10803:704::-:0;-1:-1:-1;;;;;10935:18:6;;10912:20;10935:18;;;:12;:18;;;;;10970:12;;10966:81;;11011:24;;;;;;;;;;;;;;10966:81;11063:13;;:17;11059:441;;11101:37;11115:6;:22;;;11101:13;:37::i;:::-;11097:119;;11171:29;;;;;;;;;;;;;;11097:119;11258:1;11232:23;;;:27;11299:15;11274:22;;;:40;11379:13;;11459;;11331:157;;-1:-1:-1;;;;;11379:13:6;;11412:10;;11441:32;;:17;:32::i;:::-;11331:22;:157::i;:::-;10848:659;10803:704;:::o;12689:423::-;1108:6:0;;12811:4:6;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3938:2:7;1240:68:0;;;3920:21:7;;;3957:18;;;3950:30;4016:34;3996:18;;;3989:62;4068:18;;1240:68:0;3736:356:7;1240:68:0;4126:20:6::1;:18;:20::i;:::-;12852:1:::2;12837:11;;:16;12833:81;;12877:25;;;;;;;;;;;;;;12833:81;12924:19;12966:2;12947:11;;12961:1;12947:15;;;;:::i;:::-;12946:22;;;;:::i;:::-;12996:9;::::0;12985:21:::2;::::0;;;:10:::2;:21;::::0;;;;;12924:44;;-1:-1:-1;12985:35:6;-1:-1:-1;12981:124:6::2;;;13044:4;13037:11;;;12689:423:::0;:::o;12981:124::-:2;13088:5;13081:12;;;12689:423:::0;:::o;1668:101:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3938:2:7;1240:68:0;;;3920:21:7;;;3957:18;;;3950:30;4016:34;3996:18;;;3989:62;4068:18;;1240:68:0;3736:356:7;1240:68:0;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;4492:1462:6:-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;2674:2:7;2317:63:1;;;2656:21:7;2713:2;2693:18;;;2686:30;2752:33;2732:18;;;2725:61;2803:18;;2317:63:1;2472:355:7;2317:63:1;1744:1;2455:7;:18;4716:11:6;4712:80:::1;;4751:29;;;;;;;;;;;;;;4712:80;4892:10;4879:24;::::0;;;:12:::1;:24;::::0;;;;:31;:36;4875:99:::1;;4939:23;;;;;;;;;;;;;;4875:99;4990:27;::::0;;;:14:::1;:27;::::0;;;;;4986:103:::1;;5046:31;;;;;;;;;;;;;;4986:103;5116:1;5101:11;;:16;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;5135:10:6::1;5128:18;::::0;;;:6:::1;:18;::::0;;;;;;;:37;;-1:-1:-1;;5128:37:6::1;5161:4;5128:37;::::0;;5462:191;;::::1;::::0;::::1;::::0;;;;;5286:15:::1;5462:191:::0;;::::1;::::0;;;5527:27;;;:14:::1;:27:::0;;;;;;;;5462:191;;;;5286:15;5462:191;;;5570:23:::1;5286:15:::0;5542:11;5570:23:::1;:::i;:::-;5462:191:::0;;5609:1:::1;5462:191;::::0;;::::1;::::0;;;;;;;;;;;;;;;;;5448:10:::1;5435:24:::0;;;:12:::1;:24:::0;;;;;;:218;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;5714:13:::1;::::0;5666:147:::1;::::0;-1:-1:-1;;;;;5714:13:6;;::::1;::::0;5776:4:::1;5796:6:::0;5666:26:::1;:147::i;:::-;5889:10;5882:64;5901:6:::0;5909:9;5921:23:::1;5909:9:::0;5921:11;:23:::1;:::i;:::-;5882:64;::::0;;4299:25:7;;;4355:2;4340:18;;4333:34;;;;4383:18;;;4376:34;4287:2;4272:18;5882:64:6::1;;;;;;;-1:-1:-1::0;;1701:1:1;2628:7;:22;-1:-1:-1;4492:1462:6:o;5962:313::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3938:2:7;1240:68:0;;;3920:21:7;;;3957:18;;;3950:30;4016:34;3996:18;;;3989:62;4068:18;;1240:68:0;3736:356:7;1240:68:0;6122:2:6::1;6113:6;:11;6109:83;;;6148:32;;;;;;;;;;;;;;6109:83;6202:18;:27:::0;;;6245:22:::1;::::0;1575:25:7;;;6245:22:6::1;::::0;1563:2:7;1548:18;6245:22:6::1;;;;;;;;5962:313:::0;:::o;10466:136::-;10529:7;10588:6;10557:27;10575:9;10557:15;:27;:::i;:::-;10556:38;;;;:::i;:::-;10549:45;10466:136;-1:-1:-1;;10466:136:6:o;7825:1012::-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;2674:2:7;2317:63:1;;;2656:21:7;2713:2;2693:18;;;2686:30;2752:33;2732:18;;;2725:61;2803:18;;2317:63:1;2472:355:7;2317:63:1;1744:1;2455:7;:18;;;8032:10:6::1;8019:24:::0;;:12:::1;:24;::::0;;;;;;;7993:50;;::::1;::::0;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;;;;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;;;8071:33:::1;7993:50:::0;8071:21:::1;:33::i;:::-;8137:10;8124:24;::::0;;;:12:::1;:24;::::0;;;;8117:31;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;;;8159:11:::1;:16:::0;;8054:50;;-1:-1:-1;8117:31:6;;8159:11;;8124:24;8159:16:::1;::::0;8117:31;;8159:16:::1;:::i;:::-;::::0;;;-1:-1:-1;;8200:10:6::1;8193:18;::::0;;;:6:::1;:18;::::0;;;;;;;8218:9:::1;::::0;8193:35;;:24:::1;;:35:::0;;;;;8186:42;;-1:-1:-1;;8186:42:6::1;::::0;;8245:22:::1;::::0;::::1;::::0;8270:15:::1;-1:-1:-1::0;8241:589:6::1;;;8321:22;8362::::0;8402:55:::1;8431:10;:17;;;8450:6;8402:28;:55::i;:::-;8522:13;::::0;8302:155;;-1:-1:-1;8302:155:6;-1:-1:-1;8474:158:6::1;::::0;-1:-1:-1;;;;;8522:13:6::1;8555:10;8585:31;8302:155:::0;;8585:31:::1;:::i;8474:158::-;8287:357;;8241:589;;;8713:13;::::0;8776:17;;8665:153:::1;::::0;-1:-1:-1;;;;;8713:13:6::1;::::0;8746:10:::1;::::0;8776:26:::1;::::0;8796:6;;8776:26:::1;:::i;8665:153::-;-1:-1:-1::0;;1701:1:1;2628:7;:22;7825:1012:6:o;10012:92::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3938:2:7;1240:68:0;;;3920:21:7;;;3957:18;;;3950:30;4016:34;3996:18;;;3989:62;4068:18;;1240:68:0;3736:356:7;1240:68:0;10081:15:6::1;10066:12;:30:::0;10012:92::o;10112:240::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3938:2:7;1240:68:0;;;3920:21:7;;;3957:18;;;3950:30;4016:34;3996:18;;;3989:62;4068:18;;1240:68:0;3736:356:7;1240:68:0;10204:3:6::1;10195:6;:12;10191:85;;;10231:33;;;;;;;;;;;;;;10191:85;10286:11;:20:::0;;;10322:22:::1;::::0;1575:25:7;;;10322:22:6::1;::::0;1563:2:7;1548:18;10322:22:6::1;1429:177:7::0;1918:198:0;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3938:2:7;1240:68:0;;;3920:21:7;;;3957:18;;;3950:30;4016:34;3996:18;;;3989:62;4068:18;;1240:68:0;3736:356:7;1240:68:0;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;4623:2:7;1998:73:0::1;::::0;::::1;4605:21:7::0;4662:2;4642:18;;;4635:30;4701:34;4681:18;;;4674:62;4772:8;4752:18;;;4745:36;4798:19;;1998:73:0::1;4421:402:7::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;13120:98:6:-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3938:2:7;1240:68:0;;;3920:21:7;;;3957:18;;;3950:30;4016:34;3996:18;;;3989:62;4068:18;;1240:68:0;3736:356:7;1240:68:0;4126:20:6::1;:18;:20::i;:::-;13189:13:::2;:21:::0;;-1:-1:-1;;13189:21:6::2;::::0;;13120:98::o;3870:209::-;3993:13;;;;3988:84;;4030:30;;;;;;;;;;;;;;3558:236;3698:10;3691:18;;;;:6;:18;;;;;:30;;;3687:100;;3754:21;;;;;;;;;;;;;;6529:450;6664:17;;6635:7;;6660:63;;-1:-1:-1;6710:1:6;;6529:450;-1:-1:-1;6529:450:6:o;6660:63::-;6967:4;6920:43;6946:10;:16;;;6920:25;:43::i;:::-;6880:20;;;;6843:17;;:57;;6880:20;6843:57;:::i;:::-;:120;;;;:::i;10610:185::-;10708:7;10779:8;10771:4;10756:11;;10742;:25;;;;:::i;:::-;10741:34;;;;:::i;701:205:3:-;840:58;;-1:-1:-1;;;;;5020:55:7;;840:58:3;;;5002:74:7;5092:18;;;5085:34;;;813:86:3;;833:5;;863:23;;4975:18:7;;840:58:3;;;;-1:-1:-1;;840:58:3;;;;;;;;;;;;;;;;;;;;;;;;;;;813:19;:86::i;:::-;701:205;;;:::o;2270:187:0:-;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;;;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;912:241:3:-;1077:68;;-1:-1:-1;;;;;5411:15:7;;;1077:68:3;;;5393:34:7;5463:15;;5443:18;;;5436:43;5495:18;;;5488:34;;;1050:96:3;;1070:5;;1100:27;;5305:18:7;;1077:68:3;5130:398:7;1050:96:3;912:241;;;;:::o;6987:371:6:-;7107:7;;7145:11;7141:57;;-1:-1:-1;7181:1:6;;-1:-1:-1;7181:1:6;7173:13;;7141:57;7272:4;7250:18;;7241:6;:27;;;;:::i;:::-;7240:36;;;;:::i;:::-;7230:47;;:6;:47;:::i;:::-;7334:4;7312:18;;7303:6;:27;;;;:::i;:::-;7302:36;;;;:::i;:::-;7292:47;;:6;:47;:::i;:::-;7208:142;;;;6987:371;;;;;;:::o;6283:238::-;6383:7;6505:8;6470:23;6488:5;6470:15;:23;:::i;:::-;6469:32;;6497:4;6469:32;:::i;3207:706:3:-;3626:23;3652:69;3680:4;3652:69;;;;;;;;;;;;;;;;;3660:5;-1:-1:-1;;;;;3652:27:3;;;:69;;;;;:::i;:::-;3735:17;;3626:95;;-1:-1:-1;3735:21:3;3731:176;;3830:10;3819:30;;;;;;;;;;;;:::i;:::-;3811:85;;;;-1:-1:-1;;;3811:85:3;;6017:2:7;3811:85:3;;;5999:21:7;6056:2;6036:18;;;6029:30;6095:34;6075:18;;;6068:62;6166:12;6146:18;;;6139:40;6196:19;;3811:85:3;5815:406:7;3861:223:4;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;:::-;4018:59;;3861:223;;;;;;:::o;4948:499::-;5113:12;5170:5;5145:21;:30;;5137:81;;;;-1:-1:-1;;;5137:81:4;;6428:2:7;5137:81:4;;;6410:21:7;6467:2;6447:18;;;6440:30;6506:34;6486:18;;;6479:62;6577:8;6557:18;;;6550:36;6603:19;;5137:81:4;6226:402:7;5137:81:4;-1:-1:-1;;;;;1465:19:4;;;5228:60;;;;-1:-1:-1;;;5228:60:4;;6835:2:7;5228:60:4;;;6817:21:7;6874:2;6854:18;;;6847:30;6913:31;6893:18;;;6886:59;6962:18;;5228:60:4;6633:353:7;5228:60:4;5300:12;5314:23;5341:6;-1:-1:-1;;;;;5341:11:4;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;4948:499;-1:-1:-1;;;;;;;4948:499:4:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:4;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:4;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;842:309:7:-;901:6;954:2;942:9;933:7;929:23;925:32;922:52;;;970:1;967;960:12;922:52;1009:9;996:23;-1:-1:-1;;;;;1052:5:7;1048:54;1041:5;1038:65;1028:93;;1117:1;1114;1107:12;1803:248;1871:6;1879;1932:2;1920:9;1911:7;1907:23;1903:32;1900:52;;;1948:1;1945;1938:12;1900:52;-1:-1:-1;;1971:23:7;;;2041:2;2026:18;;;2013:32;;-1:-1:-1;1803:248:7:o;2056:180::-;2115:6;2168:2;2156:9;2147:7;2143:23;2139:32;2136:52;;;2184:1;2181;2174:12;2136:52;-1:-1:-1;2207:23:7;;2056:180;-1:-1:-1;2056:180:7:o;2832:184::-;-1:-1:-1;;;2881:1:7;2874:88;2981:4;2978:1;2971:15;3005:4;3002:1;2995:15;3021:125;3061:4;3089:1;3086;3083:8;3080:34;;;3094:18;;:::i;:::-;-1:-1:-1;3131:9:7;;3021:125::o;3151:168::-;3191:7;3257:1;3253;3249:6;3245:14;3242:1;3239:21;3234:1;3227:9;3220:17;3216:45;3213:71;;;3264:18;;:::i;:::-;-1:-1:-1;3304:9:7;;3151:168::o;3324:274::-;3364:1;3390;3380:189;;-1:-1:-1;;;3422:1:7;3415:88;3526:4;3523:1;3516:15;3554:4;3551:1;3544:15;3380:189;-1:-1:-1;3583:9:7;;3324:274::o;3603:128::-;3643:3;3674:1;3670:6;3667:1;3664:13;3661:39;;;3680:18;;:::i;:::-;-1:-1:-1;3716:9:7;;3603:128::o;5533:277::-;5600:6;5653:2;5641:9;5632:7;5628:23;5624:32;5621:52;;;5669:1;5666;5659:12;5621:52;5701:9;5695:16;5754:5;5747:13;5740:21;5733:5;5730:32;5720:60;;5776:1;5773;5766:12;6991:258;7063:1;7073:113;7087:6;7084:1;7081:13;7073:113;;;7163:11;;;7157:18;7144:11;;;7137:39;7109:2;7102:10;7073:113;;;7204:6;7201:1;7198:13;7195:48;;;-1:-1:-1;;7239:1:7;7221:16;;7214:27;6991:258::o;7254:274::-;7383:3;7421:6;7415:13;7437:53;7483:6;7478:3;7471:4;7463:6;7459:17;7437:53;:::i;:::-;7506:16;;;;;7254:274;-1:-1:-1;;7254:274:7:o;7533:383::-;7682:2;7671:9;7664:21;7645:4;7714:6;7708:13;7757:6;7752:2;7741:9;7737:18;7730:34;7773:66;7832:6;7827:2;7816:9;7812:18;7807:2;7799:6;7795:15;7773:66;:::i;:::-;7900:2;7879:15;-1:-1:-1;;7875:29:7;7860:45;;;;7907:2;7856:54;;7533:383;-1:-1:-1;;7533:383:7:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1310000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"_blockTimestamp()": "258",
								"airdropRate()": "2362",
								"airdropSince()": "2384",
								"calculateWeek(uint256)": "487",
								"changeAirdropPercentage(uint256)": "25633",
								"changePenaltyFee(uint256)": "25645",
								"claimAirdrop(address)": "infinite",
								"getVoters(address)": "6889",
								"getVotingResult()": "13271",
								"hasStake()": "infinite",
								"owner()": "2399",
								"renounceOwnership()": "28192",
								"retractVote()": "infinite",
								"stake(uint256,uint256)": "infinite",
								"stakingPenaltyRate()": "2384",
								"startAirdrop()": "24433",
								"startVoting()": "82279",
								"stopVoting()": "28759",
								"token_address()": "2383",
								"totalVoters()": "2363",
								"transferOwnership(address)": "28350",
								"vote()": "infinite",
								"votedUsers(uint256)": "2528",
								"voters(address)": "2541",
								"withdrawStake()": "infinite"
							},
							"internal": {
								"_calculateAirdrop(uint256)": "infinite",
								"_calculateStakeReward(struct Staking.Stake memory)": "infinite",
								"_calculateStakingDuration(uint256)": "243",
								"_calculateStakingWithPenalty(uint256,uint256)": "infinite",
								"_checkVotingStatus()": "infinite",
								"_isVoter()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1050,
									"end": 13221,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 1050,
									"end": 13221,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1050,
									"end": 13221,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "CODESIZE",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "tag",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1775,
									"end": 2086,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1813,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1897,
									"end": 1899,
									"name": "PUSH",
									"source": 6,
									"value": "F"
								},
								{
									"begin": 1876,
									"end": 1894,
									"name": "PUSH",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1876,
									"end": 1899,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1924,
									"end": 1926,
									"name": "PUSH",
									"source": 6,
									"value": "50"
								},
								{
									"begin": 1910,
									"end": 1921,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1910,
									"end": 1926,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1939,
									"end": 1952,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "AND",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1939,
									"end": 1960,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1973,
									"end": 1987,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1973,
									"end": 1996,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1973,
									"end": 1996,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1999,
									"end": 2000,
									"name": "PUSH",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 1973,
									"end": 1996,
									"name": "PUSH",
									"source": 6,
									"value": "A1EF5B42F18533D67A183A193EA6C3FABFAA3BDABC3FC0E3F65B19B517DF6E8C"
								},
								{
									"begin": 1973,
									"end": 2000,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 2038,
									"end": 2039,
									"name": "PUSH",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 2011,
									"end": 2035,
									"name": "PUSH",
									"source": 6,
									"value": "89CFCBF844E824FEEE5F634CBC488382291F3C9E0DE5905F3C30812390DD832"
								},
								{
									"begin": 2011,
									"end": 2039,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 2065,
									"end": 2073,
									"name": "PUSH",
									"source": 6,
									"value": "1E13380"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2050,
									"end": 2074,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 2077,
									"end": 2078,
									"name": "PUSH",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 2050,
									"end": 2074,
									"name": "PUSH",
									"source": 6,
									"value": "DC083EB4DA7563BBD761324B5158D9D40AF7C7174AFE39B0B31A7577C44FC33B"
								},
								{
									"begin": 2050,
									"end": 2078,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1050,
									"end": 13221,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "17"
								},
								{
									"begin": 1050,
									"end": 13221,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2333,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 7,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 7
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 7,
									"value": "17"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1050,
									"end": 13221,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1050,
									"end": 13221,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1050,
									"end": 13221,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1050,
									"end": 13221,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1050,
									"end": 13221,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1050,
									"end": 13221,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1050,
									"end": 13221,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122032d4b1343c4f110a93a396d4650b258125c044074f1438737d322c3d73caa7ba64736f6c634300080b0033",
									".code": [
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "8C8E8FEE"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "BED9D861"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "D2A569C3"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "D2A569C3"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "D5DBDF1B"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "F2FDE38B"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "FAB2F86B"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "tag",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "BED9D861"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "C63AA3E7"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "CB79C2E1"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "A3EC138D"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "A3EC138D"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "B5D9DF83"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "B87DA76D"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "tag",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "8C8E8FEE"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "A143A5F2"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "tag",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "65F8C6C5"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "7B0472F0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "7B0472F0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "8891CF0D"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "8C63F97F"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "tag",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "65F8C6C5"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "671D2B75"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "tag",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "2D15CC04"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "2D15CC04"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "5F5300FF"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "632A9A52"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "tag",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "70C8B74"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "10486B6A"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "1EC6B60A"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1050,
											"end": 13221,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 12396,
											"end": 12681,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 12396,
											"end": 12681,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12396,
											"end": 12681,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 12396,
											"end": 12681,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 12396,
											"end": 12681,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12396,
											"end": 12681,
											"name": "tag",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 12396,
											"end": 12681,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12396,
											"end": 12681,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "tag",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 168,
											"end": 172,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 210,
											"end": 213,
											"name": "PUSH",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 199,
											"end": 208,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 195,
											"end": 214,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 187,
											"end": 214,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 187,
											"end": 214,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 247,
											"end": 253,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 241,
											"end": 254,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 230,
											"end": 239,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 223,
											"end": 255,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 311,
											"end": 315,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 303,
											"end": 309,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 299,
											"end": 316,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 293,
											"end": 317,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 286,
											"end": 290,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 275,
											"end": 284,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 271,
											"end": 291,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 264,
											"end": 318,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 365,
											"end": 369,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 357,
											"end": 363,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 353,
											"end": 370,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 347,
											"end": 371,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 415,
											"end": 427,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 409,
											"end": 428,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 402,
											"end": 406,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 391,
											"end": 400,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 387,
											"end": 407,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 380,
											"end": 429,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 489,
											"end": 493,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 475,
											"end": 487,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 471,
											"end": 494,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 465,
											"end": 495,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 460,
											"end": 462,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 449,
											"end": 458,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 445,
											"end": 463,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 438,
											"end": 496,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 557,
											"end": 561,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 543,
											"end": 555,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 539,
											"end": 562,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 533,
											"end": 563,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 527,
											"end": 530,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 516,
											"end": 525,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 512,
											"end": 531,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 505,
											"end": 564,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 625,
											"end": 627,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 611,
											"end": 623,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 607,
											"end": 628,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 601,
											"end": 629,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 595,
											"end": 598,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 584,
											"end": 593,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 580,
											"end": 599,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 573,
											"end": 630,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 691,
											"end": 694,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 677,
											"end": 689,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 673,
											"end": 695,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 667,
											"end": 696,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 661,
											"end": 664,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 650,
											"end": 659,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 646,
											"end": 665,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 639,
											"end": 697,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 758,
											"end": 761,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 744,
											"end": 756,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 740,
											"end": 762,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 734,
											"end": 763,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 728,
											"end": 731,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 717,
											"end": 726,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 713,
											"end": 732,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 706,
											"end": 764,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 825,
											"end": 828,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 811,
											"end": 823,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 807,
											"end": 829,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 801,
											"end": 830,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 795,
											"end": 798,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 784,
											"end": 793,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 780,
											"end": 799,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 773,
											"end": 831,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 773,
											"end": 831,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 837,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 14,
											"end": 837,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 14,
											"end": 837,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 837,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 837,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "tag",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 11887,
											"end": 12104,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 11887,
											"end": 12104,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11887,
											"end": 12104,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 11887,
											"end": 12104,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 11887,
											"end": 12104,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "tag",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11723,
											"end": 11727,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11760,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11766,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11778,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11778,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11799,
											"end": 11808,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 11799,
											"end": 11808,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11778,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 11780,
											"end": 11798,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11798,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11798,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11778,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 11754,
											"end": 11778,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11778,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11778,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11754,
											"end": 11778,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11780,
											"end": 11809,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "tag",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1343,
											"end": 1357,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1343,
											"end": 1357,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1336,
											"end": 1358,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1318,
											"end": 1359,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1318,
											"end": 1359,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1402,
											"end": 1416,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1402,
											"end": 1416,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1395,
											"end": 1417,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1390,
											"end": 1392,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1375,
											"end": 1393,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1375,
											"end": 1393,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1368,
											"end": 1418,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1291,
											"end": 1309,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11667,
											"end": 11818,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 1156,
											"end": 1424,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "tag",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1575,
											"end": 1600,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1575,
											"end": 1600,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1575,
											"end": 1600,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1563,
											"end": 1565,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1548,
											"end": 1566,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1605,
											"end": 1631,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 1429,
											"end": 1606,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 12112,
											"end": 12388,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 12112,
											"end": 12388,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12112,
											"end": 12388,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 12112,
											"end": 12388,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 12112,
											"end": 12388,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "tag",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "tag",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "tag",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1776,
											"end": 1790,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1790,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1769,
											"end": 1791,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1751,
											"end": 1792,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1751,
											"end": 1792,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1739,
											"end": 1741,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1724,
											"end": 1742,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 1611,
											"end": 1798,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "tag",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "tag",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1469,
											"end": 1495,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 1469,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1469,
											"end": 1495,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1469,
											"end": 1495,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1495,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1495,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "tag",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "72"
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "tag",
											"source": 6,
											"value": "72"
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "tag",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2405,
											"end": 2460,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2405,
											"end": 2460,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2405,
											"end": 2460,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 2461,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 2461,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2375,
											"end": 2377,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2360,
											"end": 2378,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1738,
											"end": 1766,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 2241,
											"end": 2467,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "tag",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1729,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "tag",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1677,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "tag",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1502,
											"end": 1529,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1502,
											"end": 1529,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1502,
											"end": 1529,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1502,
											"end": 1529,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1502,
											"end": 1529,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1502,
											"end": 1529,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1502,
											"end": 1529,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7825,
											"end": 8837,
											"name": "tag",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 7825,
											"end": 8837,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7825,
											"end": 8837,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 7825,
											"end": 8837,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 7825,
											"end": 8837,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10360,
											"end": 10458,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 10360,
											"end": 10458,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10435,
											"end": 10450,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10360,
											"end": 10458,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 10360,
											"end": 10458,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1429,
											"end": 1462,
											"name": "tag",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 1429,
											"end": 1462,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1429,
											"end": 1462,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1429,
											"end": 1462,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1429,
											"end": 1462,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1429,
											"end": 1462,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1429,
											"end": 1462,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10012,
											"end": 10104,
											"name": "tag",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 10012,
											"end": 10104,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10012,
											"end": 10104,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 10012,
											"end": 10104,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 10012,
											"end": 10104,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "tag",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 13120,
											"end": 13218,
											"name": "tag",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 13120,
											"end": 13218,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13120,
											"end": 13218,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 13120,
											"end": 13218,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 13120,
											"end": 13218,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12396,
											"end": 12681,
											"name": "tag",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 12396,
											"end": 12681,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2674,
											"end": 2676,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2656,
											"end": 2677,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2713,
											"end": 2715,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2686,
											"end": 2716,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2752,
											"end": 2785,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2725,
											"end": 2786,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2821,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2803,
											"end": 2821,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 4126,
											"end": 4144,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "tag",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3832,
											"end": 3842,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 3832,
											"end": 3840,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 3832,
											"end": 3842,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3832,
											"end": 3842,
											"name": "tag",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 3832,
											"end": 3842,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12486,
											"end": 12496,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12485,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12497,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 12504,
											"end": 12513,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 12504,
											"end": 12513,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12514,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12514,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12503,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 12479,
											"end": 12503,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12514,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12514,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12514,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12514,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12514,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12514,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12479,
											"end": 12514,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 12479,
											"end": 12514,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 12475,
											"end": 12580,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 12475,
											"end": 12580,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "PUSH",
											"source": 6,
											"value": "8B74220000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12547,
											"end": 12568,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 12475,
											"end": 12580,
											"name": "tag",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 12475,
											"end": 12580,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12617,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 12617,
											"end": 12626,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12592,
											"end": 12610,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12592,
											"end": 12627,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12592,
											"end": 12627,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12592,
											"end": 12627,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12647,
											"end": 12657,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 12592,
											"end": 12610,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 12647,
											"end": 12668,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12592,
											"end": 12610,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12647,
											"end": 12668,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12647,
											"end": 12668,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 12647,
											"end": 12673,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12647,
											"end": 12673,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12592,
											"end": 12616,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 12592,
											"end": 12616,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 12592,
											"end": 12610,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12647,
											"end": 12673,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 12647,
											"end": 12673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12592,
											"end": 12616,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 12592,
											"end": 12616,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12647,
											"end": 12673,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 12647,
											"end": 12673,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12647,
											"end": 12673,
											"name": "tag",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 12647,
											"end": 12673,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12647,
											"end": 12673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12647,
											"end": 12673,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12647,
											"end": 12673,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 12396,
											"end": 12681,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "tag",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8888,
											"end": 8909,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 8888,
											"end": 8909,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 8888,
											"end": 8909,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8888,
											"end": 8909,
											"name": "tag",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 8888,
											"end": 8909,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8961,
											"end": 8971,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8945,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8948,
											"end": 8960,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8948,
											"end": 8972,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8922,
											"end": 8972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9045,
											"end": 9132,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 9045,
											"end": 9132,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "PUSH",
											"source": 6,
											"value": "B018F08700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9095,
											"end": 9120,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 9045,
											"end": 9132,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 9045,
											"end": 9132,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9142,
											"end": 9171,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9206,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9236,
											"end": 9269,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 9195,
											"end": 9205,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9236,
											"end": 9257,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 9236,
											"end": 9269,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9236,
											"end": 9269,
											"name": "tag",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 9236,
											"end": 9269,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9219,
											"end": 9269,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9219,
											"end": 9269,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9314,
											"end": 9329,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 9286,
											"end": 9293,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9286,
											"end": 9299,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9286,
											"end": 9299,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9286,
											"end": 9299,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9286,
											"end": 9311,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 9286,
											"end": 9311,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9286,
											"end": 9311,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9286,
											"end": 9329,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 9282,
											"end": 9500,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9282,
											"end": 9500,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 9282,
											"end": 9500,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9483,
											"end": 9487,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 9461,
											"end": 9479,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 9461,
											"end": 9479,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9452,
											"end": 9458,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9452,
											"end": 9479,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 9452,
											"end": 9479,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9452,
											"end": 9479,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9452,
											"end": 9479,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 9452,
											"end": 9479,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9452,
											"end": 9479,
											"name": "tag",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 9452,
											"end": 9479,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9451,
											"end": 9487,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 9451,
											"end": 9487,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9451,
											"end": 9487,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9451,
											"end": 9487,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 9451,
											"end": 9487,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9451,
											"end": 9487,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 9451,
											"end": 9487,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9403,
											"end": 9421,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 9403,
											"end": 9421,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9383,
											"end": 9400,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9383,
											"end": 9400,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9425,
											"end": 9429,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 9425,
											"end": 9429,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9383,
											"end": 9421,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 9383,
											"end": 9421,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9383,
											"end": 9421,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 9383,
											"end": 9421,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9383,
											"end": 9421,
											"name": "tag",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 9383,
											"end": 9421,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9382,
											"end": 9429,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 9382,
											"end": 9429,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9382,
											"end": 9429,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9382,
											"end": 9429,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 9382,
											"end": 9429,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9382,
											"end": 9429,
											"name": "tag",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 9382,
											"end": 9429,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9381,
											"end": 9488,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 9381,
											"end": 9488,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9381,
											"end": 9488,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9381,
											"end": 9488,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 9381,
											"end": 9488,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9381,
											"end": 9488,
											"name": "tag",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 9381,
											"end": 9488,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9346,
											"end": 9361,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9346,
											"end": 9361,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9346,
											"end": 9361,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9346,
											"end": 9488,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9282,
											"end": 9500,
											"name": "tag",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 9282,
											"end": 9500,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9560,
											"end": 9561,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9516,
											"end": 9557,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 9530,
											"end": 9540,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9530,
											"end": 9556,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 9530,
											"end": 9556,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9530,
											"end": 9556,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9529,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 9516,
											"end": 9557,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9516,
											"end": 9557,
											"name": "tag",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 9516,
											"end": 9557,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9561,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 9512,
											"end": 9766,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9512,
											"end": 9766,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 9512,
											"end": 9766,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9578,
											"end": 9593,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9596,
											"end": 9632,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 9614,
											"end": 9624,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9614,
											"end": 9631,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9614,
											"end": 9631,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9614,
											"end": 9631,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9596,
											"end": 9613,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 9596,
											"end": 9632,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9596,
											"end": 9632,
											"name": "tag",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 9596,
											"end": 9632,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9647,
											"end": 9660,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9647,
											"end": 9660,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9647,
											"end": 9660,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9647,
											"end": 9660,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9647,
											"end": 9677,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 9647,
											"end": 9677,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9647,
											"end": 9687,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9512,
											"end": 9766,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 9512,
											"end": 9766,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9512,
											"end": 9766,
											"name": "tag",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 9512,
											"end": 9766,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9720,
											"end": 9733,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9720,
											"end": 9733,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9720,
											"end": 9733,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9720,
											"end": 9733,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9753,
											"end": 9754,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9720,
											"end": 9750,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 9720,
											"end": 9750,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9720,
											"end": 9750,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9720,
											"end": 9750,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9720,
											"end": 9754,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9512,
											"end": 9766,
											"name": "tag",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 9512,
											"end": 9766,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9778,
											"end": 9791,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9778,
											"end": 9791,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9778,
											"end": 9791,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9778,
											"end": 9791,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9778,
											"end": 9801,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 9778,
											"end": 9801,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9778,
											"end": 9810,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9844,
											"end": 9861,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9844,
											"end": 9861,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9821,
											"end": 9861,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9821,
											"end": 9861,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9778,
											"end": 9785,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8845,
											"end": 9896,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 11887,
											"end": 12104,
											"name": "tag",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 11887,
											"end": 12104,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "150"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2674,
											"end": 2676,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2656,
											"end": 2677,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2713,
											"end": 2715,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2686,
											"end": 2716,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2752,
											"end": 2785,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2725,
											"end": 2786,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2821,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2803,
											"end": 2821,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2472,
											"end": 2827,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "150"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3938,
											"end": 3940,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3950,
											"end": 3980,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4016,
											"end": 4050,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3989,
											"end": 4051,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3736,
											"end": 4092,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11957,
											"end": 11970,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 11957,
											"end": 11970,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11957,
											"end": 11970,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 11957,
											"end": 11970,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11957,
											"end": 11978,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11957,
											"end": 11978,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11957,
											"end": 11970,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 11957,
											"end": 11978,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 11953,
											"end": 12039,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11953,
											"end": 12039,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 11953,
											"end": 12039,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "PUSH",
											"source": 6,
											"value": "6DA4CD2E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12002,
											"end": 12027,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 11953,
											"end": 12039,
											"name": "tag",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 11953,
											"end": 12039,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12051,
											"end": 12064,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 12051,
											"end": 12071,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12051,
											"end": 12071,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12051,
											"end": 12071,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 12067,
											"end": 12071,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 12051,
											"end": 12071,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12051,
											"end": 12071,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12051,
											"end": 12071,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 12051,
											"end": 12071,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12051,
											"end": 12071,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12051,
											"end": 12071,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 12082,
											"end": 12091,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 12082,
											"end": 12096,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12082,
											"end": 12096,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12051,
											"end": 12064,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12051,
											"end": 12064,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12082,
											"end": 12096,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 12082,
											"end": 12096,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12067,
											"end": 12071,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 12067,
											"end": 12071,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12082,
											"end": 12096,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 12082,
											"end": 12096,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12112,
											"end": 12388,
											"name": "tag",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 12112,
											"end": 12388,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "164"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2674,
											"end": 2676,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2656,
											"end": 2677,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2713,
											"end": 2715,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2686,
											"end": 2716,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2752,
											"end": 2785,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2725,
											"end": 2786,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2821,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2803,
											"end": 2821,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2472,
											"end": 2827,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "164"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 4126,
											"end": 4144,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "tag",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3832,
											"end": 3842,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 3832,
											"end": 3840,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 3832,
											"end": 3842,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3832,
											"end": 3842,
											"name": "tag",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 3832,
											"end": 3842,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12195,
											"end": 12205,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12194,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12206,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 12213,
											"end": 12222,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 12213,
											"end": 12222,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12223,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12223,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12212,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 12188,
											"end": 12212,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12212,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12212,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12223,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12223,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12223,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12223,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12223,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12223,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12223,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12223,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 12188,
											"end": 12223,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12231,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12231,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12231,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 12184,
											"end": 12289,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 12184,
											"end": 12289,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "171"
										},
										{
											"begin": 12184,
											"end": 12289,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "PUSH",
											"source": 6,
											"value": "740E33B000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12255,
											"end": 12277,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 12184,
											"end": 12289,
											"name": "tag",
											"source": 6,
											"value": "171"
										},
										{
											"begin": 12184,
											"end": 12289,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12308,
											"end": 12318,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12307,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12319,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 12326,
											"end": 12335,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 12326,
											"end": 12335,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12326,
											"end": 12335,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12336,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12336,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12339,
											"end": 12343,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 12301,
											"end": 12325,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12325,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12336,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12336,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12336,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12336,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12336,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12343,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12343,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12301,
											"end": 12343,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12343,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12343,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12343,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12301,
											"end": 12343,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 12365,
											"end": 12374,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12375,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12375,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12364,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 12354,
											"end": 12375,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12375,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12375,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12375,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12375,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12380,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12380,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12339,
											"end": 12343,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12339,
											"end": 12343,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12375,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12375,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12380,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 12354,
											"end": 12380,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12339,
											"end": 12343,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 12339,
											"end": 12343,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12354,
											"end": 12380,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 12354,
											"end": 12380,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "tag",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10935,
											"end": 10953,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10935,
											"end": 10953,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10912,
											"end": 10932,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10935,
											"end": 10953,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10935,
											"end": 10953,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10935,
											"end": 10953,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10935,
											"end": 10947,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 10935,
											"end": 10953,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10935,
											"end": 10953,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10935,
											"end": 10953,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10935,
											"end": 10953,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10935,
											"end": 10953,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10970,
											"end": 10982,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 10970,
											"end": 10982,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10966,
											"end": 11047,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 10966,
											"end": 11047,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "PUSH",
											"source": 6,
											"value": "B347374F00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11011,
											"end": 11035,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 10966,
											"end": 11047,
											"name": "tag",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 10966,
											"end": 11047,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11063,
											"end": 11076,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11063,
											"end": 11076,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11063,
											"end": 11080,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11059,
											"end": 11500,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 11059,
											"end": 11500,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11101,
											"end": 11138,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "176"
										},
										{
											"begin": 11115,
											"end": 11121,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11115,
											"end": 11137,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 11115,
											"end": 11137,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11115,
											"end": 11137,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11101,
											"end": 11114,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 11101,
											"end": 11138,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11101,
											"end": 11138,
											"name": "tag",
											"source": 6,
											"value": "176"
										},
										{
											"begin": 11101,
											"end": 11138,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11097,
											"end": 11216,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 11097,
											"end": 11216,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "PUSH",
											"source": 6,
											"value": "DD8456CC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11171,
											"end": 11200,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 11097,
											"end": 11216,
											"name": "tag",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 11097,
											"end": 11216,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11258,
											"end": 11259,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11232,
											"end": 11255,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 11232,
											"end": 11255,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11232,
											"end": 11255,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11232,
											"end": 11259,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 11299,
											"end": 11314,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 11274,
											"end": 11296,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 11274,
											"end": 11296,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11274,
											"end": 11296,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11274,
											"end": 11314,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 11379,
											"end": 11392,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 11379,
											"end": 11392,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11459,
											"end": 11472,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11459,
											"end": 11472,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11331,
											"end": 11488,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 11331,
											"end": 11488,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11379,
											"end": 11392,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11379,
											"end": 11392,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11412,
											"end": 11422,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 11412,
											"end": 11422,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11441,
											"end": 11473,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 11441,
											"end": 11473,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11441,
											"end": 11458,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 11441,
											"end": 11473,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11441,
											"end": 11473,
											"name": "tag",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 11441,
											"end": 11473,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11331,
											"end": 11353,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 11331,
											"end": 11488,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11331,
											"end": 11488,
											"name": "tag",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 11331,
											"end": 11488,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10848,
											"end": 11507,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10803,
											"end": 11507,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 12811,
											"end": 12815,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12811,
											"end": 12815,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3938,
											"end": 3940,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3950,
											"end": 3980,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4016,
											"end": 4050,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3989,
											"end": 4051,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3736,
											"end": 4092,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 4126,
											"end": 4144,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "tag",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12852,
											"end": 12853,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 12837,
											"end": 12848,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 12837,
											"end": 12848,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12837,
											"end": 12853,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 12833,
											"end": 12914,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 12833,
											"end": 12914,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "PUSH",
											"source": 6,
											"value": "2F9686DE00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12877,
											"end": 12902,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 12833,
											"end": 12914,
											"name": "tag",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 12833,
											"end": 12914,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12924,
											"end": 12943,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12966,
											"end": 12968,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 12947,
											"end": 12958,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 12947,
											"end": 12958,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12961,
											"end": 12962,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 12947,
											"end": 12962,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "190"
										},
										{
											"begin": 12947,
											"end": 12962,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12947,
											"end": 12962,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12947,
											"end": 12962,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 12947,
											"end": 12962,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12947,
											"end": 12962,
											"name": "tag",
											"source": 6,
											"value": "190"
										},
										{
											"begin": 12947,
											"end": 12962,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12946,
											"end": 12968,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 12946,
											"end": 12968,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12946,
											"end": 12968,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12946,
											"end": 12968,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 12946,
											"end": 12968,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12946,
											"end": 12968,
											"name": "tag",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 12946,
											"end": 12968,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12996,
											"end": 13005,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 12996,
											"end": 13005,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12985,
											"end": 13006,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12985,
											"end": 13006,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12985,
											"end": 13006,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12985,
											"end": 13006,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12985,
											"end": 12995,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 12985,
											"end": 13006,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 12985,
											"end": 13006,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12985,
											"end": 13006,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12985,
											"end": 13006,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12985,
											"end": 13006,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 12985,
											"end": 13006,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12924,
											"end": 12968,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12924,
											"end": 12968,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12985,
											"end": 13020,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 12981,
											"end": 13105,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 12981,
											"end": 13105,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 12981,
											"end": 13105,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 13044,
											"end": 13048,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 13037,
											"end": 13048,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 13037,
											"end": 13048,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 13037,
											"end": 13048,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12981,
											"end": 13105,
											"name": "tag",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 12981,
											"end": 13105,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13088,
											"end": 13093,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 13081,
											"end": 13093,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 13081,
											"end": 13093,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 13081,
											"end": 13093,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12689,
											"end": 13112,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "197"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3938,
											"end": 3940,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3950,
											"end": 3980,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4016,
											"end": 4050,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3989,
											"end": 4051,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3736,
											"end": 4092,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "197"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "tag",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "tag",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "203"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2674,
											"end": 2676,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2656,
											"end": 2677,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2713,
											"end": 2715,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2686,
											"end": 2716,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2752,
											"end": 2785,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2725,
											"end": 2786,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2821,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2803,
											"end": 2821,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2472,
											"end": 2827,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "203"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4716,
											"end": 4727,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4712,
											"end": 4792,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 4712,
											"end": 4792,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "PUSH",
											"source": 6,
											"value": "88B440D600000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4780,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4712,
											"end": 4792,
											"name": "tag",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 4712,
											"end": 4792,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4892,
											"end": 4902,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4879,
											"end": 4903,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4879,
											"end": 4903,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4879,
											"end": 4903,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4879,
											"end": 4903,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4879,
											"end": 4891,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 4879,
											"end": 4903,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4879,
											"end": 4903,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4879,
											"end": 4903,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4879,
											"end": 4903,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4879,
											"end": 4903,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4879,
											"end": 4910,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4879,
											"end": 4915,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4875,
											"end": 4974,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 4875,
											"end": 4974,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "PUSH",
											"source": 6,
											"value": "4462D2700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4939,
											"end": 4962,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4875,
											"end": 4974,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 4875,
											"end": 4974,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4990,
											"end": 5017,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4990,
											"end": 5017,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4990,
											"end": 5017,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4990,
											"end": 5017,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4990,
											"end": 5004,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 4990,
											"end": 5017,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4990,
											"end": 5017,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4990,
											"end": 5017,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4990,
											"end": 5017,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4990,
											"end": 5017,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4990,
											"end": 5017,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4986,
											"end": 5089,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 4986,
											"end": 5089,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "PUSH",
											"source": 6,
											"value": "95377BE400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5077,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4986,
											"end": 5089,
											"name": "tag",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 4986,
											"end": 5089,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5116,
											"end": 5117,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5101,
											"end": 5112,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 5101,
											"end": 5112,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "tag",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5101,
											"end": 5117,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5135,
											"end": 5145,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5134,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5165,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5165,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5128,
											"end": 5165,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5161,
											"end": 5165,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5128,
											"end": 5165,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5165,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5165,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5286,
											"end": 5301,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5527,
											"end": 5554,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5527,
											"end": 5554,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5527,
											"end": 5554,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5527,
											"end": 5541,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5527,
											"end": 5554,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5527,
											"end": 5554,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5527,
											"end": 5554,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5527,
											"end": 5554,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5527,
											"end": 5554,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5527,
											"end": 5554,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5527,
											"end": 5554,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5527,
											"end": 5554,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5286,
											"end": 5301,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5570,
											"end": 5593,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 5286,
											"end": 5301,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5542,
											"end": 5553,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5570,
											"end": 5593,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 5570,
											"end": 5593,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5570,
											"end": 5593,
											"name": "tag",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 5570,
											"end": 5593,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5609,
											"end": 5610,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5462,
											"end": 5653,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5448,
											"end": 5458,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5459,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5459,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5459,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5447,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 5435,
											"end": 5459,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5459,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5459,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5459,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5459,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5459,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5435,
											"end": 5653,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5714,
											"end": 5727,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 5714,
											"end": 5727,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5666,
											"end": 5813,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 5666,
											"end": 5813,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5714,
											"end": 5727,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5714,
											"end": 5727,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5714,
											"end": 5727,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5714,
											"end": 5727,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5776,
											"end": 5780,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 5796,
											"end": 5802,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5666,
											"end": 5692,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 5666,
											"end": 5813,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5666,
											"end": 5813,
											"name": "tag",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 5666,
											"end": 5813,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5889,
											"end": 5899,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5882,
											"end": 5946,
											"name": "PUSH",
											"source": 6,
											"value": "B4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED"
										},
										{
											"begin": 5901,
											"end": 5907,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5909,
											"end": 5918,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5921,
											"end": 5944,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 5909,
											"end": 5918,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5921,
											"end": 5932,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5921,
											"end": 5944,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 5921,
											"end": 5944,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5921,
											"end": 5944,
											"name": "tag",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 5921,
											"end": 5944,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5882,
											"end": 5946,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5882,
											"end": 5946,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5882,
											"end": 5946,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4299,
											"end": 4324,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 4299,
											"end": 4324,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4299,
											"end": 4324,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4355,
											"end": 4357,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4340,
											"end": 4358,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4340,
											"end": 4358,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4333,
											"end": 4367,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4333,
											"end": 4367,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4333,
											"end": 4367,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4333,
											"end": 4367,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4383,
											"end": 4401,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4383,
											"end": 4401,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4383,
											"end": 4401,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4376,
											"end": 4410,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4287,
											"end": 4289,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 4272,
											"end": 4290,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5882,
											"end": 5946,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5882,
											"end": 5946,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5882,
											"end": 5946,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5882,
											"end": 5946,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5882,
											"end": 5946,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5882,
											"end": 5946,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5882,
											"end": 5946,
											"name": "LOG2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4492,
											"end": 5954,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "tag",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3938,
											"end": 3940,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3950,
											"end": 3980,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4016,
											"end": 4050,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3989,
											"end": 4051,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3736,
											"end": 4092,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6122,
											"end": 6124,
											"name": "PUSH",
											"source": 6,
											"value": "1E"
										},
										{
											"begin": 6113,
											"end": 6119,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6113,
											"end": 6124,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 6109,
											"end": 6192,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6109,
											"end": 6192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 6109,
											"end": 6192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "PUSH",
											"source": 6,
											"value": "F1A470D700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6148,
											"end": 6180,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 6109,
											"end": 6192,
											"name": "tag",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 6109,
											"end": 6192,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6202,
											"end": 6220,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 6202,
											"end": 6229,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6202,
											"end": 6229,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6202,
											"end": 6229,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1575,
											"end": 1600,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1575,
											"end": 1600,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1575,
											"end": 1600,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "PUSH",
											"source": 6,
											"value": "CFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9"
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1563,
											"end": 1565,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1548,
											"end": 1566,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "tag",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "LOG1",
											"source": 6
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5962,
											"end": 6275,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10529,
											"end": 10536,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10588,
											"end": 10594,
											"name": "PUSH",
											"source": 6,
											"value": "93A80"
										},
										{
											"begin": 10557,
											"end": 10584,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 10575,
											"end": 10584,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10557,
											"end": 10572,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10557,
											"end": 10584,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 10557,
											"end": 10584,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10557,
											"end": 10584,
											"name": "tag",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 10557,
											"end": 10584,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10556,
											"end": 10594,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 10556,
											"end": 10594,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10556,
											"end": 10594,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10556,
											"end": 10594,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 10556,
											"end": 10594,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10556,
											"end": 10594,
											"name": "tag",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 10556,
											"end": 10594,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10549,
											"end": 10594,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10466,
											"end": 10602,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7825,
											"end": 8837,
											"name": "tag",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 7825,
											"end": 8837,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "229"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2674,
											"end": 2676,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2656,
											"end": 2677,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2713,
											"end": 2715,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2693,
											"end": 2711,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2686,
											"end": 2716,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2752,
											"end": 2785,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2725,
											"end": 2786,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2821,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2803,
											"end": 2821,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2472,
											"end": 2827,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "229"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8032,
											"end": 8042,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8043,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8043,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8031,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 8019,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8019,
											"end": 8043,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8043,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8043,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8019,
											"end": 8043,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8043,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8043,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8071,
											"end": 8104,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "232"
										},
										{
											"begin": 7993,
											"end": 8043,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8071,
											"end": 8092,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 8071,
											"end": 8104,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8071,
											"end": 8104,
											"name": "tag",
											"source": 6,
											"value": "232"
										},
										{
											"begin": 8071,
											"end": 8104,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8137,
											"end": 8147,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8124,
											"end": 8148,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8124,
											"end": 8148,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8124,
											"end": 8148,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8124,
											"end": 8148,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8124,
											"end": 8136,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 8124,
											"end": 8148,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8124,
											"end": 8148,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8124,
											"end": 8148,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8124,
											"end": 8148,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8124,
											"end": 8148,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8159,
											"end": 8170,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 8159,
											"end": 8175,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8159,
											"end": 8175,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8054,
											"end": 8104,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8054,
											"end": 8104,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 8159,
											"end": 8170,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8159,
											"end": 8170,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8124,
											"end": 8148,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8159,
											"end": 8175,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "233"
										},
										{
											"begin": 8159,
											"end": 8175,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8117,
											"end": 8148,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8159,
											"end": 8175,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 8159,
											"end": 8175,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8159,
											"end": 8175,
											"name": "tag",
											"source": 6,
											"value": "233"
										},
										{
											"begin": 8159,
											"end": 8175,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8159,
											"end": 8175,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8159,
											"end": 8175,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8159,
											"end": 8175,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8200,
											"end": 8210,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8199,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8211,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8218,
											"end": 8227,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 8218,
											"end": 8227,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8228,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8228,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8217,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 8193,
											"end": 8217,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8228,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8228,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8228,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8228,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8193,
											"end": 8228,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8186,
											"end": 8228,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8186,
											"end": 8228,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8186,
											"end": 8228,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8186,
											"end": 8228,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8186,
											"end": 8228,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8245,
											"end": 8267,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8245,
											"end": 8267,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8245,
											"end": 8267,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8245,
											"end": 8267,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8270,
											"end": 8285,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 8241,
											"end": 8830,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8241,
											"end": 8830,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "234"
										},
										{
											"begin": 8241,
											"end": 8830,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8321,
											"end": 8343,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8362,
											"end": 8384,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8402,
											"end": 8457,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "235"
										},
										{
											"begin": 8431,
											"end": 8441,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8431,
											"end": 8448,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8431,
											"end": 8448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8431,
											"end": 8448,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8450,
											"end": 8456,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8402,
											"end": 8430,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "236"
										},
										{
											"begin": 8402,
											"end": 8457,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8402,
											"end": 8457,
											"name": "tag",
											"source": 6,
											"value": "235"
										},
										{
											"begin": 8402,
											"end": 8457,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8522,
											"end": 8535,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 8522,
											"end": 8535,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8302,
											"end": 8457,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8302,
											"end": 8457,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8302,
											"end": 8457,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8474,
											"end": 8632,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "237"
										},
										{
											"begin": 8474,
											"end": 8632,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8522,
											"end": 8535,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8555,
											"end": 8565,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8585,
											"end": 8616,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 8302,
											"end": 8457,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8302,
											"end": 8457,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 8585,
											"end": 8616,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 8585,
											"end": 8616,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8474,
											"end": 8632,
											"name": "tag",
											"source": 6,
											"value": "237"
										},
										{
											"begin": 8474,
											"end": 8632,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8287,
											"end": 8644,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8287,
											"end": 8644,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8241,
											"end": 8830,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "240"
										},
										{
											"begin": 8241,
											"end": 8830,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8241,
											"end": 8830,
											"name": "tag",
											"source": 6,
											"value": "234"
										},
										{
											"begin": 8241,
											"end": 8830,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8713,
											"end": 8726,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 8713,
											"end": 8726,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8776,
											"end": 8793,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8776,
											"end": 8793,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8665,
											"end": 8818,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "240"
										},
										{
											"begin": 8665,
											"end": 8818,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8713,
											"end": 8726,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8713,
											"end": 8726,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8746,
											"end": 8756,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8746,
											"end": 8756,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8776,
											"end": 8802,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 8776,
											"end": 8802,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8796,
											"end": 8802,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 8796,
											"end": 8802,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8776,
											"end": 8802,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 8776,
											"end": 8802,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8665,
											"end": 8818,
											"name": "tag",
											"source": 6,
											"value": "240"
										},
										{
											"begin": 8665,
											"end": 8818,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 7825,
											"end": 8837,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10012,
											"end": 10104,
											"name": "tag",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 10012,
											"end": 10104,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "246"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3938,
											"end": 3940,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3950,
											"end": 3980,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4016,
											"end": 4050,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3989,
											"end": 4051,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3736,
											"end": 4092,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "246"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10081,
											"end": 10096,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10066,
											"end": 10078,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 10066,
											"end": 10096,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10012,
											"end": 10104,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "tag",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 10112,
											"end": 10352,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "252"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3938,
											"end": 3940,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3950,
											"end": 3980,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4016,
											"end": 4050,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3989,
											"end": 4051,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3736,
											"end": 4092,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "252"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10204,
											"end": 10207,
											"name": "PUSH",
											"source": 6,
											"value": "C8"
										},
										{
											"begin": 10195,
											"end": 10201,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10195,
											"end": 10207,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 10191,
											"end": 10276,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10191,
											"end": 10276,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "255"
										},
										{
											"begin": 10191,
											"end": 10276,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "PUSH",
											"source": 6,
											"value": "A552CF1000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10231,
											"end": 10264,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 10191,
											"end": 10276,
											"name": "tag",
											"source": 6,
											"value": "255"
										},
										{
											"begin": 10191,
											"end": 10276,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10286,
											"end": 10297,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10286,
											"end": 10306,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10286,
											"end": 10306,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10286,
											"end": 10306,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10322,
											"end": 10344,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10322,
											"end": 10344,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1575,
											"end": 1600,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1575,
											"end": 1600,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1575,
											"end": 1600,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10322,
											"end": 10344,
											"name": "PUSH",
											"source": 6,
											"value": "CC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E"
										},
										{
											"begin": 10322,
											"end": 10344,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1563,
											"end": 1565,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1548,
											"end": 1566,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10322,
											"end": 10344,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 1429,
											"end": 1606,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "260"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3938,
											"end": 3940,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3950,
											"end": 3980,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4016,
											"end": 4050,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3989,
											"end": 4051,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3736,
											"end": 4092,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "260"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4623,
											"end": 4625,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4605,
											"end": 4626,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4662,
											"end": 4664,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 4642,
											"end": 4660,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4642,
											"end": 4660,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4642,
											"end": 4660,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4635,
											"end": 4665,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4701,
											"end": 4735,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 4681,
											"end": 4699,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4681,
											"end": 4699,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4681,
											"end": 4699,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4674,
											"end": 4736,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4772,
											"end": 4780,
											"name": "PUSH",
											"source": 7,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4752,
											"end": 4770,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4752,
											"end": 4770,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4770,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4745,
											"end": 4781,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4798,
											"end": 4817,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 4798,
											"end": 4817,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 4421,
											"end": 4823,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "266"
										},
										{
											"begin": 2100,
											"end": 2108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "tag",
											"source": 0,
											"value": "266"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 13120,
											"end": 13218,
											"name": "tag",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 13120,
											"end": 13218,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "270"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3938,
											"end": 3940,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3920,
											"end": 3941,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3950,
											"end": 3980,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4016,
											"end": 4050,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3996,
											"end": 4014,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3989,
											"end": 4051,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4068,
											"end": 4086,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3736,
											"end": 4092,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "270"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "273"
										},
										{
											"begin": 4126,
											"end": 4144,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "tag",
											"source": 6,
											"value": "273"
										},
										{
											"begin": 4126,
											"end": 4146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13189,
											"end": 13202,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 13189,
											"end": 13210,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 13189,
											"end": 13210,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 13189,
											"end": 13210,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 13189,
											"end": 13210,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 13189,
											"end": 13210,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 13120,
											"end": 13218,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3870,
											"end": 4079,
											"name": "tag",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 3870,
											"end": 4079,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3993,
											"end": 4006,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 3993,
											"end": 4006,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3993,
											"end": 4006,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3993,
											"end": 4006,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3988,
											"end": 4072,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 3988,
											"end": 4072,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "PUSH",
											"source": 6,
											"value": "A1D1891400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4060,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3558,
											"end": 3794,
											"name": "tag",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 3558,
											"end": 3794,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3698,
											"end": 3708,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 3691,
											"end": 3709,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3691,
											"end": 3709,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3691,
											"end": 3709,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3691,
											"end": 3709,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3691,
											"end": 3697,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 3691,
											"end": 3709,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3691,
											"end": 3709,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3691,
											"end": 3709,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3691,
											"end": 3709,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3691,
											"end": 3709,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3691,
											"end": 3721,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3691,
											"end": 3721,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3691,
											"end": 3721,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3687,
											"end": 3787,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 3687,
											"end": 3787,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "PUSH",
											"source": 6,
											"value": "1E567DD400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3754,
											"end": 3775,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 6529,
											"end": 6979,
											"name": "tag",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 6529,
											"end": 6979,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6664,
											"end": 6681,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6664,
											"end": 6681,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6635,
											"end": 6642,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6635,
											"end": 6642,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6660,
											"end": 6723,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "280"
										},
										{
											"begin": 6660,
											"end": 6723,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6710,
											"end": 6711,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6710,
											"end": 6711,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6529,
											"end": 6979,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6529,
											"end": 6979,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6660,
											"end": 6723,
											"name": "tag",
											"source": 6,
											"value": "280"
										},
										{
											"begin": 6660,
											"end": 6723,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6967,
											"end": 6971,
											"name": "PUSH",
											"source": 6,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 6920,
											"end": 6963,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "281"
										},
										{
											"begin": 6946,
											"end": 6956,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6946,
											"end": 6962,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6946,
											"end": 6962,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6946,
											"end": 6962,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6920,
											"end": 6945,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "282"
										},
										{
											"begin": 6920,
											"end": 6963,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6920,
											"end": 6963,
											"name": "tag",
											"source": 6,
											"value": "281"
										},
										{
											"begin": 6920,
											"end": 6963,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6880,
											"end": 6900,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6880,
											"end": 6900,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6880,
											"end": 6900,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6880,
											"end": 6900,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6843,
											"end": 6860,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6843,
											"end": 6860,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6843,
											"end": 6900,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "283"
										},
										{
											"begin": 6843,
											"end": 6900,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6880,
											"end": 6900,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6843,
											"end": 6900,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 6843,
											"end": 6900,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6843,
											"end": 6900,
											"name": "tag",
											"source": 6,
											"value": "283"
										},
										{
											"begin": 6843,
											"end": 6900,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6843,
											"end": 6963,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 6843,
											"end": 6963,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6843,
											"end": 6963,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6843,
											"end": 6963,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 6843,
											"end": 6963,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10610,
											"end": 10795,
											"name": "tag",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 10610,
											"end": 10795,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10708,
											"end": 10715,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10779,
											"end": 10787,
											"name": "PUSH",
											"source": 6,
											"value": "1DFE200"
										},
										{
											"begin": 10771,
											"end": 10775,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 10756,
											"end": 10767,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10756,
											"end": 10767,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10742,
											"end": 10753,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10742,
											"end": 10767,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "287"
										},
										{
											"begin": 10742,
											"end": 10767,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10742,
											"end": 10767,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10742,
											"end": 10767,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 10742,
											"end": 10767,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10742,
											"end": 10767,
											"name": "tag",
											"source": 6,
											"value": "287"
										},
										{
											"begin": 10742,
											"end": 10767,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10741,
											"end": 10775,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 10741,
											"end": 10775,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10741,
											"end": 10775,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10741,
											"end": 10775,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 10741,
											"end": 10775,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "tag",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5020,
											"end": 5075,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5020,
											"end": 5075,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5002,
											"end": 5076,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5092,
											"end": 5110,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5092,
											"end": 5110,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5092,
											"end": 5110,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5085,
											"end": 5119,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5085,
											"end": 5119,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5085,
											"end": 5119,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 813,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "292"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 833,
											"end": 838,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 833,
											"end": 838,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 863,
											"end": 886,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 863,
											"end": 886,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4975,
											"end": 4993,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4975,
											"end": 4993,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 840,
											"end": 898,
											"name": "tag",
											"source": 3,
											"value": "293"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 813,
											"end": 832,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "295"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "tag",
											"source": 3,
											"value": "292"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000"
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2333,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "tag",
											"source": 3,
											"value": "212"
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5411,
											"end": 5426,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5411,
											"end": 5426,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5411,
											"end": 5426,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5393,
											"end": 5427,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5463,
											"end": 5478,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5463,
											"end": 5478,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5443,
											"end": 5461,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5443,
											"end": 5461,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5443,
											"end": 5461,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5436,
											"end": 5479,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5495,
											"end": 5513,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5495,
											"end": 5513,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5495,
											"end": 5513,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5488,
											"end": 5522,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5488,
											"end": 5522,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5488,
											"end": 5522,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "298"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1070,
											"end": 1075,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1070,
											"end": 1075,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1100,
											"end": 1127,
											"name": "PUSH",
											"source": 3,
											"value": "23B872DD00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1100,
											"end": 1127,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5305,
											"end": 5323,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 5305,
											"end": 5323,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "293"
										},
										{
											"begin": 5130,
											"end": 5528,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "tag",
											"source": 3,
											"value": "298"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 6987,
											"end": 7358,
											"name": "tag",
											"source": 6,
											"value": "236"
										},
										{
											"begin": 6987,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7107,
											"end": 7114,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7107,
											"end": 7114,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7145,
											"end": 7156,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7141,
											"end": 7198,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "302"
										},
										{
											"begin": 7141,
											"end": 7198,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7181,
											"end": 7182,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7181,
											"end": 7182,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7181,
											"end": 7182,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7173,
											"end": 7186,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "301"
										},
										{
											"begin": 7173,
											"end": 7186,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7141,
											"end": 7198,
											"name": "tag",
											"source": 6,
											"value": "302"
										},
										{
											"begin": 7141,
											"end": 7198,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7272,
											"end": 7276,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 7250,
											"end": 7268,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7250,
											"end": 7268,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7241,
											"end": 7247,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7241,
											"end": 7268,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "303"
										},
										{
											"begin": 7241,
											"end": 7268,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7241,
											"end": 7268,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7241,
											"end": 7268,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 7241,
											"end": 7268,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7241,
											"end": 7268,
											"name": "tag",
											"source": 6,
											"value": "303"
										},
										{
											"begin": 7241,
											"end": 7268,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "304"
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "tag",
											"source": 6,
											"value": "304"
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7230,
											"end": 7277,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "305"
										},
										{
											"begin": 7230,
											"end": 7277,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7230,
											"end": 7236,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7230,
											"end": 7277,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 7230,
											"end": 7277,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7230,
											"end": 7277,
											"name": "tag",
											"source": 6,
											"value": "305"
										},
										{
											"begin": 7230,
											"end": 7277,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7334,
											"end": 7338,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 7312,
											"end": 7330,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7312,
											"end": 7330,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7303,
											"end": 7309,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7303,
											"end": 7330,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "306"
										},
										{
											"begin": 7303,
											"end": 7330,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7303,
											"end": 7330,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7303,
											"end": 7330,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 7303,
											"end": 7330,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7303,
											"end": 7330,
											"name": "tag",
											"source": 6,
											"value": "306"
										},
										{
											"begin": 7303,
											"end": 7330,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7302,
											"end": 7338,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "307"
										},
										{
											"begin": 7302,
											"end": 7338,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7302,
											"end": 7338,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7302,
											"end": 7338,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 7302,
											"end": 7338,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7302,
											"end": 7338,
											"name": "tag",
											"source": 6,
											"value": "307"
										},
										{
											"begin": 7302,
											"end": 7338,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7292,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "308"
										},
										{
											"begin": 7292,
											"end": 7339,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7292,
											"end": 7298,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7292,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 7292,
											"end": 7339,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7292,
											"end": 7339,
											"name": "tag",
											"source": 6,
											"value": "308"
										},
										{
											"begin": 7292,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7208,
											"end": 7350,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7208,
											"end": 7350,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7208,
											"end": 7350,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7208,
											"end": 7350,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6987,
											"end": 7358,
											"name": "tag",
											"source": 6,
											"value": "301"
										},
										{
											"begin": 6987,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6987,
											"end": 7358,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6987,
											"end": 7358,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6987,
											"end": 7358,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6987,
											"end": 7358,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6987,
											"end": 7358,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6987,
											"end": 7358,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6283,
											"end": 6521,
											"name": "tag",
											"source": 6,
											"value": "282"
										},
										{
											"begin": 6283,
											"end": 6521,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6383,
											"end": 6390,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6505,
											"end": 6513,
											"name": "PUSH",
											"source": 6,
											"value": "1E13380"
										},
										{
											"begin": 6470,
											"end": 6493,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "310"
										},
										{
											"begin": 6488,
											"end": 6493,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6470,
											"end": 6485,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 6470,
											"end": 6493,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 6470,
											"end": 6493,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6470,
											"end": 6493,
											"name": "tag",
											"source": 6,
											"value": "310"
										},
										{
											"begin": 6470,
											"end": 6493,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6469,
											"end": 6501,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 6469,
											"end": 6501,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6497,
											"end": 6501,
											"name": "PUSH",
											"source": 6,
											"value": "D3C21BCECCEDA1000000"
										},
										{
											"begin": 6469,
											"end": 6501,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 6469,
											"end": 6501,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "tag",
											"source": 3,
											"value": "295"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3649,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "314"
										},
										{
											"begin": 3680,
											"end": 3684,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3660,
											"end": 3665,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "315"
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "tag",
											"source": 3,
											"value": "314"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3752,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3752,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3735,
											"end": 3756,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "292"
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3830,
											"end": 3840,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "317"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "318"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "tag",
											"source": 3,
											"value": "317"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "292"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6017,
											"end": 6019,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5999,
											"end": 6020,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6056,
											"end": 6058,
											"name": "PUSH",
											"source": 7,
											"value": "2A"
										},
										{
											"begin": 6036,
											"end": 6054,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6036,
											"end": 6054,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6036,
											"end": 6054,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6029,
											"end": 6059,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6095,
											"end": 6129,
											"name": "PUSH",
											"source": 7,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 6075,
											"end": 6093,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6075,
											"end": 6093,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6075,
											"end": 6093,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6068,
											"end": 6130,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6166,
											"end": 6178,
											"name": "PUSH",
											"source": 7,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 6146,
											"end": 6164,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6146,
											"end": 6164,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6146,
											"end": 6164,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6139,
											"end": 6179,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6196,
											"end": 6215,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 6196,
											"end": 6215,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "117"
										},
										{
											"begin": 5815,
											"end": 6221,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "tag",
											"source": 4,
											"value": "315"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3994,
											"end": 4006,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "323"
										},
										{
											"begin": 4047,
											"end": 4053,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4055,
											"end": 4059,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4061,
											"end": 4062,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4064,
											"end": 4076,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4025,
											"end": 4046,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "324"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "tag",
											"source": 4,
											"value": "323"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "tag",
											"source": 4,
											"value": "322"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "tag",
											"source": 4,
											"value": "324"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5113,
											"end": 5125,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5170,
											"end": 5175,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5166,
											"name": "SELFBALANCE",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "326"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6428,
											"end": 6430,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6410,
											"end": 6431,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6467,
											"end": 6469,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 6447,
											"end": 6465,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6447,
											"end": 6465,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6447,
											"end": 6465,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6440,
											"end": 6470,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6506,
											"end": 6540,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 6486,
											"end": 6504,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6486,
											"end": 6504,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6486,
											"end": 6504,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6479,
											"end": 6541,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6577,
											"end": 6585,
											"name": "PUSH",
											"source": 7,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6557,
											"end": 6575,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6557,
											"end": 6575,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6557,
											"end": 6575,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6550,
											"end": 6586,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 6226,
											"end": 6628,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "tag",
											"source": 4,
											"value": "326"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "331"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6835,
											"end": 6837,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6817,
											"end": 6838,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6874,
											"end": 6876,
											"name": "PUSH",
											"source": 7,
											"value": "1D"
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6847,
											"end": 6877,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6913,
											"end": 6944,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 6893,
											"end": 6911,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6893,
											"end": 6911,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6893,
											"end": 6911,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6886,
											"end": 6945,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6962,
											"end": 6980,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6962,
											"end": 6980,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 6633,
											"end": 6986,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "tag",
											"source": 4,
											"value": "331"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5300,
											"end": 5312,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5314,
											"end": 5337,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5347,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5341,
											"end": 5352,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5360,
											"end": 5365,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5367,
											"end": 5371,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "334"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "335"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "334"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "338"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "3F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "337"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "338"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "337"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "339"
										},
										{
											"begin": 5406,
											"end": 5413,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5415,
											"end": 5425,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5427,
											"end": 5439,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "340"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "tag",
											"source": 4,
											"value": "339"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "SWAP8",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "SWAP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "tag",
											"source": 4,
											"value": "340"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7707,
											"end": 7719,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 7735,
											"end": 7742,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "343"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7765,
											"end": 7775,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "322"
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "tag",
											"source": 4,
											"value": "343"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7897,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "345"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8070,
											"end": 8080,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8064,
											"end": 8081,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8130,
											"end": 8145,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8117,
											"end": 8127,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8113,
											"end": 8115,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8109,
											"end": 8128,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8102,
											"end": 8146,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "tag",
											"source": 4,
											"value": "345"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8209,
											"end": 8221,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "348"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "130"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "349"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "349"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 842,
											"end": 1151,
											"name": "tag",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 842,
											"end": 1151,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 901,
											"end": 907,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 954,
											"end": 956,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 942,
											"end": 951,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 933,
											"end": 940,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 929,
											"end": 952,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 925,
											"end": 957,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 922,
											"end": 974,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 922,
											"end": 974,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "356"
										},
										{
											"begin": 922,
											"end": 974,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 970,
											"end": 971,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 967,
											"end": 968,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 960,
											"end": 972,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 922,
											"end": 974,
											"name": "tag",
											"source": 7,
											"value": "356"
										},
										{
											"begin": 922,
											"end": 974,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1009,
											"end": 1018,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 996,
											"end": 1019,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1052,
											"end": 1057,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1048,
											"end": 1102,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1041,
											"end": 1046,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1038,
											"end": 1103,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1028,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "322"
										},
										{
											"begin": 1028,
											"end": 1121,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1117,
											"end": 1118,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1114,
											"end": 1115,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1107,
											"end": 1119,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1803,
											"end": 2051,
											"name": "tag",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 1803,
											"end": 2051,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1871,
											"end": 1877,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1879,
											"end": 1885,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1934,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1920,
											"end": 1929,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1911,
											"end": 1918,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1907,
											"end": 1930,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1903,
											"end": 1935,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "362"
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1948,
											"end": 1949,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1945,
											"end": 1946,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1938,
											"end": 1950,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "tag",
											"source": 7,
											"value": "362"
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1971,
											"end": 1994,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1994,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1994,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2041,
											"end": 2043,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2026,
											"end": 2044,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2026,
											"end": 2044,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2026,
											"end": 2044,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2013,
											"end": 2045,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2013,
											"end": 2045,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1803,
											"end": 2051,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2056,
											"end": 2236,
											"name": "tag",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 2056,
											"end": 2236,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2115,
											"end": 2121,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2168,
											"end": 2170,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2156,
											"end": 2165,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2147,
											"end": 2154,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2143,
											"end": 2166,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2139,
											"end": 2171,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 2136,
											"end": 2188,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2136,
											"end": 2188,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "364"
										},
										{
											"begin": 2136,
											"end": 2188,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2184,
											"end": 2185,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2181,
											"end": 2182,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2174,
											"end": 2186,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2136,
											"end": 2188,
											"name": "tag",
											"source": 7,
											"value": "364"
										},
										{
											"begin": 2136,
											"end": 2188,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2207,
											"end": 2230,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2207,
											"end": 2230,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2056,
											"end": 2236,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2056,
											"end": 2236,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2832,
											"end": 3016,
											"name": "tag",
											"source": 7,
											"value": "351"
										},
										{
											"begin": 2832,
											"end": 3016,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2881,
											"end": 2882,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2874,
											"end": 2962,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2981,
											"end": 2985,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 2978,
											"end": 2979,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2971,
											"end": 2986,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3005,
											"end": 3009,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3002,
											"end": 3003,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2995,
											"end": 3010,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3021,
											"end": 3146,
											"name": "tag",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 3021,
											"end": 3146,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3061,
											"end": 3065,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3089,
											"end": 3090,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3086,
											"end": 3087,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3083,
											"end": 3091,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 3080,
											"end": 3114,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3080,
											"end": 3114,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "370"
										},
										{
											"begin": 3080,
											"end": 3114,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3094,
											"end": 3112,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "370"
										},
										{
											"begin": 3094,
											"end": 3112,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "351"
										},
										{
											"begin": 3094,
											"end": 3112,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3094,
											"end": 3112,
											"name": "tag",
											"source": 7,
											"value": "370"
										},
										{
											"begin": 3094,
											"end": 3112,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3131,
											"end": 3140,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3131,
											"end": 3140,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3021,
											"end": 3146,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3151,
											"end": 3319,
											"name": "tag",
											"source": 7,
											"value": "137"
										},
										{
											"begin": 3151,
											"end": 3319,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3191,
											"end": 3198,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3257,
											"end": 3258,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3253,
											"end": 3254,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3249,
											"end": 3255,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 3245,
											"end": 3259,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3242,
											"end": 3243,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3239,
											"end": 3260,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3234,
											"end": 3235,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3227,
											"end": 3236,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3220,
											"end": 3237,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3216,
											"end": 3261,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "373"
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3264,
											"end": 3282,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "373"
										},
										{
											"begin": 3264,
											"end": 3282,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "351"
										},
										{
											"begin": 3264,
											"end": 3282,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3264,
											"end": 3282,
											"name": "tag",
											"source": 7,
											"value": "373"
										},
										{
											"begin": 3264,
											"end": 3282,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3304,
											"end": 3313,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 3304,
											"end": 3313,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3151,
											"end": 3319,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3324,
											"end": 3598,
											"name": "tag",
											"source": 7,
											"value": "139"
										},
										{
											"begin": 3324,
											"end": 3598,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3364,
											"end": 3365,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3391,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3380,
											"end": 3569,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "375"
										},
										{
											"begin": 3380,
											"end": 3569,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3422,
											"end": 3423,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3415,
											"end": 3503,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3526,
											"end": 3530,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 3523,
											"end": 3524,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3516,
											"end": 3531,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3554,
											"end": 3558,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3551,
											"end": 3552,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3544,
											"end": 3559,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3380,
											"end": 3569,
											"name": "tag",
											"source": 7,
											"value": "375"
										},
										{
											"begin": 3380,
											"end": 3569,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3583,
											"end": 3592,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3592,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3324,
											"end": 3598,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3603,
											"end": 3731,
											"name": "tag",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 3603,
											"end": 3731,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3643,
											"end": 3646,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3674,
											"end": 3675,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3670,
											"end": 3676,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 3667,
											"end": 3668,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3664,
											"end": 3677,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3661,
											"end": 3700,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3661,
											"end": 3700,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 3661,
											"end": 3700,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3680,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 3680,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "351"
										},
										{
											"begin": 3680,
											"end": 3698,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3680,
											"end": 3698,
											"name": "tag",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 3680,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3716,
											"end": 3725,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3716,
											"end": 3725,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3603,
											"end": 3731,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5533,
											"end": 5810,
											"name": "tag",
											"source": 7,
											"value": "318"
										},
										{
											"begin": 5533,
											"end": 5810,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5600,
											"end": 5606,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5653,
											"end": 5655,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5641,
											"end": 5650,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5632,
											"end": 5639,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5628,
											"end": 5651,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5624,
											"end": 5656,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 5621,
											"end": 5673,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5621,
											"end": 5673,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "385"
										},
										{
											"begin": 5621,
											"end": 5673,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5669,
											"end": 5670,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5666,
											"end": 5667,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5659,
											"end": 5671,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5621,
											"end": 5673,
											"name": "tag",
											"source": 7,
											"value": "385"
										},
										{
											"begin": 5621,
											"end": 5673,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5701,
											"end": 5710,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5695,
											"end": 5711,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5754,
											"end": 5759,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5747,
											"end": 5760,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5740,
											"end": 5761,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5733,
											"end": 5738,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5730,
											"end": 5762,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 5720,
											"end": 5780,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "322"
										},
										{
											"begin": 5720,
											"end": 5780,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5776,
											"end": 5777,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5773,
											"end": 5774,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5766,
											"end": 5778,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6991,
											"end": 7249,
											"name": "tag",
											"source": 7,
											"value": "352"
										},
										{
											"begin": 6991,
											"end": 7249,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7063,
											"end": 7064,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7073,
											"end": 7186,
											"name": "tag",
											"source": 7,
											"value": "391"
										},
										{
											"begin": 7073,
											"end": 7186,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7087,
											"end": 7093,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7084,
											"end": 7085,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7081,
											"end": 7094,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 7073,
											"end": 7186,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7073,
											"end": 7186,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "393"
										},
										{
											"begin": 7073,
											"end": 7186,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7163,
											"end": 7174,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7163,
											"end": 7174,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7163,
											"end": 7174,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7157,
											"end": 7175,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7144,
											"end": 7155,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7144,
											"end": 7155,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7144,
											"end": 7155,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7137,
											"end": 7176,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7109,
											"end": 7111,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7102,
											"end": 7112,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7073,
											"end": 7186,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "391"
										},
										{
											"begin": 7073,
											"end": 7186,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7073,
											"end": 7186,
											"name": "tag",
											"source": 7,
											"value": "393"
										},
										{
											"begin": 7073,
											"end": 7186,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7204,
											"end": 7210,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7201,
											"end": 7202,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7198,
											"end": 7211,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7195,
											"end": 7243,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7195,
											"end": 7243,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "298"
										},
										{
											"begin": 7195,
											"end": 7243,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7239,
											"end": 7240,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7221,
											"end": 7237,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7221,
											"end": 7237,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7214,
											"end": 7241,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6991,
											"end": 7249,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7254,
											"end": 7528,
											"name": "tag",
											"source": 7,
											"value": "335"
										},
										{
											"begin": 7254,
											"end": 7528,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7383,
											"end": 7386,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7421,
											"end": 7427,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7415,
											"end": 7428,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7437,
											"end": 7490,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "396"
										},
										{
											"begin": 7483,
											"end": 7489,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7478,
											"end": 7481,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7471,
											"end": 7475,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7463,
											"end": 7469,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 7459,
											"end": 7476,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7437,
											"end": 7490,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "352"
										},
										{
											"begin": 7437,
											"end": 7490,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7437,
											"end": 7490,
											"name": "tag",
											"source": 7,
											"value": "396"
										},
										{
											"begin": 7437,
											"end": 7490,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7506,
											"end": 7522,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7506,
											"end": 7522,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7506,
											"end": 7522,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7506,
											"end": 7522,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7506,
											"end": 7522,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7254,
											"end": 7528,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7254,
											"end": 7528,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7533,
											"end": 7916,
											"name": "tag",
											"source": 7,
											"value": "348"
										},
										{
											"begin": 7533,
											"end": 7916,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7682,
											"end": 7684,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7671,
											"end": 7680,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7664,
											"end": 7685,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7645,
											"end": 7649,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7714,
											"end": 7720,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7708,
											"end": 7721,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7757,
											"end": 7763,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7752,
											"end": 7754,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7741,
											"end": 7750,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7737,
											"end": 7755,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7730,
											"end": 7764,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7773,
											"end": 7839,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "398"
										},
										{
											"begin": 7832,
											"end": 7838,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7827,
											"end": 7829,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7816,
											"end": 7825,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 7812,
											"end": 7830,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7807,
											"end": 7809,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7799,
											"end": 7805,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 7795,
											"end": 7810,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7773,
											"end": 7839,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "352"
										},
										{
											"begin": 7773,
											"end": 7839,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7773,
											"end": 7839,
											"name": "tag",
											"source": 7,
											"value": "398"
										},
										{
											"begin": 7773,
											"end": 7839,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7900,
											"end": 7902,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 7879,
											"end": 7894,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7875,
											"end": 7904,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7860,
											"end": 7905,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7860,
											"end": 7905,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7860,
											"end": 7905,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7860,
											"end": 7905,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7907,
											"end": 7909,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7856,
											"end": 7910,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7856,
											"end": 7910,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7533,
											"end": 7916,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7533,
											"end": 7916,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"_blockTimestamp()": "c63aa3e7",
							"airdropRate()": "8891cf0d",
							"airdropSince()": "b87da76d",
							"calculateWeek(uint256)": "b5d9df83",
							"changeAirdropPercentage(uint256)": "d5dbdf1b",
							"changePenaltyFee(uint256)": "8c63f97f",
							"claimAirdrop(address)": "65f8c6c5",
							"getVoters(address)": "2d15cc04",
							"getVotingResult()": "671d2b75",
							"hasStake()": "10486b6a",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"retractVote()": "070c8b74",
							"stake(uint256,uint256)": "7b0472f0",
							"stakingPenaltyRate()": "cb79c2e1",
							"startAirdrop()": "d2a569c3",
							"startVoting()": "1ec6b60a",
							"stopVoting()": "fab2f86b",
							"token_address()": "8c8e8fee",
							"totalVoters()": "5f5300ff",
							"transferOwnership(address)": "f2fde38b",
							"vote()": "632a9a52",
							"votedUsers(uint256)": "a143a5f2",
							"voters(address)": "a3ec138d",
							"withdrawStake()": "bed9d861"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Airdrop__claimableOnceAWeek\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Airdrop__notYetStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Function__notAVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Function__votingNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__airdropExceed20Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__cannotStakeNothing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__noStakingFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__penaltyExceed3Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__userIsStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking_noStakingPackageFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__alreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__notEnoughVoters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__notYetVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__votingIsRunning\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeAirdropPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changePenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimDrop\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"internalType\":\"struct Staking.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retractVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"votingRight\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"Airdrop__claimableOnceAWeek()\":[{\"notice\":\"Error handling message for Airdrop functions\"}],\"Staking__cannotStakeNothing()\":[{\"notice\":\"Error handling message for Staking functions\"}],\"Voting__votingIsRunning()\":[{\"notice\":\"Error handling message for Voting functions\"}]},\"events\":{\"Staked(address,uint256,uint256,uint256)\":{\"notice\":\"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\"}},\"kind\":\"user\",\"methods\":{\"stake(uint256,uint256)\":{\"notice\":\"_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID\"},\"withdrawStake()\":{\"notice\":\"withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stakable-2.0.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/Stakable-2.0.sol\":{\"keccak256\":\"0x1b642c762682cca3a9c7f3e39db86740f973cdf1227a1aa5b8e2b97e10b79bbc\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://628e78c9ca55883157a4d7899f0432708b0cacff711cc1a1baad3e3e8441022f\",\"dweb:/ipfs/QmZQMudspwWSihVDFcGZAwNP7Q5MvQjZ3eLw9cnuzKJBEB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 7,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 817,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "stakingPackage",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 819,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "stakingPenaltyRate",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 821,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "airdropRate",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 823,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "airdropSince",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 825,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "_votingStatus",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 827,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "_votingId",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 829,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "totalVoters",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 834,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "voters",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_address,t_struct(Voter)813_storage)"
							},
							{
								"astId": 838,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "votedUsers",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 840,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "token_address",
								"offset": 0,
								"slot": "11",
								"type": "t_address"
							},
							{
								"astId": 905,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "stakeholders",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_struct(Stake)891_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Stake)891_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Stake)",
								"numberOfBytes": "32",
								"value": "t_struct(Stake)891_storage"
							},
							"t_mapping(t_address,t_struct(Voter)813_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Voter)",
								"numberOfBytes": "32",
								"value": "t_struct(Voter)813_storage"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Stake)891_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Stake",
								"members": [
									{
										"astId": 878,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "amount",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 880,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "since",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 882,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "rewardAPY",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 884,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "releaseTime",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 886,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "claimable",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 888,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "claimableAirdrop",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 890,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "latestClaimDrop",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_struct(Voter)813_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Voter",
								"members": [
									{
										"astId": 808,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "votingRight",
										"offset": 0,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 812,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "voted",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_uint256,t_bool)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"Airdrop__claimableOnceAWeek()": [
								{
									"notice": "Error handling message for Airdrop functions"
								}
							],
							"Staking__cannotStakeNothing()": [
								{
									"notice": "Error handling message for Staking functions"
								}
							],
							"Voting__votingIsRunning()": [
								{
									"notice": "Error handling message for Voting functions"
								}
							]
						},
						"events": {
							"Staked(address,uint256,uint256,uint256)": {
								"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
							}
						},
						"kind": "user",
						"methods": {
							"stake(uint256,uint256)": {
								"notice": "_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID"
							},
							"withdrawStake()": {
								"notice": "withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							763
						],
						"Ownable": [
							104
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 764,
							"src": "112:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 763,
										"src": "668:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								763
							],
							"name": "Ownable",
							"nameLocation": "657:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "682:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "738:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "769:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:0"
									},
									"src": "711:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "911:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 753,
																"src": "940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "921:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "921:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:0"
									},
									"scope": 104,
									"src": "897:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "1091:30:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1108:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 28,
												"id": 30,
												"nodeType": "Return",
												"src": "1101:13:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 32,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:0"
									},
									"scope": 104,
									"src": "1036:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1230:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 36,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "1248:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 753,
																	"src": "1259:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:0"
											}
										]
									},
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1218:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:0"
									},
									"src": "1209:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1722:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 52,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1732:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 50,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 49,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1712:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:0"
									},
									"scope": 104,
									"src": "1668:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1988:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 69,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2006:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 72,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 70,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 68,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 78,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2081:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 66,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 65,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1945:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 104,
									"src": "1918:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2333:124:0",
										"statements": [
											{
												"assignments": [
													90
												],
												"declarations": [
													{
														"constant": false,
														"id": 90,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "2343:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 89,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 92,
												"initialValue": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:0"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2378:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 94,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "2387:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 98,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "2431:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 99,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2441:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 97,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2410:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "2405:45:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2298:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:0"
									},
									"scope": 104,
									"src": "2270:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "639:1820:0",
							"usedErrors": []
						}
					],
					"src": "87:2373:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							144
						]
					},
					"id": 145,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 144,
							"linearizedBaseContracts": [
								144
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 110,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1661:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 108,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 109,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 113,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1708:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 111,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 112,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 115,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1752:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 114,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "1796:39:1",
										"statements": [
											{
												"expression": {
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 118,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "1806:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 119,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "1816:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 121,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:1"
											}
										]
									},
									"id": 123,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:1"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:1"
									},
									"scope": 144,
									"src": "1782:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 142,
										"nodeType": "Block",
										"src": "2236:421:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 127,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 115,
																"src": "2325:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 128,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "2336:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 126,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 132,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:1"
											},
											{
												"expression": {
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 133,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2455:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 134,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 113,
														"src": "2465:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:1"
											},
											{
												"expression": {
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 138,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2628:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 139,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "2638:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:1"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 143,
									"name": "nonReentrant",
									"nameLocation": "2221:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:1"
									},
									"src": "2212:445:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 145,
							"src": "873:1786:1",
							"usedErrors": []
						}
					],
					"src": "97:2563:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							222
						]
					},
					"id": 223,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 146,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 222,
							"linearizedBaseContracts": [
								222
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "225:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "305:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "316:2:2"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "342:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "342:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:9:2"
									},
									"scope": 222,
									"src": "296:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "357:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "443:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "461:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "453:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "452:17:2"
									},
									"returnParameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "493:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:9:2"
									},
									"scope": 222,
									"src": "434:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 162,
										"nodeType": "StructuredDocumentation",
										"src": "508:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "724:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "741:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "733:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "753:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "745:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:28:2"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "779:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "779:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "778:6:2"
									},
									"scope": 222,
									"src": "715:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "791:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1069:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1087:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1079:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1079:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1102:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1094:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1078:32:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1134:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:2"
									},
									"scope": 222,
									"src": "1060:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "1149:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 191,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "1805:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1821:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1813:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1838:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1830:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:33:2"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1864:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 188,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1864:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:6:2"
									},
									"scope": 222,
									"src": "1796:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1876:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 203,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2177:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2207:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2199:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2199:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2229:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2221:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2221:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2249:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2241:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2241:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2189:72:2"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2280:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 200,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2280:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2279:6:2"
									},
									"scope": 222,
									"src": "2168:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "2292:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 212,
									"name": "Transfer",
									"nameLocation": "2461:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2486:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2470:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2470:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2508:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2492:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2520:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2512:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2512:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2469:57:2"
									},
									"src": "2455:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2533:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 221,
									"name": "Approval",
									"nameLocation": "2692:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2717:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2701:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2740:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2724:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2757:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2749:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:63:2"
									},
									"src": "2686:78:2"
								}
							],
							"scope": 223,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"IERC20": [
							222
						],
						"SafeERC20": [
							446
						]
					},
					"id": 447,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 224,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 225,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 223,
							"src": "125:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 226,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 742,
							"src": "149:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 227,
								"nodeType": "StructuredDocumentation",
								"src": "187:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 446,
							"linearizedBaseContracts": [
								446
							],
							"name": "SafeERC20",
							"nameLocation": "653:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 230,
									"libraryName": {
										"id": 228,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 741,
										"src": "675:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "669:26:3",
									"typeName": {
										"id": 229,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "687:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 252,
										"nodeType": "Block",
										"src": "803:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 241,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 233,
															"src": "833:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 244,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 233,
																			"src": "863:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 245,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 171,
																		"src": "863:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "863:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 247,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 235,
																	"src": "888:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 248,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 237,
																	"src": "892:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 242,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "840:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 243,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "840:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "840:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 240,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "813:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "813:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 251,
												"nodeType": "ExpressionStatement",
												"src": "813:86:3"
											}
										]
									},
									"id": 253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "710:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "739:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "732:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 232,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 231,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "732:6:3"
													},
													"referencedDeclaration": 222,
													"src": "732:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "762:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "754:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "754:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "782:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "774:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "774:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:71:3"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "803:0:3"
									},
									"scope": 446,
									"src": "701:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "1040:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 266,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 256,
															"src": "1070:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 269,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 256,
																			"src": "1100:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 203,
																		"src": "1100:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1100:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 272,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 258,
																	"src": "1129:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 273,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "1135:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 274,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 262,
																	"src": "1139:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 267,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1077:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1077:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1077:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 265,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1050:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1050:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "1050:96:3"
											}
										]
									},
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "921:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "954:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "947:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 255,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 254,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "947:6:3"
													},
													"referencedDeclaration": 222,
													"src": "947:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "977:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "969:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "969:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "999:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "991:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "991:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1019:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "1011:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "937:93:3"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:0:3"
									},
									"scope": 446,
									"src": "912:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 322,
										"nodeType": "Block",
										"src": "1519:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 291,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 287,
																			"src": "1768:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 292,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1777:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1768:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 294,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1767:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 299,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1808:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 298,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1800:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 297,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1800:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 300,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1800:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 301,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 285,
																					"src": "1815:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 295,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 283,
																					"src": "1784:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 296,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 181,
																				"src": "1784:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 302,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1784:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 303,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1827:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1784:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 305,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1783:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1767:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 307,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1843:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 290,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1746:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1746:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 309,
												"nodeType": "ExpressionStatement",
												"src": "1746:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 311,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "1939:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 314,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 283,
																			"src": "1969:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 315,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "1969:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1969:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 317,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 285,
																	"src": "1993:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 318,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 287,
																	"src": "2002:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 312,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1946:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 313,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1946:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1946:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 310,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1919:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1919:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 321,
												"nodeType": "ExpressionStatement",
												"src": "1919:90:3"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "1159:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 323,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1422:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1450:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1443:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 282,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 281,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "1443:6:3"
													},
													"referencedDeclaration": 222,
													"src": "1443:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1473:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1465:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1465:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1498:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1490:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1490:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1433:76:3"
									},
									"returnParameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1519:0:3"
									},
									"scope": 446,
									"src": "1413:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "2138:194:3",
										"statements": [
											{
												"assignments": [
													334
												],
												"declarations": [
													{
														"constant": false,
														"id": 334,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2156:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 358,
														"src": "2148:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 333,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2148:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 345,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 339,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2195:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2187:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 337,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2187:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 340,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2187:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 341,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 328,
																"src": "2202:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 335,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 326,
																"src": "2171:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$222",
																	"typeString": "contract IERC20"
																}
															},
															"id": 336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 181,
															"src": "2171:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 342,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2171:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 343,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "2213:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2171:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2148:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 347,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 326,
															"src": "2248:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 350,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 326,
																			"src": "2278:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 351,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "2278:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2278:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 353,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 328,
																	"src": "2302:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 354,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 334,
																	"src": "2311:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 348,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2255:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 349,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2255:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2255:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 346,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "2228:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2228:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 357,
												"nodeType": "ExpressionStatement",
												"src": "2228:97:3"
											}
										]
									},
									"id": 359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2031:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2069:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2062:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 325,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 324,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2062:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2062:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2092:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2084:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2084:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2117:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2109:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2109:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2052:76:3"
									},
									"returnParameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2138:0:3"
									},
									"scope": 446,
									"src": "2022:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 406,
										"nodeType": "Block",
										"src": "2454:370:3",
										"statements": [
											{
												"id": 405,
												"nodeType": "UncheckedBlock",
												"src": "2464:354:3",
												"statements": [
													{
														"assignments": [
															370
														],
														"declarations": [
															{
																"constant": false,
																"id": 370,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2496:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2488:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 369,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2488:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 379,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 375,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2535:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2527:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 373,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2527:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 376,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2527:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 377,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "2542:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 371,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2511:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 181,
																"src": "2511:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2511:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2488:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 381,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 370,
																		"src": "2572:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 382,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 366,
																		"src": "2588:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2572:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2595:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 380,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2564:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2564:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 386,
														"nodeType": "ExpressionStatement",
														"src": "2564:75:3"
													},
													{
														"assignments": [
															388
														],
														"declarations": [
															{
																"constant": false,
																"id": 388,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2661:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2653:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 387,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2653:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 392,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 389,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 370,
																"src": "2676:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 390,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "2691:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2676:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2653:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 394,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2730:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 397,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 362,
																					"src": "2760:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 398,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 191,
																				"src": "2760:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 399,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2760:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 400,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 364,
																			"src": "2784:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 401,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "2793:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 395,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2737:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 396,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2737:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2737:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 393,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "2710:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2710:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 404,
														"nodeType": "ExpressionStatement",
														"src": "2710:97:3"
													}
												]
											}
										]
									},
									"id": 407,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2347:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2385:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2378:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 361,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 360,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2378:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2378:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2408:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2400:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2433:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2425:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2368:76:3"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2454:0:3"
									},
									"scope": 446,
									"src": "2338:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "3277:636:3",
										"statements": [
											{
												"assignments": [
													417
												],
												"declarations": [
													{
														"constant": false,
														"id": 417,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3639:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 444,
														"src": "3626:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 416,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3626:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 426,
												"initialValue": {
													"arguments": [
														{
															"id": 423,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "3680:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 424,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3686:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 420,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 411,
																	"src": "3660:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 419,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3652:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 418,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3652:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3652:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 535,
														"src": "3652:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3652:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3626:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 427,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3735:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 428,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3735:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 429,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3755:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3735:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 443,
												"nodeType": "IfStatement",
												"src": "3731:176:3",
												"trueBody": {
													"id": 442,
													"nodeType": "Block",
													"src": "3758:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 434,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 417,
																				"src": "3830:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 436,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3843:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 435,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3843:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 437,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3842:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 432,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3819:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3819:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3819:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 439,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3851:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 431,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3811:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3811:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 441,
															"nodeType": "ExpressionStatement",
															"src": "3811:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 408,
										"nodeType": "StructuredDocumentation",
										"src": "2830:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3216:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3243:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3236:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 410,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 409,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "3236:6:3"
													},
													"referencedDeclaration": 222,
													"src": "3236:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3263:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3250:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 412,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3250:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3235:33:3"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3277:0:3"
									},
									"scope": 446,
									"src": "3207:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 447,
							"src": "645:3270:3",
							"usedErrors": []
						}
					],
					"src": "100:3816:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							741
						]
					},
					"id": 742,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 448,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 449,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 741,
							"linearizedBaseContracts": [
								741
							],
							"name": "Address",
							"nameLocation": "202:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "1241:254:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 457,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "1465:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 459,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 460,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 456,
												"id": 462,
												"nodeType": "Return",
												"src": "1458:30:4"
											}
										]
									},
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1195:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:4"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1235:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 454,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:4"
									},
									"scope": 741,
									"src": "1175:320:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 497,
										"nodeType": "Block",
										"src": "2483:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 475,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 473,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 476,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 478,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2526:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 480,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 472,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 482,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:4"
											},
											{
												"assignments": [
													484,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 484,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 497,
														"src": "2578:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 483,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 491,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 485,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "2596:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 488,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 487,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2618:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 493,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 484,
															"src": "2647:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 492,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 496,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:4"
											}
										]
									},
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 498,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2431:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2458:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:4"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:4"
									},
									"scope": 741,
									"src": "2412:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 514,
										"nodeType": "Block",
										"src": "3555:84:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 509,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "3585:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 510,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "3593:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 511,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 508,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															515,
															535
														],
														"referencedDeclaration": 535,
														"src": "3572:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 507,
												"id": 513,
												"nodeType": "Return",
												"src": "3565:67:4"
											}
										]
									},
									"documentation": {
										"id": 499,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3504:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 502,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:4"
									},
									"returnParameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3541:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 505,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:4"
									},
									"scope": 741,
									"src": "3466:173:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 534,
										"nodeType": "Block",
										"src": "4008:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 528,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "4047:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 529,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "4055:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 530,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 531,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "4064:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 527,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4025:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 526,
												"id": 533,
												"nodeType": "Return",
												"src": "4018:59:4"
											}
										]
									},
									"documentation": {
										"id": 516,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 535,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3892:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3916:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 519,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3943:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 521,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:4"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3994:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 524,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:4"
									},
									"scope": 741,
									"src": "3861:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "4589:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 548,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "4628:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 549,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "4636:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 550,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "4642:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 547,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4606:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 546,
												"id": 553,
												"nodeType": "Return",
												"src": "4599:94:4"
											}
										]
									},
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4486:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4510:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 539,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4537:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:4"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4575:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 544,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:4"
									},
									"scope": 741,
									"src": "4446:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 604,
										"nodeType": "Block",
										"src": "5127:320:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 576,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 572,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 571,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 570,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 574,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 575,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5170:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 569,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 579,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 582,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "5247:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 581,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "5236:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 580,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 585,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 586,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:4"
											},
											{
												"assignments": [
													588,
													590
												],
												"declarations": [
													{
														"constant": false,
														"id": 588,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5300:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 587,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 590,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5314:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 589,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 597,
												"initialValue": {
													"arguments": [
														{
															"id": 595,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "5367:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 591,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 558,
																"src": "5341:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 592,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 594,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 593,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5360:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 599,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "5406:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 600,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "5415:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 601,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "5427:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 598,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "5389:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 568,
												"id": 603,
												"nodeType": "Return",
												"src": "5382:58:4"
											}
										]
									},
									"documentation": {
										"id": 556,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "4988:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5012:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 559,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5039:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5062:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 563,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:4"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5113:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 566,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:4"
									},
									"scope": 741,
									"src": "4948:499:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "5724:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 616,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "5760:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 617,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 610,
															"src": "5768:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 615,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															622,
															657
														],
														"referencedDeclaration": 657,
														"src": "5741:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 614,
												"id": 620,
												"nodeType": "Return",
												"src": "5734:80:4"
											}
										]
									},
									"documentation": {
										"id": 606,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5652:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5668:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 609,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:4"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5710:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 612,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:4"
									},
									"scope": 741,
									"src": "5624:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 656,
										"nodeType": "Block",
										"src": "6163:228:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 636,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 625,
																	"src": "6192:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 635,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "6181:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 634,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:4"
											},
											{
												"assignments": [
													642,
													644
												],
												"declarations": [
													{
														"constant": false,
														"id": 642,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6252:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 641,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 644,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6266:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 643,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 649,
												"initialValue": {
													"arguments": [
														{
															"id": 647,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "6311:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 645,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "6293:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 651,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "6350:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 652,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "6359:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 653,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "6371:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 650,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "6333:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 633,
												"id": 655,
												"nodeType": "Return",
												"src": "6326:58:4"
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6042:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6066:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6093:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 628,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:4"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6149:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 631,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:4"
									},
									"scope": 741,
									"src": "6005:386:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 673,
										"nodeType": "Block",
										"src": "6667:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 668,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "6705:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 669,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "6713:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 667,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															674,
															709
														],
														"referencedDeclaration": 709,
														"src": "6684:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 666,
												"id": 672,
												"nodeType": "Return",
												"src": "6677:84:4"
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 674,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6600:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6616:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:4"
									},
									"returnParameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6653:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 664,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:4"
									},
									"scope": 741,
									"src": "6570:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 708,
										"nodeType": "Block",
										"src": "7109:232:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 688,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 677,
																	"src": "7138:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 687,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "7127:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 686,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 692,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:4"
											},
											{
												"assignments": [
													694,
													696
												],
												"declarations": [
													{
														"constant": false,
														"id": 694,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7200:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 693,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 696,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7214:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 695,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 701,
												"initialValue": {
													"arguments": [
														{
															"id": 699,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 679,
															"src": "7261:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 697,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "7241:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 703,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "7300:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 704,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 696,
															"src": "7309:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 705,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "7321:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 702,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "7283:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 685,
												"id": 707,
												"nodeType": "Return",
												"src": "7276:58:4"
											}
										]
									},
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "6993:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7017:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 678,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7044:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 680,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:4"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7095:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 683,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:4"
									},
									"scope": 741,
									"src": "6954:387:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 739,
										"nodeType": "Block",
										"src": "7721:532:4",
										"statements": [
											{
												"condition": {
													"id": 721,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 712,
													"src": "7735:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 737,
													"nodeType": "Block",
													"src": "7792:455:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 725,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 714,
																		"src": "7876:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 726,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 727,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 735,
																"nodeType": "Block",
																"src": "8184:53:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 732,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 716,
																					"src": "8209:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 731,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8202:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 733,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8202:20:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 734,
																		"nodeType": "ExpressionStatement",
																		"src": "8202:20:4"
																	}
																]
															},
															"id": 736,
															"nodeType": "IfStatement",
															"src": "7872:365:4",
															"trueBody": {
																"id": 730,
																"nodeType": "Block",
																"src": "7899:279:4",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8019:145:4",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8041:40:4",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8070:10:4"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8064:5:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8064:17:4"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8045:15:4",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8113:2:4",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8117:10:4"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8109:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8109:19:4"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8130:15:4"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8102:6:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8102:44:4"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8102:44:4"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8070:10:4",
																				"valueSize": 1
																			},
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8117:10:4",
																				"valueSize": 1
																			}
																		],
																		"id": 729,
																		"nodeType": "InlineAssembly",
																		"src": "8010:154:4"
																	}
																]
															}
														}
													]
												},
												"id": 738,
												"nodeType": "IfStatement",
												"src": "7731:516:4",
												"trueBody": {
													"id": 724,
													"nodeType": "Block",
													"src": "7744:42:4",
													"statements": [
														{
															"expression": {
																"id": 722,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 714,
																"src": "7765:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 720,
															"id": 723,
															"nodeType": "Return",
															"src": "7758:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 710,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:4",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7596:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 711,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7618:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 713,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7651:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 715,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:4"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7707:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 718,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:4"
									},
									"scope": 741,
									"src": "7561:692:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 742,
							"src": "194:8061:4",
							"usedErrors": []
						}
					],
					"src": "101:8155:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							763
						]
					},
					"id": 764,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 743,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 744,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 763,
							"linearizedBaseContracts": [
								763
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 752,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 749,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 748,
												"id": 751,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 763,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 761,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 758,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 757,
												"id": 760,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 762,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 754,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 755,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 763,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 764,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"contracts/Stakable-2.0.sol": {
				"ast": {
					"absolutePath": "contracts/Stakable-2.0.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"Airdrop__claimableOnceAWeek": [
							791
						],
						"Airdrop__notYetStarted": [
							793
						],
						"Context": [
							763
						],
						"Function__notAVoter": [
							773
						],
						"Function__notAuthorized": [
							771
						],
						"Function__votingNotAvailable": [
							775
						],
						"IERC20": [
							222
						],
						"Ownable": [
							104
						],
						"ReentrancyGuard": [
							144
						],
						"SafeERC20": [
							446
						],
						"Staking": [
							1709
						],
						"Staking__airdropExceed20Percent": [
							784
						],
						"Staking__cannotStakeNothing": [
							778
						],
						"Staking__noStakingFound": [
							786
						],
						"Staking__penaltyExceed3Percent": [
							782
						],
						"Staking__userIsStaker": [
							780
						],
						"Staking_noStakingPackageFound": [
							788
						],
						"Voting__alreadyVoted": [
							798
						],
						"Voting__notEnoughVoters": [
							802
						],
						"Voting__notYetVoted": [
							800
						],
						"Voting__votingIsRunning": [
							796
						]
					},
					"id": 1710,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 765,
							"literals": [
								"solidity",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "40:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 766,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1710,
							"sourceUnit": 447,
							"src": "67:65:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 767,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1710,
							"sourceUnit": 145,
							"src": "134:62:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 768,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1710,
							"sourceUnit": 105,
							"src": "198:52:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"documentation": {
								"id": 769,
								"nodeType": "StructuredDocumentation",
								"src": "254:56:6",
								"text": " @notice Error handling message for Modifier"
							},
							"id": 771,
							"name": "Function__notAuthorized",
							"nameLocation": "318:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 770,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "341:2:6"
							},
							"src": "312:32:6"
						},
						{
							"id": 773,
							"name": "Function__notAVoter",
							"nameLocation": "352:19:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 772,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "371:2:6"
							},
							"src": "346:28:6"
						},
						{
							"id": 775,
							"name": "Function__votingNotAvailable",
							"nameLocation": "382:28:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 774,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "410:2:6"
							},
							"src": "376:37:6"
						},
						{
							"documentation": {
								"id": 776,
								"nodeType": "StructuredDocumentation",
								"src": "417:65:6",
								"text": " @notice Error handling message for Staking functions"
							},
							"id": 778,
							"name": "Staking__cannotStakeNothing",
							"nameLocation": "490:27:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 777,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "517:2:6"
							},
							"src": "484:36:6"
						},
						{
							"id": 780,
							"name": "Staking__userIsStaker",
							"nameLocation": "528:21:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 779,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "549:2:6"
							},
							"src": "522:30:6"
						},
						{
							"id": 782,
							"name": "Staking__penaltyExceed3Percent",
							"nameLocation": "560:30:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 781,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "590:2:6"
							},
							"src": "554:39:6"
						},
						{
							"id": 784,
							"name": "Staking__airdropExceed20Percent",
							"nameLocation": "601:31:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 783,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "632:2:6"
							},
							"src": "595:40:6"
						},
						{
							"id": 786,
							"name": "Staking__noStakingFound",
							"nameLocation": "643:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 785,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "666:2:6"
							},
							"src": "637:32:6"
						},
						{
							"id": 788,
							"name": "Staking_noStakingPackageFound",
							"nameLocation": "677:29:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 787,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "706:2:6"
							},
							"src": "671:38:6"
						},
						{
							"documentation": {
								"id": 789,
								"nodeType": "StructuredDocumentation",
								"src": "713:65:6",
								"text": " @notice Error handling message for Airdrop functions"
							},
							"id": 791,
							"name": "Airdrop__claimableOnceAWeek",
							"nameLocation": "786:27:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 790,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "813:2:6"
							},
							"src": "780:36:6"
						},
						{
							"id": 793,
							"name": "Airdrop__notYetStarted",
							"nameLocation": "824:22:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 792,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "846:2:6"
							},
							"src": "818:31:6"
						},
						{
							"documentation": {
								"id": 794,
								"nodeType": "StructuredDocumentation",
								"src": "853:64:6",
								"text": " @notice Error handling message for Voting functions"
							},
							"id": 796,
							"name": "Voting__votingIsRunning",
							"nameLocation": "925:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 795,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "948:2:6"
							},
							"src": "919:32:6"
						},
						{
							"id": 798,
							"name": "Voting__alreadyVoted",
							"nameLocation": "959:20:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 797,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "979:2:6"
							},
							"src": "953:29:6"
						},
						{
							"id": 800,
							"name": "Voting__notYetVoted",
							"nameLocation": "990:19:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 799,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "1009:2:6"
							},
							"src": "984:28:6"
						},
						{
							"id": 802,
							"name": "Voting__notEnoughVoters",
							"nameLocation": "1020:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 801,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "1043:2:6"
							},
							"src": "1014:32:6"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 803,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 144,
										"src": "1070:15:6"
									},
									"id": 804,
									"nodeType": "InheritanceSpecifier",
									"src": "1070:15:6"
								},
								{
									"baseName": {
										"id": 805,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 104,
										"src": "1087:7:6"
									},
									"id": 806,
									"nodeType": "InheritanceSpecifier",
									"src": "1087:7:6"
								}
							],
							"canonicalName": "Staking",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1709,
							"linearizedBaseContracts": [
								1709,
								104,
								763,
								144
							],
							"name": "Staking",
							"nameLocation": "1059:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Staking.Voter",
									"id": 813,
									"members": [
										{
											"constant": false,
											"id": 808,
											"mutability": "mutable",
											"name": "votingRight",
											"nameLocation": "1301:11:6",
											"nodeType": "VariableDeclaration",
											"scope": 813,
											"src": "1296:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 807,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1296:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 812,
											"mutability": "mutable",
											"name": "voted",
											"nameLocation": "1348:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 813,
											"src": "1323:30:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"typeName": {
												"id": 811,
												"keyType": {
													"id": 809,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1331:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "1323:24:6",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
													"typeString": "mapping(uint256 => bool)"
												},
												"valueType": {
													"id": 810,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1342:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Voter",
									"nameLocation": "1279:5:6",
									"nodeType": "StructDefinition",
									"scope": 1709,
									"src": "1272:89:6",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 817,
									"mutability": "mutable",
									"name": "stakingPackage",
									"nameLocation": "1406:14:6",
									"nodeType": "VariableDeclaration",
									"scope": 1709,
									"src": "1369:51:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 816,
										"keyType": {
											"id": 814,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1377:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1369:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 815,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1388:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "cb79c2e1",
									"id": 819,
									"mutability": "mutable",
									"name": "stakingPenaltyRate",
									"nameLocation": "1444:18:6",
									"nodeType": "VariableDeclaration",
									"scope": 1709,
									"src": "1429:33:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 818,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1429:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8891cf0d",
									"id": 821,
									"mutability": "mutable",
									"name": "airdropRate",
									"nameLocation": "1484:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 1709,
									"src": "1469:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 820,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1469:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b87da76d",
									"id": 823,
									"mutability": "mutable",
									"name": "airdropSince",
									"nameLocation": "1517:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1709,
									"src": "1502:27:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 822,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1502:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 825,
									"mutability": "mutable",
									"name": "_votingStatus",
									"nameLocation": "1552:13:6",
									"nodeType": "VariableDeclaration",
									"scope": 1709,
									"src": "1538:27:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 824,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1538:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 827,
									"mutability": "mutable",
									"name": "_votingId",
									"nameLocation": "1589:9:6",
									"nodeType": "VariableDeclaration",
									"scope": 1709,
									"src": "1572:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 826,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1572:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "5f5300ff",
									"id": 829,
									"mutability": "mutable",
									"name": "totalVoters",
									"nameLocation": "1620:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 1709,
									"src": "1605:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 828,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1605:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a3ec138d",
									"id": 834,
									"mutability": "mutable",
									"name": "voters",
									"nameLocation": "1671:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 1709,
									"src": "1638:39:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$813_storage_$",
										"typeString": "mapping(address => struct Staking.Voter)"
									},
									"typeName": {
										"id": 833,
										"keyType": {
											"id": 830,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1646:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1638:25:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$813_storage_$",
											"typeString": "mapping(address => struct Staking.Voter)"
										},
										"valueType": {
											"id": 832,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 831,
												"name": "Voter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 813,
												"src": "1657:5:6"
											},
											"referencedDeclaration": 813,
											"src": "1657:5:6",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Voter_$813_storage_ptr",
												"typeString": "struct Staking.Voter"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a143a5f2",
									"id": 838,
									"mutability": "mutable",
									"name": "votedUsers",
									"nameLocation": "1719:10:6",
									"nodeType": "VariableDeclaration",
									"scope": 1709,
									"src": "1684:45:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 837,
										"keyType": {
											"id": 835,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1692:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1684:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 836,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1703:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8c8e8fee",
									"id": 840,
									"mutability": "mutable",
									"name": "token_address",
									"nameLocation": "1753:13:6",
									"nodeType": "VariableDeclaration",
									"scope": 1709,
									"src": "1738:28:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 839,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1738:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 875,
										"nodeType": "Block",
										"src": "1802:284:6",
										"statements": [
											{
												"expression": {
													"id": 847,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 845,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "1876:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3135",
														"id": 846,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1897:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_15_by_1",
															"typeString": "int_const 15"
														},
														"value": "15"
													},
													"src": "1876:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 848,
												"nodeType": "ExpressionStatement",
												"src": "1876:23:6"
											},
											{
												"expression": {
													"id": 851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 849,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 821,
														"src": "1910:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3830",
														"id": 850,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1924:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_80_by_1",
															"typeString": "int_const 80"
														},
														"value": "80"
													},
													"src": "1910:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 852,
												"nodeType": "ExpressionStatement",
												"src": "1910:16:6"
											},
											{
												"expression": {
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 853,
														"name": "token_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 840,
														"src": "1939:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 854,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 842,
														"src": "1955:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1939:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 856,
												"nodeType": "ExpressionStatement",
												"src": "1939:21:6"
											},
											{
												"expression": {
													"id": 861,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 857,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 817,
															"src": "1973:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 859,
														"indexExpression": {
															"hexValue": "3930",
															"id": 858,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1988:7:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_7776000_by_1",
																"typeString": "int_const 7776000"
															},
															"value": "90"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1973:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "36",
														"id": 860,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1999:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_6_by_1",
															"typeString": "int_const 6"
														},
														"value": "6"
													},
													"src": "1973:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 862,
												"nodeType": "ExpressionStatement",
												"src": "1973:27:6"
											},
											{
												"expression": {
													"id": 867,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 863,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 817,
															"src": "2011:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 865,
														"indexExpression": {
															"hexValue": "313830",
															"id": 864,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2026:8:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_15552000_by_1",
																"typeString": "int_const 15552000"
															},
															"value": "180"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2011:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "37",
														"id": 866,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2038:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_7_by_1",
															"typeString": "int_const 7"
														},
														"value": "7"
													},
													"src": "2011:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 868,
												"nodeType": "ExpressionStatement",
												"src": "2011:28:6"
											},
											{
												"expression": {
													"id": 873,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 869,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 817,
															"src": "2050:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 871,
														"indexExpression": {
															"hexValue": "333635",
															"id": 870,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2065:8:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															"value": "365"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2050:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "38",
														"id": 872,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2077:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"src": "2050:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 874,
												"nodeType": "ExpressionStatement",
												"src": "2050:28:6"
											}
										]
									},
									"id": 876,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1795:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "1787:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 841,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1787:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1786:15:6"
									},
									"returnParameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1802:0:6"
									},
									"scope": 1709,
									"src": "1775:311:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.Stake",
									"id": 891,
									"members": [
										{
											"constant": false,
											"id": 878,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "2359:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 891,
											"src": "2351:14:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 877,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2351:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 880,
											"mutability": "mutable",
											"name": "since",
											"nameLocation": "2384:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 891,
											"src": "2376:13:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 879,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2376:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 882,
											"mutability": "mutable",
											"name": "rewardAPY",
											"nameLocation": "2408:9:6",
											"nodeType": "VariableDeclaration",
											"scope": 891,
											"src": "2400:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 881,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2400:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 884,
											"mutability": "mutable",
											"name": "releaseTime",
											"nameLocation": "2436:11:6",
											"nodeType": "VariableDeclaration",
											"scope": 891,
											"src": "2428:19:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 883,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2428:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 886,
											"mutability": "mutable",
											"name": "claimable",
											"nameLocation": "2566:9:6",
											"nodeType": "VariableDeclaration",
											"scope": 891,
											"src": "2558:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 885,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2558:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 888,
											"mutability": "mutable",
											"name": "claimableAirdrop",
											"nameLocation": "2594:16:6",
											"nodeType": "VariableDeclaration",
											"scope": 891,
											"src": "2586:24:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 887,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2586:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 890,
											"mutability": "mutable",
											"name": "latestClaimDrop",
											"nameLocation": "2629:15:6",
											"nodeType": "VariableDeclaration",
											"scope": 891,
											"src": "2621:23:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 889,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2621:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stake",
									"nameLocation": "2334:5:6",
									"nodeType": "StructDefinition",
									"scope": 1709,
									"src": "2327:325:6",
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.StakingSummary",
									"id": 899,
									"members": [
										{
											"constant": false,
											"id": 893,
											"mutability": "mutable",
											"name": "total_amount",
											"nameLocation": "2836:12:6",
											"nodeType": "VariableDeclaration",
											"scope": 899,
											"src": "2828:20:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 892,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2828:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 895,
											"mutability": "mutable",
											"name": "penalty",
											"nameLocation": "2867:7:6",
											"nodeType": "VariableDeclaration",
											"scope": 899,
											"src": "2859:15:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 894,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2859:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 898,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "2891:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 899,
											"src": "2885:11:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
												"typeString": "struct Staking.Stake"
											},
											"typeName": {
												"id": 897,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 896,
													"name": "Stake",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 891,
													"src": "2885:5:6"
												},
												"referencedDeclaration": 891,
												"src": "2885:5:6",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
													"typeString": "struct Staking.Stake"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakingSummary",
									"nameLocation": "2802:14:6",
									"nodeType": "StructDefinition",
									"scope": 1709,
									"src": "2795:109:6",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 900,
										"nodeType": "StructuredDocumentation",
										"src": "2912:114:6",
										"text": " @notice\n stakes is used to keep track of the INDEX for the stakers in the stakes array"
									},
									"id": 905,
									"mutability": "mutable",
									"name": "stakeholders",
									"nameLocation": "3067:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1709,
									"src": "3032:47:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$891_storage_$",
										"typeString": "mapping(address => struct Staking.Stake)"
									},
									"typeName": {
										"id": 904,
										"keyType": {
											"id": 901,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3040:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3032:25:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$891_storage_$",
											"typeString": "mapping(address => struct Staking.Stake)"
										},
										"valueType": {
											"id": 903,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 902,
												"name": "Stake",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 891,
												"src": "3051:5:6"
											},
											"referencedDeclaration": 891,
											"src": "3051:5:6",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
												"typeString": "struct Staking.Stake"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 906,
										"nodeType": "StructuredDocumentation",
										"src": "3088:126:6",
										"text": " @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
									},
									"id": 916,
									"name": "Staked",
									"nameLocation": "3226:6:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 908,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "3259:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "3243:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 907,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3243:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 910,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3282:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "3274:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3274:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 912,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3307:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "3299:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 911,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3299:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 914,
												"indexed": false,
												"mutability": "mutable",
												"name": "releaseTime",
												"nameLocation": "3335:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "3327:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 913,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3327:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:121:6"
									},
									"src": "3220:134:6"
								},
								{
									"anonymous": false,
									"id": 920,
									"name": "PenaltyChanged",
									"nameLocation": "3368:14:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 918,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3391:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "3383:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 917,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3383:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3382:16:6"
									},
									"src": "3362:37:6"
								},
								{
									"anonymous": false,
									"id": 924,
									"name": "AirdropChanged",
									"nameLocation": "3411:14:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 922,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3434:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "3426:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 921,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3426:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3425:16:6"
									},
									"src": "3405:37:6"
								},
								{
									"body": {
										"id": 939,
										"nodeType": "Block",
										"src": "3592:202:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 933,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 927,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 834,
																"src": "3691:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$813_storage_$",
																	"typeString": "mapping(address => struct Staking.Voter storage ref)"
																}
															},
															"id": 930,
															"indexExpression": {
																"expression": {
																	"id": 928,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3698:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 929,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3698:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3691:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$813_storage",
																"typeString": "struct Staking.Voter storage ref"
															}
														},
														"id": 931,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 808,
														"src": "3691:30:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 932,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3725:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3691:39:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 938,
												"nodeType": "IfStatement",
												"src": "3687:100:6",
												"trueBody": {
													"id": 937,
													"nodeType": "Block",
													"src": "3732:55:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 934,
																	"name": "Function__notAVoter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 773,
																	"src": "3754:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 935,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3754:21:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 936,
															"nodeType": "RevertStatement",
															"src": "3747:28:6"
														}
													]
												}
											}
										]
									},
									"id": 940,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isVoter",
									"nameLocation": "3567:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3575:2:6"
									},
									"returnParameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3592:0:6"
									},
									"scope": 1709,
									"src": "3558:236:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 946,
										"nodeType": "Block",
										"src": "3821:41:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 942,
														"name": "_isVoter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 940,
														"src": "3832:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3832:10:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 944,
												"nodeType": "ExpressionStatement",
												"src": "3832:10:6"
											},
											{
												"id": 945,
												"nodeType": "PlaceholderStatement",
												"src": "3853:1:6"
											}
										]
									},
									"id": 947,
									"name": "isVoter",
									"nameLocation": "3811:7:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3818:2:6"
									},
									"src": "3802:60:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 957,
										"nodeType": "Block",
										"src": "3914:165:6",
										"statements": [
											{
												"condition": {
													"id": 951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3992:14:6",
													"subExpression": {
														"id": 950,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "3993:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 956,
												"nodeType": "IfStatement",
												"src": "3988:84:6",
												"trueBody": {
													"id": 955,
													"nodeType": "Block",
													"src": "4008:64:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 952,
																	"name": "Function__votingNotAvailable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 775,
																	"src": "4030:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 953,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4030:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 954,
															"nodeType": "RevertStatement",
															"src": "4023:37:6"
														}
													]
												}
											}
										]
									},
									"id": 958,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkVotingStatus",
									"nameLocation": "3879:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3897:2:6"
									},
									"returnParameters": {
										"id": 949,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3914:0:6"
									},
									"scope": 1709,
									"src": "3870:209:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 964,
										"nodeType": "Block",
										"src": "4115:51:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 960,
														"name": "_checkVotingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 958,
														"src": "4126:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 961,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4126:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 962,
												"nodeType": "ExpressionStatement",
												"src": "4126:20:6"
											},
											{
												"id": 963,
												"nodeType": "PlaceholderStatement",
												"src": "4157:1:6"
											}
										]
									},
									"id": 965,
									"name": "votingStatusTrue",
									"nameLocation": "4096:16:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 959,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4112:2:6"
									},
									"src": "4087:79:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1068,
										"nodeType": "Block",
										"src": "4589:1365:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 977,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 975,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 968,
														"src": "4716:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "30",
														"id": 976,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4726:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4716:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 982,
												"nodeType": "IfStatement",
												"src": "4712:80:6",
												"trueBody": {
													"id": 981,
													"nodeType": "Block",
													"src": "4729:63:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 978,
																	"name": "Staking__cannotStakeNothing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "4751:27:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 979,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4751:29:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 980,
															"nodeType": "RevertStatement",
															"src": "4744:36:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 983,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 905,
																"src": "4879:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$891_storage_$",
																	"typeString": "mapping(address => struct Staking.Stake storage ref)"
																}
															},
															"id": 986,
															"indexExpression": {
																"expression": {
																	"id": 984,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4892:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 985,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4892:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4879:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_storage",
																"typeString": "struct Staking.Stake storage ref"
															}
														},
														"id": 987,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 878,
														"src": "4879:31:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 988,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4914:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4879:36:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 994,
												"nodeType": "IfStatement",
												"src": "4875:99:6",
												"trueBody": {
													"id": 993,
													"nodeType": "Block",
													"src": "4917:57:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 990,
																	"name": "Staking__userIsStaker",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 780,
																	"src": "4939:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 991,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4939:23:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 992,
															"nodeType": "RevertStatement",
															"src": "4932:30:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 999,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 995,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 817,
															"src": "4990:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 997,
														"indexExpression": {
															"id": 996,
															"name": "stakePeriod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 970,
															"src": "5005:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4990:27:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 998,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5021:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4990:32:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1004,
												"nodeType": "IfStatement",
												"src": "4986:103:6",
												"trueBody": {
													"id": 1003,
													"nodeType": "Block",
													"src": "5024:65:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1000,
																	"name": "Staking_noStakingPackageFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 788,
																	"src": "5046:29:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5046:31:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1002,
															"nodeType": "RevertStatement",
															"src": "5039:38:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1005,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 829,
														"src": "5101:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1006,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5116:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "5101:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1008,
												"nodeType": "ExpressionStatement",
												"src": "5101:16:6"
											},
											{
												"expression": {
													"id": 1015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1009,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 834,
																"src": "5128:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$813_storage_$",
																	"typeString": "mapping(address => struct Staking.Voter storage ref)"
																}
															},
															"id": 1012,
															"indexExpression": {
																"expression": {
																	"id": 1010,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5135:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1011,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5135:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5128:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$813_storage",
																"typeString": "struct Staking.Voter storage ref"
															}
														},
														"id": 1013,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 808,
														"src": "5128:30:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1014,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5161:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "5128:37:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1016,
												"nodeType": "ExpressionStatement",
												"src": "5128:37:6"
											},
											{
												"assignments": [
													1018
												],
												"declarations": [
													{
														"constant": false,
														"id": 1018,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "5274:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1068,
														"src": "5266:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1017,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5266:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1021,
												"initialValue": {
													"expression": {
														"id": 1019,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "5286:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "5286:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5266:35:6"
											},
											{
												"expression": {
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1022,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 905,
															"src": "5435:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$891_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1025,
														"indexExpression": {
															"expression": {
																"id": 1023,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5448:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1024,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5448:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5435:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$891_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1027,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 968,
																"src": "5482:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1028,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1018,
																"src": "5503:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"baseExpression": {
																	"id": 1029,
																	"name": "stakingPackage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 817,
																	"src": "5527:14:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 1031,
																"indexExpression": {
																	"id": 1030,
																	"name": "stakePeriod",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 970,
																	"src": "5542:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5527:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1034,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1032,
																			"name": "stakePeriod",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 970,
																			"src": "5570:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1033,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1018,
																			"src": "5584:9:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5570:23:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1035,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5569:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 1036,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5609:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1037,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5625:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1038,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5641:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1026,
															"name": "Stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 891,
															"src": "5462:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Stake_$891_storage_ptr_$",
																"typeString": "type(struct Staking.Stake storage pointer)"
															}
														},
														"id": 1039,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5462:191:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
															"typeString": "struct Staking.Stake memory"
														}
													},
													"src": "5435:218:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$891_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"id": 1041,
												"nodeType": "ExpressionStatement",
												"src": "5435:218:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1046,
																	"name": "token_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 840,
																	"src": "5714:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1045,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 222,
																"src": "5707:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1047,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5707:21:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"expression": {
																"id": 1048,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5743:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1049,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5743:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1052,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5776:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Staking_$1709",
																		"typeString": "contract Staking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Staking_$1709",
																		"typeString": "contract Staking"
																	}
																],
																"id": 1051,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5768:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1050,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5768:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1053,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5768:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1054,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 968,
															"src": "5796:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1042,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "5666:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1044,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 279,
														"src": "5666:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5666:147:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1056,
												"nodeType": "ExpressionStatement",
												"src": "5666:147:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1058,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5889:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1059,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5889:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1060,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 968,
															"src": "5901:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1061,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1018,
															"src": "5909:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1064,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1062,
																		"name": "stakePeriod",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 970,
																		"src": "5921:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1063,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1018,
																		"src": "5935:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5921:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1065,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5920:25:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1057,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 916,
														"src": "5882:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 1066,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5882:64:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1067,
												"nodeType": "EmitStatement",
												"src": "5877:69:6"
											}
										]
									},
									"documentation": {
										"id": 966,
										"nodeType": "StructuredDocumentation",
										"src": "4282:204:6",
										"text": " @notice\n _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n StakeID"
									},
									"functionSelector": "7b0472f0",
									"id": 1069,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 973,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 972,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "4571:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "4571:12:6"
										}
									],
									"name": "stake",
									"nameLocation": "4501:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4515:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1069,
												"src": "4507:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4507:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "stakePeriod",
												"nameLocation": "4531:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1069,
												"src": "4523:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4523:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4506:37:6"
									},
									"returnParameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4589:0:6"
									},
									"scope": 1709,
									"src": "4492:1462:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1092,
										"nodeType": "Block",
										"src": "6023:252:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1078,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1076,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1071,
														"src": "6113:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3330",
														"id": 1077,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6122:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_30_by_1",
															"typeString": "int_const 30"
														},
														"value": "30"
													},
													"src": "6113:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1083,
												"nodeType": "IfStatement",
												"src": "6109:83:6",
												"trueBody": {
													"id": 1082,
													"nodeType": "Block",
													"src": "6126:66:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1079,
																	"name": "Staking__penaltyExceed3Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "6148:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1080,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6148:32:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1081,
															"nodeType": "RevertStatement",
															"src": "6141:39:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1086,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1084,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "6202:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1085,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1071,
														"src": "6223:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6202:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1087,
												"nodeType": "ExpressionStatement",
												"src": "6202:27:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1089,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1071,
															"src": "6260:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1088,
														"name": "PenaltyChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 920,
														"src": "6245:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6245:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1091,
												"nodeType": "EmitStatement",
												"src": "6240:27:6"
											}
										]
									},
									"functionSelector": "8c63f97f",
									"id": 1093,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1074,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1073,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "6013:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "6013:9:6"
										}
									],
									"name": "changePenaltyFee",
									"nameLocation": "5971:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1071,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5996:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "5988:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1070,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5988:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5987:16:6"
									},
									"returnParameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6023:0:6"
									},
									"scope": 1709,
									"src": "5962:313:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1111,
										"nodeType": "Block",
										"src": "6397:124:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1106,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1103,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1100,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "6470:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1101,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "6470:15:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1102,
																				"name": "since",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1095,
																				"src": "6488:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6470:23:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1104,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6469:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "31653234",
																	"id": 1105,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6497:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000000000"
																	},
																	"value": "1e24"
																},
																"src": "6469:32:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1107,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6468:34:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "333635",
														"id": 1108,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6505:8:6",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31536000_by_1",
															"typeString": "int_const 31536000"
														},
														"value": "365"
													},
													"src": "6468:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1099,
												"id": 1110,
												"nodeType": "Return",
												"src": "6461:52:6"
											}
										]
									},
									"id": 1112,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingDuration",
									"nameLocation": "6292:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "since",
												"nameLocation": "6326:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "6318:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1094,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6318:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6317:15:6"
									},
									"returnParameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "6383:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1097,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6383:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6382:9:6"
									},
									"scope": 1709,
									"src": "6283:238:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1142,
										"nodeType": "Block",
										"src": "6649:330:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1120,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1115,
															"src": "6664:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1121,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 878,
														"src": "6664:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1122,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6685:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6664:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1127,
												"nodeType": "IfStatement",
												"src": "6660:63:6",
												"trueBody": {
													"id": 1126,
													"nodeType": "Block",
													"src": "6688:35:6",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1124,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6710:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1119,
															"id": 1125,
															"nodeType": "Return",
															"src": "6703:8:6"
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1137,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1132,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1128,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1115,
																			"src": "6843:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1129,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 878,
																		"src": "6843:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"expression": {
																			"id": 1130,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1115,
																			"src": "6880:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1131,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardAPY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 882,
																		"src": "6880:20:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6843:57:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1134,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1115,
																				"src": "6946:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																					"typeString": "struct Staking.Stake memory"
																				}
																			},
																			"id": 1135,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "since",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 880,
																			"src": "6946:16:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1133,
																		"name": "_calculateStakingDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1112,
																		"src": "6920:25:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1136,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6920:43:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6843:120:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1138,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6842:122:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653236",
														"id": 1139,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6967:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000000000"
														},
														"value": "1e26"
													},
													"src": "6842:129:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1119,
												"id": 1141,
												"nodeType": "Return",
												"src": "6822:149:6"
											}
										]
									},
									"id": 1143,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakeReward",
									"nameLocation": "6538:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "user_stake",
												"nameLocation": "6573:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "6560:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
													"typeString": "struct Staking.Stake"
												},
												"typeName": {
													"id": 1114,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1113,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 891,
														"src": "6560:5:6"
													},
													"referencedDeclaration": 891,
													"src": "6560:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
														"typeString": "struct Staking.Stake"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6559:25:6"
									},
									"returnParameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "6635:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6635:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6634:9:6"
									},
									"scope": 1709,
									"src": "6529:450:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1183,
										"nodeType": "Block",
										"src": "7130:228:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1154,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1145,
														"src": "7145:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1155,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7155:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7145:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1162,
												"nodeType": "IfStatement",
												"src": "7141:57:6",
												"trueBody": {
													"id": 1161,
													"nodeType": "Block",
													"src": "7158:40:6",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"hexValue": "30",
																		"id": 1157,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7181:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	{
																		"hexValue": "30",
																		"id": 1158,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7184:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1159,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7180:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$",
																	"typeString": "tuple(int_const 0,int_const 0)"
																}
															},
															"functionReturnParameters": 1153,
															"id": 1160,
															"nodeType": "Return",
															"src": "7173:13:6"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1171,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1163,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1145,
																"src": "7230:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1169,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1166,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1164,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1145,
																						"src": "7241:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1165,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 819,
																						"src": "7250:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "7241:27:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1167,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "7240:29:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1168,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7272:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "7240:36:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1170,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7239:38:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7230:47:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1180,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1172,
																"name": "reward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1147,
																"src": "7292:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1178,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1175,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1173,
																						"name": "reward",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1147,
																						"src": "7303:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1174,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 819,
																						"src": "7312:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "7303:27:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1176,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "7302:29:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1177,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7334:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "7302:36:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1179,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7301:38:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7292:47:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1181,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7215:135:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 1153,
												"id": 1182,
												"nodeType": "Return",
												"src": "7208:142:6"
											}
										]
									},
									"id": 1184,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingWithPenalty",
									"nameLocation": "6996:28:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7033:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1184,
												"src": "7025:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7025:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1147,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "7049:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1184,
												"src": "7041:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7041:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7024:32:6"
									},
									"returnParameters": {
										"id": 1153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1184,
												"src": "7107:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7107:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1152,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1184,
												"src": "7116:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7116:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7106:18:6"
									},
									"scope": 1709,
									"src": "6987:371:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1270,
										"nodeType": "Block",
										"src": "7872:965:6",
										"statements": [
											{
												"assignments": [
													1192
												],
												"declarations": [
													{
														"constant": false,
														"id": 1192,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "8006:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1270,
														"src": "7993:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1191,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1190,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 891,
																"src": "7993:5:6"
															},
															"referencedDeclaration": 891,
															"src": "7993:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1197,
												"initialValue": {
													"baseExpression": {
														"id": 1193,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 905,
														"src": "8019:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$891_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1196,
													"indexExpression": {
														"expression": {
															"id": 1194,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "8032:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1195,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "8032:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8019:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$891_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7993:50:6"
											},
											{
												"assignments": [
													1199
												],
												"declarations": [
													{
														"constant": false,
														"id": 1199,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "8062:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1270,
														"src": "8054:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1198,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8054:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1203,
												"initialValue": {
													"arguments": [
														{
															"id": 1201,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "8093:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1200,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1143,
														"src": "8071:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$891_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8071:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8054:50:6"
											},
											{
												"expression": {
													"id": 1208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "8117:31:6",
													"subExpression": {
														"baseExpression": {
															"id": 1204,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 905,
															"src": "8124:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$891_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1207,
														"indexExpression": {
															"expression": {
																"id": 1205,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8137:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8137:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8124:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$891_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1209,
												"nodeType": "ExpressionStatement",
												"src": "8117:31:6"
											},
											{
												"expression": {
													"id": 1212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1210,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 829,
														"src": "8159:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1211,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8174:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "8159:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1213,
												"nodeType": "ExpressionStatement",
												"src": "8159:16:6"
											},
											{
												"expression": {
													"id": 1221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "8186:42:6",
													"subExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1214,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 834,
																	"src": "8193:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$813_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1217,
																"indexExpression": {
																	"expression": {
																		"id": 1215,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "8200:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1216,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "8200:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8193:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$813_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1218,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 812,
															"src": "8193:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1220,
														"indexExpression": {
															"id": 1219,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 827,
															"src": "8218:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8193:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1222,
												"nodeType": "ExpressionStatement",
												"src": "8186:42:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1223,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "8245:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1224,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 884,
														"src": "8245:22:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1225,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "8270:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1226,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "8270:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8245:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1268,
													"nodeType": "Block",
													"src": "8650:180:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1257,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 840,
																				"src": "8713:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1256,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "8706:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1258,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8706:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1259,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8746:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1260,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8746:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1264,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"id": 1261,
																						"name": "user_stake",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1192,
																						"src": "8776:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																							"typeString": "struct Staking.Stake memory"
																						}
																					},
																					"id": 1262,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "amount",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 878,
																					"src": "8776:17:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1263,
																					"name": "reward",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1199,
																					"src": "8796:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8776:26:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1265,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8775:28:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1253,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "8665:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1255,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "8665:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1266,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8665:153:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1267,
															"nodeType": "ExpressionStatement",
															"src": "8665:153:6"
														}
													]
												},
												"id": 1269,
												"nodeType": "IfStatement",
												"src": "8241:589:6",
												"trueBody": {
													"id": 1252,
													"nodeType": "Block",
													"src": "8287:357:6",
													"statements": [
														{
															"assignments": [
																1229,
																1231
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1229,
																	"mutability": "mutable",
																	"name": "amount_reduced",
																	"nameLocation": "8329:14:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1252,
																	"src": "8321:22:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1228,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "8321:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1231,
																	"mutability": "mutable",
																	"name": "reward_reduced",
																	"nameLocation": "8370:14:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1252,
																	"src": "8362:22:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1230,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "8362:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1237,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1233,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1192,
																			"src": "8431:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1234,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 878,
																		"src": "8431:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1235,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1199,
																		"src": "8450:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1232,
																	"name": "_calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1184,
																	"src": "8402:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 1236,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8402:55:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8302:155:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1242,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 840,
																				"src": "8522:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1241,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "8515:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1243,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8515:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1244,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8555:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1245,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8555:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1248,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1246,
																					"name": "amount_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1229,
																					"src": "8585:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1247,
																					"name": "reward_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1231,
																					"src": "8602:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8585:31:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1249,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8584:33:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1238,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "8474:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1240,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "8474:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1250,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8474:158:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1251,
															"nodeType": "ExpressionStatement",
															"src": "8474:158:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1185,
										"nodeType": "StructuredDocumentation",
										"src": "7366:341:6",
										"text": " @notice\n withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n Notice index of the stake is the users stake counter, starting at 0 for the first stake\n Will return the amount to MINT onto the account\n Will also _calculateStakeReward and reset timer"
									},
									"functionSelector": "bed9d861",
									"id": 1271,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1188,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1187,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "7859:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "7859:12:6"
										}
									],
									"name": "withdrawStake",
									"nameLocation": "7834:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1186,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7847:2:6"
									},
									"returnParameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7872:0:6"
									},
									"scope": 1709,
									"src": "7825:1012:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1387,
										"nodeType": "Block",
										"src": "8911:985:6",
										"statements": [
											{
												"assignments": [
													1279
												],
												"declarations": [
													{
														"constant": false,
														"id": 1279,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "8935:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1387,
														"src": "8922:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1278,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1277,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 891,
																"src": "8922:5:6"
															},
															"referencedDeclaration": 891,
															"src": "8922:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1284,
												"initialValue": {
													"baseExpression": {
														"id": 1280,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 905,
														"src": "8948:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$891_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1283,
													"indexExpression": {
														"expression": {
															"id": 1281,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "8961:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1282,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "8961:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8948:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$891_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8922:50:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1285,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1279,
															"src": "9049:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1286,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 878,
														"src": "9049:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1287,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9070:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "9049:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1293,
												"nodeType": "IfStatement",
												"src": "9045:87:6",
												"trueBody": {
													"id": 1292,
													"nodeType": "Block",
													"src": "9073:59:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1289,
																	"name": "Staking__noStakingFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 786,
																	"src": "9095:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1290,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9095:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1291,
															"nodeType": "RevertStatement",
															"src": "9088:32:6"
														}
													]
												}
											},
											{
												"assignments": [
													1296
												],
												"declarations": [
													{
														"constant": false,
														"id": 1296,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "9164:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1387,
														"src": "9142:29:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$899_memory_ptr",
															"typeString": "struct Staking.StakingSummary"
														},
														"typeName": {
															"id": 1295,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1294,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 899,
																"src": "9142:14:6"
															},
															"referencedDeclaration": 899,
															"src": "9142:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$899_storage_ptr",
																"typeString": "struct Staking.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1302,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 1298,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9189:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 1299,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9192:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1300,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1279,
															"src": "9195:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1297,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 899,
														"src": "9174:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$899_storage_ptr_$",
															"typeString": "type(struct Staking.StakingSummary storage pointer)"
														}
													},
													"id": 1301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9174:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$899_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9142:64:6"
											},
											{
												"assignments": [
													1304
												],
												"declarations": [
													{
														"constant": false,
														"id": 1304,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "9227:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1387,
														"src": "9219:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1303,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9219:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1308,
												"initialValue": {
													"arguments": [
														{
															"id": 1306,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1279,
															"src": "9258:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1305,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1143,
														"src": "9236:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$891_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9236:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9219:50:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1309,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1296,
																"src": "9286:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$899_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1310,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 898,
															"src": "9286:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1311,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 884,
														"src": "9286:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1312,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "9314:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1313,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "9314:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9286:43:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1337,
												"nodeType": "IfStatement",
												"src": "9282:218:6",
												"trueBody": {
													"id": 1336,
													"nodeType": "Block",
													"src": "9331:169:6",
													"statements": [
														{
															"expression": {
																"id": 1334,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1315,
																		"name": "summary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1296,
																		"src": "9346:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StakingSummary_$899_memory_ptr",
																			"typeString": "struct Staking.StakingSummary memory"
																		}
																	},
																	"id": 1317,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "penalty",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 895,
																	"src": "9346:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1333,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1324,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1321,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"id": 1318,
																									"name": "user_stake",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1279,
																									"src": "9383:10:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																										"typeString": "struct Staking.Stake memory"
																									}
																								},
																								"id": 1319,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "amount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 878,
																								"src": "9383:17:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1320,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 819,
																								"src": "9403:18:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "9383:38:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1322,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "9382:40:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1323,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "9425:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "9382:47:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1325,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "9381:49:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1331,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1328,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1326,
																								"name": "reward",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1304,
																								"src": "9452:6:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1327,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 819,
																								"src": "9461:18:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "9452:27:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1329,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "9451:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1330,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "9483:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "9451:36:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1332,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "9450:38:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "9381:107:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9346:142:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1335,
															"nodeType": "ExpressionStatement",
															"src": "9346:142:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1339,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "9530:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 1340,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "latestClaimDrop",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 890,
																"src": "9530:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1338,
															"name": "calculateWeek",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1448,
															"src": "9516:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256) view returns (uint256)"
															}
														},
														"id": 1341,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9516:41:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1342,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9560:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "9516:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1368,
													"nodeType": "Block",
													"src": "9705:61:6",
													"statements": [
														{
															"expression": {
																"id": 1366,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1360,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1296,
																			"src": "9720:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$899_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1363,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 898,
																		"src": "9720:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1364,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 888,
																	"src": "9720:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1365,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9753:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9720:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1367,
															"nodeType": "ExpressionStatement",
															"src": "9720:34:6"
														}
													]
												},
												"id": 1369,
												"nodeType": "IfStatement",
												"src": "9512:254:6",
												"trueBody": {
													"id": 1359,
													"nodeType": "Block",
													"src": "9563:136:6",
													"statements": [
														{
															"assignments": [
																1345
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1345,
																	"mutability": "mutable",
																	"name": "airdrop",
																	"nameLocation": "9586:7:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1359,
																	"src": "9578:15:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1344,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "9578:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1350,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1347,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1279,
																			"src": "9614:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1348,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 878,
																		"src": "9614:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1346,
																	"name": "_calculateAirdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1466,
																	"src": "9596:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 1349,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9596:36:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "9578:54:6"
														},
														{
															"expression": {
																"id": 1357,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1351,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1296,
																			"src": "9647:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$899_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1354,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 898,
																		"src": "9647:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1355,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 888,
																	"src": "9647:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1356,
																	"name": "airdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1345,
																	"src": "9680:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9647:40:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1358,
															"nodeType": "ExpressionStatement",
															"src": "9647:40:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"expression": {
																"id": 1370,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1296,
																"src": "9778:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$899_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1373,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 898,
															"src": "9778:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1374,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimable",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 886,
														"src": "9778:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1375,
														"name": "reward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1304,
														"src": "9804:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9778:32:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1377,
												"nodeType": "ExpressionStatement",
												"src": "9778:32:6"
											},
											{
												"expression": {
													"id": 1383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1378,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1296,
															"src": "9821:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$899_memory_ptr",
																"typeString": "struct Staking.StakingSummary memory"
															}
														},
														"id": 1380,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 893,
														"src": "9821:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1381,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1279,
															"src": "9844:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1382,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 878,
														"src": "9844:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9821:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1384,
												"nodeType": "ExpressionStatement",
												"src": "9821:40:6"
											},
											{
												"expression": {
													"id": 1385,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1296,
													"src": "9881:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$899_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"functionReturnParameters": 1276,
												"id": 1386,
												"nodeType": "Return",
												"src": "9874:14:6"
											}
										]
									},
									"functionSelector": "10486b6a",
									"id": 1388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasStake",
									"nameLocation": "8854:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1272,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8862:2:6"
									},
									"returnParameters": {
										"id": 1276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "8888:21:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$899_memory_ptr",
													"typeString": "struct Staking.StakingSummary"
												},
												"typeName": {
													"id": 1274,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1273,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 899,
														"src": "8888:14:6"
													},
													"referencedDeclaration": 899,
													"src": "8888:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$899_storage_ptr",
														"typeString": "struct Staking.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8887:23:6"
									},
									"scope": 1709,
									"src": "8845:1051:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1398,
										"nodeType": "Block",
										"src": "10055:49:6",
										"statements": [
											{
												"expression": {
													"id": 1396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1393,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "10066:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1394,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "10081:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1395,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "10081:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10066:30:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1397,
												"nodeType": "ExpressionStatement",
												"src": "10066:30:6"
											}
										]
									},
									"functionSelector": "d2a569c3",
									"id": 1399,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1391,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1390,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "10045:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "10045:9:6"
										}
									],
									"name": "startAirdrop",
									"nameLocation": "10021:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1389,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10033:2:6"
									},
									"returnParameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10055:0:6"
									},
									"scope": 1709,
									"src": "10012:92:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1422,
										"nodeType": "Block",
										"src": "10180:172:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1406,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1401,
														"src": "10195:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "323030",
														"id": 1407,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10204:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_200_by_1",
															"typeString": "int_const 200"
														},
														"value": "200"
													},
													"src": "10195:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1413,
												"nodeType": "IfStatement",
												"src": "10191:85:6",
												"trueBody": {
													"id": 1412,
													"nodeType": "Block",
													"src": "10209:67:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1409,
																	"name": "Staking__airdropExceed20Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 784,
																	"src": "10231:31:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1410,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10231:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1411,
															"nodeType": "RevertStatement",
															"src": "10224:40:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1414,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 821,
														"src": "10286:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1415,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1401,
														"src": "10300:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10286:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1417,
												"nodeType": "ExpressionStatement",
												"src": "10286:20:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1419,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1401,
															"src": "10337:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1418,
														"name": "AirdropChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 924,
														"src": "10322:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10322:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1421,
												"nodeType": "EmitStatement",
												"src": "10317:27:6"
											}
										]
									},
									"functionSelector": "d5dbdf1b",
									"id": 1423,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1404,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1403,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "10170:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "10170:9:6"
										}
									],
									"name": "changeAirdropPercentage",
									"nameLocation": "10121:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10153:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1423,
												"src": "10145:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1400,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10145:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10144:16:6"
									},
									"returnParameters": {
										"id": 1405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10180:0:6"
									},
									"scope": 1709,
									"src": "10112:240:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1431,
										"nodeType": "Block",
										"src": "10417:41:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1428,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "10435:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "10435:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1427,
												"id": 1430,
												"nodeType": "Return",
												"src": "10428:22:6"
											}
										]
									},
									"functionSelector": "c63aa3e7",
									"id": 1432,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_blockTimestamp",
									"nameLocation": "10369:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10384:2:6"
									},
									"returnParameters": {
										"id": 1427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1426,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "10408:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1425,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10408:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10407:9:6"
									},
									"scope": 1709,
									"src": "10360:98:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1447,
										"nodeType": "Block",
										"src": "10538:64:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1442,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1439,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "10557:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "10557:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1441,
																	"name": "timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1434,
																	"src": "10575:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10557:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1443,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "10556:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "37",
														"id": 1444,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10588:6:6",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_604800_by_1",
															"typeString": "int_const 604800"
														},
														"value": "7"
													},
													"src": "10556:38:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1438,
												"id": 1446,
												"nodeType": "Return",
												"src": "10549:45:6"
											}
										]
									},
									"functionSelector": "b5d9df83",
									"id": 1448,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateWeek",
									"nameLocation": "10475:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "10497:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "10489:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1433,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10489:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10488:19:6"
									},
									"returnParameters": {
										"id": 1438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1437,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "10529:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1436,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10529:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10528:9:6"
									},
									"scope": 1709,
									"src": "10466:136:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1465,
										"nodeType": "Block",
										"src": "10722:73:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1463,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1460,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1457,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1455,
																				"name": "stakeAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1450,
																				"src": "10742:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1456,
																				"name": "airdropRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 821,
																				"src": "10756:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10742:25:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1458,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10741:27:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 1459,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10771:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "10741:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1461,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "10740:36:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3532",
														"id": 1462,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10779:8:6",
														"subdenomination": "weeks",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31449600_by_1",
															"typeString": "int_const 31449600"
														},
														"value": "52"
													},
													"src": "10740:47:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1454,
												"id": 1464,
												"nodeType": "Return",
												"src": "10733:54:6"
											}
										]
									},
									"id": 1466,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateAirdrop",
									"nameLocation": "10619:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1450,
												"mutability": "mutable",
												"name": "stakeAmount",
												"nameLocation": "10645:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1466,
												"src": "10637:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10637:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10636:21:6"
									},
									"returnParameters": {
										"id": 1454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1453,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1466,
												"src": "10708:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1452,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10708:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10707:9:6"
									},
									"scope": 1709,
									"src": "10610:185:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1530,
										"nodeType": "Block",
										"src": "10848:659:6",
										"statements": [
											{
												"assignments": [
													1473
												],
												"declarations": [
													{
														"constant": false,
														"id": 1473,
														"mutability": "mutable",
														"name": "staker",
														"nameLocation": "10926:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1530,
														"src": "10912:20:6",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1472,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1471,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 891,
																"src": "10912:5:6"
															},
															"referencedDeclaration": 891,
															"src": "10912:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1477,
												"initialValue": {
													"baseExpression": {
														"id": 1474,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 905,
														"src": "10935:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$891_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1476,
													"indexExpression": {
														"id": 1475,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1468,
														"src": "10948:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10935:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$891_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10912:41:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1480,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1478,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "10970:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1479,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10986:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10970:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1485,
												"nodeType": "IfStatement",
												"src": "10966:81:6",
												"trueBody": {
													"id": 1484,
													"nodeType": "Block",
													"src": "10989:58:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1481,
																	"name": "Airdrop__notYetStarted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 793,
																	"src": "11011:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1482,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11011:24:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1483,
															"nodeType": "RevertStatement",
															"src": "11004:31:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1486,
															"name": "staker",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1473,
															"src": "11063:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
																"typeString": "struct Staking.Stake storage pointer"
															}
														},
														"id": 1487,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 878,
														"src": "11063:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1488,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11079:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "11063:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1529,
												"nodeType": "IfStatement",
												"src": "11059:441:6",
												"trueBody": {
													"id": 1528,
													"nodeType": "Block",
													"src": "11082:418:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1495,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1491,
																				"name": "staker",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1473,
																				"src": "11115:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
																					"typeString": "struct Staking.Stake storage pointer"
																				}
																			},
																			"id": 1492,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "latestClaimDrop",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 890,
																			"src": "11115:22:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1490,
																		"name": "calculateWeek",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1448,
																		"src": "11101:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1493,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "11101:37:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1494,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11142:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "11101:42:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1500,
															"nodeType": "IfStatement",
															"src": "11097:119:6",
															"trueBody": {
																"id": 1499,
																"nodeType": "Block",
																"src": "11145:71:6",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1496,
																				"name": "Airdrop__claimableOnceAWeek",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 791,
																				"src": "11171:27:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1497,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11171:29:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1498,
																		"nodeType": "RevertStatement",
																		"src": "11164:36:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1505,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1501,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1473,
																		"src": "11232:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1503,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 888,
																	"src": "11232:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1504,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11258:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "11232:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1506,
															"nodeType": "ExpressionStatement",
															"src": "11232:27:6"
														},
														{
															"expression": {
																"id": 1512,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1507,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1473,
																		"src": "11274:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1509,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "latestClaimDrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 890,
																	"src": "11274:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 1510,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "11299:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1511,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "11299:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "11274:40:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1513,
															"nodeType": "ExpressionStatement",
															"src": "11274:40:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1518,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 840,
																				"src": "11379:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1517,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "11372:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1519,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11372:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1520,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "11412:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1521,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "11412:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1523,
																					"name": "staker",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1473,
																					"src": "11459:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Stake_$891_storage_ptr",
																						"typeString": "struct Staking.Stake storage pointer"
																					}
																				},
																				"id": 1524,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 878,
																				"src": "11459:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1522,
																			"name": "_calculateAirdrop",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1466,
																			"src": "11441:17:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) view returns (uint256)"
																			}
																		},
																		"id": 1525,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11441:32:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1514,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "11331:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1516,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "11331:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1526,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11331:157:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1527,
															"nodeType": "ExpressionStatement",
															"src": "11331:157:6"
														}
													]
												}
											}
										]
									},
									"functionSelector": "65f8c6c5",
									"id": 1531,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claimAirdrop",
									"nameLocation": "10812:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "10833:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1531,
												"src": "10825:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1467,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10825:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10824:14:6"
									},
									"returnParameters": {
										"id": 1470,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10848:0:6"
									},
									"scope": 1709,
									"src": "10803:704:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1552,
										"nodeType": "Block",
										"src": "11735:83:6",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1540,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 834,
																	"src": "11754:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$813_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1542,
																"indexExpression": {
																	"id": 1541,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1533,
																	"src": "11761:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "11754:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$813_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1543,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "votingRight",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 808,
															"src": "11754:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"baseExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1544,
																		"name": "voters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 834,
																		"src": "11780:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$813_storage_$",
																			"typeString": "mapping(address => struct Staking.Voter storage ref)"
																		}
																	},
																	"id": 1546,
																	"indexExpression": {
																		"id": 1545,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1533,
																		"src": "11787:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11780:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Voter_$813_storage",
																		"typeString": "struct Staking.Voter storage ref"
																	}
																},
																"id": 1547,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "voted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 812,
																"src": "11780:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																	"typeString": "mapping(uint256 => bool)"
																}
															},
															"id": 1549,
															"indexExpression": {
																"id": 1548,
																"name": "_votingId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 827,
																"src": "11799:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11780:29:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 1550,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "11753:57:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bool_$",
														"typeString": "tuple(bool,bool)"
													}
												},
												"functionReturnParameters": 1539,
												"id": 1551,
												"nodeType": "Return",
												"src": "11746:64:6"
											}
										]
									},
									"functionSelector": "2d15cc04",
									"id": 1553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getVoters",
									"nameLocation": "11676:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1533,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "11694:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1553,
												"src": "11686:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11686:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11685:14:6"
									},
									"returnParameters": {
										"id": 1539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1553,
												"src": "11723:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1535,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11723:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1538,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1553,
												"src": "11729:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1537,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11729:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11722:12:6"
									},
									"scope": 1709,
									"src": "11667:151:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1576,
										"nodeType": "Block",
										"src": "11942:162:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1562,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1560,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "11957:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "74727565",
														"id": 1561,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11974:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "11957:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1567,
												"nodeType": "IfStatement",
												"src": "11953:86:6",
												"trueBody": {
													"id": 1566,
													"nodeType": "Block",
													"src": "11980:59:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1563,
																	"name": "Voting__votingIsRunning",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 796,
																	"src": "12002:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1564,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12002:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1565,
															"nodeType": "RevertStatement",
															"src": "11995:32:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1568,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "12051:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1569,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12067:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "12051:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1571,
												"nodeType": "ExpressionStatement",
												"src": "12051:20:6"
											},
											{
												"expression": {
													"id": 1574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1572,
														"name": "_votingId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "12082:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1573,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12095:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "12082:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1575,
												"nodeType": "ExpressionStatement",
												"src": "12082:14:6"
											}
										]
									},
									"functionSelector": "1ec6b60a",
									"id": 1577,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1556,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1555,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "11919:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11919:12:6"
										},
										{
											"id": 1558,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1557,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "11932:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11932:9:6"
										}
									],
									"name": "startVoting",
									"nameLocation": "11896:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1554,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11907:2:6"
									},
									"returnParameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11942:0:6"
									},
									"scope": 1709,
									"src": "11887:217:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1616,
										"nodeType": "Block",
										"src": "12173:215:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1586,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 834,
																	"src": "12188:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$813_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1589,
																"indexExpression": {
																	"expression": {
																		"id": 1587,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "12195:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1588,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "12195:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "12188:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$813_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1590,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 812,
															"src": "12188:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1592,
														"indexExpression": {
															"id": 1591,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 827,
															"src": "12213:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "12188:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "74727565",
														"id": 1593,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12227:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "12188:43:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1599,
												"nodeType": "IfStatement",
												"src": "12184:105:6",
												"trueBody": {
													"id": 1598,
													"nodeType": "Block",
													"src": "12233:56:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1595,
																	"name": "Voting__alreadyVoted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 798,
																	"src": "12255:20:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1596,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12255:22:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1597,
															"nodeType": "RevertStatement",
															"src": "12248:29:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1600,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 834,
																	"src": "12301:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$813_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1603,
																"indexExpression": {
																	"expression": {
																		"id": 1601,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "12308:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1602,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "12308:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "12301:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$813_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1604,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 812,
															"src": "12301:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1606,
														"indexExpression": {
															"id": 1605,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 827,
															"src": "12326:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12301:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1607,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12339:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "12301:42:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1609,
												"nodeType": "ExpressionStatement",
												"src": "12301:42:6"
											},
											{
												"expression": {
													"id": 1614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1610,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 838,
															"src": "12354:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1612,
														"indexExpression": {
															"id": 1611,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 827,
															"src": "12365:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12354:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1613,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12379:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "12354:26:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1615,
												"nodeType": "ExpressionStatement",
												"src": "12354:26:6"
											}
										]
									},
									"functionSelector": "632a9a52",
									"id": 1617,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1580,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1579,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "12135:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12135:12:6"
										},
										{
											"id": 1582,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1581,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 965,
												"src": "12148:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12148:16:6"
										},
										{
											"id": 1584,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1583,
												"name": "isVoter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 947,
												"src": "12165:7:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12165:7:6"
										}
									],
									"name": "vote",
									"nameLocation": "12121:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12125:2:6"
									},
									"returnParameters": {
										"id": 1585,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12173:0:6"
									},
									"scope": 1709,
									"src": "12112:276:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1656,
										"nodeType": "Block",
										"src": "12464:217:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1626,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 834,
																	"src": "12479:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$813_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1629,
																"indexExpression": {
																	"expression": {
																		"id": 1627,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "12486:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1628,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "12486:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "12479:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$813_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1630,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 812,
															"src": "12479:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1632,
														"indexExpression": {
															"id": 1631,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 827,
															"src": "12504:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "12479:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 1633,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12518:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "12479:44:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1639,
												"nodeType": "IfStatement",
												"src": "12475:105:6",
												"trueBody": {
													"id": 1638,
													"nodeType": "Block",
													"src": "12525:55:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1635,
																	"name": "Voting__notYetVoted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 800,
																	"src": "12547:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1636,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12547:21:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1637,
															"nodeType": "RevertStatement",
															"src": "12540:28:6"
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1640,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 834,
																	"src": "12592:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$813_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1643,
																"indexExpression": {
																	"expression": {
																		"id": 1641,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "12599:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1642,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "12599:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "12592:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$813_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1644,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 812,
															"src": "12592:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1646,
														"indexExpression": {
															"id": 1645,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 827,
															"src": "12617:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "12592:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 1647,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12631:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "12592:44:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1649,
												"nodeType": "ExpressionStatement",
												"src": "12592:44:6"
											},
											{
												"expression": {
													"id": 1654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1650,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 838,
															"src": "12647:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1652,
														"indexExpression": {
															"id": 1651,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 827,
															"src": "12658:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12647:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1653,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12672:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "12647:26:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1655,
												"nodeType": "ExpressionStatement",
												"src": "12647:26:6"
											}
										]
									},
									"functionSelector": "070c8b74",
									"id": 1657,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1620,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1619,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "12426:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12426:12:6"
										},
										{
											"id": 1622,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1621,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 965,
												"src": "12439:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12439:16:6"
										},
										{
											"id": 1624,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1623,
												"name": "isVoter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 947,
												"src": "12456:7:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12456:7:6"
										}
									],
									"name": "retractVote",
									"nameLocation": "12405:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1618,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12416:2:6"
									},
									"returnParameters": {
										"id": 1625,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12464:0:6"
									},
									"scope": 1709,
									"src": "12396:285:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1695,
										"nodeType": "Block",
										"src": "12822:290:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1666,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 829,
														"src": "12837:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "31",
														"id": 1667,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12852:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "12837:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1673,
												"nodeType": "IfStatement",
												"src": "12833:81:6",
												"trueBody": {
													"id": 1672,
													"nodeType": "Block",
													"src": "12855:59:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1669,
																	"name": "Voting__notEnoughVoters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 802,
																	"src": "12877:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1670,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12877:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1671,
															"nodeType": "RevertStatement",
															"src": "12870:32:6"
														}
													]
												}
											},
											{
												"assignments": [
													1675
												],
												"declarations": [
													{
														"constant": false,
														"id": 1675,
														"mutability": "mutable",
														"name": "half_voters",
														"nameLocation": "12932:11:6",
														"nodeType": "VariableDeclaration",
														"scope": 1695,
														"src": "12924:19:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1674,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12924:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1682,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1678,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1676,
																	"name": "totalVoters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 829,
																	"src": "12947:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "35",
																	"id": 1677,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12961:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_5_by_1",
																		"typeString": "int_const 5"
																	},
																	"value": "5"
																},
																"src": "12947:15:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1679,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "12946:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3130",
														"id": 1680,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12966:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_10_by_1",
															"typeString": "int_const 10"
														},
														"value": "10"
													},
													"src": "12946:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12924:44:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 1683,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 838,
															"src": "12985:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1685,
														"indexExpression": {
															"id": 1684,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 827,
															"src": "12996:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "12985:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1686,
														"name": "half_voters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1675,
														"src": "13009:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12985:35:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1693,
													"nodeType": "Block",
													"src": "13066:39:6",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1691,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13088:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1665,
															"id": 1692,
															"nodeType": "Return",
															"src": "13081:12:6"
														}
													]
												},
												"id": 1694,
												"nodeType": "IfStatement",
												"src": "12981:124:6",
												"trueBody": {
													"id": 1690,
													"nodeType": "Block",
													"src": "13022:38:6",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1688,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13044:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1665,
															"id": 1689,
															"nodeType": "Return",
															"src": "13037:11:6"
														}
													]
												}
											}
										]
									},
									"functionSelector": "671d2b75",
									"id": 1696,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1660,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1659,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "12757:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12757:9:6"
										},
										{
											"id": 1662,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1661,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 965,
												"src": "12776:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12776:16:6"
										}
									],
									"name": "getVotingResult",
									"nameLocation": "12698:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1658,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12713:2:6"
									},
									"returnParameters": {
										"id": 1665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1664,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "12811:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1663,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12811:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12810:6:6"
									},
									"scope": 1709,
									"src": "12689:423:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1707,
										"nodeType": "Block",
										"src": "13178:40:6",
										"statements": [
											{
												"expression": {
													"id": 1705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1703,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "13189:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1704,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "13205:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "13189:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1706,
												"nodeType": "ExpressionStatement",
												"src": "13189:21:6"
											}
										]
									},
									"functionSelector": "fab2f86b",
									"id": 1708,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1699,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1698,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "13151:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "13151:9:6"
										},
										{
											"id": 1701,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1700,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 965,
												"src": "13161:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "13161:16:6"
										}
									],
									"name": "stopVoting",
									"nameLocation": "13129:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1697,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13139:2:6"
									},
									"returnParameters": {
										"id": 1702,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13178:0:6"
									},
									"scope": 1709,
									"src": "13120:98:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1710,
							"src": "1050:12171:6",
							"usedErrors": [
								773,
								775,
								778,
								780,
								782,
								784,
								786,
								788,
								791,
								793,
								796,
								798,
								800,
								802
							]
						}
					],
					"src": "40:13181:6"
				},
				"id": 6
			}
		}
	}
}