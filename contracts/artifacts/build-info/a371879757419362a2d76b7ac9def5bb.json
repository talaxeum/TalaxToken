{
	"id": "a371879757419362a2d76b7ac9def5bb",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Stakable.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nerror Voting___votingStatus();\n\ncontract Stakable {\n    using SafeMath for uint256;\n    /**\n     * @notice Constructor since this contract is not ment to be used without inheritance\n     * push once to stakeholders for it to work proplerly\n     */\n\n    struct Voter {\n        bool votingRight;\n        mapping(uint256 => bool) voted;\n    }\n\n    uint256 public stakingPenaltyRate;\n    uint256 public airdropRate;\n    uint256 public airdropSince;\n\n    bool internal _votingStatus;\n    uint256 internal _votingId;\n    uint256 public totalVoters;\n    mapping(address => Voter) public voters;\n    mapping(uint256 => uint256) public votedUsers;\n\n    constructor() {\n        //Staking penalty and Airdrop in 0.1 times percentage\n        stakingPenaltyRate = 15;\n        airdropRate = 80;\n    }\n\n    /* ------------------------------------------ Modifier ------------------------------------------ */\n    function _checkUserStake(uint256 amount) internal pure {\n        require(amount > 0, \"No Stake Found\");\n    }\n\n    function _checkVotingStatus() internal view {\n        require(_votingStatus, \"Voting is not available\");\n    }\n\n    modifier votingStatusTrue() {\n        _checkVotingStatus();\n        _;\n    }\n\n    /**\n     * @notice\n     * A stake struct is used to represent the way we store stakes,\n     * A Stake will contain the users address, the amount staked and a timestamp,\n     * Since which is when the stake was made\n     */\n    struct Stake {\n        address user;\n        uint256 amount;\n        uint256 since;\n        // This claimable field is new and used to tell how big of a reward is currently available\n        uint256 claimable;\n        uint256 claimable_airdrop;\n        uint256 rewardAPY;\n        uint256 releaseTime;\n    }\n    /**\n     * @notice Stakeholder is a staker that has active stakes\n     */\n    struct Stakeholder {\n        Stake stake;\n        address user;\n        uint256 latestClaimDrop;\n    }\n\n    /**\n     * @notice\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\n     */\n    struct StakingSummary {\n        uint256 total_amount;\n        uint256 penalty;\n        Stake stake;\n    }\n\n    /**\n     * @notice\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\n     */\n    mapping(address => Stakeholder) internal stakeholders;\n\n    /**\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\n     */\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 timestamp,\n        uint256 releaseTime\n    );\n\n    event PenaltyChanged(uint256 amount);\n    event AirdropChanged(uint256 amount);\n\n    function _startAirdropSince() internal {\n        airdropSince = block.timestamp;\n    }\n\n    function _calculateWeek(uint256 input) internal view returns (uint256) {\n        return (block.timestamp - input).div(7 days);\n    }\n\n    /**\n     * @notice\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n     * StakeID\n     */\n    function _stake(\n        address _user,\n        uint256 _amount,\n        uint256 _stakePeriod,\n        uint256 _rewardRate\n    ) internal {\n        // Simple check so that user does not stake 0\n        require(_amount > 0, \"Cannot stake nothing\");\n        require(stakeholders[_user].stake.amount == 0, \"User is a staker\");\n\n        totalVoters += 1;\n        voters[_user].votingRight = true;\n\n        // block.timestamp = timestamp of the current block in seconds since the epoch\n        uint256 timestamp = block.timestamp;\n\n        // Use the index to push a new Stake\n        // push a newly created Stake with the current block timestamp.\n        stakeholders[_user].stake = Stake(\n            _user,\n            _amount,\n            timestamp,\n            0,\n            0,\n            _rewardRate,\n            (_stakePeriod + timestamp)\n        );\n        // Emit an event that the stake has occured\n        emit Staked(_user, _amount, timestamp, (_stakePeriod + timestamp));\n    }\n\n    function _changePenaltyFee(uint256 amount_) internal {\n        require(amount_ <= 30, \"Penalty fee cannot exceed 3 percent.\");\n        stakingPenaltyRate = amount_;\n        emit PenaltyChanged(amount_);\n    }\n\n    function _changeAirdropPercentage(uint256 amount_) internal {\n        require(amount_ <= 200, \"Airdrop Percentage cannot exceed 20 percent.\");\n        airdropRate = amount_;\n        emit AirdropChanged(amount_);\n    }\n\n    function calculateStakingDuration(uint256 since_)\n        internal\n        view\n        returns (uint256)\n    {\n        require(since_ > 0, \"Error timestamp 0\");\n\n        // times by 1e24 so theres no missing value\n        return\n            SafeMath.div(\n                (block.timestamp - since_) * 1e24,\n                365 days,\n                \"Error cannot divide timestamp\"\n            );\n    }\n\n    function calculateStakeReward(Stake memory user_stake)\n        internal\n        view\n        returns (uint256)\n    {\n        if (user_stake.amount == 0) {\n            return 0;\n        }\n        // divided by 1e26 because 1e2 for APY and 1e24 from calculate staking duration\n        return\n            (user_stake.amount *\n                user_stake.rewardAPY *\n                calculateStakingDuration(user_stake.since)) / 1e26;\n    }\n\n    function calculatePenalty(uint256 amount, uint256 reward)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        return (\n            SafeMath.div(SafeMath.mul(amount, stakingPenaltyRate), 1000),\n            SafeMath.div(SafeMath.mul(reward, stakingPenaltyRate), 1000)\n        );\n    }\n\n    function calculateStakingWithPenalty(uint256 amount, uint256 reward)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        if (amount == 0) {\n            return (0, 0);\n        }\n\n        (uint256 amount_penalty, uint256 reward_penalty) = calculatePenalty(\n            amount,\n            reward\n        );\n        return (\n            SafeMath.sub(amount, amount_penalty),\n            SafeMath.sub(reward, reward_penalty)\n        );\n    }\n\n    /**\n     * @notice\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\n     * Will return the amount to MINT onto the acount\n     * Will also calculateStakeReward and reset timer\n     */\n    function _withdrawStake(address _user) internal returns (uint256, uint256) {\n        // Grab user_index which is the index to use to grab the Stake[]\n        Stake memory stake = stakeholders[_user].stake;\n\n        uint256 reward = calculateStakeReward(stake);\n\n        delete stakeholders[_user];\n\n        if (stake.releaseTime > block.timestamp) {\n            totalVoters -= 1;\n            delete voters[_user].voted[_votingId];\n            return calculateStakingWithPenalty(stake.amount, reward);\n        }\n\n        totalVoters -= 1;\n        delete voters[_user].voted[_votingId];\n        return (stake.amount, reward);\n    }\n\n    function hasStake() external view returns (StakingSummary memory) {\n        Stakeholder memory data = stakeholders[msg.sender];\n        StakingSummary memory summary = StakingSummary(0, 0, data.stake);\n        _checkUserStake(summary.stake.amount);\n\n        uint256 availableReward = calculateStakeReward(summary.stake);\n        uint256 penalty;\n\n        if (summary.stake.releaseTime > block.timestamp) {\n            (uint256 amount_penalty, uint256 reward_penalty) = calculatePenalty(\n                summary.stake.amount,\n                availableReward\n            );\n            penalty = amount_penalty + reward_penalty;\n        }\n\n        if (_calculateWeek(data.latestClaimDrop) > 0) {\n            uint256 airdrop = _calculateAirdrop(summary.stake.amount);\n            summary.stake.claimable_airdrop = airdrop;\n        } else {\n            summary.stake.claimable_airdrop = 0;\n        }\n\n        summary.stake.claimable = availableReward;\n        summary.penalty = penalty;\n        summary.total_amount = summary.stake.amount;\n\n        return summary;\n    }\n\n    /* -------------------------------------- Airdrop functions ------------------------------------- */\n    function _calculateAirdrop(uint256 stakeAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        return ((stakeAmount * airdropRate) / 1000) / 52 weeks;\n    }\n\n    function _claimAirdrop(address _staker) internal view returns (uint256) {\n        Stakeholder memory stakeholder = stakeholders[_staker];\n\n        _checkUserStake(stakeholder.stake.amount);\n\n        require(\n            _calculateWeek(stakeholder.latestClaimDrop) > 0,\n            \"Claimable once a week\"\n        );\n\n        stakeholder.stake.claimable_airdrop = 0;\n        stakeholder.latestClaimDrop = block.timestamp;\n\n        return _calculateAirdrop(stakeholder.stake.amount);\n    }\n\n    function airdropWeek() public view returns (uint256) {\n        if (airdropSince != 0) {\n            return (block.timestamp - airdropSince) / 7 days;\n        } else {\n            return 0;\n        }\n    }\n\n    /* -------------------------------- Voting Functions for DAO Pool ------------------------------- */\n    function _startVoting() internal {\n        require(_votingStatus == false, \"Voting is already running\");\n        _votingStatus = true;\n        _votingId += 1;\n    }\n\n    function isVoter(address _staker) public view returns (bool) {\n        require(_staker != address(0), \"Invalid address\");\n\n        return voters[_staker].votingRight;\n    }\n\n    function vote() public votingStatusTrue {\n        require(voters[msg.sender].votingRight == true, \"You are not a voter\");\n        require(\n            voters[msg.sender].voted[_votingId] == false,\n            \"You have voted before\"\n        );\n\n        voters[msg.sender].voted[_votingId] = true;\n        votedUsers[_votingId] += 1;\n    }\n\n    function retractVote() public votingStatusTrue {\n        require(voters[msg.sender].votingRight == true, \"You are not a voter\");\n        require(\n            voters[msg.sender].voted[_votingId] == true,\n            \"You have not voted yet\"\n        );\n\n        voters[msg.sender].voted[_votingId] == false;\n        votedUsers[_votingId] -= 1;\n    }\n\n    function _getVotingResult() internal view votingStatusTrue returns (bool) {\n        require(totalVoters > 1, \"Not enough voters\");\n        uint256 half_voters = SafeMath.div(SafeMath.mul(totalVoters, 5), 10);\n\n        if (votedUsers[_votingId] > half_voters) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _stopVoting() internal votingStatusTrue {\n        _votingStatus = false;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220610f7f374515277c40dc0699c995f2b4c7f397d9f3bfd9ae759628b3f81d334d64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220610f7f374515277c40dc0699c995f2b4c7f397d9f3bfd9ae759628b3f81d334d64736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0xF7F CALLDATACOPY GASLIMIT ISZERO 0x27 PUSH29 0x40DC0699C995F2B4C7F397D9F3BFD9AE759628B3F81D334D64736F6C63 NUMBER STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "467:6301:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;467:6301:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220610f7f374515277c40dc0699c995f2b4c7f397d9f3bfd9ae759628b3f81d334d64736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0xF7F CALLDATACOPY GASLIMIT ISZERO 0x27 PUSH29 0x40DC0699C995F2B4C7F397D9F3BFD9AE759628B3F81D334D64736F6C63 NUMBER STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "467:6301:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220610f7f374515277c40dc0699c995f2b4c7f397d9f3bfd9ae759628b3f81d334d64736f6c634300080b0033",
									".code": [
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2\",\"dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Stakable.sol": {
				"Stakable": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AirdropChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PenaltyChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "releaseTime",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "airdropRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropSince",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropWeek",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasStake",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "penalty",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "address",
													"name": "user",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable_airdrop",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												}
											],
											"internalType": "struct Stakable.Stake",
											"name": "stake",
											"type": "tuple"
										}
									],
									"internalType": "struct Stakable.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_staker",
									"type": "address"
								}
							],
							"name": "isVoter",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "retractVote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingPenaltyRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalVoters",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "vote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "votedUsers",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "voters",
							"outputs": [
								{
									"internalType": "bool",
									"name": "votingRight",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Stakable.sol\":155:10950  contract Stakable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Stakable.sol\":767:909  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/Stakable.sol\":874:876  15 */\n  0x0f\n    /* \"contracts/Stakable.sol\":853:871  stakingPenaltyRate */\n  0x00\n    /* \"contracts/Stakable.sol\":853:876  stakingPenaltyRate = 15 */\n  sstore\n    /* \"contracts/Stakable.sol\":900:902  80 */\n  0x50\n    /* \"contracts/Stakable.sol\":886:897  airdropRate */\n  0x01\n    /* \"contracts/Stakable.sol\":886:902  airdropRate = 80 */\n  sstore\n    /* \"contracts/Stakable.sol\":155:10950  contract Stakable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Stakable.sol\":155:10950  contract Stakable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xa143a5f2\n      gt\n      tag_14\n      jumpi\n      dup1\n      0xb87da76d\n      gt\n      tag_15\n      jumpi\n      dup1\n      0xb87da76d\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xcb79c2e1\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xcbb3e152\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_15:\n      dup1\n      0xa143a5f2\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xa3ec138d\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xa7771ee3\n      eq\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x5f5300ff\n      gt\n      tag_16\n      jumpi\n      dup1\n      0x5f5300ff\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x632a9a52\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x8891cf0d\n      eq\n      tag_7\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_16:\n      dup1\n      0x070c8b74\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x10486b6a\n      eq\n      tag_4\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Stakable.sol\":10158:10505  function retractVote() public votingStatusTrue {... */\n    tag_3:\n      tag_17\n      tag_18\n      jump\t// in\n    tag_17:\n      stop\n        /* \"contracts/Stakable.sol\":7296:8362  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_4:\n      tag_19\n      tag_20\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      tag_21\n      swap2\n      swap1\n        /* \"#utility.yul\":168:172   */\n      0x00\n        /* \"#utility.yul\":210:213   */\n      0x0120\n        /* \"#utility.yul\":199:208   */\n      dup3\n        /* \"#utility.yul\":195:214   */\n      add\n        /* \"#utility.yul\":187:214   */\n      swap1\n      pop\n        /* \"#utility.yul\":247:253   */\n      dup3\n        /* \"#utility.yul\":241:254   */\n      mload\n        /* \"#utility.yul\":230:239   */\n      dup3\n        /* \"#utility.yul\":223:255   */\n      mstore\n        /* \"#utility.yul\":311:315   */\n      0x20\n        /* \"#utility.yul\":303:309   */\n      dup4\n        /* \"#utility.yul\":299:316   */\n      add\n        /* \"#utility.yul\":293:317   */\n      mload\n        /* \"#utility.yul\":286:290   */\n      0x20\n        /* \"#utility.yul\":275:284   */\n      dup4\n        /* \"#utility.yul\":271:291   */\n      add\n        /* \"#utility.yul\":264:318   */\n      mstore\n        /* \"#utility.yul\":365:369   */\n      0x40\n        /* \"#utility.yul\":357:363   */\n      dup4\n        /* \"#utility.yul\":353:370   */\n      add\n        /* \"#utility.yul\":347:371   */\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":419:431   */\n      dup2\n        /* \"#utility.yul\":413:432   */\n      mload\n        /* \"#utility.yul\":409:477   */\n      and\n        /* \"#utility.yul\":402:406   */\n      0x40\n        /* \"#utility.yul\":391:400   */\n      dup5\n        /* \"#utility.yul\":387:407   */\n      add\n        /* \"#utility.yul\":380:478   */\n      mstore\n        /* \"#utility.yul\":538:542   */\n      0x20\n        /* \"#utility.yul\":524:536   */\n      dup2\n        /* \"#utility.yul\":520:543   */\n      add\n        /* \"#utility.yul\":514:544   */\n      mload\n        /* \"#utility.yul\":509:511   */\n      0x60\n        /* \"#utility.yul\":498:507   */\n      dup5\n        /* \"#utility.yul\":494:512   */\n      add\n        /* \"#utility.yul\":487:545   */\n      mstore\n        /* \"#utility.yul\":606:610   */\n      0x40\n        /* \"#utility.yul\":592:604   */\n      dup2\n        /* \"#utility.yul\":588:611   */\n      add\n        /* \"#utility.yul\":582:612   */\n      mload\n        /* \"#utility.yul\":576:579   */\n      0x80\n        /* \"#utility.yul\":565:574   */\n      dup5\n        /* \"#utility.yul\":561:580   */\n      add\n        /* \"#utility.yul\":554:613   */\n      mstore\n        /* \"#utility.yul\":674:676   */\n      0x60\n        /* \"#utility.yul\":660:672   */\n      dup2\n        /* \"#utility.yul\":656:677   */\n      add\n        /* \"#utility.yul\":650:678   */\n      mload\n        /* \"#utility.yul\":644:647   */\n      0xa0\n        /* \"#utility.yul\":633:642   */\n      dup5\n        /* \"#utility.yul\":629:648   */\n      add\n        /* \"#utility.yul\":622:679   */\n      mstore\n        /* \"#utility.yul\":740:743   */\n      0x80\n        /* \"#utility.yul\":726:738   */\n      dup2\n        /* \"#utility.yul\":722:744   */\n      add\n        /* \"#utility.yul\":716:745   */\n      mload\n        /* \"#utility.yul\":710:713   */\n      0xc0\n        /* \"#utility.yul\":699:708   */\n      dup5\n        /* \"#utility.yul\":695:714   */\n      add\n        /* \"#utility.yul\":688:746   */\n      mstore\n        /* \"#utility.yul\":807:810   */\n      0xa0\n        /* \"#utility.yul\":793:805   */\n      dup2\n        /* \"#utility.yul\":789:811   */\n      add\n        /* \"#utility.yul\":783:812   */\n      mload\n        /* \"#utility.yul\":777:780   */\n      0xe0\n        /* \"#utility.yul\":766:775   */\n      dup5\n        /* \"#utility.yul\":762:781   */\n      add\n        /* \"#utility.yul\":755:813   */\n      mstore\n        /* \"#utility.yul\":874:877   */\n      0xc0\n        /* \"#utility.yul\":860:872   */\n      dup2\n        /* \"#utility.yul\":856:878   */\n      add\n        /* \"#utility.yul\":850:879   */\n      mload\n        /* \"#utility.yul\":844:847   */\n      0x0100\n        /* \"#utility.yul\":833:842   */\n      dup5\n        /* \"#utility.yul\":829:848   */\n      add\n        /* \"#utility.yul\":822:880   */\n      mstore\n      pop\n        /* \"#utility.yul\":14:886   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"contracts/Stakable.sol\":7296:8362  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_21:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stakable.sol\":638:664  uint256 public totalVoters */\n    tag_5:\n      tag_23\n      sload(0x05)\n      dup2\n      jump\n    tag_23:\n      mload(0x40)\n        /* \"#utility.yul\":1037:1062   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1025:1027   */\n      0x20\n        /* \"#utility.yul\":1010:1028   */\n      add\n        /* \"contracts/Stakable.sol\":638:664  uint256 public totalVoters */\n      tag_21\n        /* \"#utility.yul\":891:1068   */\n      jump\n        /* \"contracts/Stakable.sol\":9814:10152  function vote() public votingStatusTrue {... */\n    tag_6:\n      tag_17\n      tag_28\n      jump\t// in\n        /* \"contracts/Stakable.sol\":507:533  uint256 public airdropRate */\n    tag_7:\n      tag_23\n      sload(0x01)\n      dup2\n      jump\n        /* \"contracts/Stakable.sol\":715:760  mapping(uint256 => uint256) public votedUsers */\n    tag_8:\n      tag_23\n      tag_33\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_33:\n      mstore(0x20, 0x07)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Stakable.sol\":670:709  mapping(address => Voter) public voters */\n    tag_9:\n      tag_37\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      mstore(0x20, 0x06)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n    tag_37:\n      mload(0x40)\n        /* \"#utility.yul\":1737:1751   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1730:1752   */\n      iszero\n        /* \"#utility.yul\":1712:1753   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1700:1702   */\n      0x20\n        /* \"#utility.yul\":1685:1703   */\n      add\n        /* \"contracts/Stakable.sol\":670:709  mapping(address => Voter) public voters */\n      tag_21\n        /* \"#utility.yul\":1572:1759   */\n      jump\n        /* \"contracts/Stakable.sol\":9636:9808  function isVoter(address _staker) public view returns (bool) {... */\n    tag_10:\n      tag_37\n      tag_44\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_44:\n      tag_45\n      jump\t// in\n        /* \"contracts/Stakable.sol\":539:566  uint256 public airdropSince */\n    tag_11:\n      tag_23\n      sload(0x02)\n      dup2\n      jump\n        /* \"contracts/Stakable.sol\":468:501  uint256 public stakingPenaltyRate */\n    tag_12:\n      tag_23\n      sload(0x00)\n      dup2\n      jump\n        /* \"contracts/Stakable.sol\":9151:9355  function airdropWeek() public view returns (uint256) {... */\n    tag_13:\n      tag_23\n      tag_54\n      jump\t// in\n        /* \"contracts/Stakable.sol\":10158:10505  function retractVote() public votingStatusTrue {... */\n    tag_18:\n        /* \"contracts/Stakable.sol\":1289:1309  _checkVotingStatus() */\n      tag_57\n        /* \"contracts/Stakable.sol\":1289:1307  _checkVotingStatus */\n      tag_58\n        /* \"contracts/Stakable.sol\":1289:1309  _checkVotingStatus() */\n      jump\t// in\n    tag_57:\n        /* \"contracts/Stakable.sol\":10230:10240  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":10223:10241  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":10223:10229  voters */\n      0x06\n        /* \"contracts/Stakable.sol\":10223:10241  voters[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable.sol\":10223:10253  voters[msg.sender].votingRight */\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable.sol\":10223:10261  voters[msg.sender].votingRight == true */\n      iszero\n      iszero\n        /* \"contracts/Stakable.sol\":10223:10253  voters[msg.sender].votingRight */\n      0x01\n        /* \"contracts/Stakable.sol\":10223:10261  voters[msg.sender].votingRight == true */\n      eq\n        /* \"contracts/Stakable.sol\":10215:10285  require(voters[msg.sender].votingRight == true, \"You are not a voter\") */\n      tag_60\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1966:1968   */\n      0x20\n        /* \"contracts/Stakable.sol\":10215:10285  require(voters[msg.sender].votingRight == true, \"You are not a voter\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1948:1969   */\n      mstore\n        /* \"#utility.yul\":2005:2007   */\n      0x13\n        /* \"#utility.yul\":1985:2003   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1978:2008   */\n      mstore\n        /* \"#utility.yul\":2044:2065   */\n      0x596f7520617265206e6f74206120766f74657200000000000000000000000000\n        /* \"#utility.yul\":2024:2042   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2017:2066   */\n      mstore\n        /* \"#utility.yul\":2083:2101   */\n      0x64\n      add\n        /* \"contracts/Stakable.sol\":10215:10285  require(voters[msg.sender].votingRight == true, \"You are not a voter\") */\n    tag_61:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_60:\n        /* \"contracts/Stakable.sol\":10323:10333  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":10316:10334  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":10316:10322  voters */\n      0x06\n        /* \"contracts/Stakable.sol\":10316:10334  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable.sol\":10341:10350  _votingId */\n      sload(0x04)\n        /* \"contracts/Stakable.sol\":10316:10351  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable.sol\":10316:10340  voters[msg.sender].voted */\n      0x01\n      swap1\n      dup2\n      add\n        /* \"contracts/Stakable.sol\":10316:10351  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable.sol\":10316:10359  voters[msg.sender].voted[_votingId] == true */\n      iszero\n      iszero\n      eq\n        /* \"contracts/Stakable.sol\":10295:10407  require(... */\n      tag_63\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2314:2316   */\n      0x20\n        /* \"contracts/Stakable.sol\":10295:10407  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2296:2317   */\n      mstore\n        /* \"#utility.yul\":2353:2355   */\n      0x16\n        /* \"#utility.yul\":2333:2351   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2326:2356   */\n      mstore\n        /* \"#utility.yul\":2392:2416   */\n      0x596f752068617665206e6f7420766f7465642079657400000000000000000000\n        /* \"#utility.yul\":2372:2390   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2365:2417   */\n      mstore\n        /* \"#utility.yul\":2434:2452   */\n      0x64\n      add\n        /* \"contracts/Stakable.sol\":10295:10407  require(... */\n      tag_61\n        /* \"#utility.yul\":2112:2458   */\n      jump\n        /* \"contracts/Stakable.sol\":10295:10407  require(... */\n    tag_63:\n        /* \"contracts/Stakable.sol\":10443:10452  _votingId */\n      sload(0x04)\n        /* \"contracts/Stakable.sol\":10418:10436  voters[msg.sender] */\n      0x00\n        /* \"contracts/Stakable.sol\":10418:10453  voters[msg.sender].voted[_votingId] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":10472:10482  votedUsers */\n      0x07\n        /* \"contracts/Stakable.sol\":10418:10436  voters[msg.sender] */\n      0x20\n        /* \"contracts/Stakable.sol\":10472:10493  votedUsers[_votingId] */\n      mstore\n        /* \"contracts/Stakable.sol\":10418:10436  voters[msg.sender] */\n      0x40\n        /* \"contracts/Stakable.sol\":10472:10493  votedUsers[_votingId] */\n      dup2\n      keccak256\n        /* \"contracts/Stakable.sol\":10472:10498  votedUsers[_votingId] -= 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable.sol\":10418:10442  voters[msg.sender].voted */\n      0x01\n      swap3\n        /* \"contracts/Stakable.sol\":10418:10436  voters[msg.sender] */\n      swap1\n        /* \"contracts/Stakable.sol\":10472:10498  votedUsers[_votingId] -= 1 */\n      tag_66\n      swap1\n        /* \"contracts/Stakable.sol\":10418:10442  voters[msg.sender].voted */\n      dup5\n      swap1\n        /* \"contracts/Stakable.sol\":10472:10498  votedUsers[_votingId] -= 1 */\n      tag_67\n      jump\t// in\n    tag_66:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Stakable.sol\":10158:10505  function retractVote() public votingStatusTrue {... */\n      jump\t// out\n        /* \"contracts/Stakable.sol\":7296:8362  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_20:\n        /* \"contracts/Stakable.sol\":7339:7360  StakingSummary memory */\n      tag_68\n      tag_69\n      jump\t// in\n    tag_68:\n        /* \"contracts/Stakable.sol\":7411:7421  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":7372:7395  Stakeholder memory data */\n      0x00\n        /* \"contracts/Stakable.sol\":7398:7422  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":7398:7410  stakeholders */\n      0x08\n        /* \"contracts/Stakable.sol\":7398:7422  stakeholders[msg.sender] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/Stakable.sol\":7372:7422  Stakeholder memory data = stakeholders[msg.sender] */\n      dup2\n      mload\n      0x0140\n      dup2\n      add\n      dup4\n      mstore\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      0x60\n      dup1\n      dup5\n      add\n      swap2\n      dup3\n      mstore\n      0x01\n      dup6\n      add\n      sload\n      0x80\n      dup6\n      add\n      mstore\n      0x02\n      dup6\n      add\n      sload\n      0xa0\n      dup6\n      add\n      mstore\n      0x03\n      dup6\n      add\n      sload\n      0xc0\n      dup6\n      add\n      mstore\n      0x04\n      dup6\n      add\n      sload\n      0xe0\n      dup6\n      add\n      mstore\n      0x05\n      dup6\n      add\n      sload\n      0x0100\n      dup6\n      add\n      mstore\n      0x06\n      dup6\n      add\n      sload\n      0x0120\n      dup6\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      0x07\n      dup5\n      add\n      sload\n      swap1\n      swap2\n      and\n      dup3\n      dup7\n      add\n      mstore\n      swap2\n      swap1\n      swap5\n      add\n      sload\n      dup5\n      dup4\n      add\n      mstore\n        /* \"contracts/Stakable.sol\":7464:7496  StakingSummary(0, 0, data.stake) */\n      dup2\n      mload\n      swap1\n      dup2\n      add\n      dup3\n      mstore\n      dup5\n      dup2\n      mstore\n      dup1\n      dup4\n      add\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"contracts/Stakable.sol\":7485:7495  data.stake */\n      dup3\n      mload\n        /* \"contracts/Stakable.sol\":7464:7496  StakingSummary(0, 0, data.stake) */\n      swap1\n      dup5\n      add\n      dup2\n      swap1\n      mstore\n        /* \"contracts/Stakable.sol\":7522:7542  summary.stake.amount */\n      add\n      mload\n        /* \"contracts/Stakable.sol\":7372:7422  Stakeholder memory data = stakeholders[msg.sender] */\n      swap1\n      swap2\n        /* \"contracts/Stakable.sol\":7464:7496  StakingSummary(0, 0, data.stake) */\n      swap1\n        /* \"contracts/Stakable.sol\":7506:7543  _checkUserStake(summary.stake.amount) */\n      tag_71\n      swap1\n        /* \"contracts/Stakable.sol\":7506:7521  _checkUserStake */\n      tag_72\n        /* \"contracts/Stakable.sol\":7506:7543  _checkUserStake(summary.stake.amount) */\n      jump\t// in\n    tag_71:\n        /* \"contracts/Stakable.sol\":7554:7577  uint256 availableReward */\n      0x00\n        /* \"contracts/Stakable.sol\":7580:7615  calculateStakeReward(summary.stake) */\n      tag_73\n        /* \"contracts/Stakable.sol\":7601:7608  summary */\n      dup3\n        /* \"contracts/Stakable.sol\":7601:7614  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stakable.sol\":7580:7600  calculateStakeReward */\n      tag_74\n        /* \"contracts/Stakable.sol\":7580:7615  calculateStakeReward(summary.stake) */\n      jump\t// in\n    tag_73:\n        /* \"contracts/Stakable.sol\":7554:7615  uint256 availableReward = calculateStakeReward(summary.stake) */\n      swap1\n      pop\n        /* \"contracts/Stakable.sol\":7625:7640  uint256 penalty */\n      0x00\n        /* \"contracts/Stakable.sol\":7683:7698  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":7655:7662  summary */\n      dup4\n        /* \"contracts/Stakable.sol\":7655:7668  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stakable.sol\":7655:7680  summary.stake.releaseTime */\n      0xc0\n      add\n      mload\n        /* \"contracts/Stakable.sol\":7655:7698  summary.stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/Stakable.sol\":7651:7932  if (summary.stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_75\n      jumpi\n        /* \"contracts/Stakable.sol\":7715:7737  uint256 amount_penalty */\n      0x00\n        /* \"contracts/Stakable.sol\":7739:7761  uint256 reward_penalty */\n      dup1\n        /* \"contracts/Stakable.sol\":7765:7866  calculatePenalty(... */\n      tag_76\n        /* \"contracts/Stakable.sol\":7799:7806  summary */\n      dup6\n        /* \"contracts/Stakable.sol\":7799:7812  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stakable.sol\":7799:7819  summary.stake.amount */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":7837:7852  availableReward */\n      dup6\n        /* \"contracts/Stakable.sol\":7765:7781  calculatePenalty */\n      tag_77\n        /* \"contracts/Stakable.sol\":7765:7866  calculatePenalty(... */\n      jump\t// in\n    tag_76:\n        /* \"contracts/Stakable.sol\":7714:7866  (uint256 amount_penalty, uint256 reward_penalty) = calculatePenalty(... */\n      swap1\n      swap3\n      pop\n      swap1\n      pop\n        /* \"contracts/Stakable.sol\":7890:7921  amount_penalty + reward_penalty */\n      tag_78\n        /* \"contracts/Stakable.sol\":7714:7866  (uint256 amount_penalty, uint256 reward_penalty) = calculatePenalty(... */\n      dup2\n      dup4\n        /* \"contracts/Stakable.sol\":7890:7921  amount_penalty + reward_penalty */\n      tag_79\n      jump\t// in\n    tag_78:\n        /* \"contracts/Stakable.sol\":7880:7921  penalty = amount_penalty + reward_penalty */\n      swap3\n      pop\n        /* \"contracts/Stakable.sol\":7700:7932  {... */\n      pop\n      pop\n        /* \"contracts/Stakable.sol\":7651:7932  if (summary.stake.releaseTime > block.timestamp) {... */\n    tag_75:\n        /* \"contracts/Stakable.sol\":7985:7986  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":7946:7982  _calculateWeek(data.latestClaimDrop) */\n      tag_80\n        /* \"contracts/Stakable.sol\":7961:7965  data */\n      dup6\n        /* \"contracts/Stakable.sol\":7961:7981  data.latestClaimDrop */\n      0x40\n      add\n      mload\n        /* \"contracts/Stakable.sol\":7946:7960  _calculateWeek */\n      tag_81\n        /* \"contracts/Stakable.sol\":7946:7982  _calculateWeek(data.latestClaimDrop) */\n      jump\t// in\n    tag_80:\n        /* \"contracts/Stakable.sol\":7946:7986  _calculateWeek(data.latestClaimDrop) > 0 */\n      gt\n        /* \"contracts/Stakable.sol\":7942:8191  if (_calculateWeek(data.latestClaimDrop) > 0) {... */\n      iszero\n      tag_82\n      jumpi\n        /* \"contracts/Stakable.sol\":8002:8017  uint256 airdrop */\n      0x00\n        /* \"contracts/Stakable.sol\":8020:8059  _calculateAirdrop(summary.stake.amount) */\n      tag_83\n        /* \"contracts/Stakable.sol\":8038:8045  summary */\n      dup5\n        /* \"contracts/Stakable.sol\":8038:8051  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stakable.sol\":8038:8058  summary.stake.amount */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":8020:8037  _calculateAirdrop */\n      tag_84\n        /* \"contracts/Stakable.sol\":8020:8059  _calculateAirdrop(summary.stake.amount) */\n      jump\t// in\n    tag_83:\n        /* \"contracts/Stakable.sol\":8073:8086  summary.stake */\n      0x40\n      dup6\n      add\n      mload\n        /* \"contracts/Stakable.sol\":8073:8104  summary.stake.claimable_airdrop */\n      0x80\n      add\n        /* \"contracts/Stakable.sol\":8073:8114  summary.stake.claimable_airdrop = airdrop */\n      mstore\n      pop\n        /* \"contracts/Stakable.sol\":7942:8191  if (_calculateWeek(data.latestClaimDrop) > 0) {... */\n      jump(tag_85)\n    tag_82:\n        /* \"contracts/Stakable.sol\":8145:8158  summary.stake */\n      0x40\n      dup4\n      add\n      mload\n        /* \"contracts/Stakable.sol\":8179:8180  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":8145:8176  summary.stake.claimable_airdrop */\n      0x80\n      swap1\n      swap2\n      add\n        /* \"contracts/Stakable.sol\":8145:8180  summary.stake.claimable_airdrop = 0 */\n      mstore\n        /* \"contracts/Stakable.sol\":7942:8191  if (_calculateWeek(data.latestClaimDrop) > 0) {... */\n    tag_85:\n        /* \"contracts/Stakable.sol\":8201:8214  summary.stake */\n      0x40\n      dup4\n      add\n      dup1\n      mload\n        /* \"contracts/Stakable.sol\":8201:8224  summary.stake.claimable */\n      0x60\n      add\n        /* \"contracts/Stakable.sol\":8201:8242  summary.stake.claimable = availableReward */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"contracts/Stakable.sol\":8252:8267  summary.penalty */\n      0x20\n      dup1\n      dup5\n      add\n        /* \"contracts/Stakable.sol\":8252:8277  summary.penalty = penalty */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"contracts/Stakable.sol\":8310:8323  summary.stake */\n      swap1\n      mload\n        /* \"contracts/Stakable.sol\":8310:8330  summary.stake.amount */\n      add\n      mload\n        /* \"contracts/Stakable.sol\":8287:8330  summary.total_amount = summary.stake.amount */\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":8201:8208  summary */\n      swap3\n        /* \"contracts/Stakable.sol\":7296:8362  function hasStake() external view returns (StakingSummary memory) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":9814:10152  function vote() public votingStatusTrue {... */\n    tag_28:\n        /* \"contracts/Stakable.sol\":1289:1309  _checkVotingStatus() */\n      tag_87\n        /* \"contracts/Stakable.sol\":1289:1307  _checkVotingStatus */\n      tag_58\n        /* \"contracts/Stakable.sol\":1289:1309  _checkVotingStatus() */\n      jump\t// in\n    tag_87:\n        /* \"contracts/Stakable.sol\":9879:9889  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":9872:9890  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":9872:9878  voters */\n      0x06\n        /* \"contracts/Stakable.sol\":9872:9890  voters[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable.sol\":9872:9902  voters[msg.sender].votingRight */\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable.sol\":9872:9910  voters[msg.sender].votingRight == true */\n      iszero\n      iszero\n        /* \"contracts/Stakable.sol\":9872:9902  voters[msg.sender].votingRight */\n      0x01\n        /* \"contracts/Stakable.sol\":9872:9910  voters[msg.sender].votingRight == true */\n      eq\n        /* \"contracts/Stakable.sol\":9864:9934  require(voters[msg.sender].votingRight == true, \"You are not a voter\") */\n      tag_89\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1966:1968   */\n      0x20\n        /* \"contracts/Stakable.sol\":9864:9934  require(voters[msg.sender].votingRight == true, \"You are not a voter\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1948:1969   */\n      mstore\n        /* \"#utility.yul\":2005:2007   */\n      0x13\n        /* \"#utility.yul\":1985:2003   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1978:2008   */\n      mstore\n        /* \"#utility.yul\":2044:2065   */\n      0x596f7520617265206e6f74206120766f74657200000000000000000000000000\n        /* \"#utility.yul\":2024:2042   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2017:2066   */\n      mstore\n        /* \"#utility.yul\":2083:2101   */\n      0x64\n      add\n        /* \"contracts/Stakable.sol\":9864:9934  require(voters[msg.sender].votingRight == true, \"You are not a voter\") */\n      tag_61\n        /* \"#utility.yul\":1764:2107   */\n      jump\n        /* \"contracts/Stakable.sol\":9864:9934  require(voters[msg.sender].votingRight == true, \"You are not a voter\") */\n    tag_89:\n        /* \"contracts/Stakable.sol\":9972:9982  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":9965:9983  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":9965:9971  voters */\n      0x06\n        /* \"contracts/Stakable.sol\":9965:9983  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable.sol\":9990:9999  _votingId */\n      sload(0x04)\n        /* \"contracts/Stakable.sol\":9965:10000  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable.sol\":9965:9989  voters[msg.sender].voted */\n      0x01\n      add\n        /* \"contracts/Stakable.sol\":9965:10000  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable.sol\":9965:10009  voters[msg.sender].voted[_votingId] == false */\n      iszero\n        /* \"contracts/Stakable.sol\":9944:10056  require(... */\n      tag_91\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3117:3119   */\n      0x20\n        /* \"contracts/Stakable.sol\":9944:10056  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3099:3120   */\n      mstore\n        /* \"#utility.yul\":3156:3158   */\n      0x15\n        /* \"#utility.yul\":3136:3154   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3129:3159   */\n      mstore\n        /* \"#utility.yul\":3195:3218   */\n      0x596f75206861766520766f746564206265666f72650000000000000000000000\n        /* \"#utility.yul\":3175:3193   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3168:3219   */\n      mstore\n        /* \"#utility.yul\":3236:3254   */\n      0x64\n      add\n        /* \"contracts/Stakable.sol\":9944:10056  require(... */\n      tag_61\n        /* \"#utility.yul\":2915:3260   */\n      jump\n        /* \"contracts/Stakable.sol\":9944:10056  require(... */\n    tag_91:\n        /* \"contracts/Stakable.sol\":10074:10084  msg.sender */\n      caller\n        /* \"contracts/Stakable.sol\":10067:10085  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":10067:10073  voters */\n      0x06\n        /* \"contracts/Stakable.sol\":10067:10085  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable.sol\":10092:10101  _votingId */\n      0x04\n      dup1\n      sload\n        /* \"contracts/Stakable.sol\":10067:10102  voters[msg.sender].voted[_votingId] */\n      dup6\n      mstore\n        /* \"contracts/Stakable.sol\":10105:10109  true */\n      0x01\n        /* \"contracts/Stakable.sol\":10067:10091  voters[msg.sender].voted */\n      swap2\n      dup3\n      add\n        /* \"contracts/Stakable.sol\":10067:10102  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"contracts/Stakable.sol\":10067:10109  voters[msg.sender].voted[_votingId] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup4\n      or\n      swap1\n      sstore\n        /* \"contracts/Stakable.sol\":10130:10139  _votingId */\n      sload\n        /* \"contracts/Stakable.sol\":10119:10140  votedUsers[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable.sol\":10119:10129  votedUsers */\n      0x07\n        /* \"contracts/Stakable.sol\":10119:10140  votedUsers[_votingId] */\n      swap1\n      swap3\n      mstore\n      dup3\n      keccak256\n        /* \"contracts/Stakable.sol\":10119:10145  votedUsers[_votingId] += 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable.sol\":10105:10109  true */\n      swap2\n      swap3\n        /* \"contracts/Stakable.sol\":10119:10140  votedUsers[_votingId] */\n      swap1\n      swap2\n        /* \"contracts/Stakable.sol\":10119:10145  votedUsers[_votingId] += 1 */\n      tag_66\n      swap1\n        /* \"contracts/Stakable.sol\":10105:10109  true */\n      dup5\n      swap1\n        /* \"contracts/Stakable.sol\":10119:10145  votedUsers[_votingId] += 1 */\n      tag_79\n      jump\t// in\n        /* \"contracts/Stakable.sol\":9636:9808  function isVoter(address _staker) public view returns (bool) {... */\n    tag_45:\n        /* \"contracts/Stakable.sol\":9691:9695  bool */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable.sol\":9715:9736  _staker != address(0) */\n      dup3\n      and\n        /* \"contracts/Stakable.sol\":9707:9756  require(_staker != address(0), \"Invalid address\") */\n      tag_96\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3467:3469   */\n      0x20\n        /* \"contracts/Stakable.sol\":9707:9756  require(_staker != address(0), \"Invalid address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3449:3470   */\n      mstore\n        /* \"#utility.yul\":3506:3508   */\n      0x0f\n        /* \"#utility.yul\":3486:3504   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3479:3509   */\n      mstore\n        /* \"#utility.yul\":3545:3562   */\n      0x496e76616c696420616464726573730000000000000000000000000000000000\n        /* \"#utility.yul\":3525:3543   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3518:3563   */\n      mstore\n        /* \"#utility.yul\":3580:3598   */\n      0x64\n      add\n        /* \"contracts/Stakable.sol\":9707:9756  require(_staker != address(0), \"Invalid address\") */\n      tag_61\n        /* \"#utility.yul\":3265:3604   */\n      jump\n        /* \"contracts/Stakable.sol\":9707:9756  require(_staker != address(0), \"Invalid address\") */\n    tag_96:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable.sol\":9774:9789  voters[_staker] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":9774:9780  voters */\n      0x06\n        /* \"contracts/Stakable.sol\":9774:9789  voters[_staker] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable.sol\":9774:9801  voters[_staker].votingRight */\n      sload\n      0xff\n      and\n      swap1\n        /* \"contracts/Stakable.sol\":9636:9808  function isVoter(address _staker) public view returns (bool) {... */\n      jump\t// out\n        /* \"contracts/Stakable.sol\":9151:9355  function airdropWeek() public view returns (uint256) {... */\n    tag_54:\n        /* \"contracts/Stakable.sol\":9195:9202  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":9218:9230  airdropSince */\n      sload(0x02)\n        /* \"contracts/Stakable.sol\":9234:9235  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":9218:9235  airdropSince != 0 */\n      eq\n        /* \"contracts/Stakable.sol\":9214:9349  if (airdropSince != 0) {... */\n      tag_100\n      jumpi\n        /* \"contracts/Stakable.sol\":9293:9299  7 days */\n      0x093a80\n        /* \"contracts/Stakable.sol\":9277:9289  airdropSince */\n      sload(0x02)\n        /* \"contracts/Stakable.sol\":9259:9274  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":9259:9289  block.timestamp - airdropSince */\n      tag_101\n      swap2\n      swap1\n      tag_67\n      jump\t// in\n    tag_101:\n        /* \"contracts/Stakable.sol\":9258:9299  (block.timestamp - airdropSince) / 7 days */\n      tag_102\n      swap2\n      swap1\n      tag_103\n      jump\t// in\n    tag_102:\n        /* \"contracts/Stakable.sol\":9251:9299  return (block.timestamp - airdropSince) / 7 days */\n      swap1\n      pop\n        /* \"contracts/Stakable.sol\":9151:9355  function airdropWeek() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Stakable.sol\":9214:9349  if (airdropSince != 0) {... */\n    tag_100:\n      pop\n        /* \"contracts/Stakable.sol\":9337:9338  0 */\n      0x00\n      swap1\n        /* \"contracts/Stakable.sol\":9151:9355  function airdropWeek() public view returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/Stakable.sol\":1135:1245  function _checkVotingStatus() internal view {... */\n    tag_58:\n        /* \"contracts/Stakable.sol\":1197:1210  _votingStatus */\n      and(0xff, sload(0x03))\n        /* \"contracts/Stakable.sol\":1189:1238  require(_votingStatus, \"Voting is not available\") */\n      tag_106\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4279:4281   */\n      0x20\n        /* \"contracts/Stakable.sol\":1189:1238  require(_votingStatus, \"Voting is not available\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4261:4282   */\n      mstore\n        /* \"#utility.yul\":4318:4320   */\n      0x17\n        /* \"#utility.yul\":4298:4316   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4291:4321   */\n      mstore\n        /* \"#utility.yul\":4357:4382   */\n      0x566f74696e67206973206e6f7420617661696c61626c65000000000000000000\n        /* \"#utility.yul\":4337:4355   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4330:4383   */\n      mstore\n        /* \"#utility.yul\":4400:4418   */\n      0x64\n      add\n        /* \"contracts/Stakable.sol\":1189:1238  require(_votingStatus, \"Voting is not available\") */\n      tag_61\n        /* \"#utility.yul\":4077:4424   */\n      jump\n        /* \"contracts/Stakable.sol\":1189:1238  require(_votingStatus, \"Voting is not available\") */\n    tag_106:\n        /* \"contracts/Stakable.sol\":1135:1245  function _checkVotingStatus() internal view {... */\n      jump\t// out\n        /* \"contracts/Stakable.sol\":1020:1129  function _checkUserStake(uint256 amount) internal pure {... */\n    tag_72:\n        /* \"contracts/Stakable.sol\":1102:1103  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":1093:1099  amount */\n      dup2\n        /* \"contracts/Stakable.sol\":1093:1103  amount > 0 */\n      gt\n        /* \"contracts/Stakable.sol\":1085:1122  require(amount > 0, \"No Stake Found\") */\n      tag_110\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4631:4633   */\n      0x20\n        /* \"contracts/Stakable.sol\":1085:1122  require(amount > 0, \"No Stake Found\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4613:4634   */\n      mstore\n        /* \"#utility.yul\":4670:4672   */\n      0x0e\n        /* \"#utility.yul\":4650:4668   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4643:4673   */\n      mstore\n        /* \"#utility.yul\":4709:4725   */\n      0x4e6f205374616b6520466f756e64000000000000000000000000000000000000\n        /* \"#utility.yul\":4689:4707   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4682:4726   */\n      mstore\n        /* \"#utility.yul\":4743:4761   */\n      0x64\n      add\n        /* \"contracts/Stakable.sol\":1085:1122  require(amount > 0, \"No Stake Found\") */\n      tag_61\n        /* \"#utility.yul\":4429:4767   */\n      jump\n        /* \"contracts/Stakable.sol\":1085:1122  require(amount > 0, \"No Stake Found\") */\n    tag_110:\n        /* \"contracts/Stakable.sol\":1020:1129  function _checkUserStake(uint256 amount) internal pure {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":5097:5532  function calculateStakeReward(Stake memory user_stake)... */\n    tag_74:\n        /* \"contracts/Stakable.sol\":5199:5206  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":5226:5236  user_stake */\n      dup2\n        /* \"contracts/Stakable.sol\":5226:5243  user_stake.amount */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":5247:5248  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":5226:5248  user_stake.amount == 0 */\n      eq\n        /* \"contracts/Stakable.sol\":5222:5283  if (user_stake.amount == 0) {... */\n      iszero\n      tag_114\n      jumpi\n      pop\n        /* \"contracts/Stakable.sol\":5271:5272  0 */\n      0x00\n      swap2\n        /* \"contracts/Stakable.sol\":5097:5532  function calculateStakeReward(Stake memory user_stake)... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":5222:5283  if (user_stake.amount == 0) {... */\n    tag_114:\n        /* \"contracts/Stakable.sol\":5521:5525  1e26 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/Stakable.sol\":5475:5517  calculateStakingDuration(user_stake.since) */\n      tag_115\n        /* \"contracts/Stakable.sol\":5500:5510  user_stake */\n      dup4\n        /* \"contracts/Stakable.sol\":5500:5516  user_stake.since */\n      0x40\n      add\n      mload\n        /* \"contracts/Stakable.sol\":5475:5499  calculateStakingDuration */\n      tag_116\n        /* \"contracts/Stakable.sol\":5475:5517  calculateStakingDuration(user_stake.since) */\n      jump\t// in\n    tag_115:\n        /* \"contracts/Stakable.sol\":5436:5446  user_stake */\n      dup4\n        /* \"contracts/Stakable.sol\":5436:5456  user_stake.rewardAPY */\n      0xa0\n      add\n      mload\n        /* \"contracts/Stakable.sol\":5400:5410  user_stake */\n      dup5\n        /* \"contracts/Stakable.sol\":5400:5417  user_stake.amount */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":5400:5456  user_stake.amount *... */\n      tag_117\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_117:\n        /* \"contracts/Stakable.sol\":5400:5517  user_stake.amount *... */\n      tag_119\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_119:\n        /* \"contracts/Stakable.sol\":5399:5525  (user_stake.amount *... */\n      tag_120\n      swap2\n      swap1\n      tag_103\n      jump\t// in\n    tag_120:\n        /* \"contracts/Stakable.sol\":5380:5525  return... */\n      swap3\n        /* \"contracts/Stakable.sol\":5097:5532  function calculateStakeReward(Stake memory user_stake)... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":5538:5847  function calculatePenalty(uint256 amount, uint256 reward)... */\n    tag_77:\n        /* \"contracts/Stakable.sol\":5643:5650  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":5652:5659  uint256 */\n      dup1\n        /* \"contracts/Stakable.sol\":5696:5756  SafeMath.div(SafeMath.mul(amount, stakingPenaltyRate), 1000) */\n      tag_122\n        /* \"contracts/Stakable.sol\":5709:5749  SafeMath.mul(amount, stakingPenaltyRate) */\n      tag_123\n        /* \"contracts/Stakable.sol\":5722:5728  amount */\n      dup6\n        /* \"contracts/Stakable.sol\":5730:5748  stakingPenaltyRate */\n      sload(0x00)\n        /* \"contracts/Stakable.sol\":5709:5721  SafeMath.mul */\n      tag_124\n        /* \"contracts/Stakable.sol\":5709:5749  SafeMath.mul(amount, stakingPenaltyRate) */\n      jump\t// in\n    tag_123:\n        /* \"contracts/Stakable.sol\":5751:5755  1000 */\n      0x03e8\n        /* \"contracts/Stakable.sol\":5696:5708  SafeMath.div */\n      tag_125\n        /* \"contracts/Stakable.sol\":5696:5756  SafeMath.div(SafeMath.mul(amount, stakingPenaltyRate), 1000) */\n      jump\t// in\n    tag_122:\n        /* \"contracts/Stakable.sol\":5770:5830  SafeMath.div(SafeMath.mul(reward, stakingPenaltyRate), 1000) */\n      tag_126\n        /* \"contracts/Stakable.sol\":5783:5823  SafeMath.mul(reward, stakingPenaltyRate) */\n      tag_123\n        /* \"contracts/Stakable.sol\":5796:5802  reward */\n      dup6\n        /* \"contracts/Stakable.sol\":5804:5822  stakingPenaltyRate */\n      sload(0x00)\n        /* \"contracts/Stakable.sol\":5783:5795  SafeMath.mul */\n      tag_124\n        /* \"contracts/Stakable.sol\":5783:5823  SafeMath.mul(reward, stakingPenaltyRate) */\n      jump\t// in\n        /* \"contracts/Stakable.sol\":5770:5830  SafeMath.div(SafeMath.mul(reward, stakingPenaltyRate), 1000) */\n    tag_126:\n        /* \"contracts/Stakable.sol\":5675:5840  return (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/Stakable.sol\":5538:5847  function calculatePenalty(uint256 amount, uint256 reward)... */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":2916:3048  function _calculateWeek(uint256 input) internal view returns (uint256) {... */\n    tag_81:\n        /* \"contracts/Stakable.sol\":2978:2985  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":3004:3041  (block.timestamp - input).div(7 days) */\n      tag_120\n        /* \"contracts/Stakable.sol\":3034:3040  7 days */\n      0x093a80\n        /* \"contracts/Stakable.sol\":3005:3028  block.timestamp - input */\n      tag_130\n        /* \"contracts/Stakable.sol\":3023:3028  input */\n      dup5\n        /* \"contracts/Stakable.sol\":3005:3020  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":3005:3028  block.timestamp - input */\n      tag_67\n      jump\t// in\n    tag_130:\n        /* \"contracts/Stakable.sol\":3004:3033  (block.timestamp - input).div */\n      swap1\n      tag_125\n        /* \"contracts/Stakable.sol\":3004:3041  (block.timestamp - input).div(7 days) */\n      jump\t// in\n        /* \"contracts/Stakable.sol\":8473:8652  function _calculateAirdrop(uint256 stakeAmount)... */\n    tag_84:\n        /* \"contracts/Stakable.sol\":8568:8575  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":8637:8645  52 weeks */\n      0x01dfe200\n        /* \"contracts/Stakable.sol\":8629:8633  1000 */\n      0x03e8\n        /* \"contracts/Stakable.sol\":8614:8625  airdropRate */\n      sload(0x01)\n        /* \"contracts/Stakable.sol\":8600:8611  stakeAmount */\n      dup5\n        /* \"contracts/Stakable.sol\":8600:8625  stakeAmount * airdropRate */\n      tag_132\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_132:\n        /* \"contracts/Stakable.sol\":8599:8633  (stakeAmount * airdropRate) / 1000 */\n      tag_119\n      swap2\n      swap1\n      tag_103\n      jump\t// in\n        /* \"contracts/Stakable.sol\":4690:5091  function calculateStakingDuration(uint256 since_)... */\n    tag_116:\n        /* \"contracts/Stakable.sol\":4787:4794  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":4827:4828  0 */\n      dup1\n        /* \"contracts/Stakable.sol\":4818:4824  since_ */\n      dup3\n        /* \"contracts/Stakable.sol\":4818:4828  since_ > 0 */\n      gt\n        /* \"contracts/Stakable.sol\":4810:4850  require(since_ > 0, \"Error timestamp 0\") */\n      tag_136\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5147:5149   */\n      0x20\n        /* \"contracts/Stakable.sol\":4810:4850  require(since_ > 0, \"Error timestamp 0\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5129:5150   */\n      mstore\n        /* \"#utility.yul\":5186:5188   */\n      0x11\n        /* \"#utility.yul\":5166:5184   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5159:5189   */\n      mstore\n        /* \"#utility.yul\":5225:5244   */\n      0x4572726f722074696d657374616d702030000000000000000000000000000000\n        /* \"#utility.yul\":5205:5223   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5198:5245   */\n      mstore\n        /* \"#utility.yul\":5262:5280   */\n      0x64\n      add\n        /* \"contracts/Stakable.sol\":4810:4850  require(since_ > 0, \"Error timestamp 0\") */\n      tag_61\n        /* \"#utility.yul\":4945:5286   */\n      jump\n        /* \"contracts/Stakable.sol\":4810:4850  require(since_ > 0, \"Error timestamp 0\") */\n    tag_136:\n        /* \"contracts/Stakable.sol\":4932:5084  SafeMath.div(... */\n      tag_120\n        /* \"contracts/Stakable.sol\":4963:4987  block.timestamp - since_ */\n      tag_140\n        /* \"contracts/Stakable.sol\":4981:4987  since_ */\n      dup4\n        /* \"contracts/Stakable.sol\":4963:4978  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":4963:4987  block.timestamp - since_ */\n      tag_67\n      jump\t// in\n    tag_140:\n        /* \"contracts/Stakable.sol\":4962:4995  (block.timestamp - since_) * 1e24 */\n      tag_141\n      swap1\n        /* \"contracts/Stakable.sol\":4991:4995  1e24 */\n      0xd3c21bcecceda1000000\n        /* \"contracts/Stakable.sol\":4962:4995  (block.timestamp - since_) * 1e24 */\n      tag_118\n      jump\t// in\n    tag_141:\n        /* \"contracts/Stakable.sol\":5013:5021  365 days */\n      0x01e13380\n        /* \"contracts/Stakable.sol\":4932:5084  SafeMath.div(... */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x1d\n      dup2\n      mstore\n      0x20\n      add\n      0x4572726f722063616e6e6f74206469766964652074696d657374616d70000000\n      dup2\n      mstore\n      pop\n        /* \"contracts/Stakable.sol\":4932:4944  SafeMath.div */\n      tag_142\n        /* \"contracts/Stakable.sol\":4932:5084  SafeMath.div(... */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3451:3547  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_124:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3509:3516  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3535:3540  a * b */\n      tag_144\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3539:3540  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3535:3536  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3535:3540  a * b */\n      tag_118\n      jump\t// in\n    tag_144:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3528:3540  return a * b */\n      swap4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3451:3547  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3836:3932  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_125:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3894:3901  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3920:3925  a / b */\n      tag_144\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3924:3925  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3920:3921  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3920:3925  a / b */\n      tag_103\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5660:5890  function div(... */\n    tag_142:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5776:5783  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5834:5846  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5827:5832  b > 0 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5819:5847  require(b > 0, errorMessage) */\n      tag_148\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_61\n      swap2\n      swap1\n      tag_150\n      jump\t// in\n    tag_148:\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5872:5873  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5868:5869  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5868:5873  a / b */\n      dup2\n      tag_152\n      jumpi\n      tag_152\n      tag_153\n      jump\t// in\n    tag_152:\n      div\n      swap5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5660:5890  function div(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_69:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      tag_154\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n      and(sub(shl(0xa0, 0x01), 0x01), 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\n    tag_154:\n      swap1\n      mstore\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":1073:1253   */\n    tag_34:\n        /* \"#utility.yul\":1132:1138   */\n      0x00\n        /* \"#utility.yul\":1185:1187   */\n      0x20\n        /* \"#utility.yul\":1173:1182   */\n      dup3\n        /* \"#utility.yul\":1164:1171   */\n      dup5\n        /* \"#utility.yul\":1160:1183   */\n      sub\n        /* \"#utility.yul\":1156:1188   */\n      slt\n        /* \"#utility.yul\":1153:1205   */\n      iszero\n      tag_161\n      jumpi\n        /* \"#utility.yul\":1201:1202   */\n      0x00\n        /* \"#utility.yul\":1198:1199   */\n      dup1\n        /* \"#utility.yul\":1191:1203   */\n      revert\n        /* \"#utility.yul\":1153:1205   */\n    tag_161:\n      pop\n        /* \"#utility.yul\":1224:1247   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1073:1253   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1258:1567   */\n    tag_39:\n        /* \"#utility.yul\":1317:1323   */\n      0x00\n        /* \"#utility.yul\":1370:1372   */\n      0x20\n        /* \"#utility.yul\":1358:1367   */\n      dup3\n        /* \"#utility.yul\":1349:1356   */\n      dup5\n        /* \"#utility.yul\":1345:1368   */\n      sub\n        /* \"#utility.yul\":1341:1373   */\n      slt\n        /* \"#utility.yul\":1338:1390   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":1386:1387   */\n      0x00\n        /* \"#utility.yul\":1383:1384   */\n      dup1\n        /* \"#utility.yul\":1376:1388   */\n      revert\n        /* \"#utility.yul\":1338:1390   */\n    tag_163:\n        /* \"#utility.yul\":1425:1434   */\n      dup2\n        /* \"#utility.yul\":1412:1435   */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1468:1473   */\n      dup2\n        /* \"#utility.yul\":1464:1518   */\n      and\n        /* \"#utility.yul\":1457:1462   */\n      dup2\n        /* \"#utility.yul\":1454:1519   */\n      eq\n        /* \"#utility.yul\":1444:1537   */\n      tag_144\n      jumpi\n        /* \"#utility.yul\":1533:1534   */\n      0x00\n        /* \"#utility.yul\":1530:1531   */\n      dup1\n        /* \"#utility.yul\":1523:1535   */\n      revert\n        /* \"#utility.yul\":2463:2647   */\n    tag_156:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":2512:2513   */\n      0x00\n        /* \"#utility.yul\":2505:2593   */\n      mstore\n        /* \"#utility.yul\":2612:2616   */\n      0x11\n        /* \"#utility.yul\":2609:2610   */\n      0x04\n        /* \"#utility.yul\":2602:2617   */\n      mstore\n        /* \"#utility.yul\":2636:2640   */\n      0x24\n        /* \"#utility.yul\":2633:2634   */\n      0x00\n        /* \"#utility.yul\":2626:2641   */\n      revert\n        /* \"#utility.yul\":2652:2777   */\n    tag_67:\n        /* \"#utility.yul\":2692:2696   */\n      0x00\n        /* \"#utility.yul\":2720:2721   */\n      dup3\n        /* \"#utility.yul\":2717:2718   */\n      dup3\n        /* \"#utility.yul\":2714:2722   */\n      lt\n        /* \"#utility.yul\":2711:2745   */\n      iszero\n      tag_171\n      jumpi\n        /* \"#utility.yul\":2725:2743   */\n      tag_171\n      tag_156\n      jump\t// in\n    tag_171:\n      pop\n        /* \"#utility.yul\":2762:2771   */\n      sub\n      swap1\n        /* \"#utility.yul\":2652:2777   */\n      jump\t// out\n        /* \"#utility.yul\":2782:2910   */\n    tag_79:\n        /* \"#utility.yul\":2822:2825   */\n      0x00\n        /* \"#utility.yul\":2853:2854   */\n      dup3\n        /* \"#utility.yul\":2849:2855   */\n      not\n        /* \"#utility.yul\":2846:2847   */\n      dup3\n        /* \"#utility.yul\":2843:2856   */\n      gt\n        /* \"#utility.yul\":2840:2879   */\n      iszero\n      tag_174\n      jumpi\n        /* \"#utility.yul\":2859:2877   */\n      tag_174\n      tag_156\n      jump\t// in\n    tag_174:\n      pop\n        /* \"#utility.yul\":2895:2904   */\n      add\n      swap1\n        /* \"#utility.yul\":2782:2910   */\n      jump\t// out\n        /* \"#utility.yul\":3609:3793   */\n    tag_153:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":3658:3659   */\n      0x00\n        /* \"#utility.yul\":3651:3739   */\n      mstore\n        /* \"#utility.yul\":3758:3762   */\n      0x12\n        /* \"#utility.yul\":3755:3756   */\n      0x04\n        /* \"#utility.yul\":3748:3763   */\n      mstore\n        /* \"#utility.yul\":3782:3786   */\n      0x24\n        /* \"#utility.yul\":3779:3780   */\n      0x00\n        /* \"#utility.yul\":3772:3787   */\n      revert\n        /* \"#utility.yul\":3798:4072   */\n    tag_103:\n        /* \"#utility.yul\":3838:3839   */\n      0x00\n        /* \"#utility.yul\":3864:3865   */\n      dup3\n        /* \"#utility.yul\":3854:4043   */\n      tag_179\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":3896:3897   */\n      0x00\n        /* \"#utility.yul\":3889:3977   */\n      mstore\n        /* \"#utility.yul\":4000:4004   */\n      0x12\n        /* \"#utility.yul\":3997:3998   */\n      0x04\n        /* \"#utility.yul\":3990:4005   */\n      mstore\n        /* \"#utility.yul\":4028:4032   */\n      0x24\n        /* \"#utility.yul\":4025:4026   */\n      0x00\n        /* \"#utility.yul\":4018:4033   */\n      revert\n        /* \"#utility.yul\":3854:4043   */\n    tag_179:\n      pop\n        /* \"#utility.yul\":4057:4066   */\n      div\n      swap1\n        /* \"#utility.yul\":3798:4072   */\n      jump\t// out\n        /* \"#utility.yul\":4772:4940   */\n    tag_118:\n        /* \"#utility.yul\":4812:4819   */\n      0x00\n        /* \"#utility.yul\":4878:4879   */\n      dup2\n        /* \"#utility.yul\":4874:4875   */\n      0x00\n        /* \"#utility.yul\":4870:4876   */\n      not\n        /* \"#utility.yul\":4866:4880   */\n      div\n        /* \"#utility.yul\":4863:4864   */\n      dup4\n        /* \"#utility.yul\":4860:4881   */\n      gt\n        /* \"#utility.yul\":4855:4856   */\n      dup3\n        /* \"#utility.yul\":4848:4857   */\n      iszero\n        /* \"#utility.yul\":4841:4858   */\n      iszero\n        /* \"#utility.yul\":4837:4882   */\n      and\n        /* \"#utility.yul\":4834:4905   */\n      iszero\n      tag_184\n      jumpi\n        /* \"#utility.yul\":4885:4903   */\n      tag_184\n      tag_156\n      jump\t// in\n    tag_184:\n      pop\n        /* \"#utility.yul\":4925:4934   */\n      mul\n      swap1\n        /* \"#utility.yul\":4772:4940   */\n      jump\t// out\n        /* \"#utility.yul\":5291:5888   */\n    tag_150:\n        /* \"#utility.yul\":5403:5407   */\n      0x00\n        /* \"#utility.yul\":5432:5434   */\n      0x20\n        /* \"#utility.yul\":5461:5463   */\n      dup1\n        /* \"#utility.yul\":5450:5459   */\n      dup4\n        /* \"#utility.yul\":5443:5464   */\n      mstore\n        /* \"#utility.yul\":5493:5499   */\n      dup4\n        /* \"#utility.yul\":5487:5500   */\n      mload\n        /* \"#utility.yul\":5536:5542   */\n      dup1\n        /* \"#utility.yul\":5531:5533   */\n      dup3\n        /* \"#utility.yul\":5520:5529   */\n      dup6\n        /* \"#utility.yul\":5516:5534   */\n      add\n        /* \"#utility.yul\":5509:5543   */\n      mstore\n        /* \"#utility.yul\":5561:5562   */\n      0x00\n        /* \"#utility.yul\":5571:5711   */\n    tag_187:\n        /* \"#utility.yul\":5585:5591   */\n      dup2\n        /* \"#utility.yul\":5582:5583   */\n      dup2\n        /* \"#utility.yul\":5579:5592   */\n      lt\n        /* \"#utility.yul\":5571:5711   */\n      iszero\n      tag_189\n      jumpi\n        /* \"#utility.yul\":5680:5694   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":5676:5699   */\n      dup4\n      add\n        /* \"#utility.yul\":5670:5700   */\n      mload\n        /* \"#utility.yul\":5646:5663   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":5665:5667   */\n      0x40\n        /* \"#utility.yul\":5642:5668   */\n      add\n        /* \"#utility.yul\":5635:5701   */\n      mstore\n        /* \"#utility.yul\":5600:5610   */\n      dup3\n      add\n        /* \"#utility.yul\":5571:5711   */\n      jump(tag_187)\n    tag_189:\n        /* \"#utility.yul\":5729:5735   */\n      dup2\n        /* \"#utility.yul\":5726:5727   */\n      dup2\n        /* \"#utility.yul\":5723:5736   */\n      gt\n        /* \"#utility.yul\":5720:5811   */\n      iszero\n      tag_190\n      jumpi\n        /* \"#utility.yul\":5799:5800   */\n      0x00\n        /* \"#utility.yul\":5794:5796   */\n      0x40\n        /* \"#utility.yul\":5785:5791   */\n      dup4\n        /* \"#utility.yul\":5774:5783   */\n      dup8\n        /* \"#utility.yul\":5770:5792   */\n      add\n        /* \"#utility.yul\":5766:5797   */\n      add\n        /* \"#utility.yul\":5759:5801   */\n      mstore\n        /* \"#utility.yul\":5720:5811   */\n    tag_190:\n      pop\n        /* \"#utility.yul\":5872:5874   */\n      0x1f\n        /* \"#utility.yul\":5851:5866   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":5847:5876   */\n      and\n        /* \"#utility.yul\":5832:5877   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":5879:5881   */\n      0x40\n        /* \"#utility.yul\":5828:5882   */\n      add\n      swap4\n        /* \"#utility.yul\":5291:5888   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212207b8e9e5b256961811554ba61be9b2c5a28fc04136963692d26e7329172d6adbe64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_359": {
									"entryPoint": null,
									"id": 359,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600f6000556050600155610a9c8061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063a143a5f211610081578063b87da76d1161005b578063b87da76d146101ef578063cb79c2e1146101f8578063cbb3e1521461020157600080fd5b8063a143a5f214610189578063a3ec138d146101a9578063a7771ee3146101dc57600080fd5b80635f5300ff116100b25780635f5300ff14610161578063632a9a52146101785780638891cf0d1461018057600080fd5b8063070c8b74146100ce57806310486b6a146100d8575b600080fd5b6100d6610209565b005b6100e0610318565b6040516101589190600061012082019050825182526020830151602083015260408301516001600160a01b0381511660408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a081015160e084015260c08101516101008401525092915050565b60405180910390f35b61016a60055481565b604051908152602001610158565b6100d6610480565b61016a60015481565b61016a610197366004610933565b60076020526000908152604090205481565b6101cc6101b736600461094c565b60066020526000908152604090205460ff1681565b6040519015158152602001610158565b6101cc6101ea36600461094c565b6105a3565b61016a60025481565b61016a60005481565b61016a61061a565b61021161064d565b3360009081526006602052604090205460ff16151560011461027a5760405162461bcd60e51b815260206004820152601360248201527f596f7520617265206e6f74206120766f7465720000000000000000000000000060448201526064015b60405180910390fd5b336000908152600660209081526040808320600454845260019081019092529091205460ff161515146102ef5760405162461bcd60e51b815260206004820152601660248201527f596f752068617665206e6f7420766f74656420796574000000000000000000006044820152606401610271565b600454600090815260076020526040812080546001929061031190849061098b565b9091555050565b6103206108cc565b33600090815260086020818152604080842081516101408101835281546001600160a01b03908116606080840191825260018501546080850152600285015460a0850152600385015460c0850152600485015460e0850152600585015461010085015260068501546101208501529083526007840154909116828601529190940154848301528151908101825284815280830194909452825190840181905201519091906103cd906106a1565b60006103dc82604001516106f4565b9050600042836040015160c0015111156104195760008061040585604001516020015185610752565b909250905061041481836109a2565b925050505b60006104288560400151610786565b111561045057600061044184604001516020015161079f565b6040850151608001525061045e565b604083015160006080909101525b6040830180516060019290925260208084019190915290510151815292915050565b61048861064d565b3360009081526006602052604090205460ff1615156001146104ec5760405162461bcd60e51b815260206004820152601360248201527f596f7520617265206e6f74206120766f746572000000000000000000000000006044820152606401610271565b336000908152600660209081526040808320600454845260010190915290205460ff161561055c5760405162461bcd60e51b815260206004820152601560248201527f596f75206861766520766f746564206265666f726500000000000000000000006044820152606401610271565b33600090815260066020908152604080832060048054855260019182018452828520805460ff191683179055548452600790925282208054919290916103119084906109a2565b60006001600160a01b0382166105fb5760405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152606401610271565b506001600160a01b031660009081526006602052604090205460ff1690565b60006002546000146106475762093a8060025442610638919061098b565b61064291906109d0565b905090565b50600090565b60035460ff1661069f5760405162461bcd60e51b815260206004820152601760248201527f566f74696e67206973206e6f7420617661696c61626c650000000000000000006044820152606401610271565b565b600081116106f15760405162461bcd60e51b815260206004820152600e60248201527f4e6f205374616b6520466f756e640000000000000000000000000000000000006044820152606401610271565b50565b600081602001516000141561070b57506000919050565b6a52b7d2dcc80cd2e400000061072483604001516107c1565b8360a00151846020015161073891906109f2565b61074291906109f2565b61074c91906109d0565b92915050565b60008061076c61076485600054610873565b6103e8610886565b61077b61076485600054610873565b915091509250929050565b600061074c62093a80610799844261098b565b90610886565b60006301dfe2006103e8600154846107b791906109f2565b61074291906109d0565b60008082116108125760405162461bcd60e51b815260206004820152601160248201527f4572726f722074696d657374616d7020300000000000000000000000000000006044820152606401610271565b61074c61081f834261098b565b6108339069d3c21bcecceda10000006109f2565b6301e133806040518060400160405280601d81526020017f4572726f722063616e6e6f74206469766964652074696d657374616d70000000815250610892565b600061087f82846109f2565b9392505050565b600061087f82846109d0565b600081836108b35760405162461bcd60e51b81526004016102719190610a11565b508284816108c3576108c36109ba565b04949350505050565b6040518060600160405280600081526020016000815260200161092e6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b60006020828403121561094557600080fd5b5035919050565b60006020828403121561095e57600080fd5b81356001600160a01b038116811461087f57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561099d5761099d610975565b500390565b600082198211156109b5576109b5610975565b500190565b634e487b7160e01b600052601260045260246000fd5b6000826109ed57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610a0c57610a0c610975565b500290565b600060208083528351808285015260005b81811015610a3e57858101830151858201604001528201610a22565b81811115610a50576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212207b8e9e5b256961811554ba61be9b2c5a28fc04136963692d26e7329172d6adbe64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xF PUSH1 0x0 SSTORE PUSH1 0x50 PUSH1 0x1 SSTORE PUSH2 0xA9C DUP1 PUSH2 0x2A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA143A5F2 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xB87DA76D GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xCBB3E152 EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0xA7771EE3 EQ PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5F5300FF GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x632A9A52 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70C8B74 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x10486B6A EQ PUSH2 0xD8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x209 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE0 PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16A PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x158 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x480 JUMP JUMPDEST PUSH2 0x16A PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0x933 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x1B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x94C JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x158 JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0x94C JUMP JUMPDEST PUSH2 0x5A3 JUMP JUMPDEST PUSH2 0x16A PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16A PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x61A JUMP JUMPDEST PUSH2 0x211 PUSH2 0x64D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x27A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520617265206E6F74206120766F74657200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x2EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752068617665206E6F7420766F7465642079657400000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x311 SWAP1 DUP5 SWAP1 PUSH2 0x98B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMP JUMPDEST PUSH2 0x320 PUSH2 0x8CC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH2 0x140 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x2 DUP6 ADD SLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x3 DUP6 ADD SLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0x5 DUP6 ADD SLOAD PUSH2 0x100 DUP6 ADD MSTORE PUSH1 0x6 DUP6 ADD SLOAD PUSH2 0x120 DUP6 ADD MSTORE SWAP1 DUP4 MSTORE PUSH1 0x7 DUP5 ADD SLOAD SWAP1 SWAP2 AND DUP3 DUP7 ADD MSTORE SWAP2 SWAP1 SWAP5 ADD SLOAD DUP5 DUP4 ADD MSTORE DUP2 MLOAD SWAP1 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE DUP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP3 MLOAD SWAP1 DUP5 ADD DUP2 SWAP1 MSTORE ADD MLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x3CD SWAP1 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DC DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x6F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 TIMESTAMP DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0xC0 ADD MLOAD GT ISZERO PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 PUSH2 0x405 DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x752 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x414 DUP2 DUP4 PUSH2 0x9A2 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST PUSH1 0x0 PUSH2 0x428 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x786 JUMP JUMPDEST GT ISZERO PUSH2 0x450 JUMPI PUSH1 0x0 PUSH2 0x441 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x79F JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x80 ADD MSTORE POP PUSH2 0x45E JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x0 PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP4 ADD DUP1 MLOAD PUSH1 0x60 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 MLOAD ADD MLOAD DUP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x488 PUSH2 0x64D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x4EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520617265206E6F74206120766F74657200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x55C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206861766520766F746564206265666F72650000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 DUP1 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP2 DUP3 ADD DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE SLOAD DUP5 MSTORE PUSH1 0x7 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x311 SWAP1 DUP5 SWAP1 PUSH2 0x9A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420616464726573730000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD PUSH1 0x0 EQ PUSH2 0x647 JUMPI PUSH3 0x93A80 PUSH1 0x2 SLOAD TIMESTAMP PUSH2 0x638 SWAP2 SWAP1 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x642 SWAP2 SWAP1 PUSH2 0x9D0 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND PUSH2 0x69F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x566F74696E67206973206E6F7420617661696C61626C65000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x6F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F205374616B6520466F756E64000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x70B JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x724 DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x7C1 JUMP JUMPDEST DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x738 SWAP2 SWAP1 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x742 SWAP2 SWAP1 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x74C SWAP2 SWAP1 PUSH2 0x9D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x76C PUSH2 0x764 DUP6 PUSH1 0x0 SLOAD PUSH2 0x873 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x886 JUMP JUMPDEST PUSH2 0x77B PUSH2 0x764 DUP6 PUSH1 0x0 SLOAD PUSH2 0x873 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74C PUSH3 0x93A80 PUSH2 0x799 DUP5 TIMESTAMP PUSH2 0x98B JUMP JUMPDEST SWAP1 PUSH2 0x886 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x1 SLOAD DUP5 PUSH2 0x7B7 SWAP2 SWAP1 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x742 SWAP2 SWAP1 PUSH2 0x9D0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4572726F722074696D657374616D702030000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST PUSH2 0x74C PUSH2 0x81F DUP4 TIMESTAMP PUSH2 0x98B JUMP JUMPDEST PUSH2 0x833 SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x9F2 JUMP JUMPDEST PUSH4 0x1E13380 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4572726F722063616E6E6F74206469766964652074696D657374616D70000000 DUP2 MSTORE POP PUSH2 0x892 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87F DUP3 DUP5 PUSH2 0x9F2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87F DUP3 DUP5 PUSH2 0x9D0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x8B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x271 SWAP2 SWAP1 PUSH2 0xA11 JUMP JUMPDEST POP DUP3 DUP5 DUP2 PUSH2 0x8C3 JUMPI PUSH2 0x8C3 PUSH2 0x9BA JUMP JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x92E PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x95E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x87F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x99D JUMPI PUSH2 0x99D PUSH2 0x975 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x9B5 JUMPI PUSH2 0x9B5 PUSH2 0x975 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9ED JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xA0C JUMPI PUSH2 0xA0C PUSH2 0x975 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA3E JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xA22 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA50 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0x8E9E5B256961811554BA61BE9B2C5A28FC04136963692D26E7329172 0xD6 0xAD 0xBE PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "155:10795:1:-:0;;;767:142;;;;;;;;;-1:-1:-1;874:2:1;853:18;:23;900:2;886:11;:16;155:10795;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_calculateAirdrop_933": {
									"entryPoint": 1951,
									"id": 933,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateWeek_470": {
									"entryPoint": 1926,
									"id": 470,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_checkUserStake_372": {
									"entryPoint": 1697,
									"id": 372,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_checkVotingStatus_381": {
									"entryPoint": 1613,
									"id": 381,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropRate_330": {
									"entryPoint": null,
									"id": 330,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropSince_332": {
									"entryPoint": null,
									"id": 332,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropWeek_1007": {
									"entryPoint": 1562,
									"id": 1007,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@calculatePenalty_678": {
									"entryPoint": 1874,
									"id": 678,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@calculateStakeReward_646": {
									"entryPoint": 1780,
									"id": 646,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@calculateStakingDuration_615": {
									"entryPoint": 1985,
									"id": 615,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@div_220": {
									"entryPoint": 2182,
									"id": 220,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@div_285": {
									"entryPoint": 2194,
									"id": 285,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@hasStake_915": {
									"entryPoint": 792,
									"id": 915,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isVoter_1049": {
									"entryPoint": 1443,
									"id": 1049,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mul_205": {
									"entryPoint": 2163,
									"id": 205,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@retractVote_1141": {
									"entryPoint": 521,
									"id": 1141,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@stakingPenaltyRate_328": {
									"entryPoint": null,
									"id": 328,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalVoters_338": {
									"entryPoint": null,
									"id": 338,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@vote_1095": {
									"entryPoint": 1152,
									"id": 1095,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@votedUsers_347": {
									"entryPoint": null,
									"id": 347,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@voters_343": {
									"entryPoint": null,
									"id": 343,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2380,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 2355,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2577,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0a8853ea1660661101fb36486911b88875a73ac2790e2973573eaa89a7746d10__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1138f52ee430448b689d4755fc6ce7436d74d91a0eb9cb2ca57801bbd4b77ccc__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1382668451cba5249c84b6eb3589abcd763b454d2442595ce729b0e20103df5a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1622962dddbb0bc5b80d9842cc6f818a1dcbb631c25adc1827fc170d7b8f3f56__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_344876a6da0a70234a6baabeee94694174b02d45df20fd4257a92fa090268af3__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a6cd3dc8b58b044759ec8a04a341cee3ac69749cc7b33a3876a5b0ed36f28215__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_StakingSummary_$419_memory_ptr__to_t_struct$_StakingSummary_$419_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2466,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 2512,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 2546,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 2443,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 2421,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 2490,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5890:2",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:2",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:709:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "187:27:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "199:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "210:3:2",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "195:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "195:19:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "187:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "230:9:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "247:6:2"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "241:5:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "241:13:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:32:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "223:32:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "275:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "286:4:2",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "271:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "271:20:2"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "303:6:2"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "311:4:2",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "299:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "299:17:2"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "293:5:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "293:24:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "264:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "264:54:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "264:54:2"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "327:44:2",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "357:6:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "365:4:2",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "353:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "353:17:2"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "347:5:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "347:24:2"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "331:12:2",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "391:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "402:4:2",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "387:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "387:20:2"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "419:12:2"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "413:5:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "413:19:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "434:42:2",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "409:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "409:68:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "380:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "380:98:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "380:98:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "498:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "509:2:2",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "494:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "494:18:2"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "524:12:2"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "538:4:2",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "520:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "520:23:2"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "514:5:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "514:30:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "487:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "487:58:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "487:58:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "565:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "576:3:2",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "561:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "561:19:2"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "592:12:2"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "606:4:2",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "588:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "588:23:2"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "582:5:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "582:30:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "554:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "554:59:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "554:59:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "633:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "644:3:2",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "629:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "629:19:2"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "660:12:2"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "674:2:2",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "656:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "656:21:2"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "650:5:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "650:28:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "622:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "622:57:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "622:57:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "699:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "710:3:2",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "695:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "695:19:2"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "726:12:2"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "740:3:2",
																						"type": "",
																						"value": "128"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "722:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "722:22:2"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "716:5:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "716:29:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "688:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "688:58:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "688:58:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "766:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "777:3:2",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "762:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "762:19:2"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "793:12:2"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "807:3:2",
																						"type": "",
																						"value": "160"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "789:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "789:22:2"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "783:5:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "783:29:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "755:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "755:58:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "755:58:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "833:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "844:3:2",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "829:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "829:19:2"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "860:12:2"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "874:3:2",
																						"type": "",
																						"value": "192"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "856:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "856:22:2"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "850:5:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "850:29:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "822:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "822:58:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "822:58:2"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_StakingSummary_$419_memory_ptr__to_t_struct$_StakingSummary_$419_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "146:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "157:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "168:4:2",
														"type": ""
													}
												],
												"src": "14:872:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "992:76:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1002:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1014:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1025:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1010:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1002:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1044:9:2"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1055:6:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1037:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1037:25:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1037:25:2"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "961:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "972:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "983:4:2",
														"type": ""
													}
												],
												"src": "891:177:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1143:110:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1189:16:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1198:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1201:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1191:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1191:12:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1191:12:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1164:7:2"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1173:9:2"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1160:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1160:23:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1185:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1156:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1156:32:2"
															},
															"nodeType": "YulIf",
															"src": "1153:52:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1214:33:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1237:9:2"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1224:12:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1224:23:2"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1214:6:2"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1109:9:2",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1120:7:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1132:6:2",
														"type": ""
													}
												],
												"src": "1073:180:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1328:239:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1374:16:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1383:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1386:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1376:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1376:12:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1376:12:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1349:7:2"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1358:9:2"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1345:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1345:23:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1370:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1341:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1341:32:2"
															},
															"nodeType": "YulIf",
															"src": "1338:52:2"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1399:36:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1425:9:2"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1412:12:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1412:23:2"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1403:5:2",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1521:16:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1530:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1533:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1523:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1523:12:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1523:12:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1457:5:2"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1468:5:2"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1475:42:2",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1464:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1464:54:2"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1454:2:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1454:65:2"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1447:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1447:73:2"
															},
															"nodeType": "YulIf",
															"src": "1444:93:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1546:15:2",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1556:5:2"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1546:6:2"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1294:9:2",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1305:7:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1317:6:2",
														"type": ""
													}
												],
												"src": "1258:309:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1667:92:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1677:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1689:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1700:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1685:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1685:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1677:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1719:9:2"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1744:6:2"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1737:6:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1737:14:2"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1730:6:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1730:22:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1712:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1712:41:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1712:41:2"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1636:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1647:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1658:4:2",
														"type": ""
													}
												],
												"src": "1572:187:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1938:169:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1955:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1966:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1948:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1948:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1948:21:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1989:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2000:2:2",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1985:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1985:18:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2005:2:2",
																		"type": "",
																		"value": "19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1978:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1978:30:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1978:30:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2028:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2039:2:2",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2024:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2024:18:2"
																	},
																	{
																		"hexValue": "596f7520617265206e6f74206120766f746572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2044:21:2",
																		"type": "",
																		"value": "You are not a voter"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2017:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2017:49:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2017:49:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2075:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2087:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2098:2:2",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2083:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2083:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2075:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1622962dddbb0bc5b80d9842cc6f818a1dcbb631c25adc1827fc170d7b8f3f56__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1915:9:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1929:4:2",
														"type": ""
													}
												],
												"src": "1764:343:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2286:172:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2303:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2314:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2296:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2296:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2296:21:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2337:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2348:2:2",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2333:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2333:18:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2353:2:2",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2326:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2326:30:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2326:30:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2376:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2387:2:2",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2372:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2372:18:2"
																	},
																	{
																		"hexValue": "596f752068617665206e6f7420766f74656420796574",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2392:24:2",
																		"type": "",
																		"value": "You have not voted yet"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2365:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2365:52:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2365:52:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2426:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2438:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2449:2:2",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2434:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2434:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2426:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0a8853ea1660661101fb36486911b88875a73ac2790e2973573eaa89a7746d10__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2263:9:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2277:4:2",
														"type": ""
													}
												],
												"src": "2112:346:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2495:152:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2512:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2515:77:2",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2505:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2505:88:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2505:88:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2609:1:2",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2612:4:2",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2602:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2602:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2602:15:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2633:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2636:4:2",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2626:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2626:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2626:15:2"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2463:184:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2701:76:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2723:22:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2725:16:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2725:18:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2725:18:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2717:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2720:1:2"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2714:2:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2714:8:2"
															},
															"nodeType": "YulIf",
															"src": "2711:34:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2754:17:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2766:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2769:1:2"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2762:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2762:9:2"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "2754:4:2"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2683:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2686:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "2692:4:2",
														"type": ""
													}
												],
												"src": "2652:125:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2830:80:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2857:22:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2859:16:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2859:18:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2859:18:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2846:1:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2853:1:2"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2849:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2849:6:2"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2843:2:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2843:13:2"
															},
															"nodeType": "YulIf",
															"src": "2840:39:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2888:16:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2899:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2902:1:2"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2895:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2895:9:2"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2888:3:2"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2813:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2816:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2822:3:2",
														"type": ""
													}
												],
												"src": "2782:128:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3089:171:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3106:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3117:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3099:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3099:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3099:21:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3140:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3151:2:2",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3136:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3136:18:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3156:2:2",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3129:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3129:30:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3129:30:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3179:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3190:2:2",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3175:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3175:18:2"
																	},
																	{
																		"hexValue": "596f75206861766520766f746564206265666f7265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3195:23:2",
																		"type": "",
																		"value": "You have voted before"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3168:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3168:51:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3168:51:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3228:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3240:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3251:2:2",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3236:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3236:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3228:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a6cd3dc8b58b044759ec8a04a341cee3ac69749cc7b33a3876a5b0ed36f28215__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3066:9:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3080:4:2",
														"type": ""
													}
												],
												"src": "2915:345:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3439:165:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3456:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3467:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3449:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3449:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3449:21:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3490:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3501:2:2",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3486:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3486:18:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3506:2:2",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3479:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3479:30:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3479:30:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3529:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3540:2:2",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3525:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3525:18:2"
																	},
																	{
																		"hexValue": "496e76616c69642061646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3545:17:2",
																		"type": "",
																		"value": "Invalid address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3518:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3518:45:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3518:45:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3572:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3584:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3595:2:2",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3580:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3580:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3572:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3416:9:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3430:4:2",
														"type": ""
													}
												],
												"src": "3265:339:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3641:152:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3658:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3661:77:2",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3651:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3651:88:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3651:88:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3755:1:2",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3758:4:2",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3748:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3748:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3748:15:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3779:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3782:4:2",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3772:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3772:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3772:15:2"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "3609:184:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3844:228:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3875:168:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3896:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3899:77:2",
																					"type": "",
																					"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3889:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3889:88:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3889:88:2"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3997:1:2",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4000:4:2",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3990:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3990:15:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3990:15:2"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4025:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4028:4:2",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4018:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4018:15:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4018:15:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3864:1:2"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3857:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3857:9:2"
															},
															"nodeType": "YulIf",
															"src": "3854:189:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4052:14:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4061:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4064:1:2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "4057:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4057:9:2"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4052:1:2"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3829:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3832:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "3838:1:2",
														"type": ""
													}
												],
												"src": "3798:274:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4251:173:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4268:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4279:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4261:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4261:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4261:21:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4302:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4313:2:2",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4298:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4298:18:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4318:2:2",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4291:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4291:30:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4291:30:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4341:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4352:2:2",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4337:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4337:18:2"
																	},
																	{
																		"hexValue": "566f74696e67206973206e6f7420617661696c61626c65",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4357:25:2",
																		"type": "",
																		"value": "Voting is not available"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4330:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4330:53:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4330:53:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4392:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4404:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4415:2:2",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4400:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4400:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4392:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1138f52ee430448b689d4755fc6ce7436d74d91a0eb9cb2ca57801bbd4b77ccc__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4228:9:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4242:4:2",
														"type": ""
													}
												],
												"src": "4077:347:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4603:164:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4620:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4631:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4613:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4613:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4613:21:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4654:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4665:2:2",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4650:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4650:18:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4670:2:2",
																		"type": "",
																		"value": "14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4643:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4643:30:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4643:30:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4693:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4704:2:2",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4689:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4689:18:2"
																	},
																	{
																		"hexValue": "4e6f205374616b6520466f756e64",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4709:16:2",
																		"type": "",
																		"value": "No Stake Found"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4682:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4682:44:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4682:44:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4735:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4747:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4758:2:2",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4743:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4743:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4735:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1382668451cba5249c84b6eb3589abcd763b454d2442595ce729b0e20103df5a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4580:9:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4594:4:2",
														"type": ""
													}
												],
												"src": "4429:338:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4824:116:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4883:22:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4885:16:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4885:18:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4885:18:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4855:1:2"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4848:6:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4848:9:2"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4841:6:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4841:17:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4863:1:2"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4874:1:2",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "4870:3:2"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4870:6:2"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4878:1:2"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4866:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4866:14:2"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4860:2:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4860:21:2"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4837:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4837:45:2"
															},
															"nodeType": "YulIf",
															"src": "4834:71:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4914:20:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4929:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4932:1:2"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "4925:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4925:9:2"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "4914:7:2"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4803:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4806:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "4812:7:2",
														"type": ""
													}
												],
												"src": "4772:168:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5119:167:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5136:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5147:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5129:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "5129:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5129:21:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5170:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5181:2:2",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5166:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5166:18:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5186:2:2",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5159:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "5159:30:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5159:30:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5209:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5220:2:2",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5205:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5205:18:2"
																	},
																	{
																		"hexValue": "4572726f722074696d657374616d702030",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5225:19:2",
																		"type": "",
																		"value": "Error timestamp 0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5198:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "5198:47:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5198:47:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5254:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5266:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5277:2:2",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5262:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "5262:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5254:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_344876a6da0a70234a6baabeee94694174b02d45df20fd4257a92fa090268af3__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5096:9:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5110:4:2",
														"type": ""
													}
												],
												"src": "4945:341:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5412:476:2",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5422:12:2",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5432:2:2",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5426:2:2",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5450:9:2"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5461:2:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5443:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "5443:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5443:21:2"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5473:27:2",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5493:6:2"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5487:5:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "5487:13:2"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5477:6:2",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5520:9:2"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5531:2:2"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5516:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5516:18:2"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5536:6:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5509:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "5509:34:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5509:34:2"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5552:10:2",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5561:1:2",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "5556:1:2",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5621:90:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "5650:9:2"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "5661:1:2"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5646:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5646:17:2"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5665:2:2",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5642:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5642:26:2"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "5684:6:2"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "5692:1:2"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "5680:3:2"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "5680:14:2"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "5696:2:2"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5676:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5676:23:2"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "5670:5:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5670:30:2"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5635:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5635:66:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5635:66:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5582:1:2"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5585:6:2"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "5579:2:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "5579:13:2"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "5593:19:2",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5595:15:2",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "5604:1:2"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "5607:2:2"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5600:3:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5600:10:2"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "5595:1:2"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "5575:3:2",
																"statements": []
															},
															"src": "5571:140:2"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5745:66:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "5774:9:2"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "5785:6:2"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5770:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5770:22:2"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5794:2:2",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5766:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5766:31:2"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5799:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5759:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5759:42:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5759:42:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5726:1:2"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5729:6:2"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5723:2:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "5723:13:2"
															},
															"nodeType": "YulIf",
															"src": "5720:91:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5820:62:2",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5836:9:2"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "5855:6:2"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5863:2:2",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "5851:3:2"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5851:15:2"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5872:2:2",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "5868:3:2"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5868:7:2"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "5847:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5847:29:2"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5832:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5832:45:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5879:2:2",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5828:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "5828:54:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5820:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5381:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5392:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5403:4:2",
														"type": ""
													}
												],
												"src": "5291:597:2"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_struct$_StakingSummary_$419_memory_ptr__to_t_struct$_StakingSummary_$419_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 288)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        let memberValue0 := mload(add(value0, 0x40))\n        mstore(add(headStart, 0x40), and(mload(memberValue0), 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 96), mload(add(memberValue0, 0x20)))\n        mstore(add(headStart, 128), mload(add(memberValue0, 0x40)))\n        mstore(add(headStart, 160), mload(add(memberValue0, 96)))\n        mstore(add(headStart, 192), mload(add(memberValue0, 128)))\n        mstore(add(headStart, 224), mload(add(memberValue0, 160)))\n        mstore(add(headStart, 256), mload(add(memberValue0, 192)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_stringliteral_1622962dddbb0bc5b80d9842cc6f818a1dcbb631c25adc1827fc170d7b8f3f56__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"You are not a voter\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0a8853ea1660661101fb36486911b88875a73ac2790e2973573eaa89a7746d10__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"You have not voted yet\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_a6cd3dc8b58b044759ec8a04a341cee3ac69749cc7b33a3876a5b0ed36f28215__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"You have voted before\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Invalid address\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_1138f52ee430448b689d4755fc6ce7436d74d91a0eb9cb2ca57801bbd4b77ccc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Voting is not available\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1382668451cba5249c84b6eb3589abcd763b454d2442595ce729b0e20103df5a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"No Stake Found\")\n        tail := add(headStart, 96)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_344876a6da0a70234a6baabeee94694174b02d45df20fd4257a92fa090268af3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Error timestamp 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 2,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100c95760003560e01c8063a143a5f211610081578063b87da76d1161005b578063b87da76d146101ef578063cb79c2e1146101f8578063cbb3e1521461020157600080fd5b8063a143a5f214610189578063a3ec138d146101a9578063a7771ee3146101dc57600080fd5b80635f5300ff116100b25780635f5300ff14610161578063632a9a52146101785780638891cf0d1461018057600080fd5b8063070c8b74146100ce57806310486b6a146100d8575b600080fd5b6100d6610209565b005b6100e0610318565b6040516101589190600061012082019050825182526020830151602083015260408301516001600160a01b0381511660408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a081015160e084015260c08101516101008401525092915050565b60405180910390f35b61016a60055481565b604051908152602001610158565b6100d6610480565b61016a60015481565b61016a610197366004610933565b60076020526000908152604090205481565b6101cc6101b736600461094c565b60066020526000908152604090205460ff1681565b6040519015158152602001610158565b6101cc6101ea36600461094c565b6105a3565b61016a60025481565b61016a60005481565b61016a61061a565b61021161064d565b3360009081526006602052604090205460ff16151560011461027a5760405162461bcd60e51b815260206004820152601360248201527f596f7520617265206e6f74206120766f7465720000000000000000000000000060448201526064015b60405180910390fd5b336000908152600660209081526040808320600454845260019081019092529091205460ff161515146102ef5760405162461bcd60e51b815260206004820152601660248201527f596f752068617665206e6f7420766f74656420796574000000000000000000006044820152606401610271565b600454600090815260076020526040812080546001929061031190849061098b565b9091555050565b6103206108cc565b33600090815260086020818152604080842081516101408101835281546001600160a01b03908116606080840191825260018501546080850152600285015460a0850152600385015460c0850152600485015460e0850152600585015461010085015260068501546101208501529083526007840154909116828601529190940154848301528151908101825284815280830194909452825190840181905201519091906103cd906106a1565b60006103dc82604001516106f4565b9050600042836040015160c0015111156104195760008061040585604001516020015185610752565b909250905061041481836109a2565b925050505b60006104288560400151610786565b111561045057600061044184604001516020015161079f565b6040850151608001525061045e565b604083015160006080909101525b6040830180516060019290925260208084019190915290510151815292915050565b61048861064d565b3360009081526006602052604090205460ff1615156001146104ec5760405162461bcd60e51b815260206004820152601360248201527f596f7520617265206e6f74206120766f746572000000000000000000000000006044820152606401610271565b336000908152600660209081526040808320600454845260010190915290205460ff161561055c5760405162461bcd60e51b815260206004820152601560248201527f596f75206861766520766f746564206265666f726500000000000000000000006044820152606401610271565b33600090815260066020908152604080832060048054855260019182018452828520805460ff191683179055548452600790925282208054919290916103119084906109a2565b60006001600160a01b0382166105fb5760405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152606401610271565b506001600160a01b031660009081526006602052604090205460ff1690565b60006002546000146106475762093a8060025442610638919061098b565b61064291906109d0565b905090565b50600090565b60035460ff1661069f5760405162461bcd60e51b815260206004820152601760248201527f566f74696e67206973206e6f7420617661696c61626c650000000000000000006044820152606401610271565b565b600081116106f15760405162461bcd60e51b815260206004820152600e60248201527f4e6f205374616b6520466f756e640000000000000000000000000000000000006044820152606401610271565b50565b600081602001516000141561070b57506000919050565b6a52b7d2dcc80cd2e400000061072483604001516107c1565b8360a00151846020015161073891906109f2565b61074291906109f2565b61074c91906109d0565b92915050565b60008061076c61076485600054610873565b6103e8610886565b61077b61076485600054610873565b915091509250929050565b600061074c62093a80610799844261098b565b90610886565b60006301dfe2006103e8600154846107b791906109f2565b61074291906109d0565b60008082116108125760405162461bcd60e51b815260206004820152601160248201527f4572726f722074696d657374616d7020300000000000000000000000000000006044820152606401610271565b61074c61081f834261098b565b6108339069d3c21bcecceda10000006109f2565b6301e133806040518060400160405280601d81526020017f4572726f722063616e6e6f74206469766964652074696d657374616d70000000815250610892565b600061087f82846109f2565b9392505050565b600061087f82846109d0565b600081836108b35760405162461bcd60e51b81526004016102719190610a11565b508284816108c3576108c36109ba565b04949350505050565b6040518060600160405280600081526020016000815260200161092e6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b60006020828403121561094557600080fd5b5035919050565b60006020828403121561095e57600080fd5b81356001600160a01b038116811461087f57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561099d5761099d610975565b500390565b600082198211156109b5576109b5610975565b500190565b634e487b7160e01b600052601260045260246000fd5b6000826109ed57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610a0c57610a0c610975565b500290565b600060208083528351808285015260005b81811015610a3e57858101830151858201604001528201610a22565b81811115610a50576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212207b8e9e5b256961811554ba61be9b2c5a28fc04136963692d26e7329172d6adbe64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA143A5F2 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xB87DA76D GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xCBB3E152 EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0xA7771EE3 EQ PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5F5300FF GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x632A9A52 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70C8B74 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x10486B6A EQ PUSH2 0xD8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x209 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE0 PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16A PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x158 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x480 JUMP JUMPDEST PUSH2 0x16A PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0x933 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x1B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x94C JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x158 JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0x94C JUMP JUMPDEST PUSH2 0x5A3 JUMP JUMPDEST PUSH2 0x16A PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16A PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x61A JUMP JUMPDEST PUSH2 0x211 PUSH2 0x64D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x27A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520617265206E6F74206120766F74657200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x2EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752068617665206E6F7420766F7465642079657400000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x311 SWAP1 DUP5 SWAP1 PUSH2 0x98B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMP JUMPDEST PUSH2 0x320 PUSH2 0x8CC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH2 0x140 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x2 DUP6 ADD SLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x3 DUP6 ADD SLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0x5 DUP6 ADD SLOAD PUSH2 0x100 DUP6 ADD MSTORE PUSH1 0x6 DUP6 ADD SLOAD PUSH2 0x120 DUP6 ADD MSTORE SWAP1 DUP4 MSTORE PUSH1 0x7 DUP5 ADD SLOAD SWAP1 SWAP2 AND DUP3 DUP7 ADD MSTORE SWAP2 SWAP1 SWAP5 ADD SLOAD DUP5 DUP4 ADD MSTORE DUP2 MLOAD SWAP1 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE DUP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP3 MLOAD SWAP1 DUP5 ADD DUP2 SWAP1 MSTORE ADD MLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x3CD SWAP1 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DC DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x6F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 TIMESTAMP DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0xC0 ADD MLOAD GT ISZERO PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 PUSH2 0x405 DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x752 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x414 DUP2 DUP4 PUSH2 0x9A2 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST PUSH1 0x0 PUSH2 0x428 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x786 JUMP JUMPDEST GT ISZERO PUSH2 0x450 JUMPI PUSH1 0x0 PUSH2 0x441 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x79F JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x80 ADD MSTORE POP PUSH2 0x45E JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x0 PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP4 ADD DUP1 MLOAD PUSH1 0x60 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 MLOAD ADD MLOAD DUP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x488 PUSH2 0x64D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x4EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520617265206E6F74206120766F74657200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x55C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206861766520766F746564206265666F72650000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 DUP1 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP2 DUP3 ADD DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE SLOAD DUP5 MSTORE PUSH1 0x7 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x311 SWAP1 DUP5 SWAP1 PUSH2 0x9A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420616464726573730000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD PUSH1 0x0 EQ PUSH2 0x647 JUMPI PUSH3 0x93A80 PUSH1 0x2 SLOAD TIMESTAMP PUSH2 0x638 SWAP2 SWAP1 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x642 SWAP2 SWAP1 PUSH2 0x9D0 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND PUSH2 0x69F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x566F74696E67206973206E6F7420617661696C61626C65000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x6F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F205374616B6520466F756E64000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x70B JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x724 DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x7C1 JUMP JUMPDEST DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x738 SWAP2 SWAP1 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x742 SWAP2 SWAP1 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x74C SWAP2 SWAP1 PUSH2 0x9D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x76C PUSH2 0x764 DUP6 PUSH1 0x0 SLOAD PUSH2 0x873 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x886 JUMP JUMPDEST PUSH2 0x77B PUSH2 0x764 DUP6 PUSH1 0x0 SLOAD PUSH2 0x873 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74C PUSH3 0x93A80 PUSH2 0x799 DUP5 TIMESTAMP PUSH2 0x98B JUMP JUMPDEST SWAP1 PUSH2 0x886 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x1 SLOAD DUP5 PUSH2 0x7B7 SWAP2 SWAP1 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x742 SWAP2 SWAP1 PUSH2 0x9D0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4572726F722074696D657374616D702030000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x271 JUMP JUMPDEST PUSH2 0x74C PUSH2 0x81F DUP4 TIMESTAMP PUSH2 0x98B JUMP JUMPDEST PUSH2 0x833 SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x9F2 JUMP JUMPDEST PUSH4 0x1E13380 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4572726F722063616E6E6F74206469766964652074696D657374616D70000000 DUP2 MSTORE POP PUSH2 0x892 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87F DUP3 DUP5 PUSH2 0x9F2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87F DUP3 DUP5 PUSH2 0x9D0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x8B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x271 SWAP2 SWAP1 PUSH2 0xA11 JUMP JUMPDEST POP DUP3 DUP5 DUP2 PUSH2 0x8C3 JUMPI PUSH2 0x8C3 PUSH2 0x9BA JUMP JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x92E PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x95E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x87F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x99D JUMPI PUSH2 0x99D PUSH2 0x975 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x9B5 JUMPI PUSH2 0x9B5 PUSH2 0x975 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9ED JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xA0C JUMPI PUSH2 0xA0C PUSH2 0x975 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA3E JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xA22 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA50 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0x8E9E5B256961811554BA61BE9B2C5A28FC04136963692D26E7329172 0xD6 0xAD 0xBE PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "155:10795:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10158:347;;;:::i;:::-;;7296:1066;;;:::i;:::-;;;;;;168:4:2;210:3;199:9;195:19;187:27;;247:6;241:13;230:9;223:32;311:4;303:6;299:17;293:24;286:4;275:9;271:20;264:54;365:4;357:6;353:17;347:24;-1:-1:-1;;;;;419:12:2;413:19;409:68;402:4;391:9;387:20;380:98;538:4;524:12;520:23;514:30;509:2;498:9;494:18;487:58;606:4;592:12;588:23;582:30;576:3;565:9;561:19;554:59;674:2;660:12;656:21;650:28;644:3;633:9;629:19;622:57;740:3;726:12;722:22;716:29;710:3;699:9;695:19;688:58;807:3;793:12;789:22;783:29;777:3;766:9;762:19;755:58;874:3;860:12;856:22;850:29;844:3;833:9;829:19;822:58;;14:872;;;;;7296:1066:1;;;;;;;;638:26;;;;;;;;;1037:25:2;;;1025:2;1010:18;638:26:1;891:177:2;9814:338:1;;;:::i;507:26::-;;;;;;715:45;;;;;;:::i;:::-;;;;;;;;;;;;;;670:39;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1737:14:2;;1730:22;1712:41;;1700:2;1685:18;670:39:1;1572:187:2;9636:172:1;;;;;;:::i;:::-;;:::i;539:27::-;;;;;;468:33;;;;;;9151:204;;;:::i;10158:347::-;1289:20;:18;:20::i;:::-;10230:10:::1;10223:18;::::0;;;:6:::1;:18;::::0;;;;:30;::::1;;:38;;:30:::0;:38:::1;10215:70;;;::::0;-1:-1:-1;;;10215:70:1;;1966:2:2;10215:70:1::1;::::0;::::1;1948:21:2::0;2005:2;1985:18;;;1978:30;2044:21;2024:18;;;2017:49;2083:18;;10215:70:1::1;;;;;;;;;10323:10;10316:18;::::0;;;:6:::1;:18;::::0;;;;;;;10341:9:::1;::::0;10316:35;;:24:::1;::::0;;::::1;:35:::0;;;;;;;::::1;;:43;;;10295:112;;;::::0;-1:-1:-1;;;10295:112:1;;2314:2:2;10295:112:1::1;::::0;::::1;2296:21:2::0;2353:2;2333:18;;;2326:30;2392:24;2372:18;;;2365:52;2434:18;;10295:112:1::1;2112:346:2::0;10295:112:1::1;10443:9;::::0;10418:18:::1;:35:::0;;;10472:10:::1;10418:18;10472:21:::0;10418:18;10472:21;;:26;;10418:24:::1;::::0;:18;10472:26:::1;::::0;10418:24;;10472:26:::1;:::i;:::-;::::0;;;-1:-1:-1;;10158:347:1:o;7296:1066::-;7339:21;;:::i;:::-;7411:10;7372:23;7398:24;;;:12;:24;;;;;;;;7372:50;;;;;;;;;-1:-1:-1;;;;;7372:50:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7464:32;;;;;;;;;;;;;;;;;7485:10;;7464:32;;;;;;7522:20;;7372:50;;7464:32;7506:37;;:15;:37::i;:::-;7554:23;7580:35;7601:7;:13;;;7580:20;:35::i;:::-;7554:61;;7625:15;7683;7655:7;:13;;;:25;;;:43;7651:281;;;7715:22;7739;7765:101;7799:7;:13;;;:20;;;7837:15;7765:16;:101::i;:::-;7714:152;;-1:-1:-1;7714:152:1;-1:-1:-1;7890:31:1;7714:152;;7890:31;:::i;:::-;7880:41;;7700:232;;7651:281;7985:1;7946:36;7961:4;:20;;;7946:14;:36::i;:::-;:40;7942:249;;;8002:15;8020:39;8038:7;:13;;;:20;;;8020:17;:39::i;:::-;8073:13;;;;:31;;:41;-1:-1:-1;7942:249:1;;;8145:13;;;;8179:1;8145:31;;;;:35;7942:249;8201:13;;;;;:23;;:41;;;;8252:15;;;;:25;;;;8310:13;;:20;;8287:43;;8201:7;7296:1066;-1:-1:-1;;7296:1066:1:o;9814:338::-;1289:20;:18;:20::i;:::-;9879:10:::1;9872:18;::::0;;;:6:::1;:18;::::0;;;;:30;::::1;;:38;;:30:::0;:38:::1;9864:70;;;::::0;-1:-1:-1;;;9864:70:1;;1966:2:2;9864:70:1::1;::::0;::::1;1948:21:2::0;2005:2;1985:18;;;1978:30;2044:21;2024:18;;;2017:49;2083:18;;9864:70:1::1;1764:343:2::0;9864:70:1::1;9972:10;9965:18;::::0;;;:6:::1;:18;::::0;;;;;;;9990:9:::1;::::0;9965:35;;:24:::1;;:35:::0;;;;;;::::1;;:44;9944:112;;;::::0;-1:-1:-1;;;9944:112:1;;3117:2:2;9944:112:1::1;::::0;::::1;3099:21:2::0;3156:2;3136:18;;;3129:30;3195:23;3175:18;;;3168:51;3236:18;;9944:112:1::1;2915:345:2::0;9944:112:1::1;10074:10;10067:18;::::0;;;:6:::1;:18;::::0;;;;;;;10092:9:::1;::::0;;10067:35;;10105:4:::1;10067:24:::0;;::::1;:35:::0;;;;;:42;;-1:-1:-1;;10067:42:1::1;::::0;::::1;::::0;;10130:9;10119:21;;:10:::1;:21:::0;;;;;:26;;10105:4;;10119:21;;:26:::1;::::0;10105:4;;10119:26:::1;:::i;9636:172::-:0;9691:4;-1:-1:-1;;;;;9715:21:1;;9707:49;;;;-1:-1:-1;;;9707:49:1;;3467:2:2;9707:49:1;;;3449:21:2;3506:2;3486:18;;;3479:30;3545:17;3525:18;;;3518:45;3580:18;;9707:49:1;3265:339:2;9707:49:1;-1:-1:-1;;;;;;9774:15:1;;;;;:6;:15;;;;;:27;;;;9636:172::o;9151:204::-;9195:7;9218:12;;9234:1;9218:17;9214:135;;9293:6;9277:12;;9259:15;:30;;;;:::i;:::-;9258:41;;;;:::i;:::-;9251:48;;9151:204;:::o;9214:135::-;-1:-1:-1;9337:1:1;;9151:204::o;1135:110::-;1197:13;;;;1189:49;;;;-1:-1:-1;;;1189:49:1;;4279:2:2;1189:49:1;;;4261:21:2;4318:2;4298:18;;;4291:30;4357:25;4337:18;;;4330:53;4400:18;;1189:49:1;4077:347:2;1189:49:1;1135:110::o;1020:109::-;1102:1;1093:6;:10;1085:37;;;;-1:-1:-1;;;1085:37:1;;4631:2:2;1085:37:1;;;4613:21:2;4670:2;4650:18;;;4643:30;4709:16;4689:18;;;4682:44;4743:18;;1085:37:1;4429:338:2;1085:37:1;1020:109;:::o;5097:435::-;5199:7;5226:10;:17;;;5247:1;5226:22;5222:61;;;-1:-1:-1;5271:1:1;;5097:435;-1:-1:-1;5097:435:1:o;5222:61::-;5521:4;5475:42;5500:10;:16;;;5475:24;:42::i;:::-;5436:10;:20;;;5400:10;:17;;;:56;;;;:::i;:::-;:117;;;;:::i;:::-;5399:126;;;;:::i;:::-;5380:145;5097:435;-1:-1:-1;;5097:435:1:o;5538:309::-;5643:7;5652;5696:60;5709:40;5722:6;5730:18;;5709:12;:40::i;:::-;5751:4;5696:12;:60::i;:::-;5770;5783:40;5796:6;5804:18;;5783:12;:40::i;5770:60::-;5675:165;;;;5538:309;;;;;:::o;2916:132::-;2978:7;3004:37;3034:6;3005:23;3023:5;3005:15;:23;:::i;:::-;3004:29;;:37::i;8473:179::-;8568:7;8637:8;8629:4;8614:11;;8600;:25;;;;:::i;:::-;8599:34;;;;:::i;4690:401::-;4787:7;4827:1;4818:6;:10;4810:40;;;;-1:-1:-1;;;4810:40:1;;5147:2:2;4810:40:1;;;5129:21:2;5186:2;5166:18;;;5159:30;5225:19;5205:18;;;5198:47;5262:18;;4810:40:1;4945:341:2;4810:40:1;4932:152;4963:24;4981:6;4963:15;:24;:::i;:::-;4962:33;;4991:4;4962:33;:::i;:::-;5013:8;4932:152;;;;;;;;;;;;;;;;;:12;:152::i;3451:96:0:-;3509:7;3535:5;3539:1;3535;:5;:::i;:::-;3528:12;3451:96;-1:-1:-1;;;3451:96:0:o;3836:::-;3894:7;3920:5;3924:1;3920;:5;:::i;5660:230::-;5776:7;5834:12;5827:5;5819:28;;;;-1:-1:-1;;;5819:28:0;;;;;;;;:::i;:::-;;5872:1;5868;:5;;;;;:::i;:::-;;;5660:230;-1:-1:-1;;;;5660:230:0:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1073:180:2:-;1132:6;1185:2;1173:9;1164:7;1160:23;1156:32;1153:52;;;1201:1;1198;1191:12;1153:52;-1:-1:-1;1224:23:2;;1073:180;-1:-1:-1;1073:180:2:o;1258:309::-;1317:6;1370:2;1358:9;1349:7;1345:23;1341:32;1338:52;;;1386:1;1383;1376:12;1338:52;1425:9;1412:23;-1:-1:-1;;;;;1468:5:2;1464:54;1457:5;1454:65;1444:93;;1533:1;1530;1523:12;2463:184;-1:-1:-1;;;2512:1:2;2505:88;2612:4;2609:1;2602:15;2636:4;2633:1;2626:15;2652:125;2692:4;2720:1;2717;2714:8;2711:34;;;2725:18;;:::i;:::-;-1:-1:-1;2762:9:2;;2652:125::o;2782:128::-;2822:3;2853:1;2849:6;2846:1;2843:13;2840:39;;;2859:18;;:::i;:::-;-1:-1:-1;2895:9:2;;2782:128::o;3609:184::-;-1:-1:-1;;;3658:1:2;3651:88;3758:4;3755:1;3748:15;3782:4;3779:1;3772:15;3798:274;3838:1;3864;3854:189;;-1:-1:-1;;;3896:1:2;3889:88;4000:4;3997:1;3990:15;4028:4;4025:1;4018:15;3854:189;-1:-1:-1;4057:9:2;;3798:274::o;4772:168::-;4812:7;4878:1;4874;4870:6;4866:14;4863:1;4860:21;4855:1;4848:9;4841:17;4837:45;4834:71;;;4885:18;;:::i;:::-;-1:-1:-1;4925:9:2;;4772:168::o;5291:597::-;5403:4;5432:2;5461;5450:9;5443:21;5493:6;5487:13;5536:6;5531:2;5520:9;5516:18;5509:34;5561:1;5571:140;5585:6;5582:1;5579:13;5571:140;;;5680:14;;;5676:23;;5670:30;5646:17;;;5665:2;5642:26;5635:66;5600:10;;5571:140;;;5729:6;5726:1;5723:13;5720:91;;;5799:1;5794:2;5785:6;5774:9;5770:22;5766:31;5759:42;5720:91;-1:-1:-1;5872:2:2;5851:15;-1:-1:-1;;5847:29:2;5832:45;;;;5879:2;5828:54;;5291:597;-1:-1:-1;;;5291:597:2:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "543200",
								"executionCost": "44787",
								"totalCost": "587987"
							},
							"external": {
								"airdropRate()": "2362",
								"airdropSince()": "2317",
								"airdropWeek()": "4635",
								"hasStake()": "infinite",
								"isVoter(address)": "2633",
								"retractVote()": "35369",
								"stakingPenaltyRate()": "2339",
								"totalVoters()": "2318",
								"vote()": "61851",
								"votedUsers(uint256)": "2461",
								"voters(address)": "2541"
							},
							"internal": {
								"_calculateAirdrop(uint256)": "infinite",
								"_calculateWeek(uint256)": "193",
								"_changeAirdropPercentage(uint256)": "infinite",
								"_changePenaltyFee(uint256)": "infinite",
								"_checkUserStake(uint256)": "infinite",
								"_checkVotingStatus()": "infinite",
								"_claimAirdrop(address)": "infinite",
								"_getVotingResult()": "infinite",
								"_stake(address,uint256,uint256,uint256)": "infinite",
								"_startAirdropSince()": "infinite",
								"_startVoting()": "infinite",
								"_stopVoting()": "infinite",
								"_withdrawStake(address)": "infinite",
								"calculatePenalty(uint256,uint256)": "infinite",
								"calculateStakeReward(struct Stakable.Stake memory)": "infinite",
								"calculateStakingDuration(uint256)": "infinite",
								"calculateStakingWithPenalty(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 155,
									"end": 10950,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 155,
									"end": 10950,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 155,
									"end": 10950,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 767,
									"end": 909,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 767,
									"end": 909,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 767,
									"end": 909,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 767,
									"end": 909,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 767,
									"end": 909,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 767,
									"end": 909,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 767,
									"end": 909,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 767,
									"end": 909,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 767,
									"end": 909,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 767,
									"end": 909,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 874,
									"end": 876,
									"name": "PUSH",
									"source": 1,
									"value": "F"
								},
								{
									"begin": 853,
									"end": 871,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 853,
									"end": 876,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 900,
									"end": 902,
									"name": "PUSH",
									"source": 1,
									"value": "50"
								},
								{
									"begin": 886,
									"end": 897,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 886,
									"end": 902,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 155,
									"end": 10950,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 155,
									"end": 10950,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 155,
									"end": 10950,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 155,
									"end": 10950,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 155,
									"end": 10950,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 155,
									"end": 10950,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 155,
									"end": 10950,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207b8e9e5b256961811554ba61be9b2c5a28fc04136963692d26e7329172d6adbe64736f6c634300080b0033",
									".code": [
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "A143A5F2"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "B87DA76D"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "B87DA76D"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "CB79C2E1"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "CBB3E152"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "A143A5F2"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "A3EC138D"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "A7771EE3"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "5F5300FF"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "5F5300FF"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "632A9A52"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "8891CF0D"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "70C8B74"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "10486B6A"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 155,
											"end": 10950,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 10158,
											"end": 10505,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 10158,
											"end": 10505,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10158,
											"end": 10505,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 10158,
											"end": 10505,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 10158,
											"end": 10505,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10158,
											"end": 10505,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 10158,
											"end": 10505,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10158,
											"end": 10505,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 168,
											"end": 172,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 210,
											"end": 213,
											"name": "PUSH",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 199,
											"end": 208,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 195,
											"end": 214,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 187,
											"end": 214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 187,
											"end": 214,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 247,
											"end": 253,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 241,
											"end": 254,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 230,
											"end": 239,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 223,
											"end": 255,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 311,
											"end": 315,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 303,
											"end": 309,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 299,
											"end": 316,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 293,
											"end": 317,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 286,
											"end": 290,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 275,
											"end": 284,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 271,
											"end": 291,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 264,
											"end": 318,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 365,
											"end": 369,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 357,
											"end": 363,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 353,
											"end": 370,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 347,
											"end": 371,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 419,
											"end": 431,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 413,
											"end": 432,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 409,
											"end": 477,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 402,
											"end": 406,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 391,
											"end": 400,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 387,
											"end": 407,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 380,
											"end": 478,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 538,
											"end": 542,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 524,
											"end": 536,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 520,
											"end": 543,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 514,
											"end": 544,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 509,
											"end": 511,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 498,
											"end": 507,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 494,
											"end": 512,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 487,
											"end": 545,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 606,
											"end": 610,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 592,
											"end": 604,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 588,
											"end": 611,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 582,
											"end": 612,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 576,
											"end": 579,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 565,
											"end": 574,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 561,
											"end": 580,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 554,
											"end": 613,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 674,
											"end": 676,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 660,
											"end": 672,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 656,
											"end": 677,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 650,
											"end": 678,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 644,
											"end": 647,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 633,
											"end": 642,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 629,
											"end": 648,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 622,
											"end": 679,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 740,
											"end": 743,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 726,
											"end": 738,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 722,
											"end": 744,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 716,
											"end": 745,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 710,
											"end": 713,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 699,
											"end": 708,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 695,
											"end": 714,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 688,
											"end": 746,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 807,
											"end": 810,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 793,
											"end": 805,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 789,
											"end": 811,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 783,
											"end": 812,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 777,
											"end": 780,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 766,
											"end": 775,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 762,
											"end": 781,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 755,
											"end": 813,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 874,
											"end": 877,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 860,
											"end": 872,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 856,
											"end": 878,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 850,
											"end": 879,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 844,
											"end": 847,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 833,
											"end": 842,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 829,
											"end": 848,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 822,
											"end": 880,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 822,
											"end": 880,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14,
											"end": 886,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 14,
											"end": 886,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14,
											"end": 886,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14,
											"end": 886,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14,
											"end": 886,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "tag",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 638,
											"end": 664,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 638,
											"end": 664,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 638,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 638,
											"end": 664,
											"name": "PUSH",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 638,
											"end": 664,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 638,
											"end": 664,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 638,
											"end": 664,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 638,
											"end": 664,
											"name": "tag",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 638,
											"end": 664,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 638,
											"end": 664,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 638,
											"end": 664,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1037,
											"end": 1062,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1037,
											"end": 1062,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1037,
											"end": 1062,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1025,
											"end": 1027,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1010,
											"end": 1028,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 638,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 891,
											"end": 1068,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9814,
											"end": 10152,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 9814,
											"end": 10152,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9814,
											"end": 10152,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 9814,
											"end": 10152,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 9814,
											"end": 10152,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 507,
											"end": 533,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 507,
											"end": 533,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 507,
											"end": 533,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 507,
											"end": 533,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 507,
											"end": 533,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 507,
											"end": 533,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 507,
											"end": 533,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 715,
											"end": 760,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 715,
											"end": 760,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 715,
											"end": 760,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 715,
											"end": 760,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 715,
											"end": 760,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 715,
											"end": 760,
											"name": "tag",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 715,
											"end": 760,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "PUSH",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 715,
											"end": 760,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 715,
											"end": 760,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 715,
											"end": 760,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 715,
											"end": 760,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 715,
											"end": 760,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "tag",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "tag",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 670,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 670,
											"end": 709,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1737,
											"end": 1751,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1737,
											"end": 1751,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1730,
											"end": 1752,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1712,
											"end": 1753,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1712,
											"end": 1753,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1700,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1685,
											"end": 1703,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 670,
											"end": 709,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 1572,
											"end": 1759,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "tag",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 539,
											"end": 566,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 539,
											"end": 566,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 539,
											"end": 566,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 539,
											"end": 566,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 539,
											"end": 566,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 566,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 539,
											"end": 566,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 468,
											"end": 501,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 468,
											"end": 501,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 468,
											"end": 501,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 468,
											"end": 501,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 468,
											"end": 501,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 468,
											"end": 501,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 468,
											"end": 501,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9151,
											"end": 9355,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 9151,
											"end": 9355,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9151,
											"end": 9355,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 9151,
											"end": 9355,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 9151,
											"end": 9355,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10158,
											"end": 10505,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 10158,
											"end": 10505,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 1289,
											"end": 1307,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "tag",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10230,
											"end": 10240,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 10223,
											"end": 10241,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10223,
											"end": 10241,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10223,
											"end": 10241,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10223,
											"end": 10241,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10223,
											"end": 10229,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 10223,
											"end": 10241,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10223,
											"end": 10241,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10223,
											"end": 10241,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10223,
											"end": 10241,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10223,
											"end": 10241,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10223,
											"end": 10253,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10223,
											"end": 10253,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 10223,
											"end": 10253,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10223,
											"end": 10261,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 10223,
											"end": 10261,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 10223,
											"end": 10253,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10223,
											"end": 10261,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1966,
											"end": 1968,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1948,
											"end": 1969,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2005,
											"end": 2007,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1985,
											"end": 2003,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1985,
											"end": 2003,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1985,
											"end": 2003,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1978,
											"end": 2008,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2044,
											"end": 2065,
											"name": "PUSH",
											"source": 2,
											"value": "596F7520617265206E6F74206120766F74657200000000000000000000000000"
										},
										{
											"begin": 2024,
											"end": 2042,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2024,
											"end": 2042,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2024,
											"end": 2042,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2017,
											"end": 2066,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2083,
											"end": 2101,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2083,
											"end": 2101,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "tag",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 10215,
											"end": 10285,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10323,
											"end": 10333,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10322,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10334,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10341,
											"end": 10350,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10341,
											"end": 10350,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10351,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10351,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10340,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10316,
											"end": 10340,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10340,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10340,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10351,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10351,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10351,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10351,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10351,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10351,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10351,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10351,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 10316,
											"end": 10351,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10359,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10359,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 10316,
											"end": 10359,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2314,
											"end": 2316,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2296,
											"end": 2317,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2353,
											"end": 2355,
											"name": "PUSH",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2333,
											"end": 2351,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2333,
											"end": 2351,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2333,
											"end": 2351,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2326,
											"end": 2356,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2392,
											"end": 2416,
											"name": "PUSH",
											"source": 2,
											"value": "596F752068617665206E6F7420766F7465642079657400000000000000000000"
										},
										{
											"begin": 2372,
											"end": 2390,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2372,
											"end": 2390,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2372,
											"end": 2390,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2417,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2434,
											"end": 2452,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2434,
											"end": 2452,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 2112,
											"end": 2458,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "tag",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 10295,
											"end": 10407,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10443,
											"end": 10452,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10443,
											"end": 10452,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10418,
											"end": 10436,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10418,
											"end": 10453,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10418,
											"end": 10453,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10418,
											"end": 10453,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10472,
											"end": 10482,
											"name": "PUSH",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 10418,
											"end": 10436,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10472,
											"end": 10493,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10418,
											"end": 10436,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10472,
											"end": 10493,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10472,
											"end": 10493,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10472,
											"end": 10498,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10472,
											"end": 10498,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10418,
											"end": 10442,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10418,
											"end": 10442,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10418,
											"end": 10436,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10472,
											"end": 10498,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 10472,
											"end": 10498,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10418,
											"end": 10442,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10418,
											"end": 10442,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10472,
											"end": 10498,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 10472,
											"end": 10498,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10472,
											"end": 10498,
											"name": "tag",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 10472,
											"end": 10498,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10472,
											"end": 10498,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10472,
											"end": 10498,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10472,
											"end": 10498,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10158,
											"end": 10505,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7339,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 7339,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 7339,
											"end": 7360,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7339,
											"end": 7360,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 7339,
											"end": 7360,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7411,
											"end": 7421,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7395,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7398,
											"end": 7422,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7398,
											"end": 7422,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7398,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7398,
											"end": 7410,
											"name": "PUSH",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 7398,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7398,
											"end": 7422,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7398,
											"end": 7422,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7398,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7398,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7398,
											"end": 7422,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7398,
											"end": 7422,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7398,
											"end": 7422,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "140"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "C0"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "PUSH",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7485,
											"end": 7495,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7485,
											"end": 7495,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7522,
											"end": 7542,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7522,
											"end": 7542,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7372,
											"end": 7422,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7464,
											"end": 7496,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7506,
											"end": 7543,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 7506,
											"end": 7543,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7506,
											"end": 7521,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 7506,
											"end": 7543,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7506,
											"end": 7543,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 7506,
											"end": 7543,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7554,
											"end": 7577,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7580,
											"end": 7615,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 7601,
											"end": 7608,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7601,
											"end": 7614,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7601,
											"end": 7614,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7601,
											"end": 7614,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7580,
											"end": 7600,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 7580,
											"end": 7615,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7580,
											"end": 7615,
											"name": "tag",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 7580,
											"end": 7615,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7554,
											"end": 7615,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7554,
											"end": 7615,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7625,
											"end": 7640,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7683,
											"end": 7698,
											"name": "TIMESTAMP",
											"source": 1
										},
										{
											"begin": 7655,
											"end": 7662,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7655,
											"end": 7668,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7655,
											"end": 7668,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7655,
											"end": 7668,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7655,
											"end": 7680,
											"name": "PUSH",
											"source": 1,
											"value": "C0"
										},
										{
											"begin": 7655,
											"end": 7680,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7655,
											"end": 7680,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7655,
											"end": 7698,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 7651,
											"end": 7932,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7651,
											"end": 7932,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 7651,
											"end": 7932,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7715,
											"end": 7737,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7739,
											"end": 7761,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7765,
											"end": 7866,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 7799,
											"end": 7806,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7799,
											"end": 7812,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7799,
											"end": 7812,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7799,
											"end": 7812,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7799,
											"end": 7819,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7799,
											"end": 7819,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7799,
											"end": 7819,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7852,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7765,
											"end": 7781,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 7765,
											"end": 7866,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7765,
											"end": 7866,
											"name": "tag",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 7765,
											"end": 7866,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7714,
											"end": 7866,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7714,
											"end": 7866,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7714,
											"end": 7866,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7890,
											"end": 7921,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 7714,
											"end": 7866,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7714,
											"end": 7866,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7890,
											"end": 7921,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 7890,
											"end": 7921,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7890,
											"end": 7921,
											"name": "tag",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 7890,
											"end": 7921,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7880,
											"end": 7921,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7880,
											"end": 7921,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7700,
											"end": 7932,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7700,
											"end": 7932,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7651,
											"end": 7932,
											"name": "tag",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 7651,
											"end": 7932,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7985,
											"end": 7986,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7946,
											"end": 7982,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 7961,
											"end": 7965,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7961,
											"end": 7981,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7961,
											"end": 7981,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7961,
											"end": 7981,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7960,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 7946,
											"end": 7982,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7946,
											"end": 7982,
											"name": "tag",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 7946,
											"end": 7982,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7986,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 7942,
											"end": 8191,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7942,
											"end": 8191,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "82"
										},
										{
											"begin": 7942,
											"end": 8191,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 8002,
											"end": 8017,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8020,
											"end": 8059,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "83"
										},
										{
											"begin": 8038,
											"end": 8045,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8038,
											"end": 8051,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8038,
											"end": 8051,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8038,
											"end": 8051,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8038,
											"end": 8058,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8038,
											"end": 8058,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8038,
											"end": 8058,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8020,
											"end": 8037,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 8020,
											"end": 8059,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8020,
											"end": 8059,
											"name": "tag",
											"source": 1,
											"value": "83"
										},
										{
											"begin": 8020,
											"end": 8059,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8073,
											"end": 8086,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8073,
											"end": 8086,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 8073,
											"end": 8086,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8073,
											"end": 8086,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8073,
											"end": 8104,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 8073,
											"end": 8104,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8073,
											"end": 8114,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7942,
											"end": 8191,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 7942,
											"end": 8191,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7942,
											"end": 8191,
											"name": "tag",
											"source": 1,
											"value": "82"
										},
										{
											"begin": 7942,
											"end": 8191,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8145,
											"end": 8158,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8145,
											"end": 8158,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8145,
											"end": 8158,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8145,
											"end": 8158,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8179,
											"end": 8180,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8145,
											"end": 8176,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 8145,
											"end": 8176,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8145,
											"end": 8176,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8145,
											"end": 8176,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8145,
											"end": 8180,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7942,
											"end": 8191,
											"name": "tag",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 7942,
											"end": 8191,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8201,
											"end": 8214,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8201,
											"end": 8214,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8201,
											"end": 8214,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8201,
											"end": 8214,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8201,
											"end": 8214,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8201,
											"end": 8224,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 8201,
											"end": 8224,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8201,
											"end": 8242,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8201,
											"end": 8242,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8201,
											"end": 8242,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8201,
											"end": 8242,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8252,
											"end": 8267,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8252,
											"end": 8267,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8252,
											"end": 8267,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8252,
											"end": 8267,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8252,
											"end": 8277,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8252,
											"end": 8277,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8252,
											"end": 8277,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8252,
											"end": 8277,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8310,
											"end": 8323,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8310,
											"end": 8323,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8310,
											"end": 8330,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8310,
											"end": 8330,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8287,
											"end": 8330,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8287,
											"end": 8330,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8201,
											"end": 8208,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7296,
											"end": 8362,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 9814,
											"end": 10152,
											"name": "tag",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 9814,
											"end": 10152,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 1289,
											"end": 1307,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "tag",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9879,
											"end": 9889,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 9872,
											"end": 9890,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9872,
											"end": 9890,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9872,
											"end": 9890,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9872,
											"end": 9890,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9872,
											"end": 9878,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 9872,
											"end": 9890,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 9872,
											"end": 9890,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9872,
											"end": 9890,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9872,
											"end": 9890,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9872,
											"end": 9890,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 9872,
											"end": 9902,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 9872,
											"end": 9902,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 9872,
											"end": 9902,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 9872,
											"end": 9910,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 9872,
											"end": 9910,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 9872,
											"end": 9902,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 9872,
											"end": 9910,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "89"
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1966,
											"end": 1968,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1948,
											"end": 1969,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2005,
											"end": 2007,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1985,
											"end": 2003,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1985,
											"end": 2003,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1985,
											"end": 2003,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1978,
											"end": 2008,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2044,
											"end": 2065,
											"name": "PUSH",
											"source": 2,
											"value": "596F7520617265206E6F74206120766F74657200000000000000000000000000"
										},
										{
											"begin": 2024,
											"end": 2042,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2024,
											"end": 2042,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2024,
											"end": 2042,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2017,
											"end": 2066,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2083,
											"end": 2101,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2083,
											"end": 2101,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 1764,
											"end": 2107,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "tag",
											"source": 1,
											"value": "89"
										},
										{
											"begin": 9864,
											"end": 9934,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9972,
											"end": 9982,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 9971,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 9990,
											"end": 9999,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 9990,
											"end": 9999,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 10000,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 10000,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 9989,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 9965,
											"end": 9989,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 10000,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 10000,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 10000,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 10000,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 10000,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 10000,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 10000,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 9965,
											"end": 10000,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 9965,
											"end": 10009,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3117,
											"end": 3119,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3156,
											"end": 3158,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 3136,
											"end": 3154,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3136,
											"end": 3154,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3136,
											"end": 3154,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3129,
											"end": 3159,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3195,
											"end": 3218,
											"name": "PUSH",
											"source": 2,
											"value": "596F75206861766520766F746564206265666F72650000000000000000000000"
										},
										{
											"begin": 3175,
											"end": 3193,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3175,
											"end": 3193,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3175,
											"end": 3193,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3168,
											"end": 3219,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3236,
											"end": 3254,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3236,
											"end": 3254,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 2915,
											"end": 3260,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "tag",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 9944,
											"end": 10056,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10074,
											"end": 10084,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10073,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10085,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10092,
											"end": 10101,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10092,
											"end": 10101,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10092,
											"end": 10101,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10102,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10102,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10105,
											"end": 10109,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10067,
											"end": 10091,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10091,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10091,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10102,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10102,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10102,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10102,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10102,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10109,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10109,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10067,
											"end": 10109,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10109,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10109,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10109,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10067,
											"end": 10109,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 10130,
											"end": 10139,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10140,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10140,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10129,
											"name": "PUSH",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 10119,
											"end": 10140,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10140,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10140,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10140,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10140,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10145,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10145,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10105,
											"end": 10109,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10105,
											"end": 10109,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10140,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10140,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10145,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 10119,
											"end": 10145,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10105,
											"end": 10109,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10105,
											"end": 10109,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10119,
											"end": 10145,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 10119,
											"end": 10145,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9691,
											"end": 9695,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9715,
											"end": 9736,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9715,
											"end": 9736,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "96"
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 3469,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3449,
											"end": 3470,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3506,
											"end": 3508,
											"name": "PUSH",
											"source": 2,
											"value": "F"
										},
										{
											"begin": 3486,
											"end": 3504,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3486,
											"end": 3504,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3486,
											"end": 3504,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3479,
											"end": 3509,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3545,
											"end": 3562,
											"name": "PUSH",
											"source": 2,
											"value": "496E76616C696420616464726573730000000000000000000000000000000000"
										},
										{
											"begin": 3525,
											"end": 3543,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3525,
											"end": 3543,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3525,
											"end": 3543,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3518,
											"end": 3563,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3580,
											"end": 3598,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3580,
											"end": 3598,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3265,
											"end": 3604,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "tag",
											"source": 1,
											"value": "96"
										},
										{
											"begin": 9707,
											"end": 9756,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9774,
											"end": 9789,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 9774,
											"end": 9789,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9774,
											"end": 9789,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9774,
											"end": 9789,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9774,
											"end": 9789,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9774,
											"end": 9780,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 9774,
											"end": 9789,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 9774,
											"end": 9789,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9774,
											"end": 9789,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9774,
											"end": 9789,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9774,
											"end": 9789,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 9774,
											"end": 9801,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 9774,
											"end": 9801,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 9774,
											"end": 9801,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 9774,
											"end": 9801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9636,
											"end": 9808,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 9151,
											"end": 9355,
											"name": "tag",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 9151,
											"end": 9355,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9195,
											"end": 9202,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9218,
											"end": 9230,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 9218,
											"end": 9230,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 9234,
											"end": 9235,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9218,
											"end": 9235,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 9214,
											"end": 9349,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 9214,
											"end": 9349,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9293,
											"end": 9299,
											"name": "PUSH",
											"source": 1,
											"value": "93A80"
										},
										{
											"begin": 9277,
											"end": 9289,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 9277,
											"end": 9289,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 9259,
											"end": 9274,
											"name": "TIMESTAMP",
											"source": 1
										},
										{
											"begin": 9259,
											"end": 9289,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "101"
										},
										{
											"begin": 9259,
											"end": 9289,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9259,
											"end": 9289,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9259,
											"end": 9289,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 9259,
											"end": 9289,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 9259,
											"end": 9289,
											"name": "tag",
											"source": 1,
											"value": "101"
										},
										{
											"begin": 9259,
											"end": 9289,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9258,
											"end": 9299,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 9258,
											"end": 9299,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9258,
											"end": 9299,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9258,
											"end": 9299,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 9258,
											"end": 9299,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 9258,
											"end": 9299,
											"name": "tag",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 9258,
											"end": 9299,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9251,
											"end": 9299,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9251,
											"end": 9299,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9151,
											"end": 9355,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9151,
											"end": 9355,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 9214,
											"end": 9349,
											"name": "tag",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 9214,
											"end": 9349,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9337,
											"end": 9338,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9337,
											"end": 9338,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9151,
											"end": 9355,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1135,
											"end": 1245,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 1135,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1197,
											"end": 1210,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 1197,
											"end": 1210,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1197,
											"end": 1210,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 1197,
											"end": 1210,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4279,
											"end": 4281,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4261,
											"end": 4282,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4318,
											"end": 4320,
											"name": "PUSH",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 4298,
											"end": 4316,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 4298,
											"end": 4316,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4298,
											"end": 4316,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4291,
											"end": 4321,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4357,
											"end": 4382,
											"name": "PUSH",
											"source": 2,
											"value": "566F74696E67206973206E6F7420617661696C61626C65000000000000000000"
										},
										{
											"begin": 4337,
											"end": 4355,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 4337,
											"end": 4355,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4337,
											"end": 4355,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4330,
											"end": 4383,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4400,
											"end": 4418,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 4400,
											"end": 4418,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 4077,
											"end": 4424,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "tag",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 1189,
											"end": 1238,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1135,
											"end": 1245,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1020,
											"end": 1129,
											"name": "tag",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 1020,
											"end": 1129,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1102,
											"end": 1103,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1093,
											"end": 1099,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1093,
											"end": 1103,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4631,
											"end": 4633,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4613,
											"end": 4634,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4670,
											"end": 4672,
											"name": "PUSH",
											"source": 2,
											"value": "E"
										},
										{
											"begin": 4650,
											"end": 4668,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 4650,
											"end": 4668,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4650,
											"end": 4668,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4643,
											"end": 4673,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4709,
											"end": 4725,
											"name": "PUSH",
											"source": 2,
											"value": "4E6F205374616B6520466F756E64000000000000000000000000000000000000"
										},
										{
											"begin": 4689,
											"end": 4707,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 4689,
											"end": 4707,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4689,
											"end": 4707,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4682,
											"end": 4726,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4743,
											"end": 4761,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 4743,
											"end": 4761,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 4429,
											"end": 4767,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "tag",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 1085,
											"end": 1122,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1020,
											"end": 1129,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1020,
											"end": 1129,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5097,
											"end": 5532,
											"name": "tag",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 5097,
											"end": 5532,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5199,
											"end": 5206,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5226,
											"end": 5236,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5226,
											"end": 5243,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5226,
											"end": 5243,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5226,
											"end": 5243,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5247,
											"end": 5248,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5226,
											"end": 5248,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 5222,
											"end": 5283,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5222,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 5222,
											"end": 5283,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5271,
											"end": 5272,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5271,
											"end": 5272,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5097,
											"end": 5532,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5097,
											"end": 5532,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5222,
											"end": 5283,
											"name": "tag",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 5222,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5521,
											"end": 5525,
											"name": "PUSH",
											"source": 1,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 5475,
											"end": 5517,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 5500,
											"end": 5510,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5500,
											"end": 5516,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5500,
											"end": 5516,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5500,
											"end": 5516,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5475,
											"end": 5499,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 5475,
											"end": 5517,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5475,
											"end": 5517,
											"name": "tag",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 5475,
											"end": 5517,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5436,
											"end": 5446,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5436,
											"end": 5456,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 5436,
											"end": 5456,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5436,
											"end": 5456,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5400,
											"end": 5410,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5400,
											"end": 5417,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5400,
											"end": 5417,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5400,
											"end": 5417,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5400,
											"end": 5456,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 5400,
											"end": 5456,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5400,
											"end": 5456,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5400,
											"end": 5456,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 5400,
											"end": 5456,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5400,
											"end": 5456,
											"name": "tag",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 5400,
											"end": 5456,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5400,
											"end": 5517,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 5400,
											"end": 5517,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5400,
											"end": 5517,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5400,
											"end": 5517,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 5400,
											"end": 5517,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5400,
											"end": 5517,
											"name": "tag",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 5400,
											"end": 5517,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5399,
											"end": 5525,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 5399,
											"end": 5525,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5399,
											"end": 5525,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5399,
											"end": 5525,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 5399,
											"end": 5525,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5399,
											"end": 5525,
											"name": "tag",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 5399,
											"end": 5525,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5380,
											"end": 5525,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5097,
											"end": 5532,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5097,
											"end": 5532,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5538,
											"end": 5847,
											"name": "tag",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 5538,
											"end": 5847,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5643,
											"end": 5650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5652,
											"end": 5659,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5696,
											"end": 5756,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 5709,
											"end": 5749,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 5722,
											"end": 5728,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5730,
											"end": 5748,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5730,
											"end": 5748,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5709,
											"end": 5721,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 5709,
											"end": 5749,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5709,
											"end": 5749,
											"name": "tag",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 5709,
											"end": 5749,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5751,
											"end": 5755,
											"name": "PUSH",
											"source": 1,
											"value": "3E8"
										},
										{
											"begin": 5696,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 5696,
											"end": 5756,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5696,
											"end": 5756,
											"name": "tag",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 5696,
											"end": 5756,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5770,
											"end": 5830,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 5783,
											"end": 5823,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 5796,
											"end": 5802,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5804,
											"end": 5822,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5804,
											"end": 5822,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5783,
											"end": 5795,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 5783,
											"end": 5823,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5770,
											"end": 5830,
											"name": "tag",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 5770,
											"end": 5830,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5675,
											"end": 5840,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5675,
											"end": 5840,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5675,
											"end": 5840,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5675,
											"end": 5840,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5538,
											"end": 5847,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5538,
											"end": 5847,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5538,
											"end": 5847,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5538,
											"end": 5847,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5538,
											"end": 5847,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5538,
											"end": 5847,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2916,
											"end": 3048,
											"name": "tag",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 2916,
											"end": 3048,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2978,
											"end": 2985,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3041,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 3034,
											"end": 3040,
											"name": "PUSH",
											"source": 1,
											"value": "93A80"
										},
										{
											"begin": 3005,
											"end": 3028,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 3023,
											"end": 3028,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3005,
											"end": 3020,
											"name": "TIMESTAMP",
											"source": 1
										},
										{
											"begin": 3005,
											"end": 3028,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 3005,
											"end": 3028,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3005,
											"end": 3028,
											"name": "tag",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 3005,
											"end": 3028,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 3004,
											"end": 3041,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8473,
											"end": 8652,
											"name": "tag",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 8473,
											"end": 8652,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8568,
											"end": 8575,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8637,
											"end": 8645,
											"name": "PUSH",
											"source": 1,
											"value": "1DFE200"
										},
										{
											"begin": 8629,
											"end": 8633,
											"name": "PUSH",
											"source": 1,
											"value": "3E8"
										},
										{
											"begin": 8614,
											"end": 8625,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 8614,
											"end": 8625,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 8600,
											"end": 8611,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8600,
											"end": 8625,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 8600,
											"end": 8625,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8600,
											"end": 8625,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8600,
											"end": 8625,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 8600,
											"end": 8625,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8600,
											"end": 8625,
											"name": "tag",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 8600,
											"end": 8625,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8599,
											"end": 8633,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 8599,
											"end": 8633,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8599,
											"end": 8633,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8599,
											"end": 8633,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 8599,
											"end": 8633,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4690,
											"end": 5091,
											"name": "tag",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 4690,
											"end": 5091,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4787,
											"end": 4794,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4827,
											"end": 4828,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4818,
											"end": 4824,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4818,
											"end": 4828,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5147,
											"end": 5149,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5129,
											"end": 5150,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5186,
											"end": 5188,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 5166,
											"end": 5184,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 5166,
											"end": 5184,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5166,
											"end": 5184,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5159,
											"end": 5189,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5225,
											"end": 5244,
											"name": "PUSH",
											"source": 2,
											"value": "4572726F722074696D657374616D702030000000000000000000000000000000"
										},
										{
											"begin": 5205,
											"end": 5223,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 5205,
											"end": 5223,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5205,
											"end": 5223,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5198,
											"end": 5245,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5262,
											"end": 5280,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 5262,
											"end": 5280,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 4945,
											"end": 5286,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "tag",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 4810,
											"end": 4850,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 4963,
											"end": 4987,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "140"
										},
										{
											"begin": 4981,
											"end": 4987,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4963,
											"end": 4978,
											"name": "TIMESTAMP",
											"source": 1
										},
										{
											"begin": 4963,
											"end": 4987,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 4963,
											"end": 4987,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4963,
											"end": 4987,
											"name": "tag",
											"source": 1,
											"value": "140"
										},
										{
											"begin": 4963,
											"end": 4987,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4962,
											"end": 4995,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "141"
										},
										{
											"begin": 4962,
											"end": 4995,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4991,
											"end": 4995,
											"name": "PUSH",
											"source": 1,
											"value": "D3C21BCECCEDA1000000"
										},
										{
											"begin": 4962,
											"end": 4995,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 4962,
											"end": 4995,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4962,
											"end": 4995,
											"name": "tag",
											"source": 1,
											"value": "141"
										},
										{
											"begin": 4962,
											"end": 4995,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5021,
											"name": "PUSH",
											"source": 1,
											"value": "1E13380"
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "PUSH",
											"source": 1,
											"value": "1D"
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "PUSH",
											"source": 1,
											"value": "4572726F722063616E6E6F74206469766964652074696D657374616D70000000"
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "142"
										},
										{
											"begin": 4932,
											"end": 5084,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3451,
											"end": 3547,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 3451,
											"end": 3547,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3509,
											"end": 3516,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 3539,
											"end": 3540,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3535,
											"end": 3536,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "tag",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3528,
											"end": 3540,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3451,
											"end": 3547,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3451,
											"end": 3547,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3836,
											"end": 3932,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 3836,
											"end": 3932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3894,
											"end": 3901,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3920,
											"end": 3925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 3924,
											"end": 3925,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3920,
											"end": 3921,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3920,
											"end": 3925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 3920,
											"end": 3925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5660,
											"end": 5890,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 5660,
											"end": 5890,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5776,
											"end": 5783,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5834,
											"end": 5846,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5827,
											"end": 5832,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "tag",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5872,
											"end": 5873,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5869,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "tag",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 5660,
											"end": 5890,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5660,
											"end": 5890,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "69"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "154"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "154"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 1073,
											"end": 1253,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 1073,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1132,
											"end": 1138,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1185,
											"end": 1187,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1173,
											"end": 1182,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1164,
											"end": 1171,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1160,
											"end": 1183,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1156,
											"end": 1188,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1153,
											"end": 1205,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1153,
											"end": 1205,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 1153,
											"end": 1205,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1201,
											"end": 1202,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1198,
											"end": 1199,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1191,
											"end": 1203,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1153,
											"end": 1205,
											"name": "tag",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 1153,
											"end": 1205,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1224,
											"end": 1247,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1224,
											"end": 1247,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1073,
											"end": 1253,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1073,
											"end": 1253,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1258,
											"end": 1567,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 1258,
											"end": 1567,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1317,
											"end": 1323,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1370,
											"end": 1372,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1358,
											"end": 1367,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1349,
											"end": 1356,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1345,
											"end": 1368,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1341,
											"end": 1373,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1338,
											"end": 1390,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1338,
											"end": 1390,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 1338,
											"end": 1390,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1386,
											"end": 1387,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1383,
											"end": 1384,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1376,
											"end": 1388,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1338,
											"end": 1390,
											"name": "tag",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 1338,
											"end": 1390,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1425,
											"end": 1434,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1412,
											"end": 1435,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1468,
											"end": 1473,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1464,
											"end": 1518,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1457,
											"end": 1462,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1454,
											"end": 1519,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1444,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 1444,
											"end": 1537,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1533,
											"end": 1534,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1530,
											"end": 1531,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1523,
											"end": 1535,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2463,
											"end": 2647,
											"name": "tag",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 2463,
											"end": 2647,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2512,
											"end": 2513,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2593,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2612,
											"end": 2616,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 2609,
											"end": 2610,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2602,
											"end": 2617,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2636,
											"end": 2640,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2633,
											"end": 2634,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2626,
											"end": 2641,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2652,
											"end": 2777,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2652,
											"end": 2777,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2692,
											"end": 2696,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2720,
											"end": 2721,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2717,
											"end": 2718,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2714,
											"end": 2722,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2711,
											"end": 2745,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2711,
											"end": 2745,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 2711,
											"end": 2745,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2725,
											"end": 2743,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 2725,
											"end": 2743,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 2725,
											"end": 2743,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2725,
											"end": 2743,
											"name": "tag",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 2725,
											"end": 2743,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2762,
											"end": 2771,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2762,
											"end": 2771,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2652,
											"end": 2777,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2782,
											"end": 2910,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 2782,
											"end": 2910,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2825,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2853,
											"end": 2854,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2849,
											"end": 2855,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2846,
											"end": 2847,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2843,
											"end": 2856,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2840,
											"end": 2879,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2840,
											"end": 2879,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 2840,
											"end": 2879,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2859,
											"end": 2877,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 2859,
											"end": 2877,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 2859,
											"end": 2877,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2859,
											"end": 2877,
											"name": "tag",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 2859,
											"end": 2877,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2895,
											"end": 2904,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2895,
											"end": 2904,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2782,
											"end": 2910,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3609,
											"end": 3793,
											"name": "tag",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 3609,
											"end": 3793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3658,
											"end": 3659,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3651,
											"end": 3739,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3762,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3755,
											"end": 3756,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3748,
											"end": 3763,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3782,
											"end": 3786,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3779,
											"end": 3780,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3772,
											"end": 3787,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3798,
											"end": 4072,
											"name": "tag",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 3798,
											"end": 4072,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3838,
											"end": 3839,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3864,
											"end": 3865,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3854,
											"end": 4043,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 3854,
											"end": 4043,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3896,
											"end": 3897,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3889,
											"end": 3977,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4000,
											"end": 4004,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3997,
											"end": 3998,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3990,
											"end": 4005,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4028,
											"end": 4032,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 4025,
											"end": 4026,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4018,
											"end": 4033,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3854,
											"end": 4043,
											"name": "tag",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 3854,
											"end": 4043,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4057,
											"end": 4066,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4066,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3798,
											"end": 4072,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4772,
											"end": 4940,
											"name": "tag",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 4772,
											"end": 4940,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4812,
											"end": 4819,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4878,
											"end": 4879,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4874,
											"end": 4875,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4870,
											"end": 4876,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 4866,
											"end": 4880,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 4863,
											"end": 4864,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4860,
											"end": 4881,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 4855,
											"end": 4856,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4857,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4841,
											"end": 4858,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4837,
											"end": 4882,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4834,
											"end": 4905,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4834,
											"end": 4905,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 4834,
											"end": 4905,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4885,
											"end": 4903,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 4885,
											"end": 4903,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 4885,
											"end": 4903,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4885,
											"end": 4903,
											"name": "tag",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 4885,
											"end": 4903,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4925,
											"end": 4934,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 4925,
											"end": 4934,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4772,
											"end": 4940,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5291,
											"end": 5888,
											"name": "tag",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 5291,
											"end": 5888,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5403,
											"end": 5407,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5432,
											"end": 5434,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5461,
											"end": 5463,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5450,
											"end": 5459,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5493,
											"end": 5499,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5487,
											"end": 5500,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5536,
											"end": 5542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5531,
											"end": 5533,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5520,
											"end": 5529,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5516,
											"end": 5534,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5509,
											"end": 5543,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5561,
											"end": 5562,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5571,
											"end": 5711,
											"name": "tag",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 5571,
											"end": 5711,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5585,
											"end": 5591,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5582,
											"end": 5583,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5579,
											"end": 5592,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 5571,
											"end": 5711,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5571,
											"end": 5711,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 5571,
											"end": 5711,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5680,
											"end": 5694,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5680,
											"end": 5694,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5680,
											"end": 5694,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5676,
											"end": 5699,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5676,
											"end": 5699,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5670,
											"end": 5700,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 5663,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 5663,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 5663,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5665,
											"end": 5667,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5642,
											"end": 5668,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5635,
											"end": 5701,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5600,
											"end": 5610,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5600,
											"end": 5610,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5571,
											"end": 5711,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 5571,
											"end": 5711,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5571,
											"end": 5711,
											"name": "tag",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 5571,
											"end": 5711,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5729,
											"end": 5735,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5726,
											"end": 5727,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5723,
											"end": 5736,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 5720,
											"end": 5811,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5720,
											"end": 5811,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 5720,
											"end": 5811,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5799,
											"end": 5800,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5794,
											"end": 5796,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5785,
											"end": 5791,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5774,
											"end": 5783,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5770,
											"end": 5792,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5766,
											"end": 5797,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 5801,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5720,
											"end": 5811,
											"name": "tag",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 5720,
											"end": 5811,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5872,
											"end": 5874,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 5851,
											"end": 5866,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5847,
											"end": 5876,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5832,
											"end": 5877,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5832,
											"end": 5877,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5832,
											"end": 5877,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5832,
											"end": 5877,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5879,
											"end": 5881,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5828,
											"end": 5882,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5828,
											"end": 5882,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 5291,
											"end": 5888,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5291,
											"end": 5888,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"airdropRate()": "8891cf0d",
							"airdropSince()": "b87da76d",
							"airdropWeek()": "cbb3e152",
							"hasStake()": "10486b6a",
							"isVoter(address)": "a7771ee3",
							"retractVote()": "070c8b74",
							"stakingPenaltyRate()": "cb79c2e1",
							"totalVoters()": "5f5300ff",
							"vote()": "632a9a52",
							"votedUsers(uint256)": "a143a5f2",
							"voters(address)": "a3ec138d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdropRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable_airdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Stakable.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"internalType\":\"struct Stakable.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"isVoter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retractVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"votingRight\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"Staked(address,uint256,uint256,uint256)\":{\"notice\":\"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stakable.sol\":\"Stakable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2\",\"dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y\"]},\"contracts/Stakable.sol\":{\"keccak256\":\"0xdb7c3cb146bb07afead78e844d9e32c286d67f1863164085755e96aebc1ca309\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://793d6cd81eb6c29c499d590ade25ce8bcbcc50cdb10daefff3037c2f2da04d75\",\"dweb:/ipfs/QmTvPSRnWsMuTa6LbY22QbK33Dmg2woAvE7983R5Q3si93\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 328,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "stakingPenaltyRate",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 330,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "airdropRate",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 332,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "airdropSince",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 334,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "_votingStatus",
								"offset": 0,
								"slot": "3",
								"type": "t_bool"
							},
							{
								"astId": 336,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "_votingId",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 338,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "totalVoters",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 343,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "voters",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_struct(Voter)326_storage)"
							},
							{
								"astId": 347,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "votedUsers",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 425,
								"contract": "contracts/Stakable.sol:Stakable",
								"label": "stakeholders",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_struct(Stakeholder)411_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Stakeholder)411_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Stakable.Stakeholder)",
								"numberOfBytes": "32",
								"value": "t_struct(Stakeholder)411_storage"
							},
							"t_mapping(t_address,t_struct(Voter)326_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Stakable.Voter)",
								"numberOfBytes": "32",
								"value": "t_struct(Voter)326_storage"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Stake)403_storage": {
								"encoding": "inplace",
								"label": "struct Stakable.Stake",
								"members": [
									{
										"astId": 390,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "user",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 392,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "amount",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 394,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "since",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 396,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "claimable",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 398,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "claimable_airdrop",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 400,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "rewardAPY",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 402,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "releaseTime",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_struct(Stakeholder)411_storage": {
								"encoding": "inplace",
								"label": "struct Stakable.Stakeholder",
								"members": [
									{
										"astId": 406,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "stake",
										"offset": 0,
										"slot": "0",
										"type": "t_struct(Stake)403_storage"
									},
									{
										"astId": 408,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "user",
										"offset": 0,
										"slot": "7",
										"type": "t_address"
									},
									{
										"astId": 410,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "latestClaimDrop",
										"offset": 0,
										"slot": "8",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "288"
							},
							"t_struct(Voter)326_storage": {
								"encoding": "inplace",
								"label": "struct Stakable.Voter",
								"members": [
									{
										"astId": 321,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "votingRight",
										"offset": 0,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 325,
										"contract": "contracts/Stakable.sol:Stakable",
										"label": "voted",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_uint256,t_bool)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"events": {
							"Staked(address,uint256,uint256,uint256)": {
								"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							311
						]
					},
					"id": 312,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "92:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "270:196:0",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 311,
							"linearizedBaseContracts": [
								311
							],
							"name": "SafeMath",
							"nameLocation": "475:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 33,
										"nodeType": "Block",
										"src": "702:140:0",
										"statements": [
											{
												"id": 32,
												"nodeType": "UncheckedBlock",
												"src": "712:124:0",
												"statements": [
													{
														"assignments": [
															15
														],
														"declarations": [
															{
																"constant": false,
																"id": 15,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "744:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 32,
																"src": "736:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 14,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "736:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 19,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 18,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 16,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "748:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 17,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "752:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "748:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "736:17:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 22,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 20,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 15,
																"src": "771:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 21,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "775:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "771:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 27,
														"nodeType": "IfStatement",
														"src": "767:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 23,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "786:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 24,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "793:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 25,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "785:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 13,
															"id": 26,
															"nodeType": "Return",
															"src": "778:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 28,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "817:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 29,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "823:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 30,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "816:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 13,
														"id": 31,
														"nodeType": "Return",
														"src": "809:16:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "490:131:0",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 34,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "635:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "650:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "642:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "642:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "661:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "653:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "641:22:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "687:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 9,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "687:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "693:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "686:15:0"
									},
									"scope": 311,
									"src": "626:216:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 61,
										"nodeType": "Block",
										"src": "1064:113:0",
										"statements": [
											{
												"id": 60,
												"nodeType": "UncheckedBlock",
												"src": "1074:97:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 48,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 46,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 39,
																"src": "1102:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 47,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 37,
																"src": "1106:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1102:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 53,
														"nodeType": "IfStatement",
														"src": "1098:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 49,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1117:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 50,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1124:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 51,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1116:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 45,
															"id": 52,
															"nodeType": "Return",
															"src": "1109:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 54,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1148:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 57,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 55,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 37,
																		"src": "1154:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 56,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 39,
																		"src": "1158:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1154:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 58,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1147:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 45,
														"id": 59,
														"nodeType": "Return",
														"src": "1140:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "848:135:0",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 62,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "997:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1012:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1004:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 36,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1004:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1023:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1015:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1015:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1003:22:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1049:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1049:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1055:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 43,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1055:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1048:15:0"
									},
									"scope": 311,
									"src": "988:189:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 103,
										"nodeType": "Block",
										"src": "1401:417:0",
										"statements": [
											{
												"id": 102,
												"nodeType": "UncheckedBlock",
												"src": "1411:401:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 76,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 74,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1669:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 75,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1674:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1669:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 81,
														"nodeType": "IfStatement",
														"src": "1665:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 77,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1685:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1691:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 79,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1684:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 73,
															"id": 80,
															"nodeType": "Return",
															"src": "1677:16:0"
														}
													},
													{
														"assignments": [
															83
														],
														"declarations": [
															{
																"constant": false,
																"id": 83,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1715:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 102,
																"src": "1707:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 82,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1707:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 87,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 86,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 84,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1719:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 85,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 67,
																"src": "1723:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1719:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1707:17:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 92,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 90,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 88,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 83,
																	"src": "1742:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 89,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 65,
																	"src": "1746:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1742:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 91,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 67,
																"src": "1751:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1742:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 97,
														"nodeType": "IfStatement",
														"src": "1738:33:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 93,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1762:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 94,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1769:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 95,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1761:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 73,
															"id": 96,
															"nodeType": "Return",
															"src": "1754:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 98,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1793:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 99,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 83,
																	"src": "1799:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 100,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1792:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 73,
														"id": 101,
														"nodeType": "Return",
														"src": "1785:16:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "1183:137:0",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 104,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1334:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1349:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1341:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 64,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1341:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1360:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1352:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1352:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1340:22:0"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1386:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 69,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1386:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1392:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 71,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1392:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1385:15:0"
									},
									"scope": 311,
									"src": "1325:493:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 131,
										"nodeType": "Block",
										"src": "2043:114:0",
										"statements": [
											{
												"id": 130,
												"nodeType": "UncheckedBlock",
												"src": "2053:98:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 118,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 116,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 109,
																"src": "2081:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2086:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2081:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 123,
														"nodeType": "IfStatement",
														"src": "2077:29:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2097:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2104:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 121,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2096:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 115,
															"id": 122,
															"nodeType": "Return",
															"src": "2089:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 124,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2128:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 127,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 125,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 107,
																		"src": "2134:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 126,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 109,
																		"src": "2138:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2134:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 128,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2127:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 115,
														"id": 129,
														"nodeType": "Return",
														"src": "2120:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "1824:138:0",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 132,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1976:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1991:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "1983:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1983:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2002:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "1994:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1982:22:0"
									},
									"returnParameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2028:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 111,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2028:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2034:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2034:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2027:15:0"
									},
									"scope": 311,
									"src": "1967:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 159,
										"nodeType": "Block",
										"src": "2392:114:0",
										"statements": [
											{
												"id": 158,
												"nodeType": "UncheckedBlock",
												"src": "2402:98:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 144,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 137,
																"src": "2430:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 145,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2435:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2430:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 151,
														"nodeType": "IfStatement",
														"src": "2426:29:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2446:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2453:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 149,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2445:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 143,
															"id": 150,
															"nodeType": "Return",
															"src": "2438:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 152,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2477:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 153,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 135,
																		"src": "2483:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 154,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 137,
																		"src": "2487:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2483:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 156,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2476:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 143,
														"id": 157,
														"nodeType": "Return",
														"src": "2469:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 133,
										"nodeType": "StructuredDocumentation",
										"src": "2163:148:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 160,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2325:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2340:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2332:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2332:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2351:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2343:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2331:22:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2377:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 139,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2377:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2383:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2383:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2376:15:0"
									},
									"scope": 311,
									"src": "2316:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 174,
										"nodeType": "Block",
										"src": "2808:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 172,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 170,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 163,
														"src": "2825:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 171,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2829:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2825:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 169,
												"id": 173,
												"nodeType": "Return",
												"src": "2818:12:0"
											}
										]
									},
									"documentation": {
										"id": 161,
										"nodeType": "StructuredDocumentation",
										"src": "2512:224:0",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 175,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "2750:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2762:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2754:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2754:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2773:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2765:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2753:22:0"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2799:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2799:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2798:9:0"
									},
									"scope": 311,
									"src": "2741:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "3175:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 185,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 178,
														"src": "3192:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 186,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 180,
														"src": "3196:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3192:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 184,
												"id": 188,
												"nodeType": "Return",
												"src": "3185:12:0"
											}
										]
									},
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "2843:260:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "3117:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3129:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3121:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3121:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3140:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3132:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3132:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3120:22:0"
									},
									"returnParameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3166:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3166:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3165:9:0"
									},
									"scope": 311,
									"src": "3108:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 204,
										"nodeType": "Block",
										"src": "3518:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 200,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "3535:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 201,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 195,
														"src": "3539:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3535:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 199,
												"id": 203,
												"nodeType": "Return",
												"src": "3528:12:0"
											}
										]
									},
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "3210:236:0",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 205,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "3460:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3472:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3464:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3464:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3483:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3475:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3463:22:0"
									},
									"returnParameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3509:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3509:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3508:9:0"
									},
									"scope": 311,
									"src": "3451:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 219,
										"nodeType": "Block",
										"src": "3903:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 215,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 208,
														"src": "3920:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 216,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 210,
														"src": "3924:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3920:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 214,
												"id": 218,
												"nodeType": "Return",
												"src": "3913:12:0"
											}
										]
									},
									"documentation": {
										"id": 206,
										"nodeType": "StructuredDocumentation",
										"src": "3553:278:0",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 220,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3845:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3857:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3849:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3849:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3868:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3860:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3860:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3848:22:0"
									},
									"returnParameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3894:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3894:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:9:0"
									},
									"scope": 311,
									"src": "3836:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 234,
										"nodeType": "Block",
										"src": "4452:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 230,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 223,
														"src": "4469:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 231,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 225,
														"src": "4473:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4469:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 229,
												"id": 233,
												"nodeType": "Return",
												"src": "4462:12:0"
											}
										]
									},
									"documentation": {
										"id": 221,
										"nodeType": "StructuredDocumentation",
										"src": "3938:442:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 235,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4394:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4406:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4398:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4398:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4417:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4409:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4409:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4397:22:0"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4443:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4443:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4442:9:0"
									},
									"scope": 311,
									"src": "4385:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 259,
										"nodeType": "Block",
										"src": "5070:106:0",
										"statements": [
											{
												"id": 258,
												"nodeType": "UncheckedBlock",
												"src": "5080:90:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 250,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 248,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 240,
																		"src": "5112:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 249,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 238,
																		"src": "5117:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5112:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 251,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "5120:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 247,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5104:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5104:29:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 253,
														"nodeType": "ExpressionStatement",
														"src": "5104:29:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 254,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 238,
																"src": "5154:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 255,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 240,
																"src": "5158:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5154:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 246,
														"id": 257,
														"nodeType": "Return",
														"src": "5147:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 236,
										"nodeType": "StructuredDocumentation",
										"src": "4487:453:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "4954:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4975:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "4967:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4967:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4994:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "4986:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4986:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5019:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "5005:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 241,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5005:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4957:80:0"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "5061:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:9:0"
									},
									"scope": 311,
									"src": "4945:231:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 284,
										"nodeType": "Block",
										"src": "5785:105:0",
										"statements": [
											{
												"id": 283,
												"nodeType": "UncheckedBlock",
												"src": "5795:89:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 275,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 273,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 265,
																		"src": "5827:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5831:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5827:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 276,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "5834:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 272,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5819:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5819:28:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 278,
														"nodeType": "ExpressionStatement",
														"src": "5819:28:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 281,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 279,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 263,
																"src": "5868:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 280,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 265,
																"src": "5872:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5868:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 271,
														"id": 282,
														"nodeType": "Return",
														"src": "5861:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "5182:473:0",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "5669:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5690:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5682:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5709:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5701:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5734:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5720:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 266,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5720:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5672:80:0"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5776:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5776:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5775:9:0"
									},
									"scope": 311,
									"src": "5660:230:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 309,
										"nodeType": "Block",
										"src": "6661:105:0",
										"statements": [
											{
												"id": 308,
												"nodeType": "UncheckedBlock",
												"src": "6671:89:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 300,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 298,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 290,
																		"src": "6703:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 299,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6707:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6703:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 301,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "6710:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 297,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6695:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 302,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6695:28:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 303,
														"nodeType": "ExpressionStatement",
														"src": "6695:28:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 304,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 288,
																"src": "6744:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 305,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 290,
																"src": "6748:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6744:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 296,
														"id": 307,
														"nodeType": "Return",
														"src": "6737:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 286,
										"nodeType": "StructuredDocumentation",
										"src": "5896:635:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 310,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "6545:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6566:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6558:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6558:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "6585:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6577:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6577:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6610:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6596:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 291,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6596:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6548:80:0"
									},
									"returnParameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6652:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 294,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6652:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6651:9:0"
									},
									"scope": 311,
									"src": "6536:230:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 312,
							"src": "467:6301:0",
							"usedErrors": []
						}
					],
					"src": "92:6677:0"
				},
				"id": 0
			},
			"contracts/Stakable.sol": {
				"ast": {
					"absolutePath": "contracts/Stakable.sol",
					"exportedSymbols": {
						"SafeMath": [
							311
						],
						"Stakable": [
							1191
						],
						"Voting___votingStatus": [
							316
						]
					},
					"id": 1192,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 313,
							"literals": [
								"solidity",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 314,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1192,
							"sourceUnit": 312,
							"src": "64:57:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"id": 316,
							"name": "Voting___votingStatus",
							"nameLocation": "129:21:1",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 315,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "150:2:1"
							},
							"src": "123:30:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Stakable",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1191,
							"linearizedBaseContracts": [
								1191
							],
							"name": "Stakable",
							"nameLocation": "164:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 319,
									"libraryName": {
										"id": 317,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 311,
										"src": "185:8:1"
									},
									"nodeType": "UsingForDirective",
									"src": "179:27:1",
									"typeName": {
										"id": 318,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "198:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "Stakable.Voter",
									"id": 326,
									"members": [
										{
											"constant": false,
											"id": 321,
											"mutability": "mutable",
											"name": "votingRight",
											"nameLocation": "404:11:1",
											"nodeType": "VariableDeclaration",
											"scope": 326,
											"src": "399:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 320,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "399:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 325,
											"mutability": "mutable",
											"name": "voted",
											"nameLocation": "450:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 326,
											"src": "425:30:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"typeName": {
												"id": 324,
												"keyType": {
													"id": 322,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "433:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "425:24:1",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
													"typeString": "mapping(uint256 => bool)"
												},
												"valueType": {
													"id": 323,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "444:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Voter",
									"nameLocation": "383:5:1",
									"nodeType": "StructDefinition",
									"scope": 1191,
									"src": "376:86:1",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "cb79c2e1",
									"id": 328,
									"mutability": "mutable",
									"name": "stakingPenaltyRate",
									"nameLocation": "483:18:1",
									"nodeType": "VariableDeclaration",
									"scope": 1191,
									"src": "468:33:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 327,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "468:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8891cf0d",
									"id": 330,
									"mutability": "mutable",
									"name": "airdropRate",
									"nameLocation": "522:11:1",
									"nodeType": "VariableDeclaration",
									"scope": 1191,
									"src": "507:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 329,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "507:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b87da76d",
									"id": 332,
									"mutability": "mutable",
									"name": "airdropSince",
									"nameLocation": "554:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 1191,
									"src": "539:27:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 331,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "539:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 334,
									"mutability": "mutable",
									"name": "_votingStatus",
									"nameLocation": "587:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 1191,
									"src": "573:27:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 333,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "573:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 336,
									"mutability": "mutable",
									"name": "_votingId",
									"nameLocation": "623:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 1191,
									"src": "606:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 335,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "606:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "5f5300ff",
									"id": 338,
									"mutability": "mutable",
									"name": "totalVoters",
									"nameLocation": "653:11:1",
									"nodeType": "VariableDeclaration",
									"scope": 1191,
									"src": "638:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 337,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "638:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a3ec138d",
									"id": 343,
									"mutability": "mutable",
									"name": "voters",
									"nameLocation": "703:6:1",
									"nodeType": "VariableDeclaration",
									"scope": 1191,
									"src": "670:39:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
										"typeString": "mapping(address => struct Stakable.Voter)"
									},
									"typeName": {
										"id": 342,
										"keyType": {
											"id": 339,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "678:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "670:25:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
											"typeString": "mapping(address => struct Stakable.Voter)"
										},
										"valueType": {
											"id": 341,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 340,
												"name": "Voter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 326,
												"src": "689:5:1"
											},
											"referencedDeclaration": 326,
											"src": "689:5:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Voter_$326_storage_ptr",
												"typeString": "struct Stakable.Voter"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a143a5f2",
									"id": 347,
									"mutability": "mutable",
									"name": "votedUsers",
									"nameLocation": "750:10:1",
									"nodeType": "VariableDeclaration",
									"scope": 1191,
									"src": "715:45:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 346,
										"keyType": {
											"id": 344,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "723:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "715:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 345,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "734:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "781:128:1",
										"statements": [
											{
												"expression": {
													"id": 352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 350,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 328,
														"src": "853:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3135",
														"id": 351,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "874:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_15_by_1",
															"typeString": "int_const 15"
														},
														"value": "15"
													},
													"src": "853:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 353,
												"nodeType": "ExpressionStatement",
												"src": "853:23:1"
											},
											{
												"expression": {
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 354,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "886:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3830",
														"id": 355,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "900:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_80_by_1",
															"typeString": "int_const 80"
														},
														"value": "80"
													},
													"src": "886:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 357,
												"nodeType": "ExpressionStatement",
												"src": "886:16:1"
											}
										]
									},
									"id": 359,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "778:2:1"
									},
									"returnParameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "781:0:1"
									},
									"scope": 1191,
									"src": "767:142:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 371,
										"nodeType": "Block",
										"src": "1075:54:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 367,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 365,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 361,
																"src": "1093:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 366,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1102:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1093:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f205374616b6520466f756e64",
															"id": 368,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1105:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1382668451cba5249c84b6eb3589abcd763b454d2442595ce729b0e20103df5a",
																"typeString": "literal_string \"No Stake Found\""
															},
															"value": "No Stake Found"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1382668451cba5249c84b6eb3589abcd763b454d2442595ce729b0e20103df5a",
																"typeString": "literal_string \"No Stake Found\""
															}
														],
														"id": 364,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1085:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1085:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 370,
												"nodeType": "ExpressionStatement",
												"src": "1085:37:1"
											}
										]
									},
									"id": 372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkUserStake",
									"nameLocation": "1029:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1053:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "1045:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1045:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1044:16:1"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1075:0:1"
									},
									"scope": 1191,
									"src": "1020:109:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 380,
										"nodeType": "Block",
										"src": "1179:66:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 376,
															"name": "_votingStatus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 334,
															"src": "1197:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "566f74696e67206973206e6f7420617661696c61626c65",
															"id": 377,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1212:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1138f52ee430448b689d4755fc6ce7436d74d91a0eb9cb2ca57801bbd4b77ccc",
																"typeString": "literal_string \"Voting is not available\""
															},
															"value": "Voting is not available"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1138f52ee430448b689d4755fc6ce7436d74d91a0eb9cb2ca57801bbd4b77ccc",
																"typeString": "literal_string \"Voting is not available\""
															}
														],
														"id": 375,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1189:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1189:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 379,
												"nodeType": "ExpressionStatement",
												"src": "1189:49:1"
											}
										]
									},
									"id": 381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkVotingStatus",
									"nameLocation": "1144:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1162:2:1"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1179:0:1"
									},
									"scope": 1191,
									"src": "1135:110:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 387,
										"nodeType": "Block",
										"src": "1279:48:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 383,
														"name": "_checkVotingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 381,
														"src": "1289:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1289:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 385,
												"nodeType": "ExpressionStatement",
												"src": "1289:20:1"
											},
											{
												"id": 386,
												"nodeType": "PlaceholderStatement",
												"src": "1319:1:1"
											}
										]
									},
									"id": 388,
									"name": "votingStatusTrue",
									"nameLocation": "1260:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1276:2:1"
									},
									"src": "1251:76:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "Stakable.Stake",
									"id": 403,
									"members": [
										{
											"constant": false,
											"id": 390,
											"mutability": "mutable",
											"name": "user",
											"nameLocation": "1591:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 403,
											"src": "1583:12:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 389,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1583:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 392,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "1613:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 403,
											"src": "1605:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 391,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1605:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 394,
											"mutability": "mutable",
											"name": "since",
											"nameLocation": "1637:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 403,
											"src": "1629:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 393,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1629:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 396,
											"mutability": "mutable",
											"name": "claimable",
											"nameLocation": "1759:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 403,
											"src": "1751:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 395,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1751:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 398,
											"mutability": "mutable",
											"name": "claimable_airdrop",
											"nameLocation": "1786:17:1",
											"nodeType": "VariableDeclaration",
											"scope": 403,
											"src": "1778:25:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 397,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1778:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 400,
											"mutability": "mutable",
											"name": "rewardAPY",
											"nameLocation": "1821:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 403,
											"src": "1813:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 399,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1813:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 402,
											"mutability": "mutable",
											"name": "releaseTime",
											"nameLocation": "1848:11:1",
											"nodeType": "VariableDeclaration",
											"scope": 403,
											"src": "1840:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 401,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1840:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stake",
									"nameLocation": "1567:5:1",
									"nodeType": "StructDefinition",
									"scope": 1191,
									"src": "1560:306:1",
									"visibility": "public"
								},
								{
									"canonicalName": "Stakable.Stakeholder",
									"id": 411,
									"members": [
										{
											"constant": false,
											"id": 406,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "1984:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 411,
											"src": "1978:11:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$403_storage_ptr",
												"typeString": "struct Stakable.Stake"
											},
											"typeName": {
												"id": 405,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 404,
													"name": "Stake",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 403,
													"src": "1978:5:1"
												},
												"referencedDeclaration": 403,
												"src": "1978:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$403_storage_ptr",
													"typeString": "struct Stakable.Stake"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 408,
											"mutability": "mutable",
											"name": "user",
											"nameLocation": "2007:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 411,
											"src": "1999:12:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 407,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1999:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 410,
											"mutability": "mutable",
											"name": "latestClaimDrop",
											"nameLocation": "2029:15:1",
											"nodeType": "VariableDeclaration",
											"scope": 411,
											"src": "2021:23:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 409,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2021:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stakeholder",
									"nameLocation": "1956:11:1",
									"nodeType": "StructDefinition",
									"scope": 1191,
									"src": "1949:102:1",
									"visibility": "public"
								},
								{
									"canonicalName": "Stakable.StakingSummary",
									"id": 419,
									"members": [
										{
											"constant": false,
											"id": 413,
											"mutability": "mutable",
											"name": "total_amount",
											"nameLocation": "2228:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 419,
											"src": "2220:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 412,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2220:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 415,
											"mutability": "mutable",
											"name": "penalty",
											"nameLocation": "2258:7:1",
											"nodeType": "VariableDeclaration",
											"scope": 419,
											"src": "2250:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 414,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2250:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 418,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "2281:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 419,
											"src": "2275:11:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$403_storage_ptr",
												"typeString": "struct Stakable.Stake"
											},
											"typeName": {
												"id": 417,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 416,
													"name": "Stake",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 403,
													"src": "2275:5:1"
												},
												"referencedDeclaration": 403,
												"src": "2275:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$403_storage_ptr",
													"typeString": "struct Stakable.Stake"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakingSummary",
									"nameLocation": "2195:14:1",
									"nodeType": "StructDefinition",
									"scope": 1191,
									"src": "2188:105:1",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 420,
										"nodeType": "StructuredDocumentation",
										"src": "2299:111:1",
										"text": " @notice\n stakes is used to keep track of the INDEX for the stakers in the stakes array"
									},
									"id": 425,
									"mutability": "mutable",
									"name": "stakeholders",
									"nameLocation": "2456:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 1191,
									"src": "2415:53:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stakeholder_$411_storage_$",
										"typeString": "mapping(address => struct Stakable.Stakeholder)"
									},
									"typeName": {
										"id": 424,
										"keyType": {
											"id": 421,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2423:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2415:31:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stakeholder_$411_storage_$",
											"typeString": "mapping(address => struct Stakable.Stakeholder)"
										},
										"valueType": {
											"id": 423,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 422,
												"name": "Stakeholder",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 411,
												"src": "2434:11:1"
											},
											"referencedDeclaration": 411,
											"src": "2434:11:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stakeholder_$411_storage_ptr",
												"typeString": "struct Stakable.Stakeholder"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 426,
										"nodeType": "StructuredDocumentation",
										"src": "2475:124:1",
										"text": " @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
									},
									"id": 436,
									"name": "Staked",
									"nameLocation": "2610:6:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 428,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2642:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "2626:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 427,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2626:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 430,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2664:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "2656:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2656:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 432,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2688:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "2680:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2680:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 434,
												"indexed": false,
												"mutability": "mutable",
												"name": "releaseTime",
												"nameLocation": "2715:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "2707:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 433,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2707:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2616:116:1"
									},
									"src": "2604:129:1"
								},
								{
									"anonymous": false,
									"id": 440,
									"name": "PenaltyChanged",
									"nameLocation": "2745:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 438,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2768:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "2760:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 437,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2760:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2759:16:1"
									},
									"src": "2739:37:1"
								},
								{
									"anonymous": false,
									"id": 444,
									"name": "AirdropChanged",
									"nameLocation": "2787:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2810:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "2802:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2801:16:1"
									},
									"src": "2781:37:1"
								},
								{
									"body": {
										"id": 452,
										"nodeType": "Block",
										"src": "2863:47:1",
										"statements": [
											{
												"expression": {
													"id": 450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 447,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 332,
														"src": "2873:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 448,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "2888:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 449,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "2888:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2873:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 451,
												"nodeType": "ExpressionStatement",
												"src": "2873:30:1"
											}
										]
									},
									"id": 453,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_startAirdropSince",
									"nameLocation": "2833:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2851:2:1"
									},
									"returnParameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2863:0:1"
									},
									"scope": 1191,
									"src": "2824:86:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 469,
										"nodeType": "Block",
										"src": "2987:61:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "37",
															"id": 466,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3034:6:1",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_604800_by_1",
																"typeString": "int_const 604800"
															},
															"value": "7"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_604800_by_1",
																"typeString": "int_const 604800"
															}
														],
														"expression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 463,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 460,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "3005:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 461,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "3005:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 462,
																		"name": "input",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 455,
																		"src": "3023:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3005:23:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 464,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3004:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 465,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 220,
														"src": "3004:29:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3004:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 459,
												"id": 468,
												"nodeType": "Return",
												"src": "2997:44:1"
											}
										]
									},
									"id": 470,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateWeek",
									"nameLocation": "2925:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "input",
												"nameLocation": "2948:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 470,
												"src": "2940:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:15:1"
									},
									"returnParameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 470,
												"src": "2978:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2978:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2977:9:1"
									},
									"scope": 1191,
									"src": "2916:132:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 544,
										"nodeType": "Block",
										"src": "3397:850:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 483,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 475,
																"src": "3469:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 484,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3479:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3469:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f74207374616b65206e6f7468696e67",
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3482:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bf1c60b013f9ac29f8f309d9d4a6fca81d3fd43f3c5f5ae6c527cd4fb58e3522",
																"typeString": "literal_string \"Cannot stake nothing\""
															},
															"value": "Cannot stake nothing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bf1c60b013f9ac29f8f309d9d4a6fca81d3fd43f3c5f5ae6c527cd4fb58e3522",
																"typeString": "literal_string \"Cannot stake nothing\""
															}
														],
														"id": 482,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3461:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 487,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3461:44:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 488,
												"nodeType": "ExpressionStatement",
												"src": "3461:44:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 496,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"expression": {
																		"baseExpression": {
																			"id": 490,
																			"name": "stakeholders",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 425,
																			"src": "3523:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stakeholder_$411_storage_$",
																				"typeString": "mapping(address => struct Stakable.Stakeholder storage ref)"
																			}
																		},
																		"id": 492,
																		"indexExpression": {
																			"id": 491,
																			"name": "_user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 473,
																			"src": "3536:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3523:19:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stakeholder_$411_storage",
																			"typeString": "struct Stakable.Stakeholder storage ref"
																		}
																	},
																	"id": 493,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "stake",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 406,
																	"src": "3523:25:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$403_storage",
																		"typeString": "struct Stakable.Stake storage ref"
																	}
																},
																"id": 494,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 392,
																"src": "3523:32:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 495,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3559:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3523:37:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "557365722069732061207374616b6572",
															"id": 497,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3562:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2691efb0aa18db578dd8d5763b4183f2fc55ea2de0a8db285ee617da2a9fe108",
																"typeString": "literal_string \"User is a staker\""
															},
															"value": "User is a staker"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2691efb0aa18db578dd8d5763b4183f2fc55ea2de0a8db285ee617da2a9fe108",
																"typeString": "literal_string \"User is a staker\""
															}
														],
														"id": 489,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3515:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3515:66:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 499,
												"nodeType": "ExpressionStatement",
												"src": "3515:66:1"
											},
											{
												"expression": {
													"id": 502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 500,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 338,
														"src": "3592:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 501,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3607:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3592:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 503,
												"nodeType": "ExpressionStatement",
												"src": "3592:16:1"
											},
											{
												"expression": {
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 504,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 343,
																"src": "3618:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
																	"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																}
															},
															"id": 506,
															"indexExpression": {
																"id": 505,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 473,
																"src": "3625:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3618:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$326_storage",
																"typeString": "struct Stakable.Voter storage ref"
															}
														},
														"id": 507,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 321,
														"src": "3618:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 508,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3646:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3618:32:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 510,
												"nodeType": "ExpressionStatement",
												"src": "3618:32:1"
											},
											{
												"assignments": [
													512
												],
												"declarations": [
													{
														"constant": false,
														"id": 512,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "3756:9:1",
														"nodeType": "VariableDeclaration",
														"scope": 544,
														"src": "3748:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 511,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3748:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 515,
												"initialValue": {
													"expression": {
														"id": 513,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "3768:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 514,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "3768:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3748:35:1"
											},
											{
												"expression": {
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 516,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 425,
																"src": "3911:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stakeholder_$411_storage_$",
																	"typeString": "mapping(address => struct Stakable.Stakeholder storage ref)"
																}
															},
															"id": 518,
															"indexExpression": {
																"id": 517,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 473,
																"src": "3924:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3911:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stakeholder_$411_storage",
																"typeString": "struct Stakable.Stakeholder storage ref"
															}
														},
														"id": 519,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "stake",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 406,
														"src": "3911:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$403_storage",
															"typeString": "struct Stakable.Stake storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 521,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 473,
																"src": "3958:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 522,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 475,
																"src": "3977:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 523,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 512,
																"src": "3998:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 524,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4021:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 525,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4036:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"id": 526,
																"name": "_rewardRate",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "4051:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 529,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 527,
																			"name": "_stakePeriod",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 477,
																			"src": "4077:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 528,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 512,
																			"src": "4092:9:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4077:24:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 530,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4076:26:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 520,
															"name": "Stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 403,
															"src": "3939:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Stake_$403_storage_ptr_$",
																"typeString": "type(struct Stakable.Stake storage pointer)"
															}
														},
														"id": 531,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3939:173:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
															"typeString": "struct Stakable.Stake memory"
														}
													},
													"src": "3911:201:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$403_storage",
														"typeString": "struct Stakable.Stake storage ref"
													}
												},
												"id": 533,
												"nodeType": "ExpressionStatement",
												"src": "3911:201:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 535,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 473,
															"src": "4186:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 536,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "4193:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 537,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 512,
															"src": "4202:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 540,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 538,
																		"name": "_stakePeriod",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 477,
																		"src": "4214:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 539,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 512,
																		"src": "4229:9:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4214:24:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 541,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "4213:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 534,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 436,
														"src": "4179:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4179:61:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 543,
												"nodeType": "EmitStatement",
												"src": "4174:66:1"
											}
										]
									},
									"documentation": {
										"id": 471,
										"nodeType": "StructuredDocumentation",
										"src": "3054:200:1",
										"text": " @notice\n _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n StakeID"
									},
									"id": 545,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_stake",
									"nameLocation": "3268:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "3292:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "3284:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 472,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3284:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "3315:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "3307:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3307:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "_stakePeriod",
												"nameLocation": "3340:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "3332:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3332:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "_rewardRate",
												"nameLocation": "3370:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "3362:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3362:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3274:113:1"
									},
									"returnParameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3397:0:1"
									},
									"scope": 1191,
									"src": "3259:988:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 565,
										"nodeType": "Block",
										"src": "4306:155:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 553,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 551,
																"name": "amount_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 547,
																"src": "4324:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "3330",
																"id": 552,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4335:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_30_by_1",
																	"typeString": "int_const 30"
																},
																"value": "30"
															},
															"src": "4324:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50656e616c7479206665652063616e6e6f742065786365656420332070657263656e742e",
															"id": 554,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4339:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_28b9cc5845d3e07d7ab8f34d980f137c1b248a3950e8cece74e9bf5f2a6e64e9",
																"typeString": "literal_string \"Penalty fee cannot exceed 3 percent.\""
															},
															"value": "Penalty fee cannot exceed 3 percent."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_28b9cc5845d3e07d7ab8f34d980f137c1b248a3950e8cece74e9bf5f2a6e64e9",
																"typeString": "literal_string \"Penalty fee cannot exceed 3 percent.\""
															}
														],
														"id": 550,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4316:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4316:62:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 556,
												"nodeType": "ExpressionStatement",
												"src": "4316:62:1"
											},
											{
												"expression": {
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 557,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 328,
														"src": "4388:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 558,
														"name": "amount_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 547,
														"src": "4409:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4388:28:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 560,
												"nodeType": "ExpressionStatement",
												"src": "4388:28:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 562,
															"name": "amount_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 547,
															"src": "4446:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 561,
														"name": "PenaltyChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "4431:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4431:23:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 564,
												"nodeType": "EmitStatement",
												"src": "4426:28:1"
											}
										]
									},
									"id": 566,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_changePenaltyFee",
									"nameLocation": "4262:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "4288:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 566,
												"src": "4280:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 546,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4280:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4279:17:1"
									},
									"returnParameters": {
										"id": 549,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4306:0:1"
									},
									"scope": 1191,
									"src": "4253:208:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 586,
										"nodeType": "Block",
										"src": "4527:157:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 574,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 572,
																"name": "amount_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 568,
																"src": "4545:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "323030",
																"id": 573,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4556:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_200_by_1",
																	"typeString": "int_const 200"
																},
																"value": "200"
															},
															"src": "4545:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "41697264726f702050657263656e746167652063616e6e6f74206578636565642032302070657263656e742e",
															"id": 575,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4561:46:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_61040048776cdd899f1524647893fcc96c1bb450f0665365eef2ede5ee6e90cc",
																"typeString": "literal_string \"Airdrop Percentage cannot exceed 20 percent.\""
															},
															"value": "Airdrop Percentage cannot exceed 20 percent."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_61040048776cdd899f1524647893fcc96c1bb450f0665365eef2ede5ee6e90cc",
																"typeString": "literal_string \"Airdrop Percentage cannot exceed 20 percent.\""
															}
														],
														"id": 571,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4537:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4537:71:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 577,
												"nodeType": "ExpressionStatement",
												"src": "4537:71:1"
											},
											{
												"expression": {
													"id": 580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 578,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "4618:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 579,
														"name": "amount_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 568,
														"src": "4632:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4618:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 581,
												"nodeType": "ExpressionStatement",
												"src": "4618:21:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 583,
															"name": "amount_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 568,
															"src": "4669:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 582,
														"name": "AirdropChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 444,
														"src": "4654:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 584,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4654:23:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 585,
												"nodeType": "EmitStatement",
												"src": "4649:28:1"
											}
										]
									},
									"id": 587,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_changeAirdropPercentage",
									"nameLocation": "4476:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 569,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "4509:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "4501:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 567,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4501:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4500:17:1"
									},
									"returnParameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4527:0:1"
									},
									"scope": 1191,
									"src": "4467:217:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 614,
										"nodeType": "Block",
										"src": "4800:291:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 597,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 595,
																"name": "since_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 589,
																"src": "4818:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 596,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4827:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4818:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4572726f722074696d657374616d702030",
															"id": 598,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4830:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_344876a6da0a70234a6baabeee94694174b02d45df20fd4257a92fa090268af3",
																"typeString": "literal_string \"Error timestamp 0\""
															},
															"value": "Error timestamp 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_344876a6da0a70234a6baabeee94694174b02d45df20fd4257a92fa090268af3",
																"typeString": "literal_string \"Error timestamp 0\""
															}
														],
														"id": 594,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4810:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 599,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4810:40:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 600,
												"nodeType": "ExpressionStatement",
												"src": "4810:40:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 609,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 606,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 603,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "4963:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 604,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "4963:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 605,
																			"name": "since_",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 589,
																			"src": "4981:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4963:24:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 607,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4962:26:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"hexValue": "31653234",
																"id": 608,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4991:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000000000"
																},
																"value": "1e24"
															},
															"src": "4962:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "333635",
															"id": 610,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5013:8:1",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															"value": "365"
														},
														{
															"hexValue": "4572726f722063616e6e6f74206469766964652074696d657374616d70",
															"id": 611,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5039:31:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1ba63f68453a968478e961499d34536225d92ab3a3ce82e5cf26f86ae6edd90d",
																"typeString": "literal_string \"Error cannot divide timestamp\""
															},
															"value": "Error cannot divide timestamp"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															{
																"typeIdentifier": "t_stringliteral_1ba63f68453a968478e961499d34536225d92ab3a3ce82e5cf26f86ae6edd90d",
																"typeString": "literal_string \"Error cannot divide timestamp\""
															}
														],
														"expression": {
															"id": 601,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 311,
															"src": "4932:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 602,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 285,
														"src": "4932:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 612,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4932:152:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 593,
												"id": 613,
												"nodeType": "Return",
												"src": "4913:171:1"
											}
										]
									},
									"id": 615,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateStakingDuration",
									"nameLocation": "4699:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "since_",
												"nameLocation": "4732:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "4724:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4724:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4723:16:1"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "4787:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 591,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4787:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4786:9:1"
									},
									"scope": 1191,
									"src": "4690:401:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 645,
										"nodeType": "Block",
										"src": "5212:320:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 623,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "5226:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 624,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 392,
														"src": "5226:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 625,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5247:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5226:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 630,
												"nodeType": "IfStatement",
												"src": "5222:61:1",
												"trueBody": {
													"id": 629,
													"nodeType": "Block",
													"src": "5250:33:1",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 627,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5271:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 622,
															"id": 628,
															"nodeType": "Return",
															"src": "5264:8:1"
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 643,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 640,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 635,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 631,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 618,
																			"src": "5400:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 632,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 392,
																		"src": "5400:17:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"expression": {
																			"id": 633,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 618,
																			"src": "5436:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 634,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardAPY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 400,
																		"src": "5436:20:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5400:56:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 637,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 618,
																				"src": "5500:10:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																					"typeString": "struct Stakable.Stake memory"
																				}
																			},
																			"id": 638,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "since",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 394,
																			"src": "5500:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 636,
																		"name": "calculateStakingDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 615,
																		"src": "5475:24:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 639,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5475:42:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5400:117:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 641,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5399:119:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653236",
														"id": 642,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5521:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000000000"
														},
														"value": "1e26"
													},
													"src": "5399:126:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 622,
												"id": 644,
												"nodeType": "Return",
												"src": "5380:145:1"
											}
										]
									},
									"id": 646,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateStakeReward",
									"nameLocation": "5106:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "user_stake",
												"nameLocation": "5140:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "5127:23:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
													"typeString": "struct Stakable.Stake"
												},
												"typeName": {
													"id": 617,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 616,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 403,
														"src": "5127:5:1"
													},
													"referencedDeclaration": 403,
													"src": "5127:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$403_storage_ptr",
														"typeString": "struct Stakable.Stake"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5126:25:1"
									},
									"returnParameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "5199:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5199:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5198:9:1"
									},
									"scope": 1191,
									"src": "5097:435:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 677,
										"nodeType": "Block",
										"src": "5665:182:1",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 661,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 648,
																			"src": "5722:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 662,
																			"name": "stakingPenaltyRate",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 328,
																			"src": "5730:18:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 659,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 311,
																			"src": "5709:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 660,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 205,
																		"src": "5709:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 663,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5709:40:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "31303030",
																	"id": 664,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5751:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	}
																],
																"expression": {
																	"id": 657,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 311,
																	"src": "5696:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 658,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "div",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 220,
																"src": "5696:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 665,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5696:60:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 670,
																			"name": "reward",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 650,
																			"src": "5796:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 671,
																			"name": "stakingPenaltyRate",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 328,
																			"src": "5804:18:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 668,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 311,
																			"src": "5783:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 669,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 205,
																		"src": "5783:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 672,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5783:40:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "31303030",
																	"id": 673,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5825:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	}
																],
																"expression": {
																	"id": 666,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 311,
																	"src": "5770:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 667,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "div",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 220,
																"src": "5770:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 674,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5770:60:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 675,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5682:158:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 656,
												"id": 676,
												"nodeType": "Return",
												"src": "5675:165:1"
											}
										]
									},
									"id": 678,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculatePenalty",
									"nameLocation": "5547:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5572:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "5564:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 647,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5564:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "5588:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "5580:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 649,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5580:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5563:32:1"
									},
									"returnParameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "5643:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 652,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5643:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "5652:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 654,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5642:18:1"
									},
									"scope": 1191,
									"src": "5538:309:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 719,
										"nodeType": "Block",
										"src": "5991:326:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 689,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 680,
														"src": "6005:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 690,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6015:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6005:11:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 697,
												"nodeType": "IfStatement",
												"src": "6001:55:1",
												"trueBody": {
													"id": 696,
													"nodeType": "Block",
													"src": "6018:38:1",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"hexValue": "30",
																		"id": 692,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6040:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	{
																		"hexValue": "30",
																		"id": 693,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6043:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 694,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6039:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$",
																	"typeString": "tuple(int_const 0,int_const 0)"
																}
															},
															"functionReturnParameters": 688,
															"id": 695,
															"nodeType": "Return",
															"src": "6032:13:1"
														}
													]
												}
											},
											{
												"assignments": [
													699,
													701
												],
												"declarations": [
													{
														"constant": false,
														"id": 699,
														"mutability": "mutable",
														"name": "amount_penalty",
														"nameLocation": "6075:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 719,
														"src": "6067:22:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 698,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6067:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 701,
														"mutability": "mutable",
														"name": "reward_penalty",
														"nameLocation": "6099:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 719,
														"src": "6091:22:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 700,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6091:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 706,
												"initialValue": {
													"arguments": [
														{
															"id": 703,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 680,
															"src": "6147:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 704,
															"name": "reward",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 682,
															"src": "6167:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 702,
														"name": "calculatePenalty",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 678,
														"src": "6117:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
															"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
														}
													},
													"id": 705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6117:66:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6066:117:1"
											},
											{
												"expression": {
													"components": [
														{
															"arguments": [
																{
																	"id": 709,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 680,
																	"src": "6227:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 710,
																	"name": "amount_penalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 699,
																	"src": "6235:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 707,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 311,
																	"src": "6214:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 708,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 190,
																"src": "6214:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 711,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6214:36:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 714,
																	"name": "reward",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 682,
																	"src": "6277:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 715,
																	"name": "reward_penalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 701,
																	"src": "6285:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 712,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 311,
																	"src": "6264:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 713,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 190,
																"src": "6264:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 716,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6264:36:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 717,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6200:110:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 688,
												"id": 718,
												"nodeType": "Return",
												"src": "6193:117:1"
											}
										]
									},
									"id": 720,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateStakingWithPenalty",
									"nameLocation": "5862:27:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5898:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 720,
												"src": "5890:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 679,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5890:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "5914:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 720,
												"src": "5906:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 681,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5906:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5889:32:1"
									},
									"returnParameters": {
										"id": 688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 720,
												"src": "5969:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5969:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 687,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 720,
												"src": "5978:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 686,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5978:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5968:18:1"
									},
									"scope": 1191,
									"src": "5853:464:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 791,
										"nodeType": "Block",
										"src": "6736:554:1",
										"statements": [
											{
												"assignments": [
													732
												],
												"declarations": [
													{
														"constant": false,
														"id": 732,
														"mutability": "mutable",
														"name": "stake",
														"nameLocation": "6832:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 791,
														"src": "6819:18:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
															"typeString": "struct Stakable.Stake"
														},
														"typeName": {
															"id": 731,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 730,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 403,
																"src": "6819:5:1"
															},
															"referencedDeclaration": 403,
															"src": "6819:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$403_storage_ptr",
																"typeString": "struct Stakable.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 737,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 733,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "6840:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stakeholder_$411_storage_$",
																"typeString": "mapping(address => struct Stakable.Stakeholder storage ref)"
															}
														},
														"id": 735,
														"indexExpression": {
															"id": 734,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 723,
															"src": "6853:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "6840:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stakeholder_$411_storage",
															"typeString": "struct Stakable.Stakeholder storage ref"
														}
													},
													"id": 736,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "stake",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 406,
													"src": "6840:25:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$403_storage",
														"typeString": "struct Stakable.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6819:46:1"
											},
											{
												"assignments": [
													739
												],
												"declarations": [
													{
														"constant": false,
														"id": 739,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "6884:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 791,
														"src": "6876:14:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 738,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6876:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 743,
												"initialValue": {
													"arguments": [
														{
															"id": 741,
															"name": "stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 732,
															"src": "6914:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														],
														"id": 740,
														"name": "calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 646,
														"src": "6893:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$403_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Stakable.Stake memory) view returns (uint256)"
														}
													},
													"id": 742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6893:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6876:44:1"
											},
											{
												"expression": {
													"id": 747,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "6931:26:1",
													"subExpression": {
														"baseExpression": {
															"id": 744,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "6938:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stakeholder_$411_storage_$",
																"typeString": "mapping(address => struct Stakable.Stakeholder storage ref)"
															}
														},
														"id": 746,
														"indexExpression": {
															"id": 745,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 723,
															"src": "6951:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6938:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stakeholder_$411_storage",
															"typeString": "struct Stakable.Stakeholder storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 748,
												"nodeType": "ExpressionStatement",
												"src": "6931:26:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 749,
															"name": "stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 732,
															"src": "6972:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 750,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 402,
														"src": "6972:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 751,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "6992:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 752,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "6992:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6972:35:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 773,
												"nodeType": "IfStatement",
												"src": "6968:203:1",
												"trueBody": {
													"id": 772,
													"nodeType": "Block",
													"src": "7009:162:1",
													"statements": [
														{
															"expression": {
																"id": 756,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 754,
																	"name": "totalVoters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 338,
																	"src": "7023:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 755,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7038:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7023:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 757,
															"nodeType": "ExpressionStatement",
															"src": "7023:16:1"
														},
														{
															"expression": {
																"id": 764,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "7053:37:1",
																"subExpression": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 758,
																				"name": "voters",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 343,
																				"src": "7060:6:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
																					"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																				}
																			},
																			"id": 760,
																			"indexExpression": {
																				"id": 759,
																				"name": "_user",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 723,
																				"src": "7067:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7060:13:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Voter_$326_storage",
																				"typeString": "struct Stakable.Voter storage ref"
																			}
																		},
																		"id": 761,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "voted",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 325,
																		"src": "7060:19:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																			"typeString": "mapping(uint256 => bool)"
																		}
																	},
																	"id": 763,
																	"indexExpression": {
																		"id": 762,
																		"name": "_votingId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 336,
																		"src": "7080:9:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "7060:30:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 765,
															"nodeType": "ExpressionStatement",
															"src": "7053:37:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 767,
																			"name": "stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 732,
																			"src": "7139:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 768,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 392,
																		"src": "7139:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 769,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 739,
																		"src": "7153:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 766,
																	"name": "calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 720,
																	"src": "7111:27:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 770,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7111:49:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"functionReturnParameters": 729,
															"id": 771,
															"nodeType": "Return",
															"src": "7104:56:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 776,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 774,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 338,
														"src": "7181:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 775,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7196:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7181:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 777,
												"nodeType": "ExpressionStatement",
												"src": "7181:16:1"
											},
											{
												"expression": {
													"id": 784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "7207:37:1",
													"subExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 778,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 343,
																	"src": "7214:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
																		"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																	}
																},
																"id": 780,
																"indexExpression": {
																	"id": 779,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 723,
																	"src": "7221:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7214:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$326_storage",
																	"typeString": "struct Stakable.Voter storage ref"
																}
															},
															"id": 781,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 325,
															"src": "7214:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 783,
														"indexExpression": {
															"id": 782,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "7234:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7214:30:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 785,
												"nodeType": "ExpressionStatement",
												"src": "7207:37:1"
											},
											{
												"expression": {
													"components": [
														{
															"expression": {
																"id": 786,
																"name": "stake",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 732,
																"src": "7262:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																	"typeString": "struct Stakable.Stake memory"
																}
															},
															"id": 787,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 392,
															"src": "7262:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 788,
															"name": "reward",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 739,
															"src": "7276:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 789,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7261:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 729,
												"id": 790,
												"nodeType": "Return",
												"src": "7254:29:1"
											}
										]
									},
									"documentation": {
										"id": 721,
										"nodeType": "StructuredDocumentation",
										"src": "6323:333:1",
										"text": " @notice\n withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n Notice index of the stake is the users stake counter, starting at 0 for the first stake\n Will return the amount to MINT onto the acount\n Will also calculateStakeReward and reset timer"
									},
									"id": 792,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_withdrawStake",
									"nameLocation": "6670:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "6693:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "6685:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 722,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6685:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6684:15:1"
									},
									"returnParameters": {
										"id": 729,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "6718:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 725,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6718:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "6727:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 727,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6727:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6717:18:1"
									},
									"scope": 1191,
									"src": "6661:629:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 914,
										"nodeType": "Block",
										"src": "7362:1000:1",
										"statements": [
											{
												"assignments": [
													800
												],
												"declarations": [
													{
														"constant": false,
														"id": 800,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "7391:4:1",
														"nodeType": "VariableDeclaration",
														"scope": 914,
														"src": "7372:23:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stakeholder_$411_memory_ptr",
															"typeString": "struct Stakable.Stakeholder"
														},
														"typeName": {
															"id": 799,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 798,
																"name": "Stakeholder",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 411,
																"src": "7372:11:1"
															},
															"referencedDeclaration": 411,
															"src": "7372:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stakeholder_$411_storage_ptr",
																"typeString": "struct Stakable.Stakeholder"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 805,
												"initialValue": {
													"baseExpression": {
														"id": 801,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 425,
														"src": "7398:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stakeholder_$411_storage_$",
															"typeString": "mapping(address => struct Stakable.Stakeholder storage ref)"
														}
													},
													"id": 804,
													"indexExpression": {
														"expression": {
															"id": 802,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "7411:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 803,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "7411:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7398:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stakeholder_$411_storage",
														"typeString": "struct Stakable.Stakeholder storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7372:50:1"
											},
											{
												"assignments": [
													808
												],
												"declarations": [
													{
														"constant": false,
														"id": 808,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "7454:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 914,
														"src": "7432:29:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
															"typeString": "struct Stakable.StakingSummary"
														},
														"typeName": {
															"id": 807,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 806,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 419,
																"src": "7432:14:1"
															},
															"referencedDeclaration": 419,
															"src": "7432:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$419_storage_ptr",
																"typeString": "struct Stakable.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 815,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7479:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 811,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7482:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"expression": {
																"id": 812,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 800,
																"src": "7485:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stakeholder_$411_memory_ptr",
																	"typeString": "struct Stakable.Stakeholder memory"
																}
															},
															"id": 813,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 406,
															"src": "7485:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														],
														"id": 809,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 419,
														"src": "7464:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$419_storage_ptr_$",
															"typeString": "type(struct Stakable.StakingSummary storage pointer)"
														}
													},
													"id": 814,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7464:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
														"typeString": "struct Stakable.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7432:64:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"expression": {
																	"id": 817,
																	"name": "summary",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 808,
																	"src": "7522:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
																		"typeString": "struct Stakable.StakingSummary memory"
																	}
																},
																"id": 818,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "stake",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 418,
																"src": "7522:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																	"typeString": "struct Stakable.Stake memory"
																}
															},
															"id": 819,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 392,
															"src": "7522:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 816,
														"name": "_checkUserStake",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "7506:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$__$",
															"typeString": "function (uint256) pure"
														}
													},
													"id": 820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7506:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 821,
												"nodeType": "ExpressionStatement",
												"src": "7506:37:1"
											},
											{
												"assignments": [
													823
												],
												"declarations": [
													{
														"constant": false,
														"id": 823,
														"mutability": "mutable",
														"name": "availableReward",
														"nameLocation": "7562:15:1",
														"nodeType": "VariableDeclaration",
														"scope": 914,
														"src": "7554:23:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 822,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7554:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 828,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 825,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 808,
																"src": "7601:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
																	"typeString": "struct Stakable.StakingSummary memory"
																}
															},
															"id": 826,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 418,
															"src": "7601:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														],
														"id": 824,
														"name": "calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 646,
														"src": "7580:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$403_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Stakable.Stake memory) view returns (uint256)"
														}
													},
													"id": 827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7580:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7554:61:1"
											},
											{
												"assignments": [
													830
												],
												"declarations": [
													{
														"constant": false,
														"id": 830,
														"mutability": "mutable",
														"name": "penalty",
														"nameLocation": "7633:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 914,
														"src": "7625:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 829,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7625:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 831,
												"nodeType": "VariableDeclarationStatement",
												"src": "7625:15:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 832,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 808,
																"src": "7655:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
																	"typeString": "struct Stakable.StakingSummary memory"
																}
															},
															"id": 833,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 418,
															"src": "7655:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 834,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 402,
														"src": "7655:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 835,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "7683:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 836,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "7683:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7655:43:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 856,
												"nodeType": "IfStatement",
												"src": "7651:281:1",
												"trueBody": {
													"id": 855,
													"nodeType": "Block",
													"src": "7700:232:1",
													"statements": [
														{
															"assignments": [
																839,
																841
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 839,
																	"mutability": "mutable",
																	"name": "amount_penalty",
																	"nameLocation": "7723:14:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 855,
																	"src": "7715:22:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 838,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7715:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 841,
																	"mutability": "mutable",
																	"name": "reward_penalty",
																	"nameLocation": "7747:14:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 855,
																	"src": "7739:22:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 840,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7739:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 848,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"expression": {
																				"id": 843,
																				"name": "summary",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 808,
																				"src": "7799:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
																					"typeString": "struct Stakable.StakingSummary memory"
																				}
																			},
																			"id": 844,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "stake",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 418,
																			"src": "7799:13:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 845,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 392,
																		"src": "7799:20:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 846,
																		"name": "availableReward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 823,
																		"src": "7837:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 842,
																	"name": "calculatePenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 678,
																	"src": "7765:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 847,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7765:101:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7714:152:1"
														},
														{
															"expression": {
																"id": 853,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 849,
																	"name": "penalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 830,
																	"src": "7880:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 852,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 850,
																		"name": "amount_penalty",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 839,
																		"src": "7890:14:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 851,
																		"name": "reward_penalty",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 841,
																		"src": "7907:14:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7890:31:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7880:41:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 854,
															"nodeType": "ExpressionStatement",
															"src": "7880:41:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 858,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 800,
																	"src": "7961:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stakeholder_$411_memory_ptr",
																		"typeString": "struct Stakable.Stakeholder memory"
																	}
																},
																"id": 859,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "latestClaimDrop",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 410,
																"src": "7961:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 857,
															"name": "_calculateWeek",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 470,
															"src": "7946:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256) view returns (uint256)"
															}
														},
														"id": 860,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7946:36:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 861,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7985:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7946:40:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 888,
													"nodeType": "Block",
													"src": "8131:60:1",
													"statements": [
														{
															"expression": {
																"id": 886,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 880,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 808,
																			"src": "8145:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
																				"typeString": "struct Stakable.StakingSummary memory"
																			}
																		},
																		"id": 883,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 418,
																		"src": "8145:13:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																			"typeString": "struct Stakable.Stake memory"
																		}
																	},
																	"id": 884,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimable_airdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 398,
																	"src": "8145:31:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 885,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8179:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8145:35:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 887,
															"nodeType": "ExpressionStatement",
															"src": "8145:35:1"
														}
													]
												},
												"id": 889,
												"nodeType": "IfStatement",
												"src": "7942:249:1",
												"trueBody": {
													"id": 879,
													"nodeType": "Block",
													"src": "7988:137:1",
													"statements": [
														{
															"assignments": [
																864
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 864,
																	"mutability": "mutable",
																	"name": "airdrop",
																	"nameLocation": "8010:7:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 879,
																	"src": "8002:15:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 863,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "8002:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 870,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"expression": {
																				"id": 866,
																				"name": "summary",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 808,
																				"src": "8038:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
																					"typeString": "struct Stakable.StakingSummary memory"
																				}
																			},
																			"id": 867,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "stake",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 418,
																			"src": "8038:13:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 868,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 392,
																		"src": "8038:20:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 865,
																	"name": "_calculateAirdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 933,
																	"src": "8020:17:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 869,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8020:39:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8002:57:1"
														},
														{
															"expression": {
																"id": 877,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 871,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 808,
																			"src": "8073:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
																				"typeString": "struct Stakable.StakingSummary memory"
																			}
																		},
																		"id": 874,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 418,
																		"src": "8073:13:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																			"typeString": "struct Stakable.Stake memory"
																		}
																	},
																	"id": 875,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimable_airdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 398,
																	"src": "8073:31:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 876,
																	"name": "airdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 864,
																	"src": "8107:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8073:41:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 878,
															"nodeType": "ExpressionStatement",
															"src": "8073:41:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 896,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"expression": {
																"id": 890,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 808,
																"src": "8201:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
																	"typeString": "struct Stakable.StakingSummary memory"
																}
															},
															"id": 893,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 418,
															"src": "8201:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 894,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimable",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 396,
														"src": "8201:23:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 895,
														"name": "availableReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "8227:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8201:41:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 897,
												"nodeType": "ExpressionStatement",
												"src": "8201:41:1"
											},
											{
												"expression": {
													"id": 902,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 898,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 808,
															"src": "8252:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
																"typeString": "struct Stakable.StakingSummary memory"
															}
														},
														"id": 900,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "penalty",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 415,
														"src": "8252:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 901,
														"name": "penalty",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 830,
														"src": "8270:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8252:25:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 903,
												"nodeType": "ExpressionStatement",
												"src": "8252:25:1"
											},
											{
												"expression": {
													"id": 910,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 904,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 808,
															"src": "8287:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
																"typeString": "struct Stakable.StakingSummary memory"
															}
														},
														"id": 906,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 413,
														"src": "8287:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"expression": {
																"id": 907,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 808,
																"src": "8310:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
																	"typeString": "struct Stakable.StakingSummary memory"
																}
															},
															"id": 908,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 418,
															"src": "8310:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 909,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 392,
														"src": "8310:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8287:43:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 911,
												"nodeType": "ExpressionStatement",
												"src": "8287:43:1"
											},
											{
												"expression": {
													"id": 912,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 808,
													"src": "8348:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
														"typeString": "struct Stakable.StakingSummary memory"
													}
												},
												"functionReturnParameters": 797,
												"id": 913,
												"nodeType": "Return",
												"src": "8341:14:1"
											}
										]
									},
									"functionSelector": "10486b6a",
									"id": 915,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasStake",
									"nameLocation": "7305:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 793,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7313:2:1"
									},
									"returnParameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 796,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "7339:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$419_memory_ptr",
													"typeString": "struct Stakable.StakingSummary"
												},
												"typeName": {
													"id": 795,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 794,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 419,
														"src": "7339:14:1"
													},
													"referencedDeclaration": 419,
													"src": "7339:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$419_storage_ptr",
														"typeString": "struct Stakable.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7338:23:1"
									},
									"scope": 1191,
									"src": "7296:1066:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 932,
										"nodeType": "Block",
										"src": "8581:71:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 924,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 922,
																				"name": "stakeAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 917,
																				"src": "8600:11:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 923,
																				"name": "airdropRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 330,
																				"src": "8614:11:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8600:25:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 925,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8599:27:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 926,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8629:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "8599:34:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 928,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8598:36:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3532",
														"id": 929,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8637:8:1",
														"subdenomination": "weeks",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31449600_by_1",
															"typeString": "int_const 31449600"
														},
														"value": "52"
													},
													"src": "8598:47:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 921,
												"id": 931,
												"nodeType": "Return",
												"src": "8591:54:1"
											}
										]
									},
									"id": 933,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateAirdrop",
									"nameLocation": "8482:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 918,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 917,
												"mutability": "mutable",
												"name": "stakeAmount",
												"nameLocation": "8508:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "8500:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 916,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8500:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8499:21:1"
									},
									"returnParameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 920,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "8568:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8568:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8567:9:1"
									},
									"scope": 1191,
									"src": "8473:179:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 984,
										"nodeType": "Block",
										"src": "8730:415:1",
										"statements": [
											{
												"assignments": [
													942
												],
												"declarations": [
													{
														"constant": false,
														"id": 942,
														"mutability": "mutable",
														"name": "stakeholder",
														"nameLocation": "8759:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 984,
														"src": "8740:30:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stakeholder_$411_memory_ptr",
															"typeString": "struct Stakable.Stakeholder"
														},
														"typeName": {
															"id": 941,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 940,
																"name": "Stakeholder",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 411,
																"src": "8740:11:1"
															},
															"referencedDeclaration": 411,
															"src": "8740:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stakeholder_$411_storage_ptr",
																"typeString": "struct Stakable.Stakeholder"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 946,
												"initialValue": {
													"baseExpression": {
														"id": 943,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 425,
														"src": "8773:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stakeholder_$411_storage_$",
															"typeString": "mapping(address => struct Stakable.Stakeholder storage ref)"
														}
													},
													"id": 945,
													"indexExpression": {
														"id": 944,
														"name": "_staker",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 935,
														"src": "8786:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8773:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stakeholder_$411_storage",
														"typeString": "struct Stakable.Stakeholder storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8740:54:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"expression": {
																	"id": 948,
																	"name": "stakeholder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 942,
																	"src": "8821:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stakeholder_$411_memory_ptr",
																		"typeString": "struct Stakable.Stakeholder memory"
																	}
																},
																"id": 949,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "stake",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 406,
																"src": "8821:17:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																	"typeString": "struct Stakable.Stake memory"
																}
															},
															"id": 950,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 392,
															"src": "8821:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 947,
														"name": "_checkUserStake",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "8805:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$__$",
															"typeString": "function (uint256) pure"
														}
													},
													"id": 951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8805:41:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 952,
												"nodeType": "ExpressionStatement",
												"src": "8805:41:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 959,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 955,
																			"name": "stakeholder",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 942,
																			"src": "8893:11:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stakeholder_$411_memory_ptr",
																				"typeString": "struct Stakable.Stakeholder memory"
																			}
																		},
																		"id": 956,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "latestClaimDrop",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 410,
																		"src": "8893:27:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 954,
																	"name": "_calculateWeek",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 470,
																	"src": "8878:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 957,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8878:43:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 958,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8924:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8878:47:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436c61696d61626c65206f6e63652061207765656b",
															"id": 960,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8939:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3",
																"typeString": "literal_string \"Claimable once a week\""
															},
															"value": "Claimable once a week"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3",
																"typeString": "literal_string \"Claimable once a week\""
															}
														],
														"id": 953,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8857:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 961,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8857:115:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 962,
												"nodeType": "ExpressionStatement",
												"src": "8857:115:1"
											},
											{
												"expression": {
													"id": 969,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"expression": {
																"id": 963,
																"name": "stakeholder",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 942,
																"src": "8983:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stakeholder_$411_memory_ptr",
																	"typeString": "struct Stakable.Stakeholder memory"
																}
															},
															"id": 966,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 406,
															"src": "8983:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 967,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimable_airdrop",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 398,
														"src": "8983:35:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 968,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9021:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8983:39:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 970,
												"nodeType": "ExpressionStatement",
												"src": "8983:39:1"
											},
											{
												"expression": {
													"id": 976,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 971,
															"name": "stakeholder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 942,
															"src": "9032:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stakeholder_$411_memory_ptr",
																"typeString": "struct Stakable.Stakeholder memory"
															}
														},
														"id": 973,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "latestClaimDrop",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 410,
														"src": "9032:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 974,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "9062:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 975,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "9062:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9032:45:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 977,
												"nodeType": "ExpressionStatement",
												"src": "9032:45:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"expression": {
																	"id": 979,
																	"name": "stakeholder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 942,
																	"src": "9113:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stakeholder_$411_memory_ptr",
																		"typeString": "struct Stakable.Stakeholder memory"
																	}
																},
																"id": 980,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "stake",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 406,
																"src": "9113:17:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stake_$403_memory_ptr",
																	"typeString": "struct Stakable.Stake memory"
																}
															},
															"id": 981,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 392,
															"src": "9113:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 978,
														"name": "_calculateAirdrop",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 933,
														"src": "9095:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9095:43:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 939,
												"id": 983,
												"nodeType": "Return",
												"src": "9088:50:1"
											}
										]
									},
									"id": 985,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_claimAirdrop",
									"nameLocation": "8667:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 935,
												"mutability": "mutable",
												"name": "_staker",
												"nameLocation": "8689:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 985,
												"src": "8681:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 934,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8681:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8680:17:1"
									},
									"returnParameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 985,
												"src": "8721:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 937,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8721:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8720:9:1"
									},
									"scope": 1191,
									"src": "8658:487:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1006,
										"nodeType": "Block",
										"src": "9204:151:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 992,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 990,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 332,
														"src": "9218:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 991,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9234:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "9218:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1004,
													"nodeType": "Block",
													"src": "9316:33:1",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1002,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9337:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 989,
															"id": 1003,
															"nodeType": "Return",
															"src": "9330:8:1"
														}
													]
												},
												"id": 1005,
												"nodeType": "IfStatement",
												"src": "9214:135:1",
												"trueBody": {
													"id": 1001,
													"nodeType": "Block",
													"src": "9237:73:1",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 999,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 996,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 993,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "9259:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 994,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "9259:15:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 995,
																				"name": "airdropSince",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 332,
																				"src": "9277:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9259:30:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 997,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9258:32:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "37",
																	"id": 998,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9293:6:1",
																	"subdenomination": "days",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_604800_by_1",
																		"typeString": "int_const 604800"
																	},
																	"value": "7"
																},
																"src": "9258:41:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 989,
															"id": 1000,
															"nodeType": "Return",
															"src": "9251:48:1"
														}
													]
												}
											}
										]
									},
									"functionSelector": "cbb3e152",
									"id": 1007,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "airdropWeek",
									"nameLocation": "9160:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9171:2:1"
									},
									"returnParameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "9195:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 987,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9195:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9194:9:1"
									},
									"scope": 1191,
									"src": "9151:204:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1025,
										"nodeType": "Block",
										"src": "9499:131:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1013,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1011,
																"name": "_votingStatus",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 334,
																"src": "9517:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 1012,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9534:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "9517:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "566f74696e6720697320616c72656164792072756e6e696e67",
															"id": 1014,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9541:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_969fcb32819a2e5a3a691d23a4d49e930347b87e51b5eda1c61c0d5f2288a7a0",
																"typeString": "literal_string \"Voting is already running\""
															},
															"value": "Voting is already running"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_969fcb32819a2e5a3a691d23a4d49e930347b87e51b5eda1c61c0d5f2288a7a0",
																"typeString": "literal_string \"Voting is already running\""
															}
														],
														"id": 1010,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9509:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9509:60:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1016,
												"nodeType": "ExpressionStatement",
												"src": "9509:60:1"
											},
											{
												"expression": {
													"id": 1019,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1017,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 334,
														"src": "9579:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1018,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9595:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "9579:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1020,
												"nodeType": "ExpressionStatement",
												"src": "9579:20:1"
											},
											{
												"expression": {
													"id": 1023,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1021,
														"name": "_votingId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 336,
														"src": "9609:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1022,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9622:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "9609:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1024,
												"nodeType": "ExpressionStatement",
												"src": "9609:14:1"
											}
										]
									},
									"id": 1026,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_startVoting",
									"nameLocation": "9475:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1008,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9487:2:1"
									},
									"returnParameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9499:0:1"
									},
									"scope": 1191,
									"src": "9466:164:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1048,
										"nodeType": "Block",
										"src": "9697:111:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1034,
																"name": "_staker",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1028,
																"src": "9715:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1037,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9734:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1036,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9726:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1035,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9726:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 1038,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9726:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9715:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642061646472657373",
															"id": 1040,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9738:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															},
															"value": "Invalid address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															}
														],
														"id": 1033,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9707:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1041,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9707:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1042,
												"nodeType": "ExpressionStatement",
												"src": "9707:49:1"
											},
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 1043,
															"name": "voters",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 343,
															"src": "9774:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
																"typeString": "mapping(address => struct Stakable.Voter storage ref)"
															}
														},
														"id": 1045,
														"indexExpression": {
															"id": 1044,
															"name": "_staker",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1028,
															"src": "9781:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "9774:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Voter_$326_storage",
															"typeString": "struct Stakable.Voter storage ref"
														}
													},
													"id": 1046,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "votingRight",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 321,
													"src": "9774:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1032,
												"id": 1047,
												"nodeType": "Return",
												"src": "9767:34:1"
											}
										]
									},
									"functionSelector": "a7771ee3",
									"id": 1049,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isVoter",
									"nameLocation": "9645:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "_staker",
												"nameLocation": "9661:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1049,
												"src": "9653:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9653:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9652:17:1"
									},
									"returnParameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1049,
												"src": "9691:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1030,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9691:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9690:6:1"
									},
									"scope": 1191,
									"src": "9636:172:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1094,
										"nodeType": "Block",
										"src": "9854:298:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1061,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1055,
																		"name": "voters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 343,
																		"src": "9872:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
																			"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																		}
																	},
																	"id": 1058,
																	"indexExpression": {
																		"expression": {
																			"id": 1056,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "9879:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1057,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "9879:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "9872:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Voter_$326_storage",
																		"typeString": "struct Stakable.Voter storage ref"
																	}
																},
																"id": 1059,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "votingRight",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 321,
																"src": "9872:30:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "74727565",
																"id": 1060,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9906:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "9872:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520617265206e6f74206120766f746572",
															"id": 1062,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9912:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1622962dddbb0bc5b80d9842cc6f818a1dcbb631c25adc1827fc170d7b8f3f56",
																"typeString": "literal_string \"You are not a voter\""
															},
															"value": "You are not a voter"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1622962dddbb0bc5b80d9842cc6f818a1dcbb631c25adc1827fc170d7b8f3f56",
																"typeString": "literal_string \"You are not a voter\""
															}
														],
														"id": 1054,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9864:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1063,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9864:70:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1064,
												"nodeType": "ExpressionStatement",
												"src": "9864:70:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1074,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1066,
																			"name": "voters",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 343,
																			"src": "9965:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
																				"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																			}
																		},
																		"id": 1069,
																		"indexExpression": {
																			"expression": {
																				"id": 1067,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "9972:3:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 1068,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "9972:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9965:18:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Voter_$326_storage",
																			"typeString": "struct Stakable.Voter storage ref"
																		}
																	},
																	"id": 1070,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "voted",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 325,
																	"src": "9965:24:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																		"typeString": "mapping(uint256 => bool)"
																	}
																},
																"id": 1072,
																"indexExpression": {
																	"id": 1071,
																	"name": "_votingId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 336,
																	"src": "9990:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "9965:35:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 1073,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10004:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "9965:44:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f75206861766520766f746564206265666f7265",
															"id": 1075,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10023:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a6cd3dc8b58b044759ec8a04a341cee3ac69749cc7b33a3876a5b0ed36f28215",
																"typeString": "literal_string \"You have voted before\""
															},
															"value": "You have voted before"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a6cd3dc8b58b044759ec8a04a341cee3ac69749cc7b33a3876a5b0ed36f28215",
																"typeString": "literal_string \"You have voted before\""
															}
														],
														"id": 1065,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9944:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1076,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9944:112:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1077,
												"nodeType": "ExpressionStatement",
												"src": "9944:112:1"
											},
											{
												"expression": {
													"id": 1086,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1078,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 343,
																	"src": "10067:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
																		"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																	}
																},
																"id": 1081,
																"indexExpression": {
																	"expression": {
																		"id": 1079,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "10074:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1080,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "10074:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "10067:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$326_storage",
																	"typeString": "struct Stakable.Voter storage ref"
																}
															},
															"id": 1082,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 325,
															"src": "10067:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1084,
														"indexExpression": {
															"id": 1083,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "10092:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10067:35:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1085,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10105:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "10067:42:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1087,
												"nodeType": "ExpressionStatement",
												"src": "10067:42:1"
											},
											{
												"expression": {
													"id": 1092,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1088,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 347,
															"src": "10119:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1090,
														"indexExpression": {
															"id": 1089,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "10130:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10119:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1091,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10144:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "10119:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1093,
												"nodeType": "ExpressionStatement",
												"src": "10119:26:1"
											}
										]
									},
									"functionSelector": "632a9a52",
									"id": 1095,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1052,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1051,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 388,
												"src": "9837:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "9837:16:1"
										}
									],
									"name": "vote",
									"nameLocation": "9823:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9827:2:1"
									},
									"returnParameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9854:0:1"
									},
									"scope": 1191,
									"src": "9814:338:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1140,
										"nodeType": "Block",
										"src": "10205:300:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1101,
																		"name": "voters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 343,
																		"src": "10223:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
																			"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																		}
																	},
																	"id": 1104,
																	"indexExpression": {
																		"expression": {
																			"id": 1102,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "10230:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1103,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "10230:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10223:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Voter_$326_storage",
																		"typeString": "struct Stakable.Voter storage ref"
																	}
																},
																"id": 1105,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "votingRight",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 321,
																"src": "10223:30:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "74727565",
																"id": 1106,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10257:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "10223:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520617265206e6f74206120766f746572",
															"id": 1108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10263:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1622962dddbb0bc5b80d9842cc6f818a1dcbb631c25adc1827fc170d7b8f3f56",
																"typeString": "literal_string \"You are not a voter\""
															},
															"value": "You are not a voter"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1622962dddbb0bc5b80d9842cc6f818a1dcbb631c25adc1827fc170d7b8f3f56",
																"typeString": "literal_string \"You are not a voter\""
															}
														],
														"id": 1100,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10215:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10215:70:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1110,
												"nodeType": "ExpressionStatement",
												"src": "10215:70:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1120,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1112,
																			"name": "voters",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 343,
																			"src": "10316:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
																				"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																			}
																		},
																		"id": 1115,
																		"indexExpression": {
																			"expression": {
																				"id": 1113,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "10323:3:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 1114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "10323:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "10316:18:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Voter_$326_storage",
																			"typeString": "struct Stakable.Voter storage ref"
																		}
																	},
																	"id": 1116,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "voted",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 325,
																	"src": "10316:24:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																		"typeString": "mapping(uint256 => bool)"
																	}
																},
																"id": 1118,
																"indexExpression": {
																	"id": 1117,
																	"name": "_votingId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 336,
																	"src": "10341:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "10316:35:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "74727565",
																"id": 1119,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10355:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "10316:43:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f752068617665206e6f7420766f74656420796574",
															"id": 1121,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10373:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0a8853ea1660661101fb36486911b88875a73ac2790e2973573eaa89a7746d10",
																"typeString": "literal_string \"You have not voted yet\""
															},
															"value": "You have not voted yet"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0a8853ea1660661101fb36486911b88875a73ac2790e2973573eaa89a7746d10",
																"typeString": "literal_string \"You have not voted yet\""
															}
														],
														"id": 1111,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10295:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10295:112:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1123,
												"nodeType": "ExpressionStatement",
												"src": "10295:112:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1124,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 343,
																	"src": "10418:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$326_storage_$",
																		"typeString": "mapping(address => struct Stakable.Voter storage ref)"
																	}
																},
																"id": 1127,
																"indexExpression": {
																	"expression": {
																		"id": 1125,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "10425:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "10425:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "10418:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$326_storage",
																	"typeString": "struct Stakable.Voter storage ref"
																}
															},
															"id": 1128,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 325,
															"src": "10418:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1130,
														"indexExpression": {
															"id": 1129,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "10443:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "10418:35:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 1131,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10457:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "10418:44:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1133,
												"nodeType": "ExpressionStatement",
												"src": "10418:44:1"
											},
											{
												"expression": {
													"id": 1138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1134,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 347,
															"src": "10472:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1136,
														"indexExpression": {
															"id": 1135,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "10483:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10472:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1137,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10497:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "10472:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1139,
												"nodeType": "ExpressionStatement",
												"src": "10472:26:1"
											}
										]
									},
									"functionSelector": "070c8b74",
									"id": 1141,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1098,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1097,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 388,
												"src": "10188:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "10188:16:1"
										}
									],
									"name": "retractVote",
									"nameLocation": "10167:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10178:2:1"
									},
									"returnParameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10205:0:1"
									},
									"scope": 1191,
									"src": "10158:347:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1179,
										"nodeType": "Block",
										"src": "10585:270:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1151,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1149,
																"name": "totalVoters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 338,
																"src": "10603:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "31",
																"id": 1150,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10617:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10603:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420656e6f75676820766f74657273",
															"id": 1152,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10620:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8443067fe584654845e3de9005bf323ce8e62d22ddf82e3572418fb8e736e171",
																"typeString": "literal_string \"Not enough voters\""
															},
															"value": "Not enough voters"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8443067fe584654845e3de9005bf323ce8e62d22ddf82e3572418fb8e736e171",
																"typeString": "literal_string \"Not enough voters\""
															}
														],
														"id": 1148,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10595:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10595:45:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1154,
												"nodeType": "ExpressionStatement",
												"src": "10595:45:1"
											},
											{
												"assignments": [
													1156
												],
												"declarations": [
													{
														"constant": false,
														"id": 1156,
														"mutability": "mutable",
														"name": "half_voters",
														"nameLocation": "10658:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 1179,
														"src": "10650:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1155,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10650:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1166,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1161,
																	"name": "totalVoters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 338,
																	"src": "10698:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "35",
																	"id": 1162,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10711:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_5_by_1",
																		"typeString": "int_const 5"
																	},
																	"value": "5"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_rational_5_by_1",
																		"typeString": "int_const 5"
																	}
																],
																"expression": {
																	"id": 1159,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 311,
																	"src": "10685:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1160,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 205,
																"src": "10685:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1163,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10685:28:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "3130",
															"id": 1164,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10715:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															},
															"value": "10"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															}
														],
														"expression": {
															"id": 1157,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 311,
															"src": "10672:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1158,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 220,
														"src": "10672:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1165,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10672:46:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10650:68:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 1167,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 347,
															"src": "10733:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1169,
														"indexExpression": {
															"id": 1168,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "10744:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "10733:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1170,
														"name": "half_voters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1156,
														"src": "10757:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10733:35:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1177,
													"nodeType": "Block",
													"src": "10812:37:1",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1175,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10833:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1147,
															"id": 1176,
															"nodeType": "Return",
															"src": "10826:12:1"
														}
													]
												},
												"id": 1178,
												"nodeType": "IfStatement",
												"src": "10729:120:1",
												"trueBody": {
													"id": 1174,
													"nodeType": "Block",
													"src": "10770:36:1",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1172,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10791:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1147,
															"id": 1173,
															"nodeType": "Return",
															"src": "10784:11:1"
														}
													]
												}
											}
										]
									},
									"id": 1180,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1144,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1143,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 388,
												"src": "10553:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "10553:16:1"
										}
									],
									"name": "_getVotingResult",
									"nameLocation": "10520:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1142,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10536:2:1"
									},
									"returnParameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "10579:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1145,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10579:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10578:6:1"
									},
									"scope": 1191,
									"src": "10511:344:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1189,
										"nodeType": "Block",
										"src": "10910:38:1",
										"statements": [
											{
												"expression": {
													"id": 1187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1185,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 334,
														"src": "10920:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1186,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10936:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "10920:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1188,
												"nodeType": "ExpressionStatement",
												"src": "10920:21:1"
											}
										]
									},
									"id": 1190,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1183,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1182,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 388,
												"src": "10893:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "10893:16:1"
										}
									],
									"name": "_stopVoting",
									"nameLocation": "10870:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10881:2:1"
									},
									"returnParameters": {
										"id": 1184,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10910:0:1"
									},
									"scope": 1191,
									"src": "10861:87:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1192,
							"src": "155:10795:1",
							"usedErrors": []
						}
					],
					"src": "39:10912:1"
				},
				"id": 1
			}
		}
	}
}