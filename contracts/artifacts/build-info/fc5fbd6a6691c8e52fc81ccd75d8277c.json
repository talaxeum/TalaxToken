{
	"id": "fc5fbd6a6691c8e52fc81ccd75d8277c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/WhiteList_v2.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @notice Error handling message for Modifier\r\n */\r\nerror Function__notAuthorized();\r\n\r\n/**\r\n * @notice Error handling message for Main Function\r\n */\r\nerror MainFunction__insufficientBalance();\r\nerror MainFunction__amountOverBalance();\r\nerror MainFunction__beneficiaryExist();\r\n\r\n\r\nstruct WhitelistStruct {\r\n    address userAddress;\r\n    uint256 lockedAmount;\r\n    uint256 amount;\r\n    bool isPhase1Claimed;\r\n    uint256 latestClaimDay;\r\n}\r\n\r\nstruct Beneficiary {\r\n    address user;\r\n    uint256 amount;\r\n}\r\n\r\ncontract Whitelist is ReentrancyGuard, Ownable  {\r\n    uint256 public privateSaleUsers;\r\n\r\n    uint256 public privateSaleAmount;\r\n    uint256 internal constant _phase1 = 73395000 * 1e18;\r\n    uint256 internal constant _phase2 = 3820562 * 1e18; // daily limit\r\n\r\n    uint256 public startPrivateSale;\r\n\r\n    // beneficiary of tokens after they are released\r\n    mapping(address => WhitelistStruct) private _beneficiary;\r\n\r\n    address public _token;\r\n\r\n    constructor(address token) {\r\n        privateSaleAmount = 1467900000 * 1e18;\r\n        _token = token;\r\n    }\r\n\r\n    function beneficiary(address user)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            bool,\r\n            uint256\r\n        )\r\n    {\r\n        WhitelistStruct memory beneficiary_ = _beneficiary[user];\r\n        return (\r\n            beneficiary_.userAddress = user,\r\n            beneficiary_.lockedAmount,\r\n            beneficiary_.amount,\r\n            beneficiary_.isPhase1Claimed,\r\n            beneficiary_.latestClaimDay\r\n        );\r\n    }\r\n\r\n    function initiateWhitelist() external onlyOwner {\r\n        startPrivateSale = block.timestamp;\r\n    }\r\n\r\n    function hasWhitelist(address user)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            bool,\r\n            uint256\r\n        )\r\n    {\r\n        WhitelistStruct memory beneficiary_ = _beneficiary[user];\r\n        return (\r\n            beneficiary_.userAddress = user,\r\n            beneficiary_.lockedAmount,\r\n            beneficiary_.amount,\r\n            beneficiary_.isPhase1Claimed,\r\n            beneficiary_.latestClaimDay\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  @dev \t\tMain Functions\r\n     *  @return \tClaimable amount from Locked Wallet\r\n     */\r\n    function _calculateClaimableAmount(address user)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 claimable;\r\n\r\n        uint256 lockDuration = (block.timestamp - startPrivateSale) / 1 days;\r\n\r\n        //Phase 1 of locked wallet release - monthly\r\n        if (lockDuration < 16 * 30) {\r\n            if (_beneficiary[user].isPhase1Claimed == false) {\r\n                _beneficiary[user].isPhase1Claimed = true;\r\n                _beneficiary[user].latestClaimDay = 15 * 30;\r\n                claimable =\r\n                    claimable +\r\n                    ((_phase1 * _beneficiary[user].lockedAmount) /\r\n                        privateSaleAmount);\r\n            }\r\n        }\r\n        //Phase 2 of locked wallet release - daily\r\n        else if (lockDuration >= 16 * 30 && lockDuration < 28 * 30) {\r\n            if (_beneficiary[user].isPhase1Claimed == false) {\r\n                _beneficiary[user].isPhase1Claimed = true;\r\n                claimable =\r\n                    claimable +\r\n                    ((_phase1 * _beneficiary[user].lockedAmount) /\r\n                        privateSaleAmount);\r\n            }\r\n\r\n            uint256 sinceLatestClaim = lockDuration -\r\n                _beneficiary[user].latestClaimDay;\r\n            _beneficiary[user].latestClaimDay = lockDuration;\r\n            claimable =\r\n                sinceLatestClaim *\r\n                (claimable +\r\n                    ((_phase2 * _beneficiary[user].lockedAmount) /\r\n                        privateSaleAmount));\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n        return claimable;\r\n    }\r\n\r\n    function addBeneficiary(address user, uint256 amount) external onlyOwner {\r\n        if (_beneficiary[user].lockedAmount != 0) {\r\n            revert MainFunction__beneficiaryExist();\r\n        } else {\r\n            if (amount > privateSaleAmount) {\r\n                revert MainFunction__insufficientBalance();\r\n            }\r\n\r\n            if (amount > 0) {\r\n                _beneficiary[user].lockedAmount = amount;\r\n                _beneficiary[user].amount = amount;\r\n                _beneficiary[user].isPhase1Claimed = false;\r\n                _beneficiary[user].latestClaimDay = 1;\r\n\r\n                privateSaleUsers += 1;\r\n                privateSaleAmount -= amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    function deleteBeneficiary(address user)\r\n        external\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        if (_beneficiary[user].amount > 0) {\r\n            privateSaleUsers -= 1;\r\n            privateSaleAmount += _beneficiary[user].amount;\r\n            uint256 ex_amount = _beneficiary[user].amount;\r\n\r\n            delete _beneficiary[user];\r\n            return ex_amount;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function releaseClaimable()\r\n        external\r\n    {\r\n        if (_beneficiary[msg.sender].amount > 0) {\r\n            uint256 claimableLockedAmount = _calculateClaimableAmount(msg.sender);\r\n\r\n            if (claimableLockedAmount > 0) {\r\n                _beneficiary[msg.sender].amount =\r\n                    _beneficiary[msg.sender].amount -\r\n                    claimableLockedAmount;\r\n\r\n                // _beneficiary[user].userAddress = user;\r\n\r\n                SafeERC20.safeTransfer(\r\n                    IERC20(_token),\r\n                    msg.sender,\r\n                    claimableLockedAmount\r\n                );\r\n            } \r\n        }\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A 0xF7 DUP8 EXTCODECOPY 0xCE 0xD4 SLT MLOAD DUP2 0xAA 0xAF RETURNDATACOPY 0xE1 0xF8 0xB1 RETURNDATACOPY 0xC0 0xB6 EQ JUMPDEST NUMBER 0xAC 0x24 0x27 0xEA 0xCC PUSH2 0xDF4E EQ 0x2C 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;645:3270:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A 0xF7 DUP8 EXTCODECOPY 0xCE 0xD4 SLT MLOAD DUP2 0xAA 0xAF RETURNDATACOPY 0xE1 0xF8 0xB1 RETURNDATACOPY 0xC0 0xB6 EQ JUMPDEST NUMBER 0xAC 0x24 0x27 0xEA 0xCC PUSH2 0xDF4E EQ 0x2C 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033",
									".code": [
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xE6 0xEE 0xDF DIFFICULTY 0xD6 0x5F MSTORE PUSH2 0x3BCF 0xAB SWAP4 DUP3 SHR SWAP15 CREATE2 PUSH13 0x2157C74D9DB29E16940B500A4C SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8061:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xE6 0xEE 0xDF DIFFICULTY 0xD6 0x5F MSTORE PUSH2 0x3BCF 0xAB SWAP4 DUP3 SHR SWAP15 CREATE2 PUSH13 0x2157C74D9DB29E16940B500A4C SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033",
									".code": [
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/WhiteList_v2.sol": {
				"Whitelist": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "MainFunction__beneficiaryExist",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MainFunction__insufficientBalance",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "_token",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "addBeneficiary",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "beneficiary",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "deleteBeneficiary",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "hasWhitelist",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initiateWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "privateSaleAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "privateSaleUsers",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "releaseClaimable",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startPrivateSale",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/WhiteList_v2.sol\":770:6116  contract Whitelist is ReentrancyGuard, Ownable  {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/WhiteList_v2.sol\":1225:1333  constructor(address token) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1813  _status */\n  0x00\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_9\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  tag_12\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_9:\n    /* \"contracts/WhiteList_v2.sol\":1283:1300  1467900000 * 1e18 */\n  0x04be37ea7317415c45800000\n    /* \"contracts/WhiteList_v2.sol\":1263:1280  privateSaleAmount */\n  0x03\n    /* \"contracts/WhiteList_v2.sol\":1263:1300  privateSaleAmount = 1467900000 * 1e18 */\n  sstore\n    /* \"contracts/WhiteList_v2.sol\":1311:1317  _token */\n  0x06\n    /* \"contracts/WhiteList_v2.sol\":1311:1325  _token = token */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"contracts/WhiteList_v2.sol\":770:6116  contract Whitelist is ReentrancyGuard, Ownable  {... */\n  jump(tag_17)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_12:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  0x01\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_19\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_19:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_20\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_20:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_17:\n    /* \"contracts/WhiteList_v2.sol\":770:6116  contract Whitelist is ReentrancyGuard, Ownable  {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/WhiteList_v2.sol\":770:6116  contract Whitelist is ReentrancyGuard, Ownable  {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8cdb7e8b\n      gt\n      tag_16\n      jumpi\n      dup1\n      0xd5498dc7\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xd5498dc7\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xecd0c0c3\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xefdd8796\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_15\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      dup1\n      0x8cdb7e8b\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x96074e70\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_16:\n      dup1\n      0x7d3bca76\n      gt\n      tag_18\n      jumpi\n      dup1\n      0x7d3bca76\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x81008568\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8b2b423a\n      eq\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup1\n      0x338dbf59\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x549dee0b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/WhiteList_v2.sol\":1036:1067  uint256 public startPrivateSale */\n    tag_3:\n      tag_19\n      sload(0x04)\n      dup2\n      jump\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"contracts/WhiteList_v2.sol\":1036:1067  uint256 public startPrivateSale */\n    tag_21:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/WhiteList_v2.sol\":825:856  uint256 public privateSaleUsers */\n    tag_4:\n      tag_19\n      sload(0x02)\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_5:\n      tag_26\n      tag_27\n      jump\t// in\n    tag_26:\n      stop\n        /* \"contracts/WhiteList_v2.sol\":4918:5364  function deleteBeneficiary(address user)... */\n    tag_6:\n      tag_19\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n        /* \"contracts/WhiteList_v2.sol\":1341:1858  function beneficiary(address user)... */\n    tag_7:\n      tag_33\n      tag_34\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_34:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":1598:1616  _beneficiary[user] */\n      and\n        /* \"contracts/WhiteList_v2.sol\":1440:1447  address */\n      0x00\n        /* \"contracts/WhiteList_v2.sol\":1598:1616  _beneficiary[user] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":1598:1610  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":1598:1616  _beneficiary[user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":1560:1616  WhitelistStruct memory beneficiary_ = _beneficiary[user] */\n      dup3\n      mload\n      0xa0\n      dup2\n      add\n      dup5\n      mstore\n      0x01\n      dup3\n      add\n      sload\n      swap3\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      0x02\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      0x03\n      dup3\n      add\n      sload\n      0xff\n      and\n      iszero\n      iszero\n      0x60\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x04\n      swap1\n      swap3\n      add\n      sload\n      0x80\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":1649:1680  beneficiary_.userAddress = user */\n      swap1\n      dup6\n      swap1\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":1598:1616  _beneficiary[user] */\n      swap4\n      swap5\n        /* \"contracts/WhiteList_v2.sol\":1560:1616  WhitelistStruct memory beneficiary_ = _beneficiary[user] */\n      swap2\n      swap4\n      swap1\n      swap2\n        /* \"contracts/WhiteList_v2.sol\":1341:1858  function beneficiary(address user)... */\n      jump\n    tag_33:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":859:914   */\n      swap1\n      swap7\n      and\n        /* \"#utility.yul\":841:915   */\n      dup7\n      mstore\n        /* \"#utility.yul\":946:948   */\n      0x20\n        /* \"#utility.yul\":931:949   */\n      dup7\n      add\n        /* \"#utility.yul\":924:958   */\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"#utility.yul\":974:992   */\n      swap3\n      dup5\n      add\n        /* \"#utility.yul\":967:1001   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":1044:1058   */\n      iszero\n        /* \"#utility.yul\":1037:1059   */\n      iszero\n        /* \"#utility.yul\":1032:1034   */\n      0x60\n        /* \"#utility.yul\":1017:1035   */\n      dup4\n      add\n        /* \"#utility.yul\":1010:1060   */\n      mstore\n        /* \"#utility.yul\":1091:1094   */\n      0x80\n        /* \"#utility.yul\":1076:1095   */\n      dup3\n      add\n        /* \"#utility.yul\":1069:1104   */\n      mstore\n        /* \"#utility.yul\":828:831   */\n      0xa0\n        /* \"#utility.yul\":813:832   */\n      add\n        /* \"contracts/WhiteList_v2.sol\":1341:1858  function beneficiary(address user)... */\n      tag_21\n        /* \"#utility.yul\":588:1110   */\n      jump\n        /* \"contracts/WhiteList_v2.sol\":865:897  uint256 public privateSaleAmount */\n    tag_8:\n      tag_19\n      sload(0x03)\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_10:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_45:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1279:1334   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1261:1335   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1249:1251   */\n      0x20\n        /* \"#utility.yul\":1234:1252   */\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n      tag_21\n        /* \"#utility.yul\":1115:1341   */\n      jump\n        /* \"contracts/WhiteList_v2.sol\":4205:4910  function addBeneficiary(address user, uint256 amount) external onlyOwner {... */\n    tag_11:\n      tag_26\n      tag_50\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n        /* \"contracts/WhiteList_v2.sol\":5456:6113  function releaseClaimable()... */\n    tag_12:\n      tag_26\n      tag_54\n      jump\t// in\n        /* \"contracts/WhiteList_v2.sol\":1195:1216  address public _token */\n    tag_13:\n      sload(0x06)\n      tag_45\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/WhiteList_v2.sol\":1866:1967  function initiateWhitelist() external onlyOwner {... */\n    tag_14:\n      tag_26\n      tag_59\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_15:\n      tag_26\n      tag_61\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_61:\n      tag_62\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_27:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_67\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1807:1809   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1789:1810   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":1826:1844   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1819:1849   */\n      mstore\n        /* \"#utility.yul\":1885:1919   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":1865:1883   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1858:1920   */\n      mstore\n        /* \"#utility.yul\":1937:1955   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_68:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_67:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_71\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_72\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_71:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/WhiteList_v2.sol\":4918:5364  function deleteBeneficiary(address user)... */\n    tag_31:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload(0x01)\n        /* \"contracts/WhiteList_v2.sol\":5014:5021  uint256 */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_76\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1807:1809   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1789:1810   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":1826:1844   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1819:1849   */\n      mstore\n        /* \"#utility.yul\":1885:1919   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":1865:1883   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1858:1920   */\n      mstore\n        /* \"#utility.yul\":1937:1955   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_68\n        /* \"#utility.yul\":1605:1961   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_76:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":5043:5061  _beneficiary[user] */\n      dup3\n      and\n        /* \"contracts/WhiteList_v2.sol\":5071:5072  0 */\n      0x00\n        /* \"contracts/WhiteList_v2.sol\":5043:5061  _beneficiary[user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":5043:5055  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":5043:5061  _beneficiary[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":5043:5068  _beneficiary[user].amount */\n      0x02\n      add\n      sload\n        /* \"contracts/WhiteList_v2.sol\":5043:5072  _beneficiary[user].amount > 0 */\n      iszero\n        /* \"contracts/WhiteList_v2.sol\":5039:5357  if (_beneficiary[user].amount > 0) {... */\n      tag_79\n      jumpi\n        /* \"contracts/WhiteList_v2.sol\":5109:5110  1 */\n      0x01\n        /* \"contracts/WhiteList_v2.sol\":5089:5105  privateSaleUsers */\n      0x02\n      0x00\n        /* \"contracts/WhiteList_v2.sol\":5089:5110  privateSaleUsers -= 1 */\n      dup3\n      dup3\n      sload\n      tag_80\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_80:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":5146:5164  _beneficiary[user] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":5146:5158  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":5146:5164  _beneficiary[user] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":5146:5171  _beneficiary[user].amount */\n      0x02\n      add\n      sload\n        /* \"contracts/WhiteList_v2.sol\":5125:5142  privateSaleAmount */\n      0x03\n        /* \"contracts/WhiteList_v2.sol\":5125:5171  privateSaleAmount += _beneficiary[user].amount */\n      dup1\n      sload\n        /* \"contracts/WhiteList_v2.sol\":5146:5171  _beneficiary[user].amount */\n      swap2\n      swap3\n        /* \"contracts/WhiteList_v2.sol\":5125:5142  privateSaleAmount */\n      swap1\n      swap2\n        /* \"contracts/WhiteList_v2.sol\":5125:5171  privateSaleAmount += _beneficiary[user].amount */\n      tag_82\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":5146:5171  _beneficiary[user].amount */\n      dup5\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":5125:5171  privateSaleAmount += _beneficiary[user].amount */\n      tag_83\n      jump\t// in\n    tag_82:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":5206:5224  _beneficiary[user] */\n      and\n        /* \"contracts/WhiteList_v2.sol\":5186:5203  uint256 ex_amount */\n      0x00\n        /* \"contracts/WhiteList_v2.sol\":5206:5224  _beneficiary[user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":5206:5218  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":5206:5224  _beneficiary[user] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":5206:5231  _beneficiary[user].amount */\n      0x02\n      dup2\n      add\n      dup1\n      sload\n        /* \"contracts/WhiteList_v2.sol\":5248:5273  delete _beneficiary[user] */\n      dup3\n      sload\n      not(0xffffffffffffffffffffffffffffffffffffffff)\n      and\n      dup4\n      sstore\n      0x01\n      dup4\n      add\n      dup5\n      swap1\n      sstore\n      swap1\n      dup4\n      swap1\n      sstore\n      0x03\n      dup3\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n      0x04\n      swap1\n      swap2\n      add\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"contracts/WhiteList_v2.sol\":5206:5231  _beneficiary[user].amount */\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":4918:5364  function deleteBeneficiary(address user)... */\n      jump\t// out\n        /* \"contracts/WhiteList_v2.sol\":5039:5357  if (_beneficiary[user].amount > 0) {... */\n    tag_79:\n      pop\n        /* \"contracts/WhiteList_v2.sol\":5344:5345  0 */\n      0x00\n        /* \"contracts/WhiteList_v2.sol\":5039:5357  if (_beneficiary[user].amount > 0) {... */\n    tag_84:\n        /* \"contracts/WhiteList_v2.sol\":4918:5364  function deleteBeneficiary(address user)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/WhiteList_v2.sol\":4205:4910  function addBeneficiary(address user, uint256 amount) external onlyOwner {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_91\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1807:1809   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1789:1810   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":1826:1844   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1819:1849   */\n      mstore\n        /* \"#utility.yul\":1885:1919   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":1865:1883   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1858:1920   */\n      mstore\n        /* \"#utility.yul\":1937:1955   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_68\n        /* \"#utility.yul\":1605:1961   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_91:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":4293:4311  _beneficiary[user] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":4293:4305  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":4293:4311  _beneficiary[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":4293:4324  _beneficiary[user].lockedAmount */\n      0x01\n      add\n      sload\n        /* \"contracts/WhiteList_v2.sol\":4293:4329  _beneficiary[user].lockedAmount != 0 */\n      iszero\n        /* \"contracts/WhiteList_v2.sol\":4289:4903  if (_beneficiary[user].lockedAmount != 0) {... */\n      tag_94\n      jumpi\n        /* \"contracts/WhiteList_v2.sol\":4353:4385  MainFunction__beneficiaryExist() */\n      mload(0x40)\n      0xab1818da00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/WhiteList_v2.sol\":4289:4903  if (_beneficiary[user].lockedAmount != 0) {... */\n    tag_94:\n        /* \"contracts/WhiteList_v2.sol\":4431:4448  privateSaleAmount */\n      sload(0x03)\n        /* \"contracts/WhiteList_v2.sol\":4422:4428  amount */\n      dup2\n        /* \"contracts/WhiteList_v2.sol\":4422:4448  amount > privateSaleAmount */\n      gt\n        /* \"contracts/WhiteList_v2.sol\":4418:4527  if (amount > privateSaleAmount) {... */\n      iszero\n      tag_96\n      jumpi\n        /* \"contracts/WhiteList_v2.sol\":4476:4511  MainFunction__insufficientBalance() */\n      mload(0x40)\n      0x194f40dc00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/WhiteList_v2.sol\":4418:4527  if (amount > privateSaleAmount) {... */\n    tag_96:\n        /* \"contracts/WhiteList_v2.sol\":4547:4557  amount > 0 */\n      dup1\n      iszero\n        /* \"contracts/WhiteList_v2.sol\":4543:4892  if (amount > 0) {... */\n      tag_97\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":4578:4596  _beneficiary[user] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":4578:4590  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":4578:4596  _beneficiary[user] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":4578:4609  _beneficiary[user].lockedAmount */\n      0x01\n      dup1\n      dup3\n      add\n        /* \"contracts/WhiteList_v2.sol\":4578:4618  _beneficiary[user].lockedAmount = amount */\n      dup5\n      swap1\n      sstore\n        /* \"contracts/WhiteList_v2.sol\":4637:4662  _beneficiary[user].amount */\n      0x02\n      dup1\n      dup4\n      add\n        /* \"contracts/WhiteList_v2.sol\":4637:4671  _beneficiary[user].amount = amount */\n      dup6\n      swap1\n      sstore\n        /* \"contracts/WhiteList_v2.sol\":4690:4724  _beneficiary[user].isPhase1Claimed */\n      0x03\n      dup4\n      add\n        /* \"contracts/WhiteList_v2.sol\":4690:4732  _beneficiary[user].isPhase1Claimed = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/WhiteList_v2.sol\":4751:4784  _beneficiary[user].latestClaimDay */\n      0x04\n      swap1\n      swap3\n      add\n        /* \"contracts/WhiteList_v2.sol\":4751:4788  _beneficiary[user].latestClaimDay = 1 */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/WhiteList_v2.sol\":4809:4830  privateSaleUsers += 1 */\n      dup2\n      sload\n        /* \"contracts/WhiteList_v2.sol\":4578:4609  _beneficiary[user].lockedAmount */\n      swap1\n      swap3\n        /* \"contracts/WhiteList_v2.sol\":4578:4596  _beneficiary[user] */\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":4809:4830  privateSaleUsers += 1 */\n      tag_98\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":4578:4609  _beneficiary[user].lockedAmount */\n      dup5\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":4809:4830  privateSaleUsers += 1 */\n      tag_83\n      jump\t// in\n    tag_98:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/WhiteList_v2.sol\":4870:4876  amount */\n      dup1\n        /* \"contracts/WhiteList_v2.sol\":4849:4866  privateSaleAmount */\n      0x03\n      0x00\n        /* \"contracts/WhiteList_v2.sol\":4849:4876  privateSaleAmount -= amount */\n      dup3\n      dup3\n      sload\n      tag_99\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_99:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/WhiteList_v2.sol\":4543:4892  if (amount > 0) {... */\n    tag_97:\n        /* \"contracts/WhiteList_v2.sol\":4205:4910  function addBeneficiary(address user, uint256 amount) external onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/WhiteList_v2.sol\":5456:6113  function releaseClaimable()... */\n    tag_54:\n        /* \"contracts/WhiteList_v2.sol\":5535:5545  msg.sender */\n      caller\n        /* \"contracts/WhiteList_v2.sol\":5556:5557  0 */\n      0x00\n        /* \"contracts/WhiteList_v2.sol\":5522:5546  _beneficiary[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":5522:5534  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":5522:5546  _beneficiary[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":5522:5553  _beneficiary[msg.sender].amount */\n      0x02\n      add\n      sload\n        /* \"contracts/WhiteList_v2.sol\":5522:5557  _beneficiary[msg.sender].amount > 0 */\n      iszero\n        /* \"contracts/WhiteList_v2.sol\":5518:6106  if (_beneficiary[msg.sender].amount > 0) {... */\n      tag_71\n      jumpi\n        /* \"contracts/WhiteList_v2.sol\":5574:5603  uint256 claimableLockedAmount */\n      0x00\n        /* \"contracts/WhiteList_v2.sol\":5606:5643  _calculateClaimableAmount(msg.sender) */\n      tag_102\n        /* \"contracts/WhiteList_v2.sol\":5632:5642  msg.sender */\n      caller\n        /* \"contracts/WhiteList_v2.sol\":5606:5631  _calculateClaimableAmount */\n      tag_103\n        /* \"contracts/WhiteList_v2.sol\":5606:5643  _calculateClaimableAmount(msg.sender) */\n      jump\t// in\n    tag_102:\n        /* \"contracts/WhiteList_v2.sol\":5574:5643  uint256 claimableLockedAmount = _calculateClaimableAmount(msg.sender) */\n      swap1\n      pop\n        /* \"contracts/WhiteList_v2.sol\":5664:5689  claimableLockedAmount > 0 */\n      dup1\n      iszero\n        /* \"contracts/WhiteList_v2.sol\":5660:6094  if (claimableLockedAmount > 0) {... */\n      tag_106\n      jumpi\n        /* \"contracts/WhiteList_v2.sol\":5778:5788  msg.sender */\n      caller\n        /* \"contracts/WhiteList_v2.sol\":5765:5789  _beneficiary[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":5765:5777  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":5765:5789  _beneficiary[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":5765:5796  _beneficiary[msg.sender].amount */\n      0x02\n      add\n      sload\n        /* \"contracts/WhiteList_v2.sol\":5765:5841  _beneficiary[msg.sender].amount -... */\n      tag_105\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":5820:5841  claimableLockedAmount */\n      dup3\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":5765:5841  _beneficiary[msg.sender].amount -... */\n      tag_81\n      jump\t// in\n    tag_105:\n        /* \"contracts/WhiteList_v2.sol\":5723:5733  msg.sender */\n      caller\n        /* \"contracts/WhiteList_v2.sol\":5710:5734  _beneficiary[msg.sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":5710:5722  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":5710:5734  _beneficiary[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":5710:5741  _beneficiary[msg.sender].amount */\n      0x02\n      add\n        /* \"contracts/WhiteList_v2.sol\":5710:5841  _beneficiary[msg.sender].amount =... */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"contracts/WhiteList_v2.sol\":5975:5981  _token */\n      sload(0x06)\n        /* \"contracts/WhiteList_v2.sol\":5923:6078  SafeERC20.safeTransfer(... */\n      tag_106\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":5975:5981  _token */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":6038:6059  claimableLockedAmount */\n      dup4\n        /* \"contracts/WhiteList_v2.sol\":5923:5945  SafeERC20.safeTransfer */\n      tag_107\n        /* \"contracts/WhiteList_v2.sol\":5923:6078  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_106:\n        /* \"contracts/WhiteList_v2.sol\":5559:6106  {... */\n      pop\n        /* \"contracts/WhiteList_v2.sol\":5456:6113  function releaseClaimable()... */\n      jump\t// out\n        /* \"contracts/WhiteList_v2.sol\":1866:1967  function initiateWhitelist() external onlyOwner {... */\n    tag_59:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_111\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1807:1809   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1789:1810   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":1826:1844   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1819:1849   */\n      mstore\n        /* \"#utility.yul\":1885:1919   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":1865:1883   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1858:1920   */\n      mstore\n        /* \"#utility.yul\":1937:1955   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_68\n        /* \"#utility.yul\":1605:1961   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_111:\n        /* \"contracts/WhiteList_v2.sol\":1944:1959  block.timestamp */\n      timestamp\n        /* \"contracts/WhiteList_v2.sol\":1925:1941  startPrivateSale */\n      0x04\n        /* \"contracts/WhiteList_v2.sol\":1925:1959  startPrivateSale = block.timestamp */\n      sstore\n        /* \"contracts/WhiteList_v2.sol\":1866:1967  function initiateWhitelist() external onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_62:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1807:1809   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1789:1810   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":1826:1844   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1819:1849   */\n      mstore\n        /* \"#utility.yul\":1885:1919   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":1865:1883   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1858:1920   */\n      mstore\n        /* \"#utility.yul\":1937:1955   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_68\n        /* \"#utility.yul\":1605:1961   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_117:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_120\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2620:2622   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2602:2623   */\n      mstore\n        /* \"#utility.yul\":2659:2661   */\n      0x26\n        /* \"#utility.yul\":2639:2657   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2632:2662   */\n      mstore\n        /* \"#utility.yul\":2698:2732   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":2678:2696   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2671:2733   */\n      mstore\n        /* \"#utility.yul\":2769:2777   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":2749:2767   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2742:2778   */\n      mstore\n        /* \"#utility.yul\":2795:2814   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_68\n        /* \"#utility.yul\":2418:2820   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_120:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_106\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_72:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(0xffffffffffffffffffffffffffffffffffffffff)\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"contracts/WhiteList_v2.sol\":2604:4197  function _calculateClaimableAmount(address user)... */\n    tag_103:\n        /* \"contracts/WhiteList_v2.sol\":2689:2696  uint256 */\n      0x00\n        /* \"contracts/WhiteList_v2.sol\":2714:2731  uint256 claimable */\n      dup1\n        /* \"contracts/WhiteList_v2.sol\":2744:2764  uint256 lockDuration */\n      0x00\n        /* \"contracts/WhiteList_v2.sol\":2806:2812  1 days */\n      0x015180\n        /* \"contracts/WhiteList_v2.sol\":2786:2802  startPrivateSale */\n      sload(0x04)\n        /* \"contracts/WhiteList_v2.sol\":2768:2783  block.timestamp */\n      timestamp\n        /* \"contracts/WhiteList_v2.sol\":2768:2802  block.timestamp - startPrivateSale */\n      tag_127\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_127:\n        /* \"contracts/WhiteList_v2.sol\":2767:2812  (block.timestamp - startPrivateSale) / 1 days */\n      tag_128\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_128:\n        /* \"contracts/WhiteList_v2.sol\":2744:2812  uint256 lockDuration = (block.timestamp - startPrivateSale) / 1 days */\n      swap1\n      pop\n        /* \"contracts/WhiteList_v2.sol\":2898:2905  16 * 30 */\n      0x01e0\n        /* \"contracts/WhiteList_v2.sol\":2883:2895  lockDuration */\n      dup2\n        /* \"contracts/WhiteList_v2.sol\":2883:2905  lockDuration < 16 * 30 */\n      lt\n        /* \"contracts/WhiteList_v2.sol\":2879:4161  if (lockDuration < 16 * 30) {... */\n      iszero\n      tag_130\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":2926:2944  _beneficiary[user] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":2926:2938  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":2926:2944  _beneficiary[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":2926:2960  _beneficiary[user].isPhase1Claimed */\n      0x03\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/WhiteList_v2.sol\":2922:3284  if (_beneficiary[user].isPhase1Claimed == false) {... */\n      tag_131\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":2990:3008  _beneficiary[user] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":2990:3002  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":2990:3008  _beneficiary[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":2990:3024  _beneficiary[user].isPhase1Claimed */\n      0x03\n      dup1\n      dup3\n      add\n        /* \"contracts/WhiteList_v2.sol\":2990:3031  _beneficiary[user].isPhase1Claimed = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/WhiteList_v2.sol\":3027:3031  true */\n      0x01\n        /* \"contracts/WhiteList_v2.sol\":2990:3031  _beneficiary[user].isPhase1Claimed = true */\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/WhiteList_v2.sol\":3086:3093  15 * 30 */\n      0x01c2\n        /* \"contracts/WhiteList_v2.sol\":3050:3083  _beneficiary[user].latestClaimDay */\n      0x04\n      dup5\n      add\n        /* \"contracts/WhiteList_v2.sol\":3050:3093  _beneficiary[user].latestClaimDay = 15 * 30 */\n      sstore\n        /* \"contracts/WhiteList_v2.sol\":3250:3267  privateSaleAmount */\n      swap1\n      sload\n        /* \"contracts/WhiteList_v2.sol\":3190:3221  _beneficiary[user].lockedAmount */\n      swap2\n      add\n      sload\n        /* \"contracts/WhiteList_v2.sol\":3180:3221  _phase1 * _beneficiary[user].lockedAmount */\n      tag_132\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":940:955  73395000 * 1e18 */\n      0x3cb5feec27901169e00000\n        /* \"contracts/WhiteList_v2.sol\":3180:3221  _phase1 * _beneficiary[user].lockedAmount */\n      tag_133\n      jump\t// in\n    tag_132:\n        /* \"contracts/WhiteList_v2.sol\":3179:3267  (_phase1 * _beneficiary[user].lockedAmount) /... */\n      tag_134\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_134:\n        /* \"contracts/WhiteList_v2.sol\":3145:3268  claimable +... */\n      tag_135\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":3145:3154  claimable */\n      dup4\n        /* \"contracts/WhiteList_v2.sol\":3145:3268  claimable +... */\n      tag_83\n      jump\t// in\n    tag_135:\n        /* \"contracts/WhiteList_v2.sol\":3112:3268  claimable =... */\n      swap2\n      pop\n        /* \"contracts/WhiteList_v2.sol\":2922:3284  if (_beneficiary[user].isPhase1Claimed == false) {... */\n    tag_131:\n        /* \"contracts/WhiteList_v2.sol\":2879:4161  if (lockDuration < 16 * 30) {... */\n      jump(tag_148)\n    tag_130:\n        /* \"contracts/WhiteList_v2.sol\":3382:3389  16 * 30 */\n      0x01e0\n        /* \"contracts/WhiteList_v2.sol\":3366:3378  lockDuration */\n      dup2\n        /* \"contracts/WhiteList_v2.sol\":3366:3389  lockDuration >= 16 * 30 */\n      lt\n      iszero\n        /* \"contracts/WhiteList_v2.sol\":3366:3415  lockDuration >= 16 * 30 && lockDuration < 28 * 30 */\n      dup1\n      iszero\n      tag_137\n      jumpi\n      pop\n        /* \"contracts/WhiteList_v2.sol\":3408:3415  28 * 30 */\n      0x0348\n        /* \"contracts/WhiteList_v2.sol\":3393:3405  lockDuration */\n      dup2\n        /* \"contracts/WhiteList_v2.sol\":3393:3415  lockDuration < 28 * 30 */\n      lt\n        /* \"contracts/WhiteList_v2.sol\":3366:3415  lockDuration >= 16 * 30 && lockDuration < 28 * 30 */\n    tag_137:\n        /* \"contracts/WhiteList_v2.sol\":3362:4161  if (lockDuration >= 16 * 30 && lockDuration < 28 * 30) {... */\n      iszero\n      tag_138\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":3436:3454  _beneficiary[user] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":3436:3448  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":3436:3454  _beneficiary[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":3436:3470  _beneficiary[user].isPhase1Claimed */\n      0x03\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/WhiteList_v2.sol\":3432:3732  if (_beneficiary[user].isPhase1Claimed == false) {... */\n      tag_139\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":3500:3518  _beneficiary[user] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":3500:3512  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":3500:3518  _beneficiary[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":3500:3534  _beneficiary[user].isPhase1Claimed */\n      0x03\n      dup1\n      dup3\n      add\n        /* \"contracts/WhiteList_v2.sol\":3500:3541  _beneficiary[user].isPhase1Claimed = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/WhiteList_v2.sol\":3537:3541  true */\n      0x01\n        /* \"contracts/WhiteList_v2.sol\":3500:3541  _beneficiary[user].isPhase1Claimed = true */\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/WhiteList_v2.sol\":3698:3715  privateSaleAmount */\n      swap1\n      sload\n        /* \"contracts/WhiteList_v2.sol\":3638:3669  _beneficiary[user].lockedAmount */\n      swap2\n      add\n      sload\n        /* \"contracts/WhiteList_v2.sol\":3628:3669  _phase1 * _beneficiary[user].lockedAmount */\n      tag_140\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":940:955  73395000 * 1e18 */\n      0x3cb5feec27901169e00000\n        /* \"contracts/WhiteList_v2.sol\":3628:3669  _phase1 * _beneficiary[user].lockedAmount */\n      tag_133\n      jump\t// in\n    tag_140:\n        /* \"contracts/WhiteList_v2.sol\":3627:3715  (_phase1 * _beneficiary[user].lockedAmount) /... */\n      tag_141\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_141:\n        /* \"contracts/WhiteList_v2.sol\":3593:3716  claimable +... */\n      tag_142\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":3593:3602  claimable */\n      dup4\n        /* \"contracts/WhiteList_v2.sol\":3593:3716  claimable +... */\n      tag_83\n      jump\t// in\n    tag_142:\n        /* \"contracts/WhiteList_v2.sol\":3560:3716  claimable =... */\n      swap2\n      pop\n        /* \"contracts/WhiteList_v2.sol\":3432:3732  if (_beneficiary[user].isPhase1Claimed == false) {... */\n    tag_139:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":3807:3825  _beneficiary[user] */\n      dup5\n      and\n        /* \"contracts/WhiteList_v2.sol\":3748:3772  uint256 sinceLatestClaim */\n      0x00\n        /* \"contracts/WhiteList_v2.sol\":3807:3825  _beneficiary[user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":3807:3819  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":3807:3825  _beneficiary[user] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":3807:3840  _beneficiary[user].latestClaimDay */\n      0x04\n      add\n      sload\n        /* \"contracts/WhiteList_v2.sol\":3775:3840  lockDuration -... */\n      tag_143\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":3775:3787  lockDuration */\n      dup4\n        /* \"contracts/WhiteList_v2.sol\":3775:3840  lockDuration -... */\n      tag_81\n      jump\t// in\n    tag_143:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/WhiteList_v2.sol\":3855:3873  _beneficiary[user] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/WhiteList_v2.sol\":3855:3867  _beneficiary */\n      0x05\n        /* \"contracts/WhiteList_v2.sol\":3855:3873  _beneficiary[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/WhiteList_v2.sol\":3855:3888  _beneficiary[user].latestClaimDay */\n      0x04\n      dup2\n      add\n        /* \"contracts/WhiteList_v2.sol\":3855:3903  _beneficiary[user].latestClaimDay = lockDuration */\n      dup5\n      swap1\n      sstore\n        /* \"contracts/WhiteList_v2.sol\":4089:4106  privateSaleAmount */\n      sload(0x03)\n        /* \"contracts/WhiteList_v2.sol\":4029:4060  _beneficiary[user].lockedAmount */\n      0x01\n      swap1\n      swap2\n      add\n      sload\n        /* \"contracts/WhiteList_v2.sol\":3748:3840  uint256 sinceLatestClaim = lockDuration -... */\n      swap2\n      swap3\n      pop\n        /* \"contracts/WhiteList_v2.sol\":4089:4106  privateSaleAmount */\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":4019:4060  _phase2 * _beneficiary[user].lockedAmount */\n      tag_144\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":998:1012  3820562 * 1e18 */\n      0x03290914be1afb75080000\n        /* \"contracts/WhiteList_v2.sol\":4019:4060  _phase2 * _beneficiary[user].lockedAmount */\n      tag_133\n      jump\t// in\n    tag_144:\n        /* \"contracts/WhiteList_v2.sol\":4018:4106  (_phase2 * _beneficiary[user].lockedAmount) /... */\n      tag_145\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_145:\n        /* \"contracts/WhiteList_v2.sol\":3984:4107  claimable +... */\n      tag_146\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":3984:3993  claimable */\n      dup5\n        /* \"contracts/WhiteList_v2.sol\":3984:4107  claimable +... */\n      tag_83\n      jump\t// in\n    tag_146:\n        /* \"contracts/WhiteList_v2.sol\":3947:4108  sinceLatestClaim *... */\n      tag_147\n      swap1\n        /* \"contracts/WhiteList_v2.sol\":3947:3963  sinceLatestClaim */\n      dup3\n        /* \"contracts/WhiteList_v2.sol\":3947:4108  sinceLatestClaim *... */\n      tag_133\n      jump\t// in\n    tag_147:\n        /* \"contracts/WhiteList_v2.sol\":3918:4108  claimable =... */\n      swap3\n      pop\n        /* \"contracts/WhiteList_v2.sol\":3417:4120  {... */\n      pop\n        /* \"contracts/WhiteList_v2.sol\":3362:4161  if (lockDuration >= 16 * 30 && lockDuration < 28 * 30) {... */\n      jump(tag_148)\n    tag_138:\n      pop\n        /* \"contracts/WhiteList_v2.sol\":4148:4149  0 */\n      0x00\n      swap4\n        /* \"contracts/WhiteList_v2.sol\":2604:4197  function _calculateClaimableAmount(address user)... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/WhiteList_v2.sol\":3362:4161  if (lockDuration >= 16 * 30 && lockDuration < 28 * 30) {... */\n    tag_148:\n      pop\n        /* \"contracts/WhiteList_v2.sol\":4180:4189  claimable */\n      swap3\n        /* \"contracts/WhiteList_v2.sol\":2604:4197  function _calculateClaimableAmount(address user)... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n    tag_107:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3469:3524   */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3451:3525   */\n      mstore\n        /* \"#utility.yul\":3541:3559   */\n      0x44\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3534:3568   */\n      dup5\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      dup3\n      mload\n      dup1\n      dup4\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n        /* \"#utility.yul\":3424:3442   */\n      0x64\n      swap1\n      swap2\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      swap1\n      swap2\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":863:886  token.transfer.selector */\n      0xa9059cbb00000000000000000000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      or\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_150\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":833:838  token */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:832  _callOptionalReturn */\n      tag_153\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_150:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3207:3913  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_153:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3649  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_155\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3680:3684  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3660:3665  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3679  address(token).functionCall */\n      and\n      tag_156\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_155:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3752  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3721  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3756  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3731:3907  if (returndata.length > 0) {... */\n      tag_150\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3830:3840  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3819:3849  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_158\n      swap2\n      swap1\n      tag_159\n      jump\t// in\n    tag_158:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_150\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4063:4065   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4045:4066   */\n      mstore\n        /* \"#utility.yul\":4102:4104   */\n      0x2a\n        /* \"#utility.yul\":4082:4100   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4075:4105   */\n      mstore\n        /* \"#utility.yul\":4141:4175   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":4121:4139   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4114:4176   */\n      mstore\n        /* \"#utility.yul\":4212:4224   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4192:4210   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4185:4225   */\n      mstore\n        /* \"#utility.yul\":4242:4261   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_68\n        /* \"#utility.yul\":3861:4267   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n    tag_156:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3994:4006  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_164\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4047:4053  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4055:4059  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4061:4062  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4064:4076  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4046  functionCallWithValue */\n      tag_165\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_164:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4018:4077  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n    tag_163:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n    tag_165:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5113:5125  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5170:5175  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5166  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5175  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_167\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4474:4476   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4456:4477   */\n      mstore\n        /* \"#utility.yul\":4513:4515   */\n      0x26\n        /* \"#utility.yul\":4493:4511   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4486:4516   */\n      mstore\n        /* \"#utility.yul\":4552:4586   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":4532:4550   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4525:4587   */\n      mstore\n        /* \"#utility.yul\":4623:4631   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4603:4621   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4596:4632   */\n      mstore\n        /* \"#utility.yul\":4649:4668   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_68\n        /* \"#utility.yul\":4272:4674   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_167:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_172\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4881:4883   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4863:4884   */\n      mstore\n        /* \"#utility.yul\":4920:4922   */\n      0x1d\n        /* \"#utility.yul\":4900:4918   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4893:4923   */\n      mstore\n        /* \"#utility.yul\":4959:4990   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":4939:4957   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4932:4991   */\n      mstore\n        /* \"#utility.yul\":5008:5026   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_68\n        /* \"#utility.yul\":4679:5032   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n    tag_172:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5300:5312  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5314:5337  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5347  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5352  target.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5360:5365  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5367:5371  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5372  target.call{value: value}(data) */\n      mload(0x40)\n      tag_175\n      swap2\n      swap1\n      tag_176\n      jump\t// in\n    tag_175:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_179\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_178)\n    tag_179:\n      0x60\n      swap2\n      pop\n    tag_178:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5299:5372  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      tag_180\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5406:5413  success */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5415:5425  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5427:5439  errorMessage */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5405  verifyCallResult */\n      tag_181\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_180:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5382:5440  return verifyCallResult(success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7561:8253  function verifyCallResult(... */\n    tag_181:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7707:7719  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7735:7742  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n      iszero\n      tag_184\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7765:7775  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7758:7775  return returndata */\n      jump(tag_163)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n    tag_184:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7893  returndata.length */\n      dup3\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7897  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n      tag_186\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8070:8080  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8081  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8130:8145  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8117:8127  returndata */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8113:8115  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8109:8128  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8102:8146  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n    tag_186:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8209:8221  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8202:8222  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_68\n      swap2\n      swap1\n      tag_189\n      jump\t// in\n        /* \"#utility.yul\":196:392   */\n    tag_190:\n        /* \"#utility.yul\":264:284   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":313:367   */\n      dup2\n      and\n        /* \"#utility.yul\":303:368   */\n      dup2\n      eq\n        /* \"#utility.yul\":293:386   */\n      tag_84\n      jumpi\n        /* \"#utility.yul\":382:383   */\n      0x00\n        /* \"#utility.yul\":379:380   */\n      dup1\n        /* \"#utility.yul\":372:384   */\n      revert\n        /* \"#utility.yul\":397:583   */\n    tag_30:\n        /* \"#utility.yul\":456:462   */\n      0x00\n        /* \"#utility.yul\":509:511   */\n      0x20\n        /* \"#utility.yul\":497:506   */\n      dup3\n        /* \"#utility.yul\":488:495   */\n      dup5\n        /* \"#utility.yul\":484:507   */\n      sub\n        /* \"#utility.yul\":480:512   */\n      slt\n        /* \"#utility.yul\":477:529   */\n      iszero\n      tag_198\n      jumpi\n        /* \"#utility.yul\":525:526   */\n      0x00\n        /* \"#utility.yul\":522:523   */\n      dup1\n        /* \"#utility.yul\":515:527   */\n      revert\n        /* \"#utility.yul\":477:529   */\n    tag_198:\n        /* \"#utility.yul\":548:577   */\n      tag_163\n        /* \"#utility.yul\":567:576   */\n      dup3\n        /* \"#utility.yul\":548:577   */\n      tag_190\n      jump\t// in\n        /* \"#utility.yul\":1346:1600   */\n    tag_51:\n        /* \"#utility.yul\":1414:1420   */\n      0x00\n        /* \"#utility.yul\":1422:1428   */\n      dup1\n        /* \"#utility.yul\":1475:1477   */\n      0x40\n        /* \"#utility.yul\":1463:1472   */\n      dup4\n        /* \"#utility.yul\":1454:1461   */\n      dup6\n        /* \"#utility.yul\":1450:1473   */\n      sub\n        /* \"#utility.yul\":1446:1478   */\n      slt\n        /* \"#utility.yul\":1443:1495   */\n      iszero\n      tag_203\n      jumpi\n        /* \"#utility.yul\":1491:1492   */\n      0x00\n        /* \"#utility.yul\":1488:1489   */\n      dup1\n        /* \"#utility.yul\":1481:1493   */\n      revert\n        /* \"#utility.yul\":1443:1495   */\n    tag_203:\n        /* \"#utility.yul\":1514:1543   */\n      tag_204\n        /* \"#utility.yul\":1533:1542   */\n      dup4\n        /* \"#utility.yul\":1514:1543   */\n      tag_190\n      jump\t// in\n    tag_204:\n        /* \"#utility.yul\":1504:1543   */\n      swap5\n        /* \"#utility.yul\":1590:1592   */\n      0x20\n        /* \"#utility.yul\":1575:1593   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1562:1594   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1346:1600   */\n      jump\t// out\n        /* \"#utility.yul\":1966:2150   */\n    tag_191:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":2015:2016   */\n      0x00\n        /* \"#utility.yul\":2008:2096   */\n      mstore\n        /* \"#utility.yul\":2115:2119   */\n      0x11\n        /* \"#utility.yul\":2112:2113   */\n      0x04\n        /* \"#utility.yul\":2105:2120   */\n      mstore\n        /* \"#utility.yul\":2139:2143   */\n      0x24\n        /* \"#utility.yul\":2136:2137   */\n      0x00\n        /* \"#utility.yul\":2129:2144   */\n      revert\n        /* \"#utility.yul\":2155:2280   */\n    tag_81:\n        /* \"#utility.yul\":2195:2199   */\n      0x00\n        /* \"#utility.yul\":2223:2224   */\n      dup3\n        /* \"#utility.yul\":2220:2221   */\n      dup3\n        /* \"#utility.yul\":2217:2225   */\n      lt\n        /* \"#utility.yul\":2214:2248   */\n      iszero\n      tag_209\n      jumpi\n        /* \"#utility.yul\":2228:2246   */\n      tag_209\n      tag_191\n      jump\t// in\n    tag_209:\n      pop\n        /* \"#utility.yul\":2265:2274   */\n      sub\n      swap1\n        /* \"#utility.yul\":2155:2280   */\n      jump\t// out\n        /* \"#utility.yul\":2285:2413   */\n    tag_83:\n        /* \"#utility.yul\":2325:2328   */\n      0x00\n        /* \"#utility.yul\":2356:2357   */\n      dup3\n        /* \"#utility.yul\":2352:2358   */\n      not\n        /* \"#utility.yul\":2349:2350   */\n      dup3\n        /* \"#utility.yul\":2346:2359   */\n      gt\n        /* \"#utility.yul\":2343:2382   */\n      iszero\n      tag_212\n      jumpi\n        /* \"#utility.yul\":2362:2380   */\n      tag_212\n      tag_191\n      jump\t// in\n    tag_212:\n      pop\n        /* \"#utility.yul\":2398:2407   */\n      add\n      swap1\n        /* \"#utility.yul\":2285:2413   */\n      jump\t// out\n        /* \"#utility.yul\":2825:3099   */\n    tag_129:\n        /* \"#utility.yul\":2865:2866   */\n      0x00\n        /* \"#utility.yul\":2891:2892   */\n      dup3\n        /* \"#utility.yul\":2881:3070   */\n      tag_215\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":2923:2924   */\n      0x00\n        /* \"#utility.yul\":2916:3004   */\n      mstore\n        /* \"#utility.yul\":3027:3031   */\n      0x12\n        /* \"#utility.yul\":3024:3025   */\n      0x04\n        /* \"#utility.yul\":3017:3032   */\n      mstore\n        /* \"#utility.yul\":3055:3059   */\n      0x24\n        /* \"#utility.yul\":3052:3053   */\n      0x00\n        /* \"#utility.yul\":3045:3060   */\n      revert\n        /* \"#utility.yul\":2881:3070   */\n    tag_215:\n      pop\n        /* \"#utility.yul\":3084:3093   */\n      div\n      swap1\n        /* \"#utility.yul\":2825:3099   */\n      jump\t// out\n        /* \"#utility.yul\":3104:3272   */\n    tag_133:\n        /* \"#utility.yul\":3144:3151   */\n      0x00\n        /* \"#utility.yul\":3210:3211   */\n      dup2\n        /* \"#utility.yul\":3206:3207   */\n      0x00\n        /* \"#utility.yul\":3202:3208   */\n      not\n        /* \"#utility.yul\":3198:3212   */\n      div\n        /* \"#utility.yul\":3195:3196   */\n      dup4\n        /* \"#utility.yul\":3192:3213   */\n      gt\n        /* \"#utility.yul\":3187:3188   */\n      dup3\n        /* \"#utility.yul\":3180:3189   */\n      iszero\n        /* \"#utility.yul\":3173:3190   */\n      iszero\n        /* \"#utility.yul\":3169:3214   */\n      and\n        /* \"#utility.yul\":3166:3237   */\n      iszero\n      tag_218\n      jumpi\n        /* \"#utility.yul\":3217:3235   */\n      tag_218\n      tag_191\n      jump\t// in\n    tag_218:\n      pop\n        /* \"#utility.yul\":3257:3266   */\n      mul\n      swap1\n        /* \"#utility.yul\":3104:3272   */\n      jump\t// out\n        /* \"#utility.yul\":3579:3856   */\n    tag_159:\n        /* \"#utility.yul\":3646:3652   */\n      0x00\n        /* \"#utility.yul\":3699:3701   */\n      0x20\n        /* \"#utility.yul\":3687:3696   */\n      dup3\n        /* \"#utility.yul\":3678:3685   */\n      dup5\n        /* \"#utility.yul\":3674:3697   */\n      sub\n        /* \"#utility.yul\":3670:3702   */\n      slt\n        /* \"#utility.yul\":3667:3719   */\n      iszero\n      tag_221\n      jumpi\n        /* \"#utility.yul\":3715:3716   */\n      0x00\n        /* \"#utility.yul\":3712:3713   */\n      dup1\n        /* \"#utility.yul\":3705:3717   */\n      revert\n        /* \"#utility.yul\":3667:3719   */\n    tag_221:\n        /* \"#utility.yul\":3747:3756   */\n      dup2\n        /* \"#utility.yul\":3741:3757   */\n      mload\n        /* \"#utility.yul\":3800:3805   */\n      dup1\n        /* \"#utility.yul\":3793:3806   */\n      iszero\n        /* \"#utility.yul\":3786:3807   */\n      iszero\n        /* \"#utility.yul\":3779:3784   */\n      dup2\n        /* \"#utility.yul\":3776:3808   */\n      eq\n        /* \"#utility.yul\":3766:3826   */\n      tag_163\n      jumpi\n        /* \"#utility.yul\":3822:3823   */\n      0x00\n        /* \"#utility.yul\":3819:3820   */\n      dup1\n        /* \"#utility.yul\":3812:3824   */\n      revert\n        /* \"#utility.yul\":5037:5295   */\n    tag_192:\n        /* \"#utility.yul\":5109:5110   */\n      0x00\n        /* \"#utility.yul\":5119:5232   */\n    tag_227:\n        /* \"#utility.yul\":5133:5139   */\n      dup4\n        /* \"#utility.yul\":5130:5131   */\n      dup2\n        /* \"#utility.yul\":5127:5140   */\n      lt\n        /* \"#utility.yul\":5119:5232   */\n      iszero\n      tag_229\n      jumpi\n        /* \"#utility.yul\":5209:5220   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":5203:5221   */\n      mload\n        /* \"#utility.yul\":5190:5201   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":5183:5222   */\n      mstore\n        /* \"#utility.yul\":5155:5157   */\n      0x20\n        /* \"#utility.yul\":5148:5158   */\n      add\n        /* \"#utility.yul\":5119:5232   */\n      jump(tag_227)\n    tag_229:\n        /* \"#utility.yul\":5250:5256   */\n      dup4\n        /* \"#utility.yul\":5247:5248   */\n      dup2\n        /* \"#utility.yul\":5244:5257   */\n      gt\n        /* \"#utility.yul\":5241:5289   */\n      iszero\n      tag_230\n      jumpi\n        /* \"#utility.yul\":5285:5286   */\n      0x00\n        /* \"#utility.yul\":5276:5282   */\n      dup5\n        /* \"#utility.yul\":5271:5274   */\n      dup5\n        /* \"#utility.yul\":5267:5283   */\n      add\n        /* \"#utility.yul\":5260:5287   */\n      mstore\n        /* \"#utility.yul\":5241:5289   */\n    tag_230:\n      pop\n        /* \"#utility.yul\":5037:5295   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5300:5574   */\n    tag_176:\n        /* \"#utility.yul\":5429:5432   */\n      0x00\n        /* \"#utility.yul\":5467:5473   */\n      dup3\n        /* \"#utility.yul\":5461:5474   */\n      mload\n        /* \"#utility.yul\":5483:5536   */\n      tag_232\n        /* \"#utility.yul\":5529:5535   */\n      dup2\n        /* \"#utility.yul\":5524:5527   */\n      dup5\n        /* \"#utility.yul\":5517:5521   */\n      0x20\n        /* \"#utility.yul\":5509:5515   */\n      dup8\n        /* \"#utility.yul\":5505:5522   */\n      add\n        /* \"#utility.yul\":5483:5536   */\n      tag_192\n      jump\t// in\n    tag_232:\n        /* \"#utility.yul\":5552:5568   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":5300:5574   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5579:5962   */\n    tag_189:\n        /* \"#utility.yul\":5728:5730   */\n      0x20\n        /* \"#utility.yul\":5717:5726   */\n      dup2\n        /* \"#utility.yul\":5710:5731   */\n      mstore\n        /* \"#utility.yul\":5691:5695   */\n      0x00\n        /* \"#utility.yul\":5760:5766   */\n      dup3\n        /* \"#utility.yul\":5754:5767   */\n      mload\n        /* \"#utility.yul\":5803:5809   */\n      dup1\n        /* \"#utility.yul\":5798:5800   */\n      0x20\n        /* \"#utility.yul\":5787:5796   */\n      dup5\n        /* \"#utility.yul\":5783:5801   */\n      add\n        /* \"#utility.yul\":5776:5810   */\n      mstore\n        /* \"#utility.yul\":5819:5885   */\n      tag_234\n        /* \"#utility.yul\":5878:5884   */\n      dup2\n        /* \"#utility.yul\":5873:5875   */\n      0x40\n        /* \"#utility.yul\":5862:5871   */\n      dup6\n        /* \"#utility.yul\":5858:5876   */\n      add\n        /* \"#utility.yul\":5853:5855   */\n      0x20\n        /* \"#utility.yul\":5845:5851   */\n      dup8\n        /* \"#utility.yul\":5841:5856   */\n      add\n        /* \"#utility.yul\":5819:5885   */\n      tag_192\n      jump\t// in\n    tag_234:\n        /* \"#utility.yul\":5946:5948   */\n      0x1f\n        /* \"#utility.yul\":5925:5940   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":5921:5950   */\n      and\n        /* \"#utility.yul\":5906:5951   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":5953:5955   */\n      0x40\n        /* \"#utility.yul\":5902:5956   */\n      add\n      swap3\n        /* \"#utility.yul\":5579:5962   */\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220e1b1af0698f15dd6b67f282a146591aae0e58fd6aa9831aeae83c9e47736816364736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_123": {
									"entryPoint": null,
									"id": 123,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_837": {
									"entryPoint": null,
									"id": 837,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": null,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 114,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 196,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:306:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:209:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:7"
															},
															"nodeType": "YulIf",
															"src": "105:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "179:16:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "170:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "258:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "267:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "270:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "243:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "248:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "252:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "207:50:7"
															},
															"nodeType": "YulIf",
															"src": "204:70:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "283:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "293:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:7",
														"type": ""
													}
												],
												"src": "14:290:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50604051610efd380380610efd83398101604081905261002f916100c4565b600160005561003d33610072565b6b04be37ea7317415c45800000600355600680546001600160a01b0319166001600160a01b03929092169190911790556100f4565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156100d657600080fd5b81516001600160a01b03811681146100ed57600080fd5b9392505050565b610dfa806101036000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638cdb7e8b1161008c578063d5498dc711610066578063d5498dc71461020c578063ecd0c0c314610214578063efdd879614610227578063f2fde38b1461022f57600080fd5b80638cdb7e8b146101265780638da5cb5b146101d457806396074e70146101f957600080fd5b80637d3bca76116100bd5780637d3bca761461011357806381008568146101265780638b2b423a146101cb57600080fd5b8063338dbf59146100e4578063549dee0b14610100578063715018a614610109575b600080fd5b6100ed60045481565b6040519081526020015b60405180910390f35b6100ed60025481565b610111610242565b005b6100ed610121366004610c58565b6102ad565b610197610134366004610c58565b6001600160a01b0316600081815260056020908152604091829020825160a08101845260018201549281018390526002820154938101849052600382015460ff161515606082018190526004909201546080820181905290859052939491939091565b604080516001600160a01b03909616865260208601949094529284019190915215156060830152608082015260a0016100f7565b6100ed60035481565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100f7565b610111610207366004610c73565b6103dc565b61011161053a565b6006546101e1906001600160a01b031681565b6101116105b5565b61011161023d366004610c58565b610615565b6001546001600160a01b031633146102a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6102ab60006106f0565b565b6001546000906001600160a01b0316331461030a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610298565b6001600160a01b038216600090815260056020526040902060020154156103d35760016002600082825461033e9190610cb3565b90915550506001600160a01b0382166000908152600560205260408120600201546003805491929091610372908490610cca565b9091555050506001600160a01b03166000908152600560205260408120600281018054825473ffffffffffffffffffffffffffffffffffffffff19168355600183018490559083905560038201805460ff1916905560049091019190915590565b5060005b919050565b6001546001600160a01b031633146104365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610298565b6001600160a01b03821660009081526005602052604090206001015415610489576040517fab1818da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003548111156104c5576040517f194f40dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015610536576001600160a01b03821660009081526005602052604081206001808201849055600280830185905560038301805460ff1916905560049092018190558154909290610517908490610cca565b9250508190555080600360008282546105309190610cb3565b90915550505b5050565b33600090815260056020526040902060020154156102ab57600061055d3361074f565b905080156105b25733600090815260056020526040902060020154610583908290610cb3565b336000818152600560205260409020600201919091556006546105b2916001600160a01b03909116908361093d565b50565b6001546001600160a01b0316331461060f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610298565b42600455565b6001546001600160a01b0316331461066f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610298565b6001600160a01b0381166106eb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610298565b6105b2815b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080600062015180600454426107669190610cb3565b6107709190610ce2565b90506101e0811015610808576001600160a01b03841660009081526005602052604090206003015460ff16610803576001600160a01b03841660009081526005602052604090206003808201805460ff191660019081179091556101c2600484015590549101546107ec906a3cb5feec27901169e00000610d04565b6107f69190610ce2565b6108009083610cca565b91505b610936565b6101e0811015801561081b575061034881105b1561092c576001600160a01b03841660009081526005602052604090206003015460ff1661089f576001600160a01b03841660009081526005602052604090206003808201805460ff191660019081179091559054910154610888906a3cb5feec27901169e00000610d04565b6108929190610ce2565b61089c9083610cca565b91505b6001600160a01b0384166000908152600560205260408120600401546108c59083610cb3565b6001600160a01b03861660009081526005602052604090206004810184905560035460019091015491925090610906906a03290914be1afb75080000610d04565b6109109190610ce2565b61091a9084610cca565b6109249082610d04565b925050610936565b5060009392505050565b5092915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109bd9084906109c2565b505050565b6000610a17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610aa79092919063ffffffff16565b8051909150156109bd5780806020019051810190610a359190610d23565b6109bd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610298565b6060610ab68484600085610ac0565b90505b9392505050565b606082471015610b385760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610298565b6001600160a01b0385163b610b8f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610298565b600080866001600160a01b03168587604051610bab9190610d75565b60006040518083038185875af1925050503d8060008114610be8576040519150601f19603f3d011682016040523d82523d6000602084013e610bed565b606091505b5091509150610bfd828286610c08565b979650505050505050565b60608315610c17575081610ab9565b825115610c275782518084602001fd5b8160405162461bcd60e51b81526004016102989190610d91565b80356001600160a01b03811681146103d757600080fd5b600060208284031215610c6a57600080fd5b610ab982610c41565b60008060408385031215610c8657600080fd5b610c8f83610c41565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610cc557610cc5610c9d565b500390565b60008219821115610cdd57610cdd610c9d565b500190565b600082610cff57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610d1e57610d1e610c9d565b500290565b600060208284031215610d3557600080fd5b81518015158114610ab957600080fd5b60005b83811015610d60578181015183820152602001610d48565b83811115610d6f576000848401525b50505050565b60008251610d87818460208701610d45565b9190910192915050565b6020815260008251806020840152610db0816040850160208701610d45565b601f01601f1916919091016040019291505056fea2646970667358221220e1b1af0698f15dd6b67f282a146591aae0e58fd6aa9831aeae83c9e47736816364736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xEFD CODESIZE SUB DUP1 PUSH2 0xEFD DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0xC4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE PUSH2 0x3D CALLER PUSH2 0x72 JUMP JUMPDEST PUSH12 0x4BE37EA7317415C45800000 PUSH1 0x3 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xF4 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xDFA DUP1 PUSH2 0x103 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8CDB7E8B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD5498DC7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD5498DC7 EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0xECD0C0C3 EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0xEFDD8796 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8CDB7E8B EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x96074E70 EQ PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7D3BCA76 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x7D3BCA76 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x81008568 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x8B2B423A EQ PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x338DBF59 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x549DEE0B EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x109 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xED PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x111 PUSH2 0x242 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xED PUSH2 0x121 CALLDATASIZE PUSH1 0x4 PUSH2 0xC58 JUMP JUMPDEST PUSH2 0x2AD JUMP JUMPDEST PUSH2 0x197 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0xC58 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 SWAP1 SWAP3 ADD SLOAD PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 DUP6 SWAP1 MSTORE SWAP4 SWAP5 SWAP2 SWAP4 SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xED PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF7 JUMP JUMPDEST PUSH2 0x111 PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0xC73 JUMP JUMPDEST PUSH2 0x3DC JUMP JUMPDEST PUSH2 0x111 PUSH2 0x53A JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1E1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x111 PUSH2 0x5B5 JUMP JUMPDEST PUSH2 0x111 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0xC58 JUMP JUMPDEST PUSH2 0x615 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AB PUSH1 0x0 PUSH2 0x6F0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x30A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x33E SWAP2 SWAP1 PUSH2 0xCB3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x372 SWAP1 DUP5 SWAP1 PUSH2 0xCCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP4 SSTORE PUSH1 0x1 DUP4 ADD DUP5 SWAP1 SSTORE SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x436 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO PUSH2 0x489 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAB1818DA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 SLOAD DUP2 GT ISZERO PUSH2 0x4C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x194F40DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x536 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD DUP5 SWAP1 SSTORE PUSH1 0x2 DUP1 DUP4 ADD DUP6 SWAP1 SSTORE PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x4 SWAP1 SWAP3 ADD DUP2 SWAP1 SSTORE DUP2 SLOAD SWAP1 SWAP3 SWAP1 PUSH2 0x517 SWAP1 DUP5 SWAP1 PUSH2 0xCCA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0xCB3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD ISZERO PUSH2 0x2AB JUMPI PUSH1 0x0 PUSH2 0x55D CALLER PUSH2 0x74F JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x5B2 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x583 SWAP1 DUP3 SWAP1 PUSH2 0xCB3 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x6 SLOAD PUSH2 0x5B2 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 PUSH2 0x93D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x298 JUMP JUMPDEST TIMESTAMP PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x66F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x6EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x298 JUMP JUMPDEST PUSH2 0x5B2 DUP2 JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH3 0x15180 PUSH1 0x4 SLOAD TIMESTAMP PUSH2 0x766 SWAP2 SWAP1 PUSH2 0xCB3 JUMP JUMPDEST PUSH2 0x770 SWAP2 SWAP1 PUSH2 0xCE2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E0 DUP2 LT ISZERO PUSH2 0x808 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH2 0x803 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP1 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x1C2 PUSH1 0x4 DUP5 ADD SSTORE SWAP1 SLOAD SWAP2 ADD SLOAD PUSH2 0x7EC SWAP1 PUSH11 0x3CB5FEEC27901169E00000 PUSH2 0xD04 JUMP JUMPDEST PUSH2 0x7F6 SWAP2 SWAP1 PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0x800 SWAP1 DUP4 PUSH2 0xCCA JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x936 JUMP JUMPDEST PUSH2 0x1E0 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x81B JUMPI POP PUSH2 0x348 DUP2 LT JUMPDEST ISZERO PUSH2 0x92C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH2 0x89F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP1 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 SLOAD SWAP2 ADD SLOAD PUSH2 0x888 SWAP1 PUSH11 0x3CB5FEEC27901169E00000 PUSH2 0xD04 JUMP JUMPDEST PUSH2 0x892 SWAP2 SWAP1 PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0x89C SWAP1 DUP4 PUSH2 0xCCA JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x8C5 SWAP1 DUP4 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x3 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x906 SWAP1 PUSH11 0x3290914BE1AFB75080000 PUSH2 0xD04 JUMP JUMPDEST PUSH2 0x910 SWAP2 SWAP1 PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0x91A SWAP1 DUP5 PUSH2 0xCCA JUMP JUMPDEST PUSH2 0x924 SWAP1 DUP3 PUSH2 0xD04 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x936 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x9BD SWAP1 DUP5 SWAP1 PUSH2 0x9C2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA17 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAA7 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x9BD JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xA35 SWAP2 SWAP1 PUSH2 0xD23 JUMP JUMPDEST PUSH2 0x9BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAB6 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xAC0 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xB38 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xB8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xBAB SWAP2 SWAP1 PUSH2 0xD75 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xBE8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xBFD DUP3 DUP3 DUP7 PUSH2 0xC08 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xC17 JUMPI POP DUP2 PUSH2 0xAB9 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xC27 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x298 SWAP2 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB9 DUP3 PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC8F DUP4 PUSH2 0xC41 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xCC5 JUMPI PUSH2 0xCC5 PUSH2 0xC9D JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xCDD JUMPI PUSH2 0xCDD PUSH2 0xC9D JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xCFF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xD1E JUMPI PUSH2 0xD1E PUSH2 0xC9D JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xAB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD60 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD48 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xD6F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xD87 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xD45 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xDB0 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xD45 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0xB1 0xAF MOD SWAP9 CALL 0x5D 0xD6 0xB6 PUSH32 0x282A146591AAE0E58FD6AA9831AEAE83C9E47736816364736F6C634300080B00 CALLER ",
							"sourceMap": "770:5346:6:-:0;;;1225:108;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1701:1:1;1806:7;:22;921:32:0;719:10:5;921:18:0;:32::i;:::-;1283:17:6;1263;:37;1311:6;:14;;-1:-1:-1;;;;;;1311:14:6;-1:-1:-1;;;;;1311:14:6;;;;;;;;;;770:5346;;2270:187:0;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;14:290:7:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:7;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:7:o;:::-;770:5346:6;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_calculateClaimableAmount_1072": {
									"entryPoint": 1871,
									"id": 1072,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_callOptionalReturn_445": {
									"entryPoint": 2498,
									"id": 445,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": null,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_token_821": {
									"entryPoint": null,
									"id": 821,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_transferOwnership_103": {
									"entryPoint": 1776,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@addBeneficiary_1143": {
									"entryPoint": 988,
									"id": 1143,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@beneficiary_874": {
									"entryPoint": null,
									"id": 874,
									"parameterSlots": 1,
									"returnSlots": 5
								},
								"@deleteBeneficiary_1189": {
									"entryPoint": 685,
									"id": 1189,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@functionCallWithValue_605": {
									"entryPoint": 2752,
									"id": 605,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_535": {
									"entryPoint": 2727,
									"id": 535,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@hasWhitelist_922": {
									"entryPoint": null,
									"id": 922,
									"parameterSlots": 1,
									"returnSlots": 5
								},
								"@initiateWhitelist_885": {
									"entryPoint": 1461,
									"id": 885,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isContract_464": {
									"entryPoint": null,
									"id": 464,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_32": {
									"entryPoint": null,
									"id": 32,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@privateSaleAmount_802": {
									"entryPoint": null,
									"id": 802,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@privateSaleUsers_800": {
									"entryPoint": null,
									"id": 800,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@releaseClaimable_1240": {
									"entryPoint": 1338,
									"id": 1240,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@renounceOwnership_60": {
									"entryPoint": 578,
									"id": 60,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransfer_253": {
									"entryPoint": 2365,
									"id": 253,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@startPrivateSale_814": {
									"entryPoint": null,
									"id": 814,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_83": {
									"entryPoint": 1557,
									"id": 83,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResult_740": {
									"entryPoint": 3080,
									"id": 740,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 3137,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3160,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3187,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 3363,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 3445,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256_t_bool_t_uint256__to_t_address_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3473,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3274,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 3298,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3332,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 3251,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 3397,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 3229,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5964:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "115:76:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "125:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "137:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "148:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "133:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "125:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "167:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "160:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "84:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "95:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "106:4:7",
														"type": ""
													}
												],
												"src": "14:177:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "245:147:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "255:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "277:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "264:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "264:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "255:5:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "370:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "379:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "382:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "372:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "372:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "372:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "306:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "317:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "324:42:7",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "313:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "313:54:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "303:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "303:65:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "296:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "296:73:7"
															},
															"nodeType": "YulIf",
															"src": "293:93:7"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "224:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "235:5:7",
														"type": ""
													}
												],
												"src": "196:196:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "467:116:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "513:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "522:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "525:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "515:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "515:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "515:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "488:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "497:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "484:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "484:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "509:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "480:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "480:32:7"
															},
															"nodeType": "YulIf",
															"src": "477:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "538:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "567:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "548:18:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "548:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "538:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "433:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "444:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "456:6:7",
														"type": ""
													}
												],
												"src": "397:186:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "795:315:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "805:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "817:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "828:3:7",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "813:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "813:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "805:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "848:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "863:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "871:42:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "859:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "859:55:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "841:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "841:74:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "841:74:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "935:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "946:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "931:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "931:18:7"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "951:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "924:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "924:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "924:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "978:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "989:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "974:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "974:18:7"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "994:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "967:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "967:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "967:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1021:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1032:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1017:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1017:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value3",
																						"nodeType": "YulIdentifier",
																						"src": "1051:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1044:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1044:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1037:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1037:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1010:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:50:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1010:50:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1080:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1091:3:7",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1076:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1076:19:7"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "1097:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1069:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1069:35:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1069:35:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256_t_bool_t_uint256__to_t_address_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "732:9:7",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "743:6:7",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "751:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "759:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "767:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "775:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "786:4:7",
														"type": ""
													}
												],
												"src": "588:522:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1216:125:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1226:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1238:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1249:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1234:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1234:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1226:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1268:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1283:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1291:42:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1279:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1279:55:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1261:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1261:74:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1261:74:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1185:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1196:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1207:4:7",
														"type": ""
													}
												],
												"src": "1115:226:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1433:167:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1479:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1488:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1491:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1481:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1481:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1481:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1454:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1463:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1450:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1450:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1475:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1446:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1446:32:7"
															},
															"nodeType": "YulIf",
															"src": "1443:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1504:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1533:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1514:18:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1514:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1504:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1552:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1579:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1590:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1575:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1575:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1562:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1562:32:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1552:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1391:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1402:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1414:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1422:6:7",
														"type": ""
													}
												],
												"src": "1346:254:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1779:182:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1796:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1807:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1789:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1789:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1789:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1830:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1841:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1826:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1826:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1846:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1819:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1819:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1819:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1869:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1880:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1865:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1865:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1885:34:7",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1858:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1858:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1858:62:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1929:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1941:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1952:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1937:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1937:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1929:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1756:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1770:4:7",
														"type": ""
													}
												],
												"src": "1605:356:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1998:152:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2015:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2018:77:7",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2008:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2008:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2008:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2112:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2115:4:7",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2105:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2105:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2105:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2136:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2139:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2129:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2129:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2129:15:7"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "1966:184:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2204:76:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2226:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2228:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2228:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2228:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2220:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2223:1:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2217:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2217:8:7"
															},
															"nodeType": "YulIf",
															"src": "2214:34:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2257:17:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2269:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2272:1:7"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2265:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2265:9:7"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "2257:4:7"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2186:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2189:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "2195:4:7",
														"type": ""
													}
												],
												"src": "2155:125:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2333:80:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2360:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2362:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2362:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2362:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2349:1:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2356:1:7"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2352:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2352:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2346:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2346:13:7"
															},
															"nodeType": "YulIf",
															"src": "2343:39:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2391:16:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2402:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2405:1:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2398:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2398:9:7"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2391:3:7"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2316:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2319:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2325:3:7",
														"type": ""
													}
												],
												"src": "2285:128:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2592:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2609:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2620:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2602:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2602:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2602:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2643:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2654:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2639:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2639:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2659:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2632:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2632:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2632:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2682:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2693:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2678:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2678:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2698:34:7",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2671:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2671:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2671:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2753:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2764:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2749:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2749:18:7"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2769:8:7",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2742:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2742:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2742:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2787:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2799:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2810:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2795:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2795:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2787:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2569:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2583:4:7",
														"type": ""
													}
												],
												"src": "2418:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2871:228:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2902:168:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2923:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2926:77:7",
																					"type": "",
																					"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2916:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2916:88:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2916:88:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3024:1:7",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3027:4:7",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3017:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3017:15:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3017:15:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3052:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3055:4:7",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3045:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3045:15:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3045:15:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2891:1:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2884:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2884:9:7"
															},
															"nodeType": "YulIf",
															"src": "2881:189:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3079:14:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3088:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3091:1:7"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3084:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3084:9:7"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "3079:1:7"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2856:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2859:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "2865:1:7",
														"type": ""
													}
												],
												"src": "2825:274:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3156:116:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3215:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3217:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3217:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3217:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "3187:1:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3180:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3180:9:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3173:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3173:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3195:1:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3206:1:7",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "3202:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3202:6:7"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "3210:1:7"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "3198:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3198:14:7"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3192:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3192:21:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3169:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3169:45:7"
															},
															"nodeType": "YulIf",
															"src": "3166:71:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3246:20:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3261:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3264:1:7"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "3257:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3257:9:7"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "3246:7:7"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3135:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3138:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "3144:7:7",
														"type": ""
													}
												],
												"src": "3104:168:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3406:168:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3416:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3428:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3439:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3424:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3424:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3416:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3458:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3473:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3481:42:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3469:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3469:55:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3451:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3451:74:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3451:74:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3545:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3556:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3541:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3541:18:7"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "3561:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3534:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3534:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3534:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3367:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3378:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3386:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3397:4:7",
														"type": ""
													}
												],
												"src": "3277:297:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3657:199:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3703:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3712:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3715:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3705:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3705:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3705:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3678:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3687:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3674:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3674:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3699:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3670:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3670:32:7"
															},
															"nodeType": "YulIf",
															"src": "3667:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3728:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3747:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3741:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3741:16:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3732:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3810:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3819:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3822:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3812:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3812:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3812:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3779:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3800:5:7"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3793:6:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3793:13:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3786:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3786:21:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3776:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3776:32:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3769:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3769:40:7"
															},
															"nodeType": "YulIf",
															"src": "3766:60:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3835:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3845:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3835:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3623:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3634:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3646:6:7",
														"type": ""
													}
												],
												"src": "3579:277:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4035:232:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4052:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4063:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4045:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4045:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4045:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4086:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4097:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4082:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4082:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4102:2:7",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4075:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4075:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4075:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4125:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4136:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4121:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4121:18:7"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4141:34:7",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4114:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4114:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4114:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4196:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4207:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4192:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4192:18:7"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4212:12:7",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4185:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4185:40:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4185:40:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4234:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4246:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4257:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4242:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4242:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4234:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4012:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4026:4:7",
														"type": ""
													}
												],
												"src": "3861:406:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4446:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4463:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4474:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4456:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4456:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4456:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4497:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4508:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4493:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4493:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4513:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4486:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4486:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4486:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4536:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4547:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4532:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4532:18:7"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4552:34:7",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4525:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4525:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4525:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4607:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4618:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4603:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4603:18:7"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4623:8:7",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4596:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4596:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4596:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4641:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4653:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4664:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4649:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4649:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4641:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4423:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4437:4:7",
														"type": ""
													}
												],
												"src": "4272:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4853:179:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4870:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4881:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4863:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4863:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4863:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4904:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4915:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4900:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4900:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4920:2:7",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4893:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4893:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4893:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4943:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4954:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4939:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4939:18:7"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4959:31:7",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4932:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4932:59:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4932:59:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5000:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5012:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5023:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5008:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5008:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5000:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4830:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4844:4:7",
														"type": ""
													}
												],
												"src": "4679:353:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5090:205:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5100:10:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5109:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "5104:1:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5169:63:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "5194:3:7"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "5199:1:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5190:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5190:11:7"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "5213:3:7"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "5218:1:7"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5209:3:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5209:11:7"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "5203:5:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5203:18:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5183:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5183:39:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5183:39:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5130:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5133:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "5127:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5127:13:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "5141:19:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5143:15:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "5152:1:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5155:2:7",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5148:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5148:10:7"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "5143:1:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "5123:3:7",
																"statements": []
															},
															"src": "5119:113:7"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5258:31:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "5271:3:7"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "5276:6:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5267:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5267:16:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5285:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5260:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5260:27:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5260:27:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5247:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5250:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5244:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5244:13:7"
															},
															"nodeType": "YulIf",
															"src": "5241:48:7"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "5068:3:7",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "5073:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5078:6:7",
														"type": ""
													}
												],
												"src": "5037:258:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5437:137:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5447:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5467:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5461:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5461:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5451:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5509:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5517:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5505:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5505:17:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5524:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5529:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5483:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5483:53:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5483:53:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5545:23:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5556:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5561:6:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5552:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5552:16:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5545:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5413:3:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5418:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5429:3:7",
														"type": ""
													}
												],
												"src": "5300:274:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5700:262:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5717:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5728:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5710:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5710:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5710:21:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5740:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5760:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5754:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5754:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5744:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5787:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5798:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5783:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5783:18:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5803:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5776:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5776:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5776:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5845:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5853:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5841:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5841:15:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5862:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5873:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5858:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5858:18:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5878:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5819:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5819:66:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5819:66:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5894:62:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5910:9:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "5929:6:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5937:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "5925:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5925:15:7"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5946:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "5942:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5942:7:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "5921:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5921:29:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5906:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5906:45:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5953:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5902:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5902:54:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5894:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5669:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5680:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5691:4:7",
														"type": ""
													}
												],
												"src": "5579:383:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_bool_t_uint256__to_t_address_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100df5760003560e01c80638cdb7e8b1161008c578063d5498dc711610066578063d5498dc71461020c578063ecd0c0c314610214578063efdd879614610227578063f2fde38b1461022f57600080fd5b80638cdb7e8b146101265780638da5cb5b146101d457806396074e70146101f957600080fd5b80637d3bca76116100bd5780637d3bca761461011357806381008568146101265780638b2b423a146101cb57600080fd5b8063338dbf59146100e4578063549dee0b14610100578063715018a614610109575b600080fd5b6100ed60045481565b6040519081526020015b60405180910390f35b6100ed60025481565b610111610242565b005b6100ed610121366004610c58565b6102ad565b610197610134366004610c58565b6001600160a01b0316600081815260056020908152604091829020825160a08101845260018201549281018390526002820154938101849052600382015460ff161515606082018190526004909201546080820181905290859052939491939091565b604080516001600160a01b03909616865260208601949094529284019190915215156060830152608082015260a0016100f7565b6100ed60035481565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100f7565b610111610207366004610c73565b6103dc565b61011161053a565b6006546101e1906001600160a01b031681565b6101116105b5565b61011161023d366004610c58565b610615565b6001546001600160a01b031633146102a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6102ab60006106f0565b565b6001546000906001600160a01b0316331461030a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610298565b6001600160a01b038216600090815260056020526040902060020154156103d35760016002600082825461033e9190610cb3565b90915550506001600160a01b0382166000908152600560205260408120600201546003805491929091610372908490610cca565b9091555050506001600160a01b03166000908152600560205260408120600281018054825473ffffffffffffffffffffffffffffffffffffffff19168355600183018490559083905560038201805460ff1916905560049091019190915590565b5060005b919050565b6001546001600160a01b031633146104365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610298565b6001600160a01b03821660009081526005602052604090206001015415610489576040517fab1818da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003548111156104c5576040517f194f40dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015610536576001600160a01b03821660009081526005602052604081206001808201849055600280830185905560038301805460ff1916905560049092018190558154909290610517908490610cca565b9250508190555080600360008282546105309190610cb3565b90915550505b5050565b33600090815260056020526040902060020154156102ab57600061055d3361074f565b905080156105b25733600090815260056020526040902060020154610583908290610cb3565b336000818152600560205260409020600201919091556006546105b2916001600160a01b03909116908361093d565b50565b6001546001600160a01b0316331461060f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610298565b42600455565b6001546001600160a01b0316331461066f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610298565b6001600160a01b0381166106eb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610298565b6105b2815b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080600062015180600454426107669190610cb3565b6107709190610ce2565b90506101e0811015610808576001600160a01b03841660009081526005602052604090206003015460ff16610803576001600160a01b03841660009081526005602052604090206003808201805460ff191660019081179091556101c2600484015590549101546107ec906a3cb5feec27901169e00000610d04565b6107f69190610ce2565b6108009083610cca565b91505b610936565b6101e0811015801561081b575061034881105b1561092c576001600160a01b03841660009081526005602052604090206003015460ff1661089f576001600160a01b03841660009081526005602052604090206003808201805460ff191660019081179091559054910154610888906a3cb5feec27901169e00000610d04565b6108929190610ce2565b61089c9083610cca565b91505b6001600160a01b0384166000908152600560205260408120600401546108c59083610cb3565b6001600160a01b03861660009081526005602052604090206004810184905560035460019091015491925090610906906a03290914be1afb75080000610d04565b6109109190610ce2565b61091a9084610cca565b6109249082610d04565b925050610936565b5060009392505050565b5092915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109bd9084906109c2565b505050565b6000610a17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610aa79092919063ffffffff16565b8051909150156109bd5780806020019051810190610a359190610d23565b6109bd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610298565b6060610ab68484600085610ac0565b90505b9392505050565b606082471015610b385760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610298565b6001600160a01b0385163b610b8f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610298565b600080866001600160a01b03168587604051610bab9190610d75565b60006040518083038185875af1925050503d8060008114610be8576040519150601f19603f3d011682016040523d82523d6000602084013e610bed565b606091505b5091509150610bfd828286610c08565b979650505050505050565b60608315610c17575081610ab9565b825115610c275782518084602001fd5b8160405162461bcd60e51b81526004016102989190610d91565b80356001600160a01b03811681146103d757600080fd5b600060208284031215610c6a57600080fd5b610ab982610c41565b60008060408385031215610c8657600080fd5b610c8f83610c41565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610cc557610cc5610c9d565b500390565b60008219821115610cdd57610cdd610c9d565b500190565b600082610cff57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610d1e57610d1e610c9d565b500290565b600060208284031215610d3557600080fd5b81518015158114610ab957600080fd5b60005b83811015610d60578181015183820152602001610d48565b83811115610d6f576000848401525b50505050565b60008251610d87818460208701610d45565b9190910192915050565b6020815260008251806020840152610db0816040850160208701610d45565b601f01601f1916919091016040019291505056fea2646970667358221220e1b1af0698f15dd6b67f282a146591aae0e58fd6aa9831aeae83c9e47736816364736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8CDB7E8B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD5498DC7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD5498DC7 EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0xECD0C0C3 EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0xEFDD8796 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8CDB7E8B EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x96074E70 EQ PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7D3BCA76 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x7D3BCA76 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x81008568 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x8B2B423A EQ PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x338DBF59 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x549DEE0B EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x109 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xED PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x111 PUSH2 0x242 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xED PUSH2 0x121 CALLDATASIZE PUSH1 0x4 PUSH2 0xC58 JUMP JUMPDEST PUSH2 0x2AD JUMP JUMPDEST PUSH2 0x197 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0xC58 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 SWAP1 SWAP3 ADD SLOAD PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 DUP6 SWAP1 MSTORE SWAP4 SWAP5 SWAP2 SWAP4 SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xED PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF7 JUMP JUMPDEST PUSH2 0x111 PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0xC73 JUMP JUMPDEST PUSH2 0x3DC JUMP JUMPDEST PUSH2 0x111 PUSH2 0x53A JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1E1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x111 PUSH2 0x5B5 JUMP JUMPDEST PUSH2 0x111 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0xC58 JUMP JUMPDEST PUSH2 0x615 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AB PUSH1 0x0 PUSH2 0x6F0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x30A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x33E SWAP2 SWAP1 PUSH2 0xCB3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x372 SWAP1 DUP5 SWAP1 PUSH2 0xCCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP4 SSTORE PUSH1 0x1 DUP4 ADD DUP5 SWAP1 SSTORE SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x436 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO PUSH2 0x489 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAB1818DA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 SLOAD DUP2 GT ISZERO PUSH2 0x4C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x194F40DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x536 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD DUP5 SWAP1 SSTORE PUSH1 0x2 DUP1 DUP4 ADD DUP6 SWAP1 SSTORE PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x4 SWAP1 SWAP3 ADD DUP2 SWAP1 SSTORE DUP2 SLOAD SWAP1 SWAP3 SWAP1 PUSH2 0x517 SWAP1 DUP5 SWAP1 PUSH2 0xCCA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0xCB3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD ISZERO PUSH2 0x2AB JUMPI PUSH1 0x0 PUSH2 0x55D CALLER PUSH2 0x74F JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x5B2 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x583 SWAP1 DUP3 SWAP1 PUSH2 0xCB3 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x6 SLOAD PUSH2 0x5B2 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 PUSH2 0x93D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x298 JUMP JUMPDEST TIMESTAMP PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x66F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x6EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x298 JUMP JUMPDEST PUSH2 0x5B2 DUP2 JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH3 0x15180 PUSH1 0x4 SLOAD TIMESTAMP PUSH2 0x766 SWAP2 SWAP1 PUSH2 0xCB3 JUMP JUMPDEST PUSH2 0x770 SWAP2 SWAP1 PUSH2 0xCE2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E0 DUP2 LT ISZERO PUSH2 0x808 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH2 0x803 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP1 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x1C2 PUSH1 0x4 DUP5 ADD SSTORE SWAP1 SLOAD SWAP2 ADD SLOAD PUSH2 0x7EC SWAP1 PUSH11 0x3CB5FEEC27901169E00000 PUSH2 0xD04 JUMP JUMPDEST PUSH2 0x7F6 SWAP2 SWAP1 PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0x800 SWAP1 DUP4 PUSH2 0xCCA JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x936 JUMP JUMPDEST PUSH2 0x1E0 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x81B JUMPI POP PUSH2 0x348 DUP2 LT JUMPDEST ISZERO PUSH2 0x92C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH2 0x89F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP1 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 SLOAD SWAP2 ADD SLOAD PUSH2 0x888 SWAP1 PUSH11 0x3CB5FEEC27901169E00000 PUSH2 0xD04 JUMP JUMPDEST PUSH2 0x892 SWAP2 SWAP1 PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0x89C SWAP1 DUP4 PUSH2 0xCCA JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x8C5 SWAP1 DUP4 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x3 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x906 SWAP1 PUSH11 0x3290914BE1AFB75080000 PUSH2 0xD04 JUMP JUMPDEST PUSH2 0x910 SWAP2 SWAP1 PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0x91A SWAP1 DUP5 PUSH2 0xCCA JUMP JUMPDEST PUSH2 0x924 SWAP1 DUP3 PUSH2 0xD04 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x936 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x9BD SWAP1 DUP5 SWAP1 PUSH2 0x9C2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA17 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAA7 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x9BD JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xA35 SWAP2 SWAP1 PUSH2 0xD23 JUMP JUMPDEST PUSH2 0x9BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAB6 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xAC0 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xB38 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xB8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x298 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xBAB SWAP2 SWAP1 PUSH2 0xD75 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xBE8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xBFD DUP3 DUP3 DUP7 PUSH2 0xC08 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xC17 JUMPI POP DUP2 PUSH2 0xAB9 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xC27 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x298 SWAP2 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB9 DUP3 PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC8F DUP4 PUSH2 0xC41 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xCC5 JUMPI PUSH2 0xCC5 PUSH2 0xC9D JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xCDD JUMPI PUSH2 0xCDD PUSH2 0xC9D JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xCFF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xD1E JUMPI PUSH2 0xD1E PUSH2 0xC9D JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xAB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD60 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD48 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xD6F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xD87 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xD45 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xDB0 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xD45 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0xB1 0xAF MOD SWAP9 CALL 0x5D 0xD6 0xB6 PUSH32 0x282A146591AAE0E58FD6AA9831AEAE83C9E47736816364736F6C634300080B00 CALLER ",
							"sourceMap": "770:5346:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1036:31;;;;;;;;;160:25:7;;;148:2;133:18;1036:31:6;;;;;;;;825;;;;;;1668:101:0;;;:::i;:::-;;4918:446:6;;;;;;:::i;:::-;;:::i;1341:517::-;;;;;;:::i;:::-;-1:-1:-1;;;;;1598:18:6;1440:7;1598:18;;;:12;:18;;;;;;;;;1560:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1649:31;;;;1598:18;;1560:56;;;;1341:517;;;;;-1:-1:-1;;;;;859:55:7;;;841:74;;946:2;931:18;;924:34;;;;974:18;;;967:34;;;;1044:14;1037:22;1032:2;1017:18;;1010:50;1091:3;1076:19;;1069:35;828:3;813:19;1341:517:6;588:522:7;865:32:6;;;;;;1036:85:0;1108:6;;-1:-1:-1;;;;;1108:6:0;1036:85;;;-1:-1:-1;;;;;1279:55:7;;;1261:74;;1249:2;1234:18;1036:85:0;1115:226:7;4205:705:6;;;;;;:::i;:::-;;:::i;5456:657::-;;;:::i;1195:21::-;;;;;-1:-1:-1;;;;;1195:21:6;;;1866:101;;;:::i;1918:198:0:-;;;;;;:::i;:::-;;:::i;1668:101::-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;1807:2:7;1240:68:0;;;1789:21:7;;;1826:18;;;1819:30;1885:34;1865:18;;;1858:62;1937:18;;1240:68:0;;;;;;;;;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;4918:446:6:-;1108:6:0;;5014:7:6;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;1807:2:7;1240:68:0;;;1789:21:7;;;1826:18;;;1819:30;1885:34;1865:18;;;1858:62;1937:18;;1240:68:0;1605:356:7;1240:68:0;-1:-1:-1;;;;;5043:18:6;::::1;5071:1;5043:18:::0;;;:12:::1;:18;::::0;;;;:25:::1;;::::0;:29;5039:318:::1;;5109:1;5089:16;;:21;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;5146:18:6;::::1;;::::0;;;:12:::1;:18;::::0;;;;:25:::1;;::::0;5125:17:::1;:46:::0;;5146:25;;5125:17;;:46:::1;::::0;5146:25;;5125:46:::1;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;;5206:18:6::1;5186:17;5206:18:::0;;;:12:::1;:18;::::0;;;;:25:::1;::::0;::::1;::::0;;5248;;-1:-1:-1;;5248:25:6::1;::::0;;-1:-1:-1;5248:25:6;::::1;::::0;;;;;;;::::1;::::0;::::1;::::0;;-1:-1:-1;;5248:25:6::1;::::0;;::::1;::::0;;::::1;::::0;;;;5206;4918:446::o;5039:318::-:1;-1:-1:-1::0;5344:1:6::1;5039:318;4918:446:::0;;;:::o;4205:705::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;1807:2:7;1240:68:0;;;1789:21:7;;;1826:18;;;1819:30;1885:34;1865:18;;;1858:62;1937:18;;1240:68:0;1605:356:7;1240:68:0;-1:-1:-1;;;;;4293:18:6;::::1;;::::0;;;:12:::1;:18;::::0;;;;:31:::1;;::::0;:36;4289:614:::1;;4353:32;;;;;;;;;;;;;;4289:614;4431:17;;4422:6;:26;4418:109;;;4476:35;;;;;;;;;;;;;;4418:109;4547:10:::0;;4543:349:::1;;-1:-1:-1::0;;;;;4578:18:6;::::1;;::::0;;;:12:::1;:18;::::0;;;;:31:::1;::::0;;::::1;:40:::0;;;4637:25:::1;::::0;;::::1;:34:::0;;;4690::::1;::::0;::::1;:42:::0;;-1:-1:-1;;4690:42:6::1;::::0;;4751:33:::1;::::0;;::::1;:37:::0;;;4809:21;;4578:31;;:18;4809:21:::1;::::0;4578:31;;4809:21:::1;:::i;:::-;;;;;;;;4870:6;4849:17;;:27;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;4543:349:6::1;4205:705:::0;;:::o;5456:657::-;5535:10;5556:1;5522:24;;;:12;:24;;;;;:31;;;:35;5518:588;;5574:29;5606:37;5632:10;5606:25;:37::i;:::-;5574:69;-1:-1:-1;5664:25:6;;5660:434;;5778:10;5765:24;;;;:12;:24;;;;;:31;;;:76;;5820:21;;5765:76;:::i;:::-;5723:10;5710:24;;;;:12;:24;;;;;:31;;:131;;;;5975:6;;5923:155;;-1:-1:-1;;;;;5975:6:6;;;;6038:21;5923:22;:155::i;:::-;5559:547;5456:657::o;1866:101::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;1807:2:7;1240:68:0;;;1789:21:7;;;1826:18;;;1819:30;1885:34;1865:18;;;1858:62;1937:18;;1240:68:0;1605:356:7;1240:68:0;1944:15:6::1;1925:16;:34:::0;1866:101::o;1918:198:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;1807:2:7;1240:68:0;;;1789:21:7;;;1826:18;;;1819:30;1885:34;1865:18;;;1858:62;1937:18;;1240:68:0;1605:356:7;1240:68:0;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;2620:2:7;1998:73:0::1;::::0;::::1;2602:21:7::0;2659:2;2639:18;;;2632:30;2698:34;2678:18;;;2671:62;2769:8;2749:18;;;2742:36;2795:19;;1998:73:0::1;2418:402:7::0;1998:73:0::1;2081:28;2100:8;2270:187:::0;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;2604:1593:6:-;2689:7;2714:17;2744:20;2806:6;2786:16;;2768:15;:34;;;;:::i;:::-;2767:45;;;;:::i;:::-;2744:68;;2898:7;2883:12;:22;2879:1282;;;-1:-1:-1;;;;;2926:18:6;;;;;;:12;:18;;;;;:34;;;;;2922:362;;-1:-1:-1;;;;;2990:18:6;;;;;;:12;:18;;;;;:34;;;;:41;;-1:-1:-1;;2990:41:6;3027:4;2990:41;;;;;;3086:7;3050:33;;;:43;3250:17;;3190:31;;;3180:41;;940:15;3180:41;:::i;:::-;3179:88;;;;:::i;:::-;3145:123;;:9;:123;:::i;:::-;3112:156;;2922:362;2879:1282;;;3382:7;3366:12;:23;;:49;;;;;3408:7;3393:12;:22;3366:49;3362:799;;;-1:-1:-1;;;;;3436:18:6;;;;;;:12;:18;;;;;:34;;;;;3432:300;;-1:-1:-1;;;;;3500:18:6;;;;;;:12;:18;;;;;:34;;;;:41;;-1:-1:-1;;3500:41:6;3537:4;3500:41;;;;;;3698:17;;3638:31;;;3628:41;;940:15;3628:41;:::i;:::-;3627:88;;;;:::i;:::-;3593:123;;:9;:123;:::i;:::-;3560:156;;3432:300;-1:-1:-1;;;;;3807:18:6;;3748:24;3807:18;;;:12;:18;;;;;:33;;;3775:65;;:12;:65;:::i;:::-;-1:-1:-1;;;;;3855:18:6;;;;;;:12;:18;;;;;:33;;;:48;;;4089:17;;4029:31;;;;;3748:92;;-1:-1:-1;4089:17:6;4019:41;;998:14;4019:41;:::i;:::-;4018:88;;;;:::i;:::-;3984:123;;:9;:123;:::i;:::-;3947:161;;:16;:161;:::i;:::-;3918:190;;3417:703;3362:799;;;-1:-1:-1;4148:1:6;;2604:1593;-1:-1:-1;;;2604:1593:6:o;3362:799::-;-1:-1:-1;4180:9:6;2604:1593;-1:-1:-1;;2604:1593:6:o;701:205:3:-;840:58;;;-1:-1:-1;;;;;3469:55:7;;840:58:3;;;3451:74:7;3541:18;;;;3534:34;;;840:58:3;;;;;;;;;;3424:18:7;;;;840:58:3;;;;;;;;;;863:23;840:58;;;813:86;;833:5;;813:19;:86::i;:::-;701:205;;;:::o;3207:706::-;3626:23;3652:69;3680:4;3652:69;;;;;;;;;;;;;;;;;3660:5;-1:-1:-1;;;;;3652:27:3;;;:69;;;;;:::i;:::-;3735:17;;3626:95;;-1:-1:-1;3735:21:3;3731:176;;3830:10;3819:30;;;;;;;;;;;;:::i;:::-;3811:85;;;;-1:-1:-1;;;3811:85:3;;4063:2:7;3811:85:3;;;4045:21:7;4102:2;4082:18;;;4075:30;4141:34;4121:18;;;4114:62;4212:12;4192:18;;;4185:40;4242:19;;3811:85:3;3861:406:7;:223:4;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;:::-;4018:59;;3861:223;;;;;;:::o;4948:499::-;5113:12;5170:5;5145:21;:30;;5137:81;;;;-1:-1:-1;;;5137:81:4;;4474:2:7;5137:81:4;;;4456:21:7;4513:2;4493:18;;;4486:30;4552:34;4532:18;;;4525:62;4623:8;4603:18;;;4596:36;4649:19;;5137:81:4;4272:402:7;5137:81:4;-1:-1:-1;;;;;1465:19:4;;;5228:60;;;;-1:-1:-1;;;5228:60:4;;4881:2:7;5228:60:4;;;4863:21:7;4920:2;4900:18;;;4893:30;4959:31;4939:18;;;4932:59;5008:18;;5228:60:4;4679:353:7;5228:60:4;5300:12;5314:23;5341:6;-1:-1:-1;;;;;5341:11:4;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;4948:499;-1:-1:-1;;;;;;;4948:499:4:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:4;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:4;;;;;;;;:::i;196:196:7:-;264:20;;-1:-1:-1;;;;;313:54:7;;303:65;;293:93;;382:1;379;372:12;397:186;456:6;509:2;497:9;488:7;484:23;480:32;477:52;;;525:1;522;515:12;477:52;548:29;567:9;548:29;:::i;1346:254::-;1414:6;1422;1475:2;1463:9;1454:7;1450:23;1446:32;1443:52;;;1491:1;1488;1481:12;1443:52;1514:29;1533:9;1514:29;:::i;:::-;1504:39;1590:2;1575:18;;;;1562:32;;-1:-1:-1;;;1346:254:7:o;1966:184::-;-1:-1:-1;;;2015:1:7;2008:88;2115:4;2112:1;2105:15;2139:4;2136:1;2129:15;2155:125;2195:4;2223:1;2220;2217:8;2214:34;;;2228:18;;:::i;:::-;-1:-1:-1;2265:9:7;;2155:125::o;2285:128::-;2325:3;2356:1;2352:6;2349:1;2346:13;2343:39;;;2362:18;;:::i;:::-;-1:-1:-1;2398:9:7;;2285:128::o;2825:274::-;2865:1;2891;2881:189;;-1:-1:-1;;;2923:1:7;2916:88;3027:4;3024:1;3017:15;3055:4;3052:1;3045:15;2881:189;-1:-1:-1;3084:9:7;;2825:274::o;3104:168::-;3144:7;3210:1;3206;3202:6;3198:14;3195:1;3192:21;3187:1;3180:9;3173:17;3169:45;3166:71;;;3217:18;;:::i;:::-;-1:-1:-1;3257:9:7;;3104:168::o;3579:277::-;3646:6;3699:2;3687:9;3678:7;3674:23;3670:32;3667:52;;;3715:1;3712;3705:12;3667:52;3747:9;3741:16;3800:5;3793:13;3786:21;3779:5;3776:32;3766:60;;3822:1;3819;3812:12;5037:258;5109:1;5119:113;5133:6;5130:1;5127:13;5119:113;;;5209:11;;;5203:18;5190:11;;;5183:39;5155:2;5148:10;5119:113;;;5250:6;5247:1;5244:13;5241:48;;;5285:1;5276:6;5271:3;5267:16;5260:27;5241:48;;5037:258;;;:::o;5300:274::-;5429:3;5467:6;5461:13;5483:53;5529:6;5524:3;5517:4;5509:6;5505:17;5483:53;:::i;:::-;5552:16;;;;;5300:274;-1:-1:-1;;5300:274:7:o;5579:383::-;5728:2;5717:9;5710:21;5691:4;5760:6;5754:13;5803:6;5798:2;5787:9;5783:18;5776:34;5819:66;5878:6;5873:2;5862:9;5858:18;5853:2;5845:6;5841:15;5819:66;:::i;:::-;5946:2;5925:15;-1:-1:-1;;5921:29:7;5906:45;;;;5953:2;5902:54;;5579:383;-1:-1:-1;;5579:383:7:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "715600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"_token()": "2381",
								"addBeneficiary(address,uint256)": "146153",
								"beneficiary(address)": "9188",
								"deleteBeneficiary(address)": "infinite",
								"hasWhitelist(address)": "9166",
								"initiateWhitelist()": "24455",
								"owner()": "2365",
								"privateSaleAmount()": "2351",
								"privateSaleUsers()": "2330",
								"releaseClaimable()": "infinite",
								"renounceOwnership()": "28173",
								"startPrivateSale()": "2308",
								"transferOwnership(address)": "28377"
							},
							"internal": {
								"_calculateClaimableAmount(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 770,
									"end": 6116,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 770,
									"end": 6116,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 770,
									"end": 6116,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "CODESIZE",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "tag",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1225,
									"end": 1333,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1813,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1283,
									"end": 1300,
									"name": "PUSH",
									"source": 6,
									"value": "4BE37EA7317415C45800000"
								},
								{
									"begin": 1263,
									"end": 1280,
									"name": "PUSH",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1263,
									"end": 1300,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1311,
									"end": 1317,
									"name": "PUSH",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "AND",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1311,
									"end": 1325,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 770,
									"end": 6116,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "17"
								},
								{
									"begin": 770,
									"end": 6116,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2333,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 7,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 7
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 7,
									"value": "17"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 770,
									"end": 6116,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 770,
									"end": 6116,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 770,
									"end": 6116,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 770,
									"end": 6116,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 770,
									"end": 6116,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 770,
									"end": 6116,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 770,
									"end": 6116,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e1b1af0698f15dd6b67f282a146591aae0e58fd6aa9831aeae83c9e47736816364736f6c634300080b0033",
									".code": [
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "8CDB7E8B"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "D5498DC7"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "D5498DC7"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "ECD0C0C3"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "EFDD8796"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "F2FDE38B"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "tag",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "8CDB7E8B"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "96074E70"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "7D3BCA76"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "7D3BCA76"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "81008568"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "8B2B423A"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "338DBF59"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "549DEE0B"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 770,
											"end": 6116,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 160,
											"end": 185,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "tag",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1067,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 825,
											"end": 856,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 825,
											"end": 856,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 825,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 825,
											"end": 856,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 825,
											"end": 856,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 825,
											"end": 856,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 825,
											"end": 856,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "tag",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1440,
											"end": 1447,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1598,
											"end": 1610,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1649,
											"end": 1680,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1649,
											"end": 1680,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1649,
											"end": 1680,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1649,
											"end": 1680,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1598,
											"end": 1616,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1560,
											"end": 1616,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "tag",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 859,
											"end": 914,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 859,
											"end": 914,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": 859,
											"end": 914,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 841,
											"end": 915,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 841,
											"end": 915,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 946,
											"end": 948,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 931,
											"end": 949,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 931,
											"end": 949,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 924,
											"end": 958,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 924,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 924,
											"end": 958,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 924,
											"end": 958,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 974,
											"end": 992,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 974,
											"end": 992,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 967,
											"end": 1001,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 967,
											"end": 1001,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 967,
											"end": 1001,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 967,
											"end": 1001,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1044,
											"end": 1058,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1037,
											"end": 1059,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1032,
											"end": 1034,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1017,
											"end": 1035,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1035,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1010,
											"end": 1060,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1091,
											"end": 1094,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1076,
											"end": 1095,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1076,
											"end": 1095,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1069,
											"end": 1104,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 828,
											"end": 831,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 813,
											"end": 832,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1341,
											"end": 1858,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 588,
											"end": 1110,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 865,
											"end": 897,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 865,
											"end": 897,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 865,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 865,
											"end": 897,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 865,
											"end": 897,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 865,
											"end": 897,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 865,
											"end": 897,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1279,
											"end": 1334,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1279,
											"end": 1334,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1279,
											"end": 1334,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1261,
											"end": 1335,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1261,
											"end": 1335,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1249,
											"end": 1251,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1234,
											"end": 1252,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1115,
											"end": 1341,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "tag",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "tag",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5456,
											"end": 6113,
											"name": "tag",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 5456,
											"end": 6113,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5456,
											"end": 6113,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 5456,
											"end": 6113,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 5456,
											"end": 6113,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1195,
											"end": 1216,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 1195,
											"end": 1216,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1195,
											"end": 1216,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 1195,
											"end": 1216,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1195,
											"end": 1216,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 1195,
											"end": 1216,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1195,
											"end": 1216,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1195,
											"end": 1216,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1195,
											"end": 1216,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1967,
											"name": "tag",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 1866,
											"end": 1967,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1967,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 1866,
											"end": 1967,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1866,
											"end": 1967,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1809,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1819,
											"end": 1849,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1885,
											"end": 1919,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1858,
											"end": 1920,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1955,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 1937,
											"end": 1955,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "tag",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5014,
											"end": 5021,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5014,
											"end": 5021,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1809,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1819,
											"end": 1849,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1885,
											"end": 1919,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1858,
											"end": 1920,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1955,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 1937,
											"end": 1955,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1605,
											"end": 1961,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5043,
											"end": 5061,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5043,
											"end": 5061,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5071,
											"end": 5072,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5043,
											"end": 5061,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5043,
											"end": 5061,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5043,
											"end": 5061,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5043,
											"end": 5055,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 5043,
											"end": 5061,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5043,
											"end": 5061,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5043,
											"end": 5061,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5043,
											"end": 5061,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5043,
											"end": 5061,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5043,
											"end": 5068,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5043,
											"end": 5068,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5043,
											"end": 5068,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5043,
											"end": 5072,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5039,
											"end": 5357,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 5039,
											"end": 5357,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5109,
											"end": 5110,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5089,
											"end": 5105,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5089,
											"end": 5105,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "tag",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5158,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5171,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5146,
											"end": 5171,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5171,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5142,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5125,
											"end": 5171,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5171,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5171,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5171,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5142,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5142,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5171,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 5125,
											"end": 5171,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5171,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5146,
											"end": 5171,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5171,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 5125,
											"end": 5171,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5125,
											"end": 5171,
											"name": "tag",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 5125,
											"end": 5171,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5171,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5171,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5171,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5186,
											"end": 5203,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5206,
											"end": 5218,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5206,
											"end": 5231,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5206,
											"end": 5231,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5206,
											"end": 5231,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5206,
											"end": 5231,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5206,
											"end": 5231,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5248,
											"end": 5273,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5206,
											"end": 5231,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5039,
											"end": 5357,
											"name": "tag",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 5039,
											"end": 5357,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5344,
											"end": 5345,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5039,
											"end": 5357,
											"name": "tag",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 5039,
											"end": 5357,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4918,
											"end": 5364,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "tag",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1809,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1819,
											"end": 1849,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1885,
											"end": 1919,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1858,
											"end": 1920,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1955,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 1937,
											"end": 1955,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1605,
											"end": 1961,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4293,
											"end": 4305,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4293,
											"end": 4324,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4293,
											"end": 4324,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4293,
											"end": 4324,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4293,
											"end": 4329,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4289,
											"end": 4903,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 4289,
											"end": 4903,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "PUSH",
											"source": 6,
											"value": "AB1818DA00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4353,
											"end": 4385,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4289,
											"end": 4903,
											"name": "tag",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 4289,
											"end": 4903,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4431,
											"end": 4448,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4431,
											"end": 4448,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4422,
											"end": 4428,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4422,
											"end": 4448,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 4418,
											"end": 4527,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4418,
											"end": 4527,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 4418,
											"end": 4527,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "PUSH",
											"source": 6,
											"value": "194F40DC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4476,
											"end": 4511,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4418,
											"end": 4527,
											"name": "tag",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 4418,
											"end": 4527,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4547,
											"end": 4557,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4547,
											"end": 4557,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4543,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 4543,
											"end": 4892,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4590,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4609,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4578,
											"end": 4609,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4609,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4609,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4618,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4618,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4618,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 4662,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 4637,
											"end": 4662,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 4662,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 4662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 4671,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 4671,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 4671,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4690,
											"end": 4724,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4690,
											"end": 4724,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4690,
											"end": 4724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4690,
											"end": 4732,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4690,
											"end": 4732,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4732,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4690,
											"end": 4732,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4690,
											"end": 4732,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4784,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4751,
											"end": 4784,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4784,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4784,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4788,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4788,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4751,
											"end": 4788,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4609,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4609,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4596,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4609,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4578,
											"end": 4609,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "tag",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4870,
											"end": 4876,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4849,
											"end": 4866,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4849,
											"end": 4866,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "tag",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4849,
											"end": 4876,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4543,
											"end": 4892,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 4543,
											"end": 4892,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4205,
											"end": 4910,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5456,
											"end": 6113,
											"name": "tag",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 5456,
											"end": 6113,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5535,
											"end": 5545,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5556,
											"end": 5557,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5522,
											"end": 5546,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5522,
											"end": 5546,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5522,
											"end": 5546,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5522,
											"end": 5534,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 5522,
											"end": 5546,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5522,
											"end": 5546,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5522,
											"end": 5546,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5522,
											"end": 5546,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5522,
											"end": 5546,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5522,
											"end": 5553,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5522,
											"end": 5553,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5522,
											"end": 5553,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5522,
											"end": 5557,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5518,
											"end": 6106,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "71"
										},
										{
											"begin": 5518,
											"end": 6106,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5574,
											"end": 5603,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5606,
											"end": 5643,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 5632,
											"end": 5642,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5606,
											"end": 5631,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 5606,
											"end": 5643,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5606,
											"end": 5643,
											"name": "tag",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 5606,
											"end": 5643,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5574,
											"end": 5643,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5664,
											"end": 5689,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5664,
											"end": 5689,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5660,
											"end": 6094,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 5660,
											"end": 6094,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5778,
											"end": 5788,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5765,
											"end": 5789,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5765,
											"end": 5789,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5765,
											"end": 5789,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5765,
											"end": 5789,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5765,
											"end": 5777,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 5765,
											"end": 5789,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5765,
											"end": 5789,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5765,
											"end": 5789,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5765,
											"end": 5789,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5765,
											"end": 5789,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5765,
											"end": 5796,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5765,
											"end": 5796,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5765,
											"end": 5796,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5765,
											"end": 5841,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 5765,
											"end": 5841,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5820,
											"end": 5841,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5820,
											"end": 5841,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5765,
											"end": 5841,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 5765,
											"end": 5841,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5765,
											"end": 5841,
											"name": "tag",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 5765,
											"end": 5841,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5723,
											"end": 5733,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5710,
											"end": 5734,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5710,
											"end": 5734,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5710,
											"end": 5734,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5710,
											"end": 5734,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5710,
											"end": 5722,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 5710,
											"end": 5734,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5734,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5710,
											"end": 5734,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5710,
											"end": 5734,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5710,
											"end": 5734,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5710,
											"end": 5741,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5710,
											"end": 5741,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5710,
											"end": 5841,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5710,
											"end": 5841,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5710,
											"end": 5841,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5710,
											"end": 5841,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5975,
											"end": 5981,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 5975,
											"end": 5981,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5923,
											"end": 6078,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 5923,
											"end": 6078,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5975,
											"end": 5981,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5975,
											"end": 5981,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5975,
											"end": 5981,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5975,
											"end": 5981,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6038,
											"end": 6059,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5923,
											"end": 5945,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 5923,
											"end": 6078,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5923,
											"end": 6078,
											"name": "tag",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 5923,
											"end": 6078,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5559,
											"end": 6106,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5456,
											"end": 6113,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1866,
											"end": 1967,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1866,
											"end": 1967,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1809,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1819,
											"end": 1849,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1885,
											"end": 1919,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1858,
											"end": 1920,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1955,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 1937,
											"end": 1955,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1605,
											"end": 1961,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1944,
											"end": 1959,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 1925,
											"end": 1941,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1925,
											"end": 1959,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1967,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1809,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1789,
											"end": 1810,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1819,
											"end": 1849,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1885,
											"end": 1919,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1865,
											"end": 1883,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1858,
											"end": 1920,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1955,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 1937,
											"end": 1955,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1605,
											"end": 1961,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2620,
											"end": 2622,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2623,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2659,
											"end": 2661,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 2639,
											"end": 2657,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2639,
											"end": 2657,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2639,
											"end": 2657,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2632,
											"end": 2662,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2698,
											"end": 2732,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 2678,
											"end": 2696,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2678,
											"end": 2696,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2678,
											"end": 2696,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2671,
											"end": 2733,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2769,
											"end": 2777,
											"name": "PUSH",
											"source": 7,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2749,
											"end": 2767,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2749,
											"end": 2767,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2749,
											"end": 2767,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2742,
											"end": 2778,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2795,
											"end": 2814,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 2795,
											"end": 2814,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2418,
											"end": 2820,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 2100,
											"end": 2108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2333,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2604,
											"end": 4197,
											"name": "tag",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 2604,
											"end": 4197,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2689,
											"end": 2696,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2714,
											"end": 2731,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2744,
											"end": 2764,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2806,
											"end": 2812,
											"name": "PUSH",
											"source": 6,
											"value": "15180"
										},
										{
											"begin": 2786,
											"end": 2802,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2786,
											"end": 2802,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2768,
											"end": 2783,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 2768,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 2768,
											"end": 2802,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2768,
											"end": 2802,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2768,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 2768,
											"end": 2802,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2768,
											"end": 2802,
											"name": "tag",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 2768,
											"end": 2802,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2767,
											"end": 2812,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 2767,
											"end": 2812,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2767,
											"end": 2812,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2767,
											"end": 2812,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 2767,
											"end": 2812,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2767,
											"end": 2812,
											"name": "tag",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 2767,
											"end": 2812,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2744,
											"end": 2812,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2744,
											"end": 2812,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2898,
											"end": 2905,
											"name": "PUSH",
											"source": 6,
											"value": "1E0"
										},
										{
											"begin": 2883,
											"end": 2895,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2883,
											"end": 2905,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 2879,
											"end": 4161,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2879,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 2879,
											"end": 4161,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2926,
											"end": 2944,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2926,
											"end": 2944,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2926,
											"end": 2944,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2926,
											"end": 2944,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2926,
											"end": 2944,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2926,
											"end": 2944,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2926,
											"end": 2938,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 2926,
											"end": 2944,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2926,
											"end": 2944,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2926,
											"end": 2944,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2926,
											"end": 2944,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2926,
											"end": 2944,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2926,
											"end": 2960,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 2926,
											"end": 2960,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2926,
											"end": 2960,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2926,
											"end": 2960,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 2926,
											"end": 2960,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2922,
											"end": 3284,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 2922,
											"end": 3284,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3002,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3024,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 2990,
											"end": 3024,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3024,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3024,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3031,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3031,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2990,
											"end": 3031,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3027,
											"end": 3031,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 2990,
											"end": 3031,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3031,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3031,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3031,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3031,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2990,
											"end": 3031,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3086,
											"end": 3093,
											"name": "PUSH",
											"source": 6,
											"value": "1C2"
										},
										{
											"begin": 3050,
											"end": 3083,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3050,
											"end": 3083,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3050,
											"end": 3083,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3050,
											"end": 3093,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3250,
											"end": 3267,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3250,
											"end": 3267,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3190,
											"end": 3221,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3190,
											"end": 3221,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3190,
											"end": 3221,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3180,
											"end": 3221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 3180,
											"end": 3221,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 940,
											"end": 955,
											"name": "PUSH",
											"source": 6,
											"value": "3CB5FEEC27901169E00000"
										},
										{
											"begin": 3180,
											"end": 3221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 3180,
											"end": 3221,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3180,
											"end": 3221,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 3180,
											"end": 3221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3179,
											"end": 3267,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 3179,
											"end": 3267,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3179,
											"end": 3267,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3179,
											"end": 3267,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 3179,
											"end": 3267,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3179,
											"end": 3267,
											"name": "tag",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 3179,
											"end": 3267,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3145,
											"end": 3268,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 3145,
											"end": 3268,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3145,
											"end": 3154,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3145,
											"end": 3268,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 3145,
											"end": 3268,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3145,
											"end": 3268,
											"name": "tag",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 3145,
											"end": 3268,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3112,
											"end": 3268,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3112,
											"end": 3268,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2922,
											"end": 3284,
											"name": "tag",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 2922,
											"end": 3284,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2879,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 2879,
											"end": 4161,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2879,
											"end": 4161,
											"name": "tag",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 2879,
											"end": 4161,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3382,
											"end": 3389,
											"name": "PUSH",
											"source": 6,
											"value": "1E0"
										},
										{
											"begin": 3366,
											"end": 3378,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3366,
											"end": 3389,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 3366,
											"end": 3389,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3366,
											"end": 3415,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3366,
											"end": 3415,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3366,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 3366,
											"end": 3415,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3366,
											"end": 3415,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3408,
											"end": 3415,
											"name": "PUSH",
											"source": 6,
											"value": "348"
										},
										{
											"begin": 3393,
											"end": 3405,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3393,
											"end": 3415,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 3366,
											"end": 3415,
											"name": "tag",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 3366,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3362,
											"end": 4161,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3362,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 3362,
											"end": 4161,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3436,
											"end": 3454,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3454,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3454,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3436,
											"end": 3454,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3454,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3454,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 3436,
											"end": 3454,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3436,
											"end": 3454,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3454,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3436,
											"end": 3454,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3454,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3470,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 3436,
											"end": 3470,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3470,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3470,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3436,
											"end": 3470,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3432,
											"end": 3732,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 3432,
											"end": 3732,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3512,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3534,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 3500,
											"end": 3534,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3534,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3534,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3541,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3541,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3500,
											"end": 3541,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3537,
											"end": 3541,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3500,
											"end": 3541,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3541,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3541,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3541,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3541,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3500,
											"end": 3541,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3698,
											"end": 3715,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3698,
											"end": 3715,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3638,
											"end": 3669,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3638,
											"end": 3669,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3638,
											"end": 3669,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3628,
											"end": 3669,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 3628,
											"end": 3669,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 940,
											"end": 955,
											"name": "PUSH",
											"source": 6,
											"value": "3CB5FEEC27901169E00000"
										},
										{
											"begin": 3628,
											"end": 3669,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 3628,
											"end": 3669,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3628,
											"end": 3669,
											"name": "tag",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 3628,
											"end": 3669,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3627,
											"end": 3715,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 3627,
											"end": 3715,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3627,
											"end": 3715,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3627,
											"end": 3715,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 3627,
											"end": 3715,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3627,
											"end": 3715,
											"name": "tag",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 3627,
											"end": 3715,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3593,
											"end": 3716,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 3593,
											"end": 3716,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3593,
											"end": 3602,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3593,
											"end": 3716,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 3593,
											"end": 3716,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3593,
											"end": 3716,
											"name": "tag",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 3593,
											"end": 3716,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3560,
											"end": 3716,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3560,
											"end": 3716,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3432,
											"end": 3732,
											"name": "tag",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 3432,
											"end": 3732,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3807,
											"end": 3825,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3807,
											"end": 3825,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3748,
											"end": 3772,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3807,
											"end": 3825,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3807,
											"end": 3825,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3807,
											"end": 3825,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3807,
											"end": 3819,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 3807,
											"end": 3825,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3807,
											"end": 3825,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3807,
											"end": 3825,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3807,
											"end": 3825,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3807,
											"end": 3825,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3807,
											"end": 3840,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3807,
											"end": 3840,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3807,
											"end": 3840,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3775,
											"end": 3840,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 3775,
											"end": 3840,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3775,
											"end": 3787,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3775,
											"end": 3840,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 3775,
											"end": 3840,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3775,
											"end": 3840,
											"name": "tag",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 3775,
											"end": 3840,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3867,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3888,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3855,
											"end": 3888,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3888,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3903,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3903,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3855,
											"end": 3903,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4089,
											"end": 4106,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4089,
											"end": 4106,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4029,
											"end": 4060,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4029,
											"end": 4060,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4029,
											"end": 4060,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4029,
											"end": 4060,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4029,
											"end": 4060,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3748,
											"end": 3840,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3748,
											"end": 3840,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4089,
											"end": 4106,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4019,
											"end": 4060,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 4019,
											"end": 4060,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 998,
											"end": 1012,
											"name": "PUSH",
											"source": 6,
											"value": "3290914BE1AFB75080000"
										},
										{
											"begin": 4019,
											"end": 4060,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 4019,
											"end": 4060,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4019,
											"end": 4060,
											"name": "tag",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 4019,
											"end": 4060,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4018,
											"end": 4106,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 4018,
											"end": 4106,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4018,
											"end": 4106,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4018,
											"end": 4106,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 4018,
											"end": 4106,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4018,
											"end": 4106,
											"name": "tag",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 4018,
											"end": 4106,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3984,
											"end": 4107,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 3984,
											"end": 4107,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3984,
											"end": 3993,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3984,
											"end": 4107,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 3984,
											"end": 4107,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3984,
											"end": 4107,
											"name": "tag",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 3984,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3947,
											"end": 4108,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 3947,
											"end": 4108,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3947,
											"end": 3963,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3947,
											"end": 4108,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 3947,
											"end": 4108,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3947,
											"end": 4108,
											"name": "tag",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 3947,
											"end": 4108,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3918,
											"end": 4108,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3918,
											"end": 4108,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3417,
											"end": 4120,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3362,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 3362,
											"end": 4161,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3362,
											"end": 4161,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 3362,
											"end": 4161,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4148,
											"end": 4149,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4148,
											"end": 4149,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2604,
											"end": 4197,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2604,
											"end": 4197,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3362,
											"end": 4161,
											"name": "tag",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 3362,
											"end": 4161,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4180,
											"end": 4189,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2604,
											"end": 4197,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2604,
											"end": 4197,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "tag",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3469,
											"end": 3524,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3469,
											"end": 3524,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3451,
											"end": 3525,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3541,
											"end": 3559,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3541,
											"end": 3559,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3541,
											"end": 3559,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3541,
											"end": 3559,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3534,
											"end": 3568,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3534,
											"end": 3568,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3534,
											"end": 3568,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3424,
											"end": 3442,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3424,
											"end": 3442,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3424,
											"end": 3442,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3424,
											"end": 3442,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 863,
											"end": 886,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 813,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 833,
											"end": 838,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 833,
											"end": 838,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 813,
											"end": 832,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "153"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "tag",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "tag",
											"source": 3,
											"value": "153"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3649,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "155"
										},
										{
											"begin": 3680,
											"end": 3684,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3660,
											"end": 3665,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "156"
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "tag",
											"source": 3,
											"value": "155"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3752,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3752,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3735,
											"end": 3756,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3830,
											"end": 3840,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "159"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "tag",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4063,
											"end": 4065,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4045,
											"end": 4066,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4102,
											"end": 4104,
											"name": "PUSH",
											"source": 7,
											"value": "2A"
										},
										{
											"begin": 4082,
											"end": 4100,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4082,
											"end": 4100,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4082,
											"end": 4100,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4075,
											"end": 4105,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4141,
											"end": 4175,
											"name": "PUSH",
											"source": 7,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 4121,
											"end": 4139,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4121,
											"end": 4139,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4121,
											"end": 4139,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4114,
											"end": 4176,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4212,
											"end": 4224,
											"name": "PUSH",
											"source": 7,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 4192,
											"end": 4210,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4192,
											"end": 4210,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4192,
											"end": 4210,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4185,
											"end": 4225,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4242,
											"end": 4261,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 4242,
											"end": 4261,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 3861,
											"end": 4267,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "tag",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3994,
											"end": 4006,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 4047,
											"end": 4053,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4055,
											"end": 4059,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4061,
											"end": 4062,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4064,
											"end": 4076,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4025,
											"end": 4046,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "165"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "tag",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "tag",
											"source": 4,
											"value": "163"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "tag",
											"source": 4,
											"value": "165"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5113,
											"end": 5125,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5170,
											"end": 5175,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5166,
											"name": "SELFBALANCE",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4474,
											"end": 4476,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4456,
											"end": 4477,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4513,
											"end": 4515,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 4493,
											"end": 4511,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4493,
											"end": 4511,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4493,
											"end": 4511,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4486,
											"end": 4516,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4552,
											"end": 4586,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 4532,
											"end": 4550,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4532,
											"end": 4550,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4532,
											"end": 4550,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4525,
											"end": 4587,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4623,
											"end": 4631,
											"name": "PUSH",
											"source": 7,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4603,
											"end": 4621,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4603,
											"end": 4621,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4603,
											"end": 4621,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4596,
											"end": 4632,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4649,
											"end": 4668,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 4649,
											"end": 4668,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 4272,
											"end": 4674,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "tag",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4881,
											"end": 4883,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4863,
											"end": 4884,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4920,
											"end": 4922,
											"name": "PUSH",
											"source": 7,
											"value": "1D"
										},
										{
											"begin": 4900,
											"end": 4918,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4900,
											"end": 4918,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4900,
											"end": 4918,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4893,
											"end": 4923,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4959,
											"end": 4990,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 4939,
											"end": 4957,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4939,
											"end": 4957,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4939,
											"end": 4957,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4932,
											"end": 4991,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5008,
											"end": 5026,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5008,
											"end": 5026,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 4679,
											"end": 5032,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "tag",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5300,
											"end": 5312,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5314,
											"end": 5337,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5347,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5341,
											"end": 5352,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5360,
											"end": 5365,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5367,
											"end": 5371,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "175"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "176"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "175"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "179"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "3F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "178"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "179"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "178"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "180"
										},
										{
											"begin": 5406,
											"end": 5413,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5415,
											"end": 5425,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5427,
											"end": 5439,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "181"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "tag",
											"source": 4,
											"value": "180"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "SWAP8",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "SWAP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "tag",
											"source": 4,
											"value": "181"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7707,
											"end": 7719,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 7735,
											"end": 7742,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "184"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7765,
											"end": 7775,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "163"
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "tag",
											"source": 4,
											"value": "184"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7897,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "186"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8070,
											"end": 8080,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8064,
											"end": 8081,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8130,
											"end": 8145,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8117,
											"end": 8127,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8113,
											"end": 8115,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8109,
											"end": 8128,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8102,
											"end": 8146,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "tag",
											"source": 4,
											"value": "186"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8209,
											"end": 8221,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "189"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 196,
											"end": 392,
											"name": "tag",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 196,
											"end": 392,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 264,
											"end": 284,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 264,
											"end": 284,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 313,
											"end": 367,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 313,
											"end": 367,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 303,
											"end": 368,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 303,
											"end": 368,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 293,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 293,
											"end": 386,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 382,
											"end": 383,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 379,
											"end": 380,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 372,
											"end": 384,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 397,
											"end": 583,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 397,
											"end": 583,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 456,
											"end": 462,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 511,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 497,
											"end": 506,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 488,
											"end": 495,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 484,
											"end": 507,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 480,
											"end": 512,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 477,
											"end": 529,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 477,
											"end": 529,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "198"
										},
										{
											"begin": 477,
											"end": 529,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 525,
											"end": 526,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 522,
											"end": 523,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 515,
											"end": 527,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 477,
											"end": 529,
											"name": "tag",
											"source": 7,
											"value": "198"
										},
										{
											"begin": 477,
											"end": 529,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 548,
											"end": 577,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 567,
											"end": 576,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 548,
											"end": 577,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 548,
											"end": 577,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1346,
											"end": 1600,
											"name": "tag",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 1346,
											"end": 1600,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1414,
											"end": 1420,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1422,
											"end": 1428,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1475,
											"end": 1477,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1463,
											"end": 1472,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1454,
											"end": 1461,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1450,
											"end": 1473,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1446,
											"end": 1478,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1443,
											"end": 1495,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1443,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 1443,
											"end": 1495,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1491,
											"end": 1492,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1488,
											"end": 1489,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1481,
											"end": 1493,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1443,
											"end": 1495,
											"name": "tag",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 1443,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "204"
										},
										{
											"begin": 1533,
											"end": 1542,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "tag",
											"source": 7,
											"value": "204"
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1504,
											"end": 1543,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 1590,
											"end": 1592,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1575,
											"end": 1593,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1575,
											"end": 1593,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1575,
											"end": 1593,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1575,
											"end": 1593,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1562,
											"end": 1594,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1562,
											"end": 1594,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1346,
											"end": 1600,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1966,
											"end": 2150,
											"name": "tag",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 1966,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2015,
											"end": 2016,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2008,
											"end": 2096,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2115,
											"end": 2119,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 2112,
											"end": 2113,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2105,
											"end": 2120,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2139,
											"end": 2143,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2136,
											"end": 2137,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2129,
											"end": 2144,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2155,
											"end": 2280,
											"name": "tag",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 2155,
											"end": 2280,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2195,
											"end": 2199,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2224,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2220,
											"end": 2221,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2225,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 2214,
											"end": 2248,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2214,
											"end": 2248,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 2214,
											"end": 2248,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2228,
											"end": 2246,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 2228,
											"end": 2246,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 2228,
											"end": 2246,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2228,
											"end": 2246,
											"name": "tag",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 2228,
											"end": 2246,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2265,
											"end": 2274,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2265,
											"end": 2274,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2155,
											"end": 2280,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2285,
											"end": 2413,
											"name": "tag",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 2285,
											"end": 2413,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2325,
											"end": 2328,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2356,
											"end": 2357,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2352,
											"end": 2358,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 2349,
											"end": 2350,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2346,
											"end": 2359,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2343,
											"end": 2382,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2343,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 2343,
											"end": 2382,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2362,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 2362,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 2362,
											"end": 2380,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2362,
											"end": 2380,
											"name": "tag",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 2362,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2398,
											"end": 2407,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2398,
											"end": 2407,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2285,
											"end": 2413,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2825,
											"end": 3099,
											"name": "tag",
											"source": 7,
											"value": "129"
										},
										{
											"begin": 2825,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2865,
											"end": 2866,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2891,
											"end": 2892,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2881,
											"end": 3070,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "215"
										},
										{
											"begin": 2881,
											"end": 3070,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2923,
											"end": 2924,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2916,
											"end": 3004,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3027,
											"end": 3031,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 3024,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3017,
											"end": 3032,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3055,
											"end": 3059,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3052,
											"end": 3053,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3045,
											"end": 3060,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2881,
											"end": 3070,
											"name": "tag",
											"source": 7,
											"value": "215"
										},
										{
											"begin": 2881,
											"end": 3070,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3084,
											"end": 3093,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3084,
											"end": 3093,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 3099,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3104,
											"end": 3272,
											"name": "tag",
											"source": 7,
											"value": "133"
										},
										{
											"begin": 3104,
											"end": 3272,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3144,
											"end": 3151,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3210,
											"end": 3211,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3207,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3202,
											"end": 3208,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3212,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3195,
											"end": 3196,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3192,
											"end": 3213,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3187,
											"end": 3188,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3180,
											"end": 3189,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3173,
											"end": 3190,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3169,
											"end": 3214,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3166,
											"end": 3237,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3166,
											"end": 3237,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "218"
										},
										{
											"begin": 3166,
											"end": 3237,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3217,
											"end": 3235,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "218"
										},
										{
											"begin": 3217,
											"end": 3235,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 3217,
											"end": 3235,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3217,
											"end": 3235,
											"name": "tag",
											"source": 7,
											"value": "218"
										},
										{
											"begin": 3217,
											"end": 3235,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3257,
											"end": 3266,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 3257,
											"end": 3266,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3104,
											"end": 3272,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3579,
											"end": 3856,
											"name": "tag",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 3579,
											"end": 3856,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3646,
											"end": 3652,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3699,
											"end": 3701,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3687,
											"end": 3696,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3678,
											"end": 3685,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3674,
											"end": 3697,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3670,
											"end": 3702,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 3667,
											"end": 3719,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3667,
											"end": 3719,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 3667,
											"end": 3719,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 3716,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3712,
											"end": 3713,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3705,
											"end": 3717,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3667,
											"end": 3719,
											"name": "tag",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 3667,
											"end": 3719,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3747,
											"end": 3756,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3741,
											"end": 3757,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3800,
											"end": 3805,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3793,
											"end": 3806,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3786,
											"end": 3807,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3779,
											"end": 3784,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3776,
											"end": 3808,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3766,
											"end": 3826,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 3766,
											"end": 3826,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3822,
											"end": 3823,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3819,
											"end": 3820,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3812,
											"end": 3824,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5037,
											"end": 5295,
											"name": "tag",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 5037,
											"end": 5295,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5109,
											"end": 5110,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5119,
											"end": 5232,
											"name": "tag",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 5119,
											"end": 5232,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5133,
											"end": 5139,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5130,
											"end": 5131,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5127,
											"end": 5140,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 5119,
											"end": 5232,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5119,
											"end": 5232,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "229"
										},
										{
											"begin": 5119,
											"end": 5232,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5209,
											"end": 5220,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5209,
											"end": 5220,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5209,
											"end": 5220,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5203,
											"end": 5221,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5190,
											"end": 5201,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5190,
											"end": 5201,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5190,
											"end": 5201,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5183,
											"end": 5222,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5155,
											"end": 5157,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5148,
											"end": 5158,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5119,
											"end": 5232,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 5119,
											"end": 5232,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5119,
											"end": 5232,
											"name": "tag",
											"source": 7,
											"value": "229"
										},
										{
											"begin": 5119,
											"end": 5232,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5250,
											"end": 5256,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5247,
											"end": 5248,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5244,
											"end": 5257,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5289,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5289,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "230"
										},
										{
											"begin": 5241,
											"end": 5289,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5285,
											"end": 5286,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5276,
											"end": 5282,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5271,
											"end": 5274,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5267,
											"end": 5283,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5260,
											"end": 5287,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5289,
											"name": "tag",
											"source": 7,
											"value": "230"
										},
										{
											"begin": 5241,
											"end": 5289,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5289,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5037,
											"end": 5295,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5037,
											"end": 5295,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5037,
											"end": 5295,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5037,
											"end": 5295,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5300,
											"end": 5574,
											"name": "tag",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 5300,
											"end": 5574,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5429,
											"end": 5432,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5467,
											"end": 5473,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5461,
											"end": 5474,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5483,
											"end": 5536,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "232"
										},
										{
											"begin": 5529,
											"end": 5535,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5524,
											"end": 5527,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5517,
											"end": 5521,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5509,
											"end": 5515,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5505,
											"end": 5522,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5483,
											"end": 5536,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 5483,
											"end": 5536,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5483,
											"end": 5536,
											"name": "tag",
											"source": 7,
											"value": "232"
										},
										{
											"begin": 5483,
											"end": 5536,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5552,
											"end": 5568,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5552,
											"end": 5568,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5552,
											"end": 5568,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5552,
											"end": 5568,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5552,
											"end": 5568,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5300,
											"end": 5574,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5300,
											"end": 5574,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5579,
											"end": 5962,
											"name": "tag",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 5579,
											"end": 5962,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5728,
											"end": 5730,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5717,
											"end": 5726,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5710,
											"end": 5731,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5691,
											"end": 5695,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5760,
											"end": 5766,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5754,
											"end": 5767,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5803,
											"end": 5809,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5798,
											"end": 5800,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5787,
											"end": 5796,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5783,
											"end": 5801,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5776,
											"end": 5810,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5885,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "234"
										},
										{
											"begin": 5878,
											"end": 5884,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5873,
											"end": 5875,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5862,
											"end": 5871,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5858,
											"end": 5876,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5855,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5845,
											"end": 5851,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5841,
											"end": 5856,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5885,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 5819,
											"end": 5885,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5819,
											"end": 5885,
											"name": "tag",
											"source": 7,
											"value": "234"
										},
										{
											"begin": 5819,
											"end": 5885,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5946,
											"end": 5948,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 5925,
											"end": 5940,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5921,
											"end": 5950,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5906,
											"end": 5951,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5906,
											"end": 5951,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5906,
											"end": 5951,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5906,
											"end": 5951,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5953,
											"end": 5955,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5902,
											"end": 5956,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5902,
											"end": 5956,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5579,
											"end": 5962,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5579,
											"end": 5962,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"_token()": "ecd0c0c3",
							"addBeneficiary(address,uint256)": "96074e70",
							"beneficiary(address)": "81008568",
							"deleteBeneficiary(address)": "7d3bca76",
							"hasWhitelist(address)": "8cdb7e8b",
							"initiateWhitelist()": "efdd8796",
							"owner()": "8da5cb5b",
							"privateSaleAmount()": "8b2b423a",
							"privateSaleUsers()": "549dee0b",
							"releaseClaimable()": "d5498dc7",
							"renounceOwnership()": "715018a6",
							"startPrivateSale()": "338dbf59",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MainFunction__beneficiaryExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MainFunction__insufficientBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"deleteBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPrivateSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"MainFunction__insufficientBalance()\":[{\"notice\":\"Error handling message for Main Function\"}]},\"kind\":\"user\",\"methods\":{\"releaseClaimable()\":{\"notice\":\"Transfers tokens held by timelock to beneficiary.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WhiteList_v2.sol\":\"Whitelist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/WhiteList_v2.sol\":{\"keccak256\":\"0xab3cdcf979df524896579c3fbce0d3902915c61af0692ee4cb08171b25d21230\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://028fb8032cd4a03585a027b49d9295dc2776db68173eb049c52d1be33acd2290\",\"dweb:/ipfs/QmW6oLEZpy2w8hsdHzQChXmwnfw7bvHK66iQTh3ecazSU1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "contracts/WhiteList_v2.sol:Whitelist",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 7,
								"contract": "contracts/WhiteList_v2.sol:Whitelist",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 800,
								"contract": "contracts/WhiteList_v2.sol:Whitelist",
								"label": "privateSaleUsers",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 802,
								"contract": "contracts/WhiteList_v2.sol:Whitelist",
								"label": "privateSaleAmount",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 814,
								"contract": "contracts/WhiteList_v2.sol:Whitelist",
								"label": "startPrivateSale",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 819,
								"contract": "contracts/WhiteList_v2.sol:Whitelist",
								"label": "_beneficiary",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_struct(WhitelistStruct)789_storage)"
							},
							{
								"astId": 821,
								"contract": "contracts/WhiteList_v2.sol:Whitelist",
								"label": "_token",
								"offset": 0,
								"slot": "6",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(WhitelistStruct)789_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct WhitelistStruct)",
								"numberOfBytes": "32",
								"value": "t_struct(WhitelistStruct)789_storage"
							},
							"t_struct(WhitelistStruct)789_storage": {
								"encoding": "inplace",
								"label": "struct WhitelistStruct",
								"members": [
									{
										"astId": 780,
										"contract": "contracts/WhiteList_v2.sol:Whitelist",
										"label": "userAddress",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 782,
										"contract": "contracts/WhiteList_v2.sol:Whitelist",
										"label": "lockedAmount",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 784,
										"contract": "contracts/WhiteList_v2.sol:Whitelist",
										"label": "amount",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 786,
										"contract": "contracts/WhiteList_v2.sol:Whitelist",
										"label": "isPhase1Claimed",
										"offset": 0,
										"slot": "3",
										"type": "t_bool"
									},
									{
										"astId": 788,
										"contract": "contracts/WhiteList_v2.sol:Whitelist",
										"label": "latestClaimDay",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "160"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"MainFunction__insufficientBalance()": [
								{
									"notice": "Error handling message for Main Function"
								}
							]
						},
						"kind": "user",
						"methods": {
							"releaseClaimable()": {
								"notice": "Transfers tokens held by timelock to beneficiary."
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							763
						],
						"Ownable": [
							104
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 764,
							"src": "112:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 763,
										"src": "668:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								763
							],
							"name": "Ownable",
							"nameLocation": "657:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "682:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "738:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "769:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:0"
									},
									"src": "711:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "911:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 753,
																"src": "940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "921:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "921:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:0"
									},
									"scope": 104,
									"src": "897:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "1091:30:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1108:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 28,
												"id": 30,
												"nodeType": "Return",
												"src": "1101:13:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 32,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:0"
									},
									"scope": 104,
									"src": "1036:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1230:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 36,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "1248:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 753,
																	"src": "1259:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:0"
											}
										]
									},
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1218:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:0"
									},
									"src": "1209:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1722:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 52,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1732:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 50,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 49,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1712:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:0"
									},
									"scope": 104,
									"src": "1668:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1988:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 69,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2006:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 72,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 70,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 68,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 78,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2081:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 66,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 65,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1945:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 104,
									"src": "1918:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2333:124:0",
										"statements": [
											{
												"assignments": [
													90
												],
												"declarations": [
													{
														"constant": false,
														"id": 90,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "2343:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 89,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 92,
												"initialValue": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:0"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2378:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 94,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "2387:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 98,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "2431:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 99,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2441:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 97,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2410:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "2405:45:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2298:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:0"
									},
									"scope": 104,
									"src": "2270:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "639:1820:0",
							"usedErrors": []
						}
					],
					"src": "87:2373:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							144
						]
					},
					"id": 145,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 144,
							"linearizedBaseContracts": [
								144
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 110,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1661:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 108,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 109,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 113,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1708:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 111,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 112,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 115,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1752:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 114,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "1796:39:1",
										"statements": [
											{
												"expression": {
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 118,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "1806:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 119,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "1816:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 121,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:1"
											}
										]
									},
									"id": 123,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:1"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:1"
									},
									"scope": 144,
									"src": "1782:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 142,
										"nodeType": "Block",
										"src": "2236:421:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 127,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 115,
																"src": "2325:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 128,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "2336:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 126,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 132,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:1"
											},
											{
												"expression": {
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 133,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2455:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 134,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 113,
														"src": "2465:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:1"
											},
											{
												"expression": {
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 138,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2628:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 139,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "2638:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:1"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 143,
									"name": "nonReentrant",
									"nameLocation": "2221:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:1"
									},
									"src": "2212:445:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 145,
							"src": "873:1786:1",
							"usedErrors": []
						}
					],
					"src": "97:2563:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							222
						]
					},
					"id": 223,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 146,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 222,
							"linearizedBaseContracts": [
								222
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "225:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "305:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "316:2:2"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "342:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "342:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:9:2"
									},
									"scope": 222,
									"src": "296:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "357:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "443:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "461:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "453:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "452:17:2"
									},
									"returnParameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "493:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:9:2"
									},
									"scope": 222,
									"src": "434:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 162,
										"nodeType": "StructuredDocumentation",
										"src": "508:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "724:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "741:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "733:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "753:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "745:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:28:2"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "779:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "779:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "778:6:2"
									},
									"scope": 222,
									"src": "715:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "791:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1069:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1087:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1079:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1079:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1102:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1094:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1078:32:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1134:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:2"
									},
									"scope": 222,
									"src": "1060:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "1149:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 191,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "1805:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1821:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1813:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1838:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1830:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:33:2"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1864:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 188,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1864:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:6:2"
									},
									"scope": 222,
									"src": "1796:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1876:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 203,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2177:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2207:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2199:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2199:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2229:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2221:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2221:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2249:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2241:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2241:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2189:72:2"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2280:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 200,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2280:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2279:6:2"
									},
									"scope": 222,
									"src": "2168:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "2292:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 212,
									"name": "Transfer",
									"nameLocation": "2461:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2486:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2470:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2470:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2508:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2492:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2520:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2512:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2512:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2469:57:2"
									},
									"src": "2455:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2533:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 221,
									"name": "Approval",
									"nameLocation": "2692:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2717:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2701:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2740:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2724:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2757:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2749:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:63:2"
									},
									"src": "2686:78:2"
								}
							],
							"scope": 223,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"IERC20": [
							222
						],
						"SafeERC20": [
							446
						]
					},
					"id": 447,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 224,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 225,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 223,
							"src": "125:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 226,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 742,
							"src": "149:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 227,
								"nodeType": "StructuredDocumentation",
								"src": "187:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 446,
							"linearizedBaseContracts": [
								446
							],
							"name": "SafeERC20",
							"nameLocation": "653:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 230,
									"libraryName": {
										"id": 228,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 741,
										"src": "675:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "669:26:3",
									"typeName": {
										"id": 229,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "687:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 252,
										"nodeType": "Block",
										"src": "803:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 241,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 233,
															"src": "833:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 244,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 233,
																			"src": "863:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 245,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 171,
																		"src": "863:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "863:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 247,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 235,
																	"src": "888:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 248,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 237,
																	"src": "892:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 242,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "840:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 243,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "840:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "840:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 240,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "813:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "813:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 251,
												"nodeType": "ExpressionStatement",
												"src": "813:86:3"
											}
										]
									},
									"id": 253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "710:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "739:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "732:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 232,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 231,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "732:6:3"
													},
													"referencedDeclaration": 222,
													"src": "732:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "762:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "754:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "754:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "782:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "774:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "774:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:71:3"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "803:0:3"
									},
									"scope": 446,
									"src": "701:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "1040:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 266,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 256,
															"src": "1070:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 269,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 256,
																			"src": "1100:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 203,
																		"src": "1100:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1100:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 272,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 258,
																	"src": "1129:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 273,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "1135:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 274,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 262,
																	"src": "1139:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 267,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1077:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1077:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1077:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 265,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1050:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1050:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "1050:96:3"
											}
										]
									},
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "921:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "954:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "947:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 255,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 254,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "947:6:3"
													},
													"referencedDeclaration": 222,
													"src": "947:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "977:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "969:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "969:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "999:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "991:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "991:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1019:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "1011:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "937:93:3"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:0:3"
									},
									"scope": 446,
									"src": "912:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 322,
										"nodeType": "Block",
										"src": "1519:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 291,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 287,
																			"src": "1768:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 292,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1777:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1768:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 294,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1767:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 299,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1808:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 298,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1800:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 297,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1800:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 300,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1800:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 301,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 285,
																					"src": "1815:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 295,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 283,
																					"src": "1784:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 296,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 181,
																				"src": "1784:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 302,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1784:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 303,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1827:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1784:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 305,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1783:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1767:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 307,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1843:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 290,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1746:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1746:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 309,
												"nodeType": "ExpressionStatement",
												"src": "1746:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 311,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "1939:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 314,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 283,
																			"src": "1969:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 315,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "1969:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1969:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 317,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 285,
																	"src": "1993:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 318,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 287,
																	"src": "2002:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 312,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1946:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 313,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1946:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1946:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 310,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1919:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1919:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 321,
												"nodeType": "ExpressionStatement",
												"src": "1919:90:3"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "1159:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 323,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1422:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1450:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1443:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 282,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 281,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "1443:6:3"
													},
													"referencedDeclaration": 222,
													"src": "1443:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1473:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1465:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1465:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1498:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1490:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1490:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1433:76:3"
									},
									"returnParameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1519:0:3"
									},
									"scope": 446,
									"src": "1413:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "2138:194:3",
										"statements": [
											{
												"assignments": [
													334
												],
												"declarations": [
													{
														"constant": false,
														"id": 334,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2156:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 358,
														"src": "2148:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 333,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2148:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 345,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 339,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2195:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2187:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 337,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2187:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 340,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2187:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 341,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 328,
																"src": "2202:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 335,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 326,
																"src": "2171:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$222",
																	"typeString": "contract IERC20"
																}
															},
															"id": 336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 181,
															"src": "2171:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 342,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2171:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 343,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "2213:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2171:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2148:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 347,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 326,
															"src": "2248:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 350,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 326,
																			"src": "2278:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 351,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "2278:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2278:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 353,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 328,
																	"src": "2302:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 354,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 334,
																	"src": "2311:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 348,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2255:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 349,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2255:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2255:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 346,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "2228:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2228:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 357,
												"nodeType": "ExpressionStatement",
												"src": "2228:97:3"
											}
										]
									},
									"id": 359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2031:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2069:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2062:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 325,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 324,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2062:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2062:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2092:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2084:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2084:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2117:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2109:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2109:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2052:76:3"
									},
									"returnParameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2138:0:3"
									},
									"scope": 446,
									"src": "2022:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 406,
										"nodeType": "Block",
										"src": "2454:370:3",
										"statements": [
											{
												"id": 405,
												"nodeType": "UncheckedBlock",
												"src": "2464:354:3",
												"statements": [
													{
														"assignments": [
															370
														],
														"declarations": [
															{
																"constant": false,
																"id": 370,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2496:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2488:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 369,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2488:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 379,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 375,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2535:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2527:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 373,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2527:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 376,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2527:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 377,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "2542:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 371,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2511:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 181,
																"src": "2511:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2511:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2488:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 381,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 370,
																		"src": "2572:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 382,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 366,
																		"src": "2588:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2572:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2595:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 380,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2564:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2564:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 386,
														"nodeType": "ExpressionStatement",
														"src": "2564:75:3"
													},
													{
														"assignments": [
															388
														],
														"declarations": [
															{
																"constant": false,
																"id": 388,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2661:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2653:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 387,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2653:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 392,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 389,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 370,
																"src": "2676:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 390,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "2691:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2676:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2653:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 394,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2730:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 397,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 362,
																					"src": "2760:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 398,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 191,
																				"src": "2760:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 399,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2760:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 400,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 364,
																			"src": "2784:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 401,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "2793:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 395,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2737:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 396,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2737:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2737:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 393,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "2710:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2710:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 404,
														"nodeType": "ExpressionStatement",
														"src": "2710:97:3"
													}
												]
											}
										]
									},
									"id": 407,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2347:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2385:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2378:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 361,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 360,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2378:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2378:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2408:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2400:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2433:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2425:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2368:76:3"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2454:0:3"
									},
									"scope": 446,
									"src": "2338:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "3277:636:3",
										"statements": [
											{
												"assignments": [
													417
												],
												"declarations": [
													{
														"constant": false,
														"id": 417,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3639:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 444,
														"src": "3626:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 416,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3626:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 426,
												"initialValue": {
													"arguments": [
														{
															"id": 423,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "3680:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 424,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3686:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 420,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 411,
																	"src": "3660:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 419,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3652:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 418,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3652:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3652:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 535,
														"src": "3652:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3652:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3626:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 427,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3735:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 428,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3735:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 429,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3755:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3735:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 443,
												"nodeType": "IfStatement",
												"src": "3731:176:3",
												"trueBody": {
													"id": 442,
													"nodeType": "Block",
													"src": "3758:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 434,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 417,
																				"src": "3830:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 436,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3843:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 435,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3843:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 437,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3842:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 432,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3819:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3819:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3819:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 439,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3851:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 431,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3811:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3811:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 441,
															"nodeType": "ExpressionStatement",
															"src": "3811:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 408,
										"nodeType": "StructuredDocumentation",
										"src": "2830:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3216:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3243:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3236:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 410,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 409,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "3236:6:3"
													},
													"referencedDeclaration": 222,
													"src": "3236:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3263:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3250:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 412,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3250:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3235:33:3"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3277:0:3"
									},
									"scope": 446,
									"src": "3207:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 447,
							"src": "645:3270:3",
							"usedErrors": []
						}
					],
					"src": "100:3816:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							741
						]
					},
					"id": 742,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 448,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 449,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 741,
							"linearizedBaseContracts": [
								741
							],
							"name": "Address",
							"nameLocation": "202:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "1241:254:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 457,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "1465:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 459,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 460,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 456,
												"id": 462,
												"nodeType": "Return",
												"src": "1458:30:4"
											}
										]
									},
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1195:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:4"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1235:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 454,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:4"
									},
									"scope": 741,
									"src": "1175:320:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 497,
										"nodeType": "Block",
										"src": "2483:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 475,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 473,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 476,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 478,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2526:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 480,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 472,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 482,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:4"
											},
											{
												"assignments": [
													484,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 484,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 497,
														"src": "2578:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 483,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 491,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 485,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "2596:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 488,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 487,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2618:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 493,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 484,
															"src": "2647:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 492,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 496,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:4"
											}
										]
									},
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 498,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2431:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2458:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:4"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:4"
									},
									"scope": 741,
									"src": "2412:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 514,
										"nodeType": "Block",
										"src": "3555:84:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 509,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "3585:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 510,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "3593:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 511,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 508,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															515,
															535
														],
														"referencedDeclaration": 535,
														"src": "3572:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 507,
												"id": 513,
												"nodeType": "Return",
												"src": "3565:67:4"
											}
										]
									},
									"documentation": {
										"id": 499,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3504:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 502,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:4"
									},
									"returnParameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3541:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 505,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:4"
									},
									"scope": 741,
									"src": "3466:173:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 534,
										"nodeType": "Block",
										"src": "4008:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 528,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "4047:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 529,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "4055:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 530,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 531,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "4064:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 527,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4025:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 526,
												"id": 533,
												"nodeType": "Return",
												"src": "4018:59:4"
											}
										]
									},
									"documentation": {
										"id": 516,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 535,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3892:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3916:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 519,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3943:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 521,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:4"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3994:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 524,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:4"
									},
									"scope": 741,
									"src": "3861:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "4589:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 548,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "4628:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 549,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "4636:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 550,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "4642:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 547,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4606:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 546,
												"id": 553,
												"nodeType": "Return",
												"src": "4599:94:4"
											}
										]
									},
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4486:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4510:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 539,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4537:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:4"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4575:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 544,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:4"
									},
									"scope": 741,
									"src": "4446:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 604,
										"nodeType": "Block",
										"src": "5127:320:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 576,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 572,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 571,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 570,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 574,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 575,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5170:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 569,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 579,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 582,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "5247:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 581,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "5236:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 580,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 585,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 586,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:4"
											},
											{
												"assignments": [
													588,
													590
												],
												"declarations": [
													{
														"constant": false,
														"id": 588,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5300:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 587,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 590,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5314:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 589,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 597,
												"initialValue": {
													"arguments": [
														{
															"id": 595,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "5367:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 591,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 558,
																"src": "5341:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 592,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 594,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 593,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5360:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 599,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "5406:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 600,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "5415:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 601,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "5427:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 598,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "5389:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 568,
												"id": 603,
												"nodeType": "Return",
												"src": "5382:58:4"
											}
										]
									},
									"documentation": {
										"id": 556,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "4988:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5012:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 559,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5039:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5062:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 563,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:4"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5113:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 566,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:4"
									},
									"scope": 741,
									"src": "4948:499:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "5724:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 616,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "5760:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 617,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 610,
															"src": "5768:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 615,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															622,
															657
														],
														"referencedDeclaration": 657,
														"src": "5741:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 614,
												"id": 620,
												"nodeType": "Return",
												"src": "5734:80:4"
											}
										]
									},
									"documentation": {
										"id": 606,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5652:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5668:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 609,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:4"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5710:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 612,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:4"
									},
									"scope": 741,
									"src": "5624:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 656,
										"nodeType": "Block",
										"src": "6163:228:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 636,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 625,
																	"src": "6192:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 635,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "6181:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 634,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:4"
											},
											{
												"assignments": [
													642,
													644
												],
												"declarations": [
													{
														"constant": false,
														"id": 642,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6252:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 641,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 644,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6266:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 643,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 649,
												"initialValue": {
													"arguments": [
														{
															"id": 647,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "6311:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 645,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "6293:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 651,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "6350:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 652,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "6359:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 653,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "6371:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 650,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "6333:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 633,
												"id": 655,
												"nodeType": "Return",
												"src": "6326:58:4"
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6042:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6066:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6093:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 628,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:4"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6149:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 631,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:4"
									},
									"scope": 741,
									"src": "6005:386:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 673,
										"nodeType": "Block",
										"src": "6667:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 668,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "6705:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 669,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "6713:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 667,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															674,
															709
														],
														"referencedDeclaration": 709,
														"src": "6684:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 666,
												"id": 672,
												"nodeType": "Return",
												"src": "6677:84:4"
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 674,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6600:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6616:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:4"
									},
									"returnParameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6653:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 664,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:4"
									},
									"scope": 741,
									"src": "6570:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 708,
										"nodeType": "Block",
										"src": "7109:232:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 688,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 677,
																	"src": "7138:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 687,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "7127:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 686,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 692,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:4"
											},
											{
												"assignments": [
													694,
													696
												],
												"declarations": [
													{
														"constant": false,
														"id": 694,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7200:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 693,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 696,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7214:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 695,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 701,
												"initialValue": {
													"arguments": [
														{
															"id": 699,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 679,
															"src": "7261:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 697,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "7241:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 703,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "7300:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 704,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 696,
															"src": "7309:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 705,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "7321:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 702,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "7283:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 685,
												"id": 707,
												"nodeType": "Return",
												"src": "7276:58:4"
											}
										]
									},
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "6993:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7017:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 678,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7044:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 680,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:4"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7095:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 683,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:4"
									},
									"scope": 741,
									"src": "6954:387:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 739,
										"nodeType": "Block",
										"src": "7721:532:4",
										"statements": [
											{
												"condition": {
													"id": 721,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 712,
													"src": "7735:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 737,
													"nodeType": "Block",
													"src": "7792:455:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 725,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 714,
																		"src": "7876:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 726,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 727,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 735,
																"nodeType": "Block",
																"src": "8184:53:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 732,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 716,
																					"src": "8209:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 731,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8202:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 733,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8202:20:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 734,
																		"nodeType": "ExpressionStatement",
																		"src": "8202:20:4"
																	}
																]
															},
															"id": 736,
															"nodeType": "IfStatement",
															"src": "7872:365:4",
															"trueBody": {
																"id": 730,
																"nodeType": "Block",
																"src": "7899:279:4",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8019:145:4",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8041:40:4",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8070:10:4"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8064:5:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8064:17:4"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8045:15:4",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8113:2:4",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8117:10:4"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8109:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8109:19:4"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8130:15:4"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8102:6:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8102:44:4"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8102:44:4"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8070:10:4",
																				"valueSize": 1
																			},
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8117:10:4",
																				"valueSize": 1
																			}
																		],
																		"id": 729,
																		"nodeType": "InlineAssembly",
																		"src": "8010:154:4"
																	}
																]
															}
														}
													]
												},
												"id": 738,
												"nodeType": "IfStatement",
												"src": "7731:516:4",
												"trueBody": {
													"id": 724,
													"nodeType": "Block",
													"src": "7744:42:4",
													"statements": [
														{
															"expression": {
																"id": 722,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 714,
																"src": "7765:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 720,
															"id": 723,
															"nodeType": "Return",
															"src": "7758:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 710,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:4",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7596:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 711,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7618:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 713,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7651:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 715,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:4"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7707:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 718,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:4"
									},
									"scope": 741,
									"src": "7561:692:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 742,
							"src": "194:8061:4",
							"usedErrors": []
						}
					],
					"src": "101:8155:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							763
						]
					},
					"id": 764,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 743,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 744,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 763,
							"linearizedBaseContracts": [
								763
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 752,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 749,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 748,
												"id": 751,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 763,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 761,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 758,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 757,
												"id": 760,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 762,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 754,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 755,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 763,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 764,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"contracts/WhiteList_v2.sol": {
				"ast": {
					"absolutePath": "contracts/WhiteList_v2.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"Beneficiary": [
							794
						],
						"Context": [
							763
						],
						"Function__notAuthorized": [
							771
						],
						"IERC20": [
							222
						],
						"MainFunction__amountOverBalance": [
							776
						],
						"MainFunction__beneficiaryExist": [
							778
						],
						"MainFunction__insufficientBalance": [
							774
						],
						"Ownable": [
							104
						],
						"ReentrancyGuard": [
							144
						],
						"SafeERC20": [
							446
						],
						"Whitelist": [
							1241
						],
						"WhitelistStruct": [
							789
						]
					},
					"id": 1242,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 765,
							"literals": [
								"solidity",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "40:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 766,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1242,
							"sourceUnit": 447,
							"src": "67:65:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 767,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1242,
							"sourceUnit": 145,
							"src": "134:62:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 768,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1242,
							"sourceUnit": 105,
							"src": "198:52:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"documentation": {
								"id": 769,
								"nodeType": "StructuredDocumentation",
								"src": "254:56:6",
								"text": " @notice Error handling message for Modifier"
							},
							"id": 771,
							"name": "Function__notAuthorized",
							"nameLocation": "318:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 770,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "341:2:6"
							},
							"src": "312:32:6"
						},
						{
							"documentation": {
								"id": 772,
								"nodeType": "StructuredDocumentation",
								"src": "348:61:6",
								"text": " @notice Error handling message for Main Function"
							},
							"id": 774,
							"name": "MainFunction__insufficientBalance",
							"nameLocation": "417:33:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 773,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "450:2:6"
							},
							"src": "411:42:6"
						},
						{
							"id": 776,
							"name": "MainFunction__amountOverBalance",
							"nameLocation": "461:31:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 775,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "492:2:6"
							},
							"src": "455:40:6"
						},
						{
							"id": 778,
							"name": "MainFunction__beneficiaryExist",
							"nameLocation": "503:30:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 777,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "533:2:6"
							},
							"src": "497:39:6"
						},
						{
							"canonicalName": "WhitelistStruct",
							"id": 789,
							"members": [
								{
									"constant": false,
									"id": 780,
									"mutability": "mutable",
									"name": "userAddress",
									"nameLocation": "580:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "572:19:6",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 779,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "572:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 782,
									"mutability": "mutable",
									"name": "lockedAmount",
									"nameLocation": "606:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "598:20:6",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 781,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "598:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 784,
									"mutability": "mutable",
									"name": "amount",
									"nameLocation": "633:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "625:14:6",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 783,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "625:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 786,
									"mutability": "mutable",
									"name": "isPhase1Claimed",
									"nameLocation": "651:15:6",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "646:20:6",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 785,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "646:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 788,
									"mutability": "mutable",
									"name": "latestClaimDay",
									"nameLocation": "681:14:6",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "673:22:6",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 787,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "673:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "WhitelistStruct",
							"nameLocation": "549:15:6",
							"nodeType": "StructDefinition",
							"scope": 1242,
							"src": "542:157:6",
							"visibility": "public"
						},
						{
							"canonicalName": "Beneficiary",
							"id": 794,
							"members": [
								{
									"constant": false,
									"id": 791,
									"mutability": "mutable",
									"name": "user",
									"nameLocation": "737:4:6",
									"nodeType": "VariableDeclaration",
									"scope": 794,
									"src": "729:12:6",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 790,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "729:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 793,
									"mutability": "mutable",
									"name": "amount",
									"nameLocation": "756:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 794,
									"src": "748:14:6",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 792,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "748:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "Beneficiary",
							"nameLocation": "710:11:6",
							"nodeType": "StructDefinition",
							"scope": 1242,
							"src": "703:63:6",
							"visibility": "public"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 795,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 144,
										"src": "792:15:6"
									},
									"id": 796,
									"nodeType": "InheritanceSpecifier",
									"src": "792:15:6"
								},
								{
									"baseName": {
										"id": 797,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 104,
										"src": "809:7:6"
									},
									"id": 798,
									"nodeType": "InheritanceSpecifier",
									"src": "809:7:6"
								}
							],
							"canonicalName": "Whitelist",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1241,
							"linearizedBaseContracts": [
								1241,
								104,
								763,
								144
							],
							"name": "Whitelist",
							"nameLocation": "779:9:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "549dee0b",
									"id": 800,
									"mutability": "mutable",
									"name": "privateSaleUsers",
									"nameLocation": "840:16:6",
									"nodeType": "VariableDeclaration",
									"scope": 1241,
									"src": "825:31:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 799,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "825:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8b2b423a",
									"id": 802,
									"mutability": "mutable",
									"name": "privateSaleAmount",
									"nameLocation": "880:17:6",
									"nodeType": "VariableDeclaration",
									"scope": 1241,
									"src": "865:32:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 801,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "865:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 807,
									"mutability": "constant",
									"name": "_phase1",
									"nameLocation": "930:7:6",
									"nodeType": "VariableDeclaration",
									"scope": 1241,
									"src": "904:51:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 803,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "904:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_73395000000000000000000000_by_1",
											"typeString": "int_const 73395000000000000000000000"
										},
										"id": 806,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "3733333935303030",
											"id": 804,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "940:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_73395000_by_1",
												"typeString": "int_const 73395000"
											},
											"value": "73395000"
										},
										"nodeType": "BinaryOperation",
										"operator": "*",
										"rightExpression": {
											"hexValue": "31653138",
											"id": 805,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "951:4:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1000000000000000000_by_1",
												"typeString": "int_const 1000000000000000000"
											},
											"value": "1e18"
										},
										"src": "940:15:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_73395000000000000000000000_by_1",
											"typeString": "int_const 73395000000000000000000000"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 812,
									"mutability": "constant",
									"name": "_phase2",
									"nameLocation": "988:7:6",
									"nodeType": "VariableDeclaration",
									"scope": 1241,
									"src": "962:50:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 808,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "962:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_3820562000000000000000000_by_1",
											"typeString": "int_const 3820562000000000000000000"
										},
										"id": 811,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "33383230353632",
											"id": 809,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "998:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_3820562_by_1",
												"typeString": "int_const 3820562"
											},
											"value": "3820562"
										},
										"nodeType": "BinaryOperation",
										"operator": "*",
										"rightExpression": {
											"hexValue": "31653138",
											"id": 810,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1008:4:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1000000000000000000_by_1",
												"typeString": "int_const 1000000000000000000"
											},
											"value": "1e18"
										},
										"src": "998:14:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3820562000000000000000000_by_1",
											"typeString": "int_const 3820562000000000000000000"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "338dbf59",
									"id": 814,
									"mutability": "mutable",
									"name": "startPrivateSale",
									"nameLocation": "1051:16:6",
									"nodeType": "VariableDeclaration",
									"scope": 1241,
									"src": "1036:31:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 813,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1036:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 819,
									"mutability": "mutable",
									"name": "_beneficiary",
									"nameLocation": "1174:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1241,
									"src": "1130:56:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
										"typeString": "mapping(address => struct WhitelistStruct)"
									},
									"typeName": {
										"id": 818,
										"keyType": {
											"id": 815,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1138:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1130:35:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
											"typeString": "mapping(address => struct WhitelistStruct)"
										},
										"valueType": {
											"id": 817,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 816,
												"name": "WhitelistStruct",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 789,
												"src": "1149:15:6"
											},
											"referencedDeclaration": 789,
											"src": "1149:15:6",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage_ptr",
												"typeString": "struct WhitelistStruct"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "ecd0c0c3",
									"id": 821,
									"mutability": "mutable",
									"name": "_token",
									"nameLocation": "1210:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 1241,
									"src": "1195:21:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 820,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1195:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 836,
										"nodeType": "Block",
										"src": "1252:81:6",
										"statements": [
											{
												"expression": {
													"id": 830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 826,
														"name": "privateSaleAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 802,
														"src": "1263:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_rational_1467900000000000000000000000_by_1",
															"typeString": "int_const 1467900000000000000000000000"
														},
														"id": 829,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "31343637393030303030",
															"id": 827,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1283:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1467900000_by_1",
																"typeString": "int_const 1467900000"
															},
															"value": "1467900000"
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"hexValue": "31653138",
															"id": 828,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1296:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000"
															},
															"value": "1e18"
														},
														"src": "1283:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1467900000000000000000000000_by_1",
															"typeString": "int_const 1467900000000000000000000000"
														}
													},
													"src": "1263:37:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 831,
												"nodeType": "ExpressionStatement",
												"src": "1263:37:6"
											},
											{
												"expression": {
													"id": 834,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 832,
														"name": "_token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 821,
														"src": "1311:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 833,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "1320:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1311:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 835,
												"nodeType": "ExpressionStatement",
												"src": "1311:14:6"
											}
										]
									},
									"id": 837,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1245:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "1237:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 822,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:15:6"
									},
									"returnParameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1252:0:6"
									},
									"scope": 1241,
									"src": "1225:108:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 873,
										"nodeType": "Block",
										"src": "1549:309:6",
										"statements": [
											{
												"assignments": [
													854
												],
												"declarations": [
													{
														"constant": false,
														"id": 854,
														"mutability": "mutable",
														"name": "beneficiary_",
														"nameLocation": "1583:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 873,
														"src": "1560:35:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
															"typeString": "struct WhitelistStruct"
														},
														"typeName": {
															"id": 853,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 852,
																"name": "WhitelistStruct",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 789,
																"src": "1560:15:6"
															},
															"referencedDeclaration": 789,
															"src": "1560:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage_ptr",
																"typeString": "struct WhitelistStruct"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 858,
												"initialValue": {
													"baseExpression": {
														"id": 855,
														"name": "_beneficiary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "1598:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
															"typeString": "mapping(address => struct WhitelistStruct storage ref)"
														}
													},
													"id": 857,
													"indexExpression": {
														"id": 856,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 839,
														"src": "1611:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1598:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
														"typeString": "struct WhitelistStruct storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1560:56:6"
											},
											{
												"expression": {
													"components": [
														{
															"id": 862,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 859,
																	"name": "beneficiary_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 854,
																	"src": "1649:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
																		"typeString": "struct WhitelistStruct memory"
																	}
																},
																"id": 860,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "userAddress",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 780,
																"src": "1649:24:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 861,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 839,
																"src": "1676:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1649:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 863,
																"name": "beneficiary_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 854,
																"src": "1695:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
																	"typeString": "struct WhitelistStruct memory"
																}
															},
															"id": 864,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "lockedAmount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 782,
															"src": "1695:25:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 865,
																"name": "beneficiary_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 854,
																"src": "1735:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
																	"typeString": "struct WhitelistStruct memory"
																}
															},
															"id": 866,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 784,
															"src": "1735:19:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 867,
																"name": "beneficiary_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 854,
																"src": "1769:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
																	"typeString": "struct WhitelistStruct memory"
																}
															},
															"id": 868,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isPhase1Claimed",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 786,
															"src": "1769:28:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 869,
																"name": "beneficiary_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 854,
																"src": "1812:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
																	"typeString": "struct WhitelistStruct memory"
																}
															},
															"id": 870,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "latestClaimDay",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 788,
															"src": "1812:27:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 871,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1634:216:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint256_$",
														"typeString": "tuple(address,uint256,uint256,bool,uint256)"
													}
												},
												"functionReturnParameters": 851,
												"id": 872,
												"nodeType": "Return",
												"src": "1627:223:6"
											}
										]
									},
									"functionSelector": "81008568",
									"id": 874,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "beneficiary",
									"nameLocation": "1350:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1370:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "1362:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 838,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1362:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1361:14:6"
									},
									"returnParameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "1440:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 841,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1440:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 844,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "1462:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 843,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1462:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "1484:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 845,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1484:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "1506:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 847,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1506:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "1525:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 849,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1525:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1425:118:6"
									},
									"scope": 1241,
									"src": "1341:517:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 884,
										"nodeType": "Block",
										"src": "1914:53:6",
										"statements": [
											{
												"expression": {
													"id": 882,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 879,
														"name": "startPrivateSale",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 814,
														"src": "1925:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 880,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1944:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 881,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "1944:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1925:34:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 883,
												"nodeType": "ExpressionStatement",
												"src": "1925:34:6"
											}
										]
									},
									"functionSelector": "efdd8796",
									"id": 885,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 877,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 876,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1904:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1904:9:6"
										}
									],
									"name": "initiateWhitelist",
									"nameLocation": "1875:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1892:2:6"
									},
									"returnParameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1914:0:6"
									},
									"scope": 1241,
									"src": "1866:101:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 921,
										"nodeType": "Block",
										"src": "2184:309:6",
										"statements": [
											{
												"assignments": [
													902
												],
												"declarations": [
													{
														"constant": false,
														"id": 902,
														"mutability": "mutable",
														"name": "beneficiary_",
														"nameLocation": "2218:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 921,
														"src": "2195:35:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
															"typeString": "struct WhitelistStruct"
														},
														"typeName": {
															"id": 901,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 900,
																"name": "WhitelistStruct",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 789,
																"src": "2195:15:6"
															},
															"referencedDeclaration": 789,
															"src": "2195:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage_ptr",
																"typeString": "struct WhitelistStruct"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 906,
												"initialValue": {
													"baseExpression": {
														"id": 903,
														"name": "_beneficiary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "2233:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
															"typeString": "mapping(address => struct WhitelistStruct storage ref)"
														}
													},
													"id": 905,
													"indexExpression": {
														"id": 904,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 887,
														"src": "2246:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2233:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
														"typeString": "struct WhitelistStruct storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2195:56:6"
											},
											{
												"expression": {
													"components": [
														{
															"id": 910,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 907,
																	"name": "beneficiary_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 902,
																	"src": "2284:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
																		"typeString": "struct WhitelistStruct memory"
																	}
																},
																"id": 908,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "userAddress",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 780,
																"src": "2284:24:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 909,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 887,
																"src": "2311:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2284:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 911,
																"name": "beneficiary_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 902,
																"src": "2330:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
																	"typeString": "struct WhitelistStruct memory"
																}
															},
															"id": 912,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "lockedAmount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 782,
															"src": "2330:25:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 913,
																"name": "beneficiary_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 902,
																"src": "2370:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
																	"typeString": "struct WhitelistStruct memory"
																}
															},
															"id": 914,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 784,
															"src": "2370:19:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 915,
																"name": "beneficiary_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 902,
																"src": "2404:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
																	"typeString": "struct WhitelistStruct memory"
																}
															},
															"id": 916,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isPhase1Claimed",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 786,
															"src": "2404:28:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 917,
																"name": "beneficiary_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 902,
																"src": "2447:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_WhitelistStruct_$789_memory_ptr",
																	"typeString": "struct WhitelistStruct memory"
																}
															},
															"id": 918,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "latestClaimDay",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 788,
															"src": "2447:27:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 919,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2269:216:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint256_$",
														"typeString": "tuple(address,uint256,uint256,bool,uint256)"
													}
												},
												"functionReturnParameters": 899,
												"id": 920,
												"nodeType": "Return",
												"src": "2262:223:6"
											}
										]
									},
									"functionSelector": "8cdb7e8b",
									"id": 922,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasWhitelist",
									"nameLocation": "1984:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2005:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "1997:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 886,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1997:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:14:6"
									},
									"returnParameters": {
										"id": 899,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 890,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2075:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 889,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2075:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2097:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 891,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2097:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2119:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 893,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2119:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2141:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 895,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2141:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 898,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2160:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 897,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2160:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2060:118:6"
									},
									"scope": 1241,
									"src": "1975:518:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1071,
										"nodeType": "Block",
										"src": "2703:1494:6",
										"statements": [
											{
												"assignments": [
													931
												],
												"declarations": [
													{
														"constant": false,
														"id": 931,
														"mutability": "mutable",
														"name": "claimable",
														"nameLocation": "2722:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1071,
														"src": "2714:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 930,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2714:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 932,
												"nodeType": "VariableDeclarationStatement",
												"src": "2714:17:6"
											},
											{
												"assignments": [
													934
												],
												"declarations": [
													{
														"constant": false,
														"id": 934,
														"mutability": "mutable",
														"name": "lockDuration",
														"nameLocation": "2752:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 1071,
														"src": "2744:20:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 933,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2744:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 942,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 938,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 935,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "2768:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 936,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "2768:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 937,
																	"name": "startPrivateSale",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 814,
																	"src": "2786:16:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2768:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 939,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2767:36:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31",
														"id": 940,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2806:6:6",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_86400_by_1",
															"typeString": "int_const 86400"
														},
														"value": "1"
													},
													"src": "2767:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2744:68:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 947,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 943,
														"name": "lockDuration",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 934,
														"src": "2883:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_rational_480_by_1",
															"typeString": "int_const 480"
														},
														"id": 946,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "3136",
															"id": 944,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2898:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "16"
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"hexValue": "3330",
															"id": 945,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2903:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_30_by_1",
																"typeString": "int_const 30"
															},
															"value": "30"
														},
														"src": "2898:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_480_by_1",
															"typeString": "int_const 480"
														}
													},
													"src": "2883:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 998,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 992,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 988,
																"name": "lockDuration",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 934,
																"src": "3366:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_480_by_1",
																	"typeString": "int_const 480"
																},
																"id": 991,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3136",
																	"id": 989,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3382:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3330",
																	"id": 990,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3387:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_30_by_1",
																		"typeString": "int_const 30"
																	},
																	"value": "30"
																},
																"src": "3382:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_480_by_1",
																	"typeString": "int_const 480"
																}
															},
															"src": "3366:23:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 997,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 993,
																"name": "lockDuration",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 934,
																"src": "3393:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_840_by_1",
																	"typeString": "int_const 840"
																},
																"id": 996,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3238",
																	"id": 994,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3408:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_28_by_1",
																		"typeString": "int_const 28"
																	},
																	"value": "28"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3330",
																	"id": 995,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3413:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_30_by_1",
																		"typeString": "int_const 30"
																	},
																	"value": "30"
																},
																"src": "3408:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_840_by_1",
																	"typeString": "int_const 840"
																}
															},
															"src": "3393:22:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "3366:49:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1066,
														"nodeType": "Block",
														"src": "4126:35:6",
														"statements": [
															{
																"expression": {
																	"hexValue": "30",
																	"id": 1064,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4148:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"functionReturnParameters": 929,
																"id": 1065,
																"nodeType": "Return",
																"src": "4141:8:6"
															}
														]
													},
													"id": 1067,
													"nodeType": "IfStatement",
													"src": "3362:799:6",
													"trueBody": {
														"id": 1063,
														"nodeType": "Block",
														"src": "3417:703:6",
														"statements": [
															{
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 1004,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 999,
																				"name": "_beneficiary",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 819,
																				"src": "3436:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																					"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																				}
																			},
																			"id": 1001,
																			"indexExpression": {
																				"id": 1000,
																				"name": "user",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 925,
																				"src": "3449:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3436:18:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																				"typeString": "struct WhitelistStruct storage ref"
																			}
																		},
																		"id": 1002,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "isPhase1Claimed",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 786,
																		"src": "3436:34:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "66616c7365",
																		"id": 1003,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3474:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	"src": "3436:43:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 1028,
																"nodeType": "IfStatement",
																"src": "3432:300:6",
																"trueBody": {
																	"id": 1027,
																	"nodeType": "Block",
																	"src": "3481:251:6",
																	"statements": [
																		{
																			"expression": {
																				"id": 1010,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"expression": {
																						"baseExpression": {
																							"id": 1005,
																							"name": "_beneficiary",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 819,
																							"src": "3500:12:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																								"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																							}
																						},
																						"id": 1007,
																						"indexExpression": {
																							"id": 1006,
																							"name": "user",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 925,
																							"src": "3513:4:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "3500:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																							"typeString": "struct WhitelistStruct storage ref"
																						}
																					},
																					"id": 1008,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": true,
																					"memberName": "isPhase1Claimed",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 786,
																					"src": "3500:34:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"hexValue": "74727565",
																					"id": 1009,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "bool",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3537:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"value": "true"
																				},
																				"src": "3500:41:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1011,
																			"nodeType": "ExpressionStatement",
																			"src": "3500:41:6"
																		},
																		{
																			"expression": {
																				"id": 1025,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1012,
																					"name": "claimable",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 931,
																					"src": "3560:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1024,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1013,
																						"name": "claimable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 931,
																						"src": "3593:9:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1022,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1019,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"id": 1014,
																												"name": "_phase1",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 807,
																												"src": "3628:7:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "*",
																											"rightExpression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1015,
																														"name": "_beneficiary",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 819,
																														"src": "3638:12:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																															"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																														}
																													},
																													"id": 1017,
																													"indexExpression": {
																														"id": 1016,
																														"name": "user",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 925,
																														"src": "3651:4:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "3638:18:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																														"typeString": "struct WhitelistStruct storage ref"
																													}
																												},
																												"id": 1018,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberName": "lockedAmount",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 782,
																												"src": "3638:31:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "3628:41:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1020,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "3627:43:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "/",
																								"rightExpression": {
																									"id": 1021,
																									"name": "privateSaleAmount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 802,
																									"src": "3698:17:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "3627:88:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1023,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3626:90:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "3593:123:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3560:156:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1026,
																			"nodeType": "ExpressionStatement",
																			"src": "3560:156:6"
																		}
																	]
																}
															},
															{
																"assignments": [
																	1030
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 1030,
																		"mutability": "mutable",
																		"name": "sinceLatestClaim",
																		"nameLocation": "3756:16:6",
																		"nodeType": "VariableDeclaration",
																		"scope": 1063,
																		"src": "3748:24:6",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"typeName": {
																			"id": 1029,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "3748:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 1037,
																"initialValue": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1036,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1031,
																		"name": "lockDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 934,
																		"src": "3775:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1032,
																				"name": "_beneficiary",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 819,
																				"src": "3807:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																					"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																				}
																			},
																			"id": 1034,
																			"indexExpression": {
																				"id": 1033,
																				"name": "user",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 925,
																				"src": "3820:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3807:18:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																				"typeString": "struct WhitelistStruct storage ref"
																			}
																		},
																		"id": 1035,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "latestClaimDay",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 788,
																		"src": "3807:33:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3775:65:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "VariableDeclarationStatement",
																"src": "3748:92:6"
															},
															{
																"expression": {
																	"id": 1043,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"expression": {
																			"baseExpression": {
																				"id": 1038,
																				"name": "_beneficiary",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 819,
																				"src": "3855:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																					"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																				}
																			},
																			"id": 1040,
																			"indexExpression": {
																				"id": 1039,
																				"name": "user",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 925,
																				"src": "3868:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3855:18:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																				"typeString": "struct WhitelistStruct storage ref"
																			}
																		},
																		"id": 1041,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": true,
																		"memberName": "latestClaimDay",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 788,
																		"src": "3855:33:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"id": 1042,
																		"name": "lockDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 934,
																		"src": "3891:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3855:48:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1044,
																"nodeType": "ExpressionStatement",
																"src": "3855:48:6"
															},
															{
																"expression": {
																	"id": 1061,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1045,
																		"name": "claimable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 931,
																		"src": "3918:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1060,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1046,
																			"name": "sinceLatestClaim",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1030,
																			"src": "3947:16:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1058,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1047,
																						"name": "claimable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 931,
																						"src": "3984:9:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1056,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1053,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"id": 1048,
																												"name": "_phase2",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 812,
																												"src": "4019:7:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "*",
																											"rightExpression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1049,
																														"name": "_beneficiary",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 819,
																														"src": "4029:12:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																															"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																														}
																													},
																													"id": 1051,
																													"indexExpression": {
																														"id": 1050,
																														"name": "user",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 925,
																														"src": "4042:4:6",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "4029:18:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																														"typeString": "struct WhitelistStruct storage ref"
																													}
																												},
																												"id": 1052,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberName": "lockedAmount",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 782,
																												"src": "4029:31:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "4019:41:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1054,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "4018:43:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "/",
																								"rightExpression": {
																									"id": 1055,
																									"name": "privateSaleAmount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 802,
																									"src": "4089:17:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "4018:88:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1057,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "4017:90:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "3984:123:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1059,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3983:125:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3947:161:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3918:190:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1062,
																"nodeType": "ExpressionStatement",
																"src": "3918:190:6"
															}
														]
													}
												},
												"id": 1068,
												"nodeType": "IfStatement",
												"src": "2879:1282:6",
												"trueBody": {
													"id": 987,
													"nodeType": "Block",
													"src": "2907:388:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 953,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 948,
																			"name": "_beneficiary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 819,
																			"src": "2926:12:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																				"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																			}
																		},
																		"id": 950,
																		"indexExpression": {
																			"id": 949,
																			"name": "user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 925,
																			"src": "2939:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2926:18:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																			"typeString": "struct WhitelistStruct storage ref"
																		}
																	},
																	"id": 951,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "isPhase1Claimed",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 786,
																	"src": "2926:34:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "66616c7365",
																	"id": 952,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2964:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "2926:43:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 986,
															"nodeType": "IfStatement",
															"src": "2922:362:6",
															"trueBody": {
																"id": 985,
																"nodeType": "Block",
																"src": "2971:313:6",
																"statements": [
																	{
																		"expression": {
																			"id": 959,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"baseExpression": {
																						"id": 954,
																						"name": "_beneficiary",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 819,
																						"src": "2990:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																							"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																						}
																					},
																					"id": 956,
																					"indexExpression": {
																						"id": 955,
																						"name": "user",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 925,
																						"src": "3003:4:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "2990:18:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																						"typeString": "struct WhitelistStruct storage ref"
																					}
																				},
																				"id": 957,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "isPhase1Claimed",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 786,
																				"src": "2990:34:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"hexValue": "74727565",
																				"id": 958,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3027:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "true"
																			},
																			"src": "2990:41:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 960,
																		"nodeType": "ExpressionStatement",
																		"src": "2990:41:6"
																	},
																	{
																		"expression": {
																			"id": 968,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"baseExpression": {
																						"id": 961,
																						"name": "_beneficiary",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 819,
																						"src": "3050:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																							"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																						}
																					},
																					"id": 963,
																					"indexExpression": {
																						"id": 962,
																						"name": "user",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 925,
																						"src": "3063:4:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "3050:18:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																						"typeString": "struct WhitelistStruct storage ref"
																					}
																				},
																				"id": 964,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "latestClaimDay",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 788,
																				"src": "3050:33:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_rational_450_by_1",
																					"typeString": "int_const 450"
																				},
																				"id": 967,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "3135",
																					"id": 965,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3086:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_15_by_1",
																						"typeString": "int_const 15"
																					},
																					"value": "15"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3330",
																					"id": 966,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3091:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_30_by_1",
																						"typeString": "int_const 30"
																					},
																					"value": "30"
																				},
																				"src": "3086:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_450_by_1",
																					"typeString": "int_const 450"
																				}
																			},
																			"src": "3050:43:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 969,
																		"nodeType": "ExpressionStatement",
																		"src": "3050:43:6"
																	},
																	{
																		"expression": {
																			"id": 983,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 970,
																				"name": "claimable",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 931,
																				"src": "3112:9:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 982,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 971,
																					"name": "claimable",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 931,
																					"src": "3145:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 980,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 977,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"id": 972,
																											"name": "_phase1",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 807,
																											"src": "3180:7:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "*",
																										"rightExpression": {
																											"expression": {
																												"baseExpression": {
																													"id": 973,
																													"name": "_beneficiary",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 819,
																													"src": "3190:12:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																														"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																													}
																												},
																												"id": 975,
																												"indexExpression": {
																													"id": 974,
																													"name": "user",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 925,
																													"src": "3203:4:6",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "3190:18:6",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																													"typeString": "struct WhitelistStruct storage ref"
																												}
																											},
																											"id": 976,
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberName": "lockedAmount",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 782,
																											"src": "3190:31:6",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"src": "3180:41:6",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 978,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "3179:43:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "/",
																							"rightExpression": {
																								"id": 979,
																								"name": "privateSaleAmount",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 802,
																								"src": "3250:17:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "3179:88:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 981,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "3178:90:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3145:123:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3112:156:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 984,
																		"nodeType": "ExpressionStatement",
																		"src": "3112:156:6"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"id": 1069,
													"name": "claimable",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 931,
													"src": "4180:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 929,
												"id": 1070,
												"nodeType": "Return",
												"src": "4173:16:6"
											}
										]
									},
									"documentation": {
										"id": 923,
										"nodeType": "StructuredDocumentation",
										"src": "2501:97:6",
										"text": "  @dev \t\tMain Functions\n  @return \tClaimable amount from Locked Wallet"
									},
									"id": 1072,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateClaimableAmount",
									"nameLocation": "2613:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2647:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "2639:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 924,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2639:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2638:14:6"
									},
									"returnParameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "2689:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 927,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2689:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2688:9:6"
									},
									"scope": 1241,
									"src": "2604:1593:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1142,
										"nodeType": "Block",
										"src": "4278:632:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1086,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 1081,
																"name": "_beneficiary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 819,
																"src": "4293:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																	"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																}
															},
															"id": 1083,
															"indexExpression": {
																"id": 1082,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1074,
																"src": "4306:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4293:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																"typeString": "struct WhitelistStruct storage ref"
															}
														},
														"id": 1084,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "lockedAmount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 782,
														"src": "4293:31:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1085,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4328:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4293:36:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1140,
													"nodeType": "Block",
													"src": "4403:500:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1093,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1091,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1076,
																	"src": "4422:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"id": 1092,
																	"name": "privateSaleAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 802,
																	"src": "4431:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4422:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1098,
															"nodeType": "IfStatement",
															"src": "4418:109:6",
															"trueBody": {
																"id": 1097,
																"nodeType": "Block",
																"src": "4450:77:6",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1094,
																				"name": "MainFunction__insufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 774,
																				"src": "4476:33:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1095,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4476:35:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1096,
																		"nodeType": "RevertStatement",
																		"src": "4469:42:6"
																	}
																]
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1101,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1099,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1076,
																	"src": "4547:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1100,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4556:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "4547:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1139,
															"nodeType": "IfStatement",
															"src": "4543:349:6",
															"trueBody": {
																"id": 1138,
																"nodeType": "Block",
																"src": "4559:333:6",
																"statements": [
																	{
																		"expression": {
																			"id": 1107,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"baseExpression": {
																						"id": 1102,
																						"name": "_beneficiary",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 819,
																						"src": "4578:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																							"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																						}
																					},
																					"id": 1104,
																					"indexExpression": {
																						"id": 1103,
																						"name": "user",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1074,
																						"src": "4591:4:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "4578:18:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																						"typeString": "struct WhitelistStruct storage ref"
																					}
																				},
																				"id": 1105,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "lockedAmount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 782,
																				"src": "4578:31:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1106,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1076,
																				"src": "4612:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4578:40:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1108,
																		"nodeType": "ExpressionStatement",
																		"src": "4578:40:6"
																	},
																	{
																		"expression": {
																			"id": 1114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"baseExpression": {
																						"id": 1109,
																						"name": "_beneficiary",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 819,
																						"src": "4637:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																							"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																						}
																					},
																					"id": 1111,
																					"indexExpression": {
																						"id": 1110,
																						"name": "user",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1074,
																						"src": "4650:4:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "4637:18:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																						"typeString": "struct WhitelistStruct storage ref"
																					}
																				},
																				"id": 1112,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 784,
																				"src": "4637:25:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1113,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1076,
																				"src": "4665:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4637:34:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1115,
																		"nodeType": "ExpressionStatement",
																		"src": "4637:34:6"
																	},
																	{
																		"expression": {
																			"id": 1121,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"baseExpression": {
																						"id": 1116,
																						"name": "_beneficiary",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 819,
																						"src": "4690:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																							"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																						}
																					},
																					"id": 1118,
																					"indexExpression": {
																						"id": 1117,
																						"name": "user",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1074,
																						"src": "4703:4:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "4690:18:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																						"typeString": "struct WhitelistStruct storage ref"
																					}
																				},
																				"id": 1119,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "isPhase1Claimed",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 786,
																				"src": "4690:34:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"hexValue": "66616c7365",
																				"id": 1120,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4727:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			},
																			"src": "4690:42:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1122,
																		"nodeType": "ExpressionStatement",
																		"src": "4690:42:6"
																	},
																	{
																		"expression": {
																			"id": 1128,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"baseExpression": {
																						"id": 1123,
																						"name": "_beneficiary",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 819,
																						"src": "4751:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																							"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																						}
																					},
																					"id": 1125,
																					"indexExpression": {
																						"id": 1124,
																						"name": "user",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1074,
																						"src": "4764:4:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "4751:18:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																						"typeString": "struct WhitelistStruct storage ref"
																					}
																				},
																				"id": 1126,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "latestClaimDay",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 788,
																				"src": "4751:33:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"hexValue": "31",
																				"id": 1127,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4787:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "4751:37:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1129,
																		"nodeType": "ExpressionStatement",
																		"src": "4751:37:6"
																	},
																	{
																		"expression": {
																			"id": 1132,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1130,
																				"name": "privateSaleUsers",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 800,
																				"src": "4809:16:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"hexValue": "31",
																				"id": 1131,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4829:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "4809:21:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1133,
																		"nodeType": "ExpressionStatement",
																		"src": "4809:21:6"
																	},
																	{
																		"expression": {
																			"id": 1136,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1134,
																				"name": "privateSaleAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 802,
																				"src": "4849:17:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "-=",
																			"rightHandSide": {
																				"id": 1135,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1076,
																				"src": "4870:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4849:27:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1137,
																		"nodeType": "ExpressionStatement",
																		"src": "4849:27:6"
																	}
																]
															}
														}
													]
												},
												"id": 1141,
												"nodeType": "IfStatement",
												"src": "4289:614:6",
												"trueBody": {
													"id": 1090,
													"nodeType": "Block",
													"src": "4331:66:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1087,
																	"name": "MainFunction__beneficiaryExist",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "4353:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1088,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4353:32:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1089,
															"nodeType": "RevertStatement",
															"src": "4346:39:6"
														}
													]
												}
											}
										]
									},
									"functionSelector": "96074e70",
									"id": 1143,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1079,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1078,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4268:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "4268:9:6"
										}
									],
									"name": "addBeneficiary",
									"nameLocation": "4214:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1077,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "4237:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "4229:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1073,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4229:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1076,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4251:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "4243:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1075,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4243:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4228:30:6"
									},
									"returnParameters": {
										"id": 1080,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4278:0:6"
									},
									"scope": 1241,
									"src": "4205:705:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1188,
										"nodeType": "Block",
										"src": "5028:336:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 1152,
																"name": "_beneficiary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 819,
																"src": "5043:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																	"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																}
															},
															"id": 1154,
															"indexExpression": {
																"id": 1153,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1145,
																"src": "5056:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5043:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																"typeString": "struct WhitelistStruct storage ref"
															}
														},
														"id": 1155,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 784,
														"src": "5043:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1156,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5071:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5043:29:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1186,
													"nodeType": "Block",
													"src": "5322:35:6",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1184,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5344:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1151,
															"id": 1185,
															"nodeType": "Return",
															"src": "5337:8:6"
														}
													]
												},
												"id": 1187,
												"nodeType": "IfStatement",
												"src": "5039:318:6",
												"trueBody": {
													"id": 1183,
													"nodeType": "Block",
													"src": "5074:242:6",
													"statements": [
														{
															"expression": {
																"id": 1160,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1158,
																	"name": "privateSaleUsers",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 800,
																	"src": "5089:16:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1159,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5109:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "5089:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1161,
															"nodeType": "ExpressionStatement",
															"src": "5089:21:6"
														},
														{
															"expression": {
																"id": 1167,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1162,
																	"name": "privateSaleAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 802,
																	"src": "5125:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 1163,
																			"name": "_beneficiary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 819,
																			"src": "5146:12:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																				"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																			}
																		},
																		"id": 1165,
																		"indexExpression": {
																			"id": 1164,
																			"name": "user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1145,
																			"src": "5159:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5146:18:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																			"typeString": "struct WhitelistStruct storage ref"
																		}
																	},
																	"id": 1166,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "amount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 784,
																	"src": "5146:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5125:46:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1168,
															"nodeType": "ExpressionStatement",
															"src": "5125:46:6"
														},
														{
															"assignments": [
																1170
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1170,
																	"mutability": "mutable",
																	"name": "ex_amount",
																	"nameLocation": "5194:9:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1183,
																	"src": "5186:17:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1169,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5186:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1175,
															"initialValue": {
																"expression": {
																	"baseExpression": {
																		"id": 1171,
																		"name": "_beneficiary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 819,
																		"src": "5206:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																			"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																		}
																	},
																	"id": 1173,
																	"indexExpression": {
																		"id": 1172,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1145,
																		"src": "5219:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5206:18:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																		"typeString": "struct WhitelistStruct storage ref"
																	}
																},
																"id": 1174,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 784,
																"src": "5206:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5186:45:6"
														},
														{
															"expression": {
																"id": 1179,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "5248:25:6",
																"subExpression": {
																	"baseExpression": {
																		"id": 1176,
																		"name": "_beneficiary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 819,
																		"src": "5255:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																			"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																		}
																	},
																	"id": 1178,
																	"indexExpression": {
																		"id": 1177,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1145,
																		"src": "5268:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "5255:18:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																		"typeString": "struct WhitelistStruct storage ref"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1180,
															"nodeType": "ExpressionStatement",
															"src": "5248:25:6"
														},
														{
															"expression": {
																"id": 1181,
																"name": "ex_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1170,
																"src": "5295:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1151,
															"id": 1182,
															"nodeType": "Return",
															"src": "5288:16:6"
														}
													]
												}
											}
										]
									},
									"functionSelector": "7d3bca76",
									"id": 1189,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1148,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1147,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4986:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "4986:9:6"
										}
									],
									"name": "deleteBeneficiary",
									"nameLocation": "4927:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "4953:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1189,
												"src": "4945:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4945:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4944:14:6"
									},
									"returnParameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1189,
												"src": "5014:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5014:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5013:9:6"
									},
									"scope": 1241,
									"src": "4918:446:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1239,
										"nodeType": "Block",
										"src": "5507:606:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 1193,
																"name": "_beneficiary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 819,
																"src": "5522:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																	"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																}
															},
															"id": 1196,
															"indexExpression": {
																"expression": {
																	"id": 1194,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5535:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1195,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5535:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5522:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																"typeString": "struct WhitelistStruct storage ref"
															}
														},
														"id": 1197,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 784,
														"src": "5522:31:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1198,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5556:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5522:35:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1238,
												"nodeType": "IfStatement",
												"src": "5518:588:6",
												"trueBody": {
													"id": 1237,
													"nodeType": "Block",
													"src": "5559:547:6",
													"statements": [
														{
															"assignments": [
																1201
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1201,
																	"mutability": "mutable",
																	"name": "claimableLockedAmount",
																	"nameLocation": "5582:21:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1237,
																	"src": "5574:29:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1200,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5574:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1206,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1203,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "5632:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1204,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "5632:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1202,
																	"name": "_calculateClaimableAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1072,
																	"src": "5606:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) returns (uint256)"
																	}
																},
																"id": 1205,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5606:37:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5574:69:6"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1207,
																	"name": "claimableLockedAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1201,
																	"src": "5664:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1208,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5688:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5664:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1236,
															"nodeType": "IfStatement",
															"src": "5660:434:6",
															"trueBody": {
																"id": 1235,
																"nodeType": "Block",
																"src": "5691:403:6",
																"statements": [
																	{
																		"expression": {
																			"id": 1222,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"baseExpression": {
																						"id": 1210,
																						"name": "_beneficiary",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 819,
																						"src": "5710:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																							"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																						}
																					},
																					"id": 1213,
																					"indexExpression": {
																						"expression": {
																							"id": 1211,
																							"name": "msg",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967281,
																							"src": "5723:3:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_magic_message",
																								"typeString": "msg"
																							}
																						},
																						"id": 1212,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "sender",
																						"nodeType": "MemberAccess",
																						"src": "5723:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "5710:24:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																						"typeString": "struct WhitelistStruct storage ref"
																					}
																				},
																				"id": 1214,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 784,
																				"src": "5710:31:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1221,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"baseExpression": {
																							"id": 1215,
																							"name": "_beneficiary",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 819,
																							"src": "5765:12:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_struct$_WhitelistStruct_$789_storage_$",
																								"typeString": "mapping(address => struct WhitelistStruct storage ref)"
																							}
																						},
																						"id": 1218,
																						"indexExpression": {
																							"expression": {
																								"id": 1216,
																								"name": "msg",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967281,
																								"src": "5778:3:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_message",
																									"typeString": "msg"
																								}
																							},
																							"id": 1217,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "sender",
																							"nodeType": "MemberAccess",
																							"src": "5778:10:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "5765:24:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_WhitelistStruct_$789_storage",
																							"typeString": "struct WhitelistStruct storage ref"
																						}
																					},
																					"id": 1219,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "amount",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 784,
																					"src": "5765:31:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1220,
																					"name": "claimableLockedAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1201,
																					"src": "5820:21:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "5765:76:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5710:131:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1223,
																		"nodeType": "ExpressionStatement",
																		"src": "5710:131:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1228,
																							"name": "_token",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 821,
																							"src": "5975:6:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1227,
																						"name": "IERC20",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 222,
																						"src": "5968:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																							"typeString": "type(contract IERC20)"
																						}
																					},
																					"id": 1229,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "5968:14:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				{
																					"expression": {
																						"id": 1230,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "6005:3:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 1231,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "6005:10:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1232,
																					"name": "claimableLockedAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1201,
																					"src": "6038:21:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 1224,
																					"name": "SafeERC20",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 446,
																					"src": "5923:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																						"typeString": "type(library SafeERC20)"
																					}
																				},
																				"id": 1226,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "safeTransfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 253,
																				"src": "5923:22:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (contract IERC20,address,uint256)"
																				}
																			},
																			"id": 1233,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5923:155:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1234,
																		"nodeType": "ExpressionStatement",
																		"src": "5923:155:6"
																	}
																]
															}
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1190,
										"nodeType": "StructuredDocumentation",
										"src": "5372:78:6",
										"text": " @notice Transfers tokens held by timelock to beneficiary."
									},
									"functionSelector": "d5498dc7",
									"id": 1240,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "releaseClaimable",
									"nameLocation": "5465:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1191,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5481:2:6"
									},
									"returnParameters": {
										"id": 1192,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5507:0:6"
									},
									"scope": 1241,
									"src": "5456:657:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1242,
							"src": "770:5346:6",
							"usedErrors": [
								774,
								778
							]
						}
					],
					"src": "40:6078:6"
				},
				"id": 6
			}
		}
	}
}