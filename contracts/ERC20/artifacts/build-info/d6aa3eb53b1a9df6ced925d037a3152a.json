{
	"id": "d6aa3eb53b1a9df6ced925d037a3152a",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ERC20/Staking.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Staking is ReentrancyGuard, Ownable {\n    /**\n     * @notice Constructor since this contract is not meant to be used without inheritance\n     * push once to stakeholders for it to work properly\n     */\n\n    mapping(uint256 => uint256) internal stakingPackage;\n\n    uint256 public stakingPenaltyRate;\n    uint256 public airdropRate;\n    uint256 public airdropSince;\n    bool public airdropStatus;\n\n    address public token_address;\n\n    constructor(address token) {\n        //Staking penalty and Airdrop in 0.1 times percentage\n        stakingPenaltyRate = 15;\n        airdropRate = 80;\n\n        token_address = token;\n\n        stakingPackage[90 days] = 6;\n        stakingPackage[180 days] = 7;\n        stakingPackage[365 days] = 8;\n    }\n\n    /**\n     * @notice\n     * A stake struct is used to represent the way we store stakes,\n     * A Stake will contain the users address, the amount staked and a timestamp,\n     * Since which is when the stake was made\n     */\n    struct Stake {\n        uint256 amount;\n        uint256 since;\n        uint256 rewardAPY;\n        uint256 releaseTime;\n        // This claimable field is new and used to tell how big of a reward is currently available\n        uint256 claimable;\n        uint256 claimableAirdrop;\n        uint256 latestClaimDrop;\n    }\n\n    /**\n     * @notice\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\n     */\n    struct StakingSummary {\n        uint256 total_amount;\n        uint256 penalty;\n        Stake stake;\n    }\n\n    /**\n     * @notice\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\n     */\n    mapping(address => Stake) internal stakeholders;\n\n    /**\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\n     */\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 timestamp,\n        uint256 releaseTime\n    );\n\n    event PenaltyChanged(uint256 amount);\n    event AirdropChanged(uint256 amount);\n\n    /* ------------------------------------------ Modifier ------------------------------------------ */\n\n    function _checkAirdropStatus() internal view {\n        require(airdropStatus == true, \"Airdrop not started\");\n    }\n\n    modifier airdropStatusTrue() {\n        _checkAirdropStatus();\n        _;\n    }\n\n    /* ---------------------------------------------- - --------------------------------------------- */\n\n    /**\n     * @notice\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n     * StakeID\n     */\n    function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {\n        // Simple check so that user does not stake 0\n        // require(amount > 0, \"Cannot stake nothing\");\n        // require(stakeholders[user].amount == 0, \"User is a staker\");\n\n        require(stakeholders[msg.sender].amount == 0, \"User is a Staker\");\n        require(stakingPackage[stakePeriod] != 0, \"Package not Found\");\n\n        // block.timestamp = timestamp of the current block in seconds since the epoch\n        uint256 timestamp = block.timestamp;\n\n        // Use the index to push a new Stake\n        // push a newly created Stake with the current block timestamp.\n\n        stakeholders[msg.sender] = Stake(\n            amount,\n            timestamp,\n            stakingPackage[stakePeriod],\n            (stakePeriod + timestamp),\n            0,\n            0,\n            0\n        );\n\n        SafeERC20.safeTransferFrom(\n            IERC20(token_address),\n            msg.sender,\n            address(this),\n            amount\n        );\n        // Emit an event that the stake has occured\n        emit Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp));\n    }\n\n    function changePenaltyFee(uint256 amount) external onlyOwner {\n        // require(amount <= 30, \"Penalty fee cannot exceed 3 percent.\");\n        require(amount <= 30, \"Penalty max 30%\");\n        stakingPenaltyRate = amount;\n        emit PenaltyChanged(amount);\n    }\n\n    function _calculateStakingDuration(uint256 since)\n        internal\n        view\n        returns (uint256)\n    {\n        // times by 1e24 so theres no missing value\n        return ((block.timestamp - since) * 1e24) / 365 days;\n    }\n\n    function _calculateStakeReward(Stake memory user_stake)\n        internal\n        view\n        returns (uint256)\n    {\n        // divided by 1e26 because 1e2 for APY and 1e24 from calculate staking duration\n        return\n            (user_stake.amount *\n                user_stake.rewardAPY *\n                _calculateStakingDuration(user_stake.since)) / 1e26;\n    }\n\n    function _calculateStakingWithPenalty(uint256 amount, uint256 reward)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        return (\n            amount - ((amount * stakingPenaltyRate) / 1000),\n            reward - ((reward * stakingPenaltyRate) / 1000)\n        );\n    }\n\n    /**\n     * @notice\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\n     * Will return the amount to MINT onto the account\n     * Will also _calculateStakeReward and reset timer\n     */\n\n    function withdrawStake() external nonReentrant {\n        // TODO: can be simplified\n        // Grab user_index which is the index to use to grab the Stake[]\n        Stake memory user_stake = stakeholders[msg.sender];\n        require(user_stake.amount != 0, \"Staking not found\");\n\n        uint256 reward = _calculateStakeReward(user_stake);\n        delete stakeholders[msg.sender];\n\n        if (user_stake.releaseTime > block.timestamp) {\n            (\n                uint256 amount_reduced,\n                uint256 reward_reduced\n            ) = _calculateStakingWithPenalty(user_stake.amount, reward);\n\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                (amount_reduced + reward_reduced)\n            );\n        } else {\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                (user_stake.amount + reward)\n            );\n        }\n    }\n\n    function hasStake() external view returns (StakingSummary memory) {\n        Stake memory user_stake = stakeholders[msg.sender];\n        require(user_stake.amount != 0, \"Staking not found\");\n        StakingSummary memory summary = StakingSummary(0, 0, user_stake);\n\n        uint256 reward = _calculateStakeReward(user_stake);\n\n        if (summary.stake.releaseTime > block.timestamp) {\n            summary.penalty =\n                ((user_stake.amount * stakingPenaltyRate) / 1000) +\n                ((reward * stakingPenaltyRate) / 1000);\n        }\n\n        if (calculateWeek(user_stake.latestClaimDrop) > 0) {\n            uint256 airdrop = _calculateAirdrop(user_stake.amount);\n            summary.stake.claimableAirdrop = airdrop;\n        } else {\n            summary.stake.claimableAirdrop = 0;\n        }\n\n        summary.stake.claimable = reward;\n        summary.total_amount = user_stake.amount;\n\n        return summary;\n    }\n\n    /* -------------------------------------- Airdrop functions ------------------------------------- */\n\n    function startAirdrop() external onlyOwner {\n        airdropSince = block.timestamp;\n        airdropStatus = true;\n    }\n\n    function changeAirdropPercentage(uint256 amount) external onlyOwner {\n        require(amount <= 200, \"Airdrop max 20%\");\n        airdropRate = amount;\n        emit AirdropChanged(amount);\n    }\n\n    function blockTimestamp() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function calculateWeek(uint256 timestamp) public view returns (uint256) {\n        return (block.timestamp - timestamp) / 7 days;\n    }\n\n    function _calculateAirdrop(uint256 stakeAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        return ((stakeAmount * airdropRate) / 1000) / 52 weeks;\n    }\n\n    function claimAirdrop() external airdropStatusTrue {\n        // TODO: can be simplified if using address\n        Stake storage user_stake = stakeholders[msg.sender];\n\n        require(user_stake.amount != 0, \"Staking not found\");\n        uint256 latestClaim = calculateWeek(user_stake.latestClaimDrop);\n\n        if (user_stake.amount > 0) {\n            require(latestClaim != 0, \"Claimable once a week\");\n\n            user_stake.claimableAirdrop = 0;\n            user_stake.latestClaimDrop = block.timestamp;\n\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                _calculateAirdrop(user_stake.amount)\n            );\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 123,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a9b2fb39f884561bad7a62544d63197e691ed9b4bf51396178c74c59a554ce2f64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a9b2fb39f884561bad7a62544d63197e691ed9b4bf51396178c74c59a554ce2f64736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xB2 0xFB CODECOPY 0xF8 DUP5 JUMP SHL 0xAD PUSH27 0x62544D63197E691ED9B4BF51396178C74C59A554CE2F64736F6C63 NUMBER STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "707:3748:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a9b2fb39f884561bad7a62544d63197e691ed9b4bf51396178c74c59a554ce2f64736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xB2 0xFB CODECOPY 0xF8 DUP5 JUMP SHL 0xAD PUSH27 0x62544D63197E691ED9B4BF51396178C74C59A554CE2F64736F6C63 NUMBER STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "707:3748:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a9b2fb39f884561bad7a62544d63197e691ed9b4bf51396178c74c59a554ce2f64736f6c63430008070033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220707b19f8ce8fee8f6afc7520aba0995f8916b0cf807093a219746de5a8d7065664736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220707b19f8ce8fee8f6afc7520aba0995f8916b0cf807093a219746de5a8d7065664736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x7B19F8CE8FEE8F6AFC7520ABA0995F8916 0xB0 0xCF DUP1 PUSH17 0x93A219746DE5A8D7065664736F6C634300 ADDMOD SMOD STOP CALLER ",
							"sourceMap": "194:8964:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220707b19f8ce8fee8f6afc7520aba0995f8916b0cf807093a219746de5a8d7065664736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x7B19F8CE8FEE8F6AFC7520ABA0995F8916 0xB0 0xCF DUP1 PUSH17 0x93A219746DE5A8D7065664736F6C634300 ADDMOD SMOD STOP CALLER ",
							"sourceMap": "194:8964:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220707b19f8ce8fee8f6afc7520aba0995f8916b0cf807093a219746de5a8d7065664736f6c63430008070033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/ERC20/Staking.sol": {
				"Staking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AirdropChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PenaltyChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "releaseTime",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "airdropRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropSince",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropStatus",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "blockTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "calculateWeek",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changeAirdropPercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changePenaltyFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claimAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasStake",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "penalty",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimableAirdrop",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "latestClaimDrop",
													"type": "uint256"
												}
											],
											"internalType": "struct Staking.Stake",
											"name": "stake",
											"type": "tuple"
										}
									],
									"internalType": "struct Staking.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakePeriod",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingPenaltyRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token_address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC20/Staking.sol\":247:9093  contract Staking is ReentrancyGuard, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/ERC20/Staking.sol\":692:993  constructor(address token) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1821:1828  _status */\n  0x00\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1821:1843  _status = _NOT_ENTERED */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_9\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:965  _msgSender */\n  shl(0x20, tag_11)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  shl(0x20, tag_12)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  0x20\n  shr\n  jump\t// in\ntag_9:\n    /* \"contracts/ERC20/Staking.sol\":812:814  15 */\n  0x0f\n    /* \"contracts/ERC20/Staking.sol\":791:809  stakingPenaltyRate */\n  0x03\n    /* \"contracts/ERC20/Staking.sol\":791:814  stakingPenaltyRate = 15 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20/Staking.sol\":838:840  80 */\n  0x50\n    /* \"contracts/ERC20/Staking.sol\":824:835  airdropRate */\n  0x04\n    /* \"contracts/ERC20/Staking.sol\":824:840  airdropRate = 80 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20/Staking.sol\":867:872  token */\n  dup1\n    /* \"contracts/ERC20/Staking.sol\":851:864  token_address */\n  0x06\n  0x01\n    /* \"contracts/ERC20/Staking.sol\":851:872  token_address = token */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20/Staking.sol\":909:910  6 */\n  0x06\n    /* \"contracts/ERC20/Staking.sol\":883:897  stakingPackage */\n  0x02\n    /* \"contracts/ERC20/Staking.sol\":883:906  stakingPackage[90 days] */\n  0x00\n    /* \"contracts/ERC20/Staking.sol\":898:905  90 days */\n  0x76a700\n    /* \"contracts/ERC20/Staking.sol\":883:906  stakingPackage[90 days] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/ERC20/Staking.sol\":883:910  stakingPackage[90 days] = 6 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20/Staking.sol\":947:948  7 */\n  0x07\n    /* \"contracts/ERC20/Staking.sol\":920:934  stakingPackage */\n  0x02\n    /* \"contracts/ERC20/Staking.sol\":920:944  stakingPackage[180 days] */\n  0x00\n    /* \"contracts/ERC20/Staking.sol\":935:943  180 days */\n  0xed4e00\n    /* \"contracts/ERC20/Staking.sol\":920:944  stakingPackage[180 days] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/ERC20/Staking.sol\":920:948  stakingPackage[180 days] = 7 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20/Staking.sol\":985:986  8 */\n  0x08\n    /* \"contracts/ERC20/Staking.sol\":958:972  stakingPackage */\n  0x02\n    /* \"contracts/ERC20/Staking.sol\":958:982  stakingPackage[365 days] */\n  0x00\n    /* \"contracts/ERC20/Staking.sol\":973:981  365 days */\n  0x01e13380\n    /* \"contracts/ERC20/Staking.sol\":958:982  stakingPackage[365 days] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/ERC20/Staking.sol\":958:986  stakingPackage[365 days] = 8 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20/Staking.sol\":692:993  constructor(address token) {... */\n  pop\n    /* \"contracts/ERC20/Staking.sol\":247:9093  contract Staking is ReentrancyGuard, Ownable {... */\n  jump(tag_14)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_11:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_12:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  0x01\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2550:2558  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2547  _owner */\n  0x01\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2604:2612  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2594:2602  oldOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7:150   */\ntag_18:\n    /* \"#utility.yul\":64:69   */\n  0x00\n    /* \"#utility.yul\":95:101   */\n  dup2\n    /* \"#utility.yul\":89:102   */\n  mload\n    /* \"#utility.yul\":80:102   */\n  swap1\n  pop\n    /* \"#utility.yul\":111:144   */\n  tag_20\n    /* \"#utility.yul\":138:143   */\n  dup2\n    /* \"#utility.yul\":111:144   */\n  tag_21\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":7:150   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":156:507   */\ntag_3:\n    /* \"#utility.yul\":226:232   */\n  0x00\n    /* \"#utility.yul\":275:277   */\n  0x20\n    /* \"#utility.yul\":263:272   */\n  dup3\n    /* \"#utility.yul\":254:261   */\n  dup5\n    /* \"#utility.yul\":250:273   */\n  sub\n    /* \"#utility.yul\":246:278   */\n  slt\n    /* \"#utility.yul\":243:362   */\n  iszero\n  tag_23\n  jumpi\n    /* \"#utility.yul\":281:360   */\n  tag_24\n  tag_25\n  jump\t// in\ntag_24:\n    /* \"#utility.yul\":243:362   */\ntag_23:\n    /* \"#utility.yul\":401:402   */\n  0x00\n    /* \"#utility.yul\":426:490   */\n  tag_26\n    /* \"#utility.yul\":482:489   */\n  dup5\n    /* \"#utility.yul\":473:479   */\n  dup3\n    /* \"#utility.yul\":462:471   */\n  dup6\n    /* \"#utility.yul\":458:480   */\n  add\n    /* \"#utility.yul\":426:490   */\n  tag_18\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":416:490   */\n  swap2\n  pop\n    /* \"#utility.yul\":372:500   */\n  pop\n    /* \"#utility.yul\":156:507   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":594:690   */\ntag_29:\n    /* \"#utility.yul\":631:638   */\n  0x00\n    /* \"#utility.yul\":660:684   */\n  tag_31\n    /* \"#utility.yul\":678:683   */\n  dup3\n    /* \"#utility.yul\":660:684   */\n  tag_32\n  jump\t// in\ntag_31:\n    /* \"#utility.yul\":649:684   */\n  swap1\n  pop\n    /* \"#utility.yul\":594:690   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:822   */\ntag_32:\n    /* \"#utility.yul\":733:740   */\n  0x00\n    /* \"#utility.yul\":773:815   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":766:771   */\n  dup3\n    /* \"#utility.yul\":762:816   */\n  and\n    /* \"#utility.yul\":751:816   */\n  swap1\n  pop\n    /* \"#utility.yul\":696:822   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":951:1068   */\ntag_25:\n    /* \"#utility.yul\":1060:1061   */\n  0x00\n    /* \"#utility.yul\":1057:1058   */\n  dup1\n    /* \"#utility.yul\":1050:1062   */\n  revert\n    /* \"#utility.yul\":1074:1196   */\ntag_21:\n    /* \"#utility.yul\":1147:1171   */\n  tag_38\n    /* \"#utility.yul\":1165:1170   */\n  dup2\n    /* \"#utility.yul\":1147:1171   */\n  tag_29\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":1140:1145   */\n  dup2\n    /* \"#utility.yul\":1137:1172   */\n  eq\n    /* \"#utility.yul\":1127:1190   */\n  tag_39\n  jumpi\n    /* \"#utility.yul\":1186:1187   */\n  0x00\n    /* \"#utility.yul\":1183:1184   */\n  dup1\n    /* \"#utility.yul\":1176:1188   */\n  revert\n    /* \"#utility.yul\":1127:1190   */\ntag_39:\n    /* \"#utility.yul\":1074:1196   */\n  pop\n  jump\t// out\n    /* \"contracts/ERC20/Staking.sol\":247:9093  contract Staking is ReentrancyGuard, Ownable {... */\ntag_14:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC20/Staking.sol\":247:9093  contract Staking is ReentrancyGuard, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xbed9d861\n      gt\n      tag_21\n      jumpi\n      dup1\n      0xbed9d861\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xcb79c2e1\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xd2a569c3\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xd5dbdf1b\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_19\n      jumpi\n      jump(tag_2)\n    tag_21:\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xadb61832\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xb5d9df83\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xb87da76d\n      eq\n      tag_14\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x7b0472f0\n      gt\n      tag_22\n      jumpi\n      dup1\n      0x7b0472f0\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8891cf0d\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x8c63f97f\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8c8e8fee\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_22:\n      dup1\n      0x10486b6a\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2cf1a5fb\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x5b88349d\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ERC20/Staking.sol\":6602:7533  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_3:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20/Staking.sol\":625:650  bool public airdropStatus */\n    tag_4:\n      tag_27\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20/Staking.sol\":8396:9091  function claimAirdrop() external airdropStatusTrue {... */\n    tag_5:\n      tag_31\n      tag_32\n      jump\t// in\n    tag_31:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_6:\n      tag_33\n      tag_34\n      jump\t// in\n    tag_33:\n      stop\n        /* \"contracts/ERC20/Staking.sol\":2931:4098  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_7:\n      tag_35\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n    tag_35:\n      stop\n        /* \"contracts/ERC20/Staking.sol\":560:586  uint256 public airdropRate */\n    tag_8:\n      tag_39\n      tag_40\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      tag_41\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20/Staking.sol\":4104:4370  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_9:\n      tag_43\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_44\n      swap2\n      swap1\n      tag_45\n      jump\t// in\n    tag_44:\n      tag_46\n      jump\t// in\n    tag_43:\n      stop\n        /* \"contracts/ERC20/Staking.sol\":657:685  address public token_address */\n    tag_10:\n      tag_47\n      tag_48\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_49\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_11:\n      tag_51\n      tag_52\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20/Staking.sol\":7970:8065  function blockTimestamp() public view returns (uint256) {... */\n    tag_12:\n      tag_54\n      tag_55\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      tag_56\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_56:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20/Staking.sol\":8071:8205  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_13:\n      tag_57\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_58\n      swap2\n      swap1\n      tag_45\n      jump\t// in\n    tag_58:\n      tag_59\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      tag_60\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20/Staking.sol\":592:619  uint256 public airdropSince */\n    tag_14:\n      tag_61\n      tag_62\n      jump\t// in\n    tag_61:\n      mload(0x40)\n      tag_63\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20/Staking.sol\":5628:6596  function withdrawStake() external nonReentrant {... */\n    tag_15:\n      tag_64\n      tag_65\n      jump\t// in\n    tag_64:\n      stop\n        /* \"contracts/ERC20/Staking.sol\":521:554  uint256 public stakingPenaltyRate */\n    tag_16:\n      tag_66\n      tag_67\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      tag_68\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20/Staking.sol\":7645:7765  function startAirdrop() external onlyOwner {... */\n    tag_17:\n      tag_69\n      tag_70\n      jump\t// in\n    tag_69:\n      stop\n        /* \"contracts/ERC20/Staking.sol\":7771:7964  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_18:\n      tag_71\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_72\n      swap2\n      swap1\n      tag_45\n      jump\t// in\n    tag_72:\n      tag_73\n      jump\t// in\n    tag_71:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_19:\n      tag_74\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_75\n      swap2\n      swap1\n      tag_76\n      jump\t// in\n    tag_75:\n      tag_77\n      jump\t// in\n    tag_74:\n      stop\n        /* \"contracts/ERC20/Staking.sol\":6602:7533  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_24:\n        /* \"contracts/ERC20/Staking.sol\":6645:6666  StakingSummary memory */\n      tag_78\n      tag_79\n      jump\t// in\n    tag_78:\n        /* \"contracts/ERC20/Staking.sol\":6678:6701  Stake memory user_stake */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":6704:6716  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":6704:6728  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":6717:6727  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":6704:6728  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC20/Staking.sol\":6678:6728  Stake memory user_stake = stakeholders[msg.sender] */\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x01\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x02\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x03\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x04\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x05\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x06\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6767:6768  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":6746:6756  user_stake */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":6746:6763  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":6746:6768  user_stake.amount != 0 */\n      eq\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":6738:6790  require(user_stake.amount != 0, \"Staking not found\") */\n      tag_81\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_82\n      swap1\n      tag_83\n      jump\t// in\n    tag_82:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_81:\n        /* \"contracts/ERC20/Staking.sol\":6800:6829  StakingSummary memory summary */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":6832:6864  StakingSummary(0, 0, user_stake) */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/ERC20/Staking.sol\":6847:6848  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":6832:6864  StakingSummary(0, 0, user_stake) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/ERC20/Staking.sol\":6850:6851  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":6832:6864  StakingSummary(0, 0, user_stake) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/ERC20/Staking.sol\":6853:6863  user_stake */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":6832:6864  StakingSummary(0, 0, user_stake) */\n      dup2\n      mstore\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6800:6864  StakingSummary memory summary = StakingSummary(0, 0, user_stake) */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6875:6889  uint256 reward */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":6892:6925  _calculateStakeReward(user_stake) */\n      tag_84\n        /* \"contracts/ERC20/Staking.sol\":6914:6924  user_stake */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":6892:6913  _calculateStakeReward */\n      tag_85\n        /* \"contracts/ERC20/Staking.sol\":6892:6925  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_84:\n        /* \"contracts/ERC20/Staking.sol\":6875:6925  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6968:6983  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":6940:6947  summary */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":6940:6953  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":6940:6965  summary.stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":6940:6983  summary.stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/ERC20/Staking.sol\":6936:7150  if (summary.stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_86\n      jumpi\n        /* \"contracts/ERC20/Staking.sol\":7134:7138  1000 */\n      0x03e8\n        /* \"contracts/ERC20/Staking.sol\":7112:7130  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/ERC20/Staking.sol\":7103:7109  reward */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":7103:7130  reward * stakingPenaltyRate */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"contracts/ERC20/Staking.sol\":7102:7138  (reward * stakingPenaltyRate) / 1000 */\n      tag_89\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_89:\n        /* \"contracts/ERC20/Staking.sol\":7077:7081  1000 */\n      0x03e8\n        /* \"contracts/ERC20/Staking.sol\":7055:7073  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/ERC20/Staking.sol\":7035:7045  user_stake */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":7035:7052  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7035:7073  user_stake.amount * stakingPenaltyRate */\n      tag_91\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_91:\n        /* \"contracts/ERC20/Staking.sol\":7034:7081  (user_stake.amount * stakingPenaltyRate) / 1000 */\n      tag_92\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_92:\n        /* \"contracts/ERC20/Staking.sol\":7033:7139  ((user_stake.amount * stakingPenaltyRate) / 1000) +... */\n      tag_93\n      swap2\n      swap1\n      tag_94\n      jump\t// in\n    tag_93:\n        /* \"contracts/ERC20/Staking.sol\":6999:7006  summary */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":6999:7014  summary.penalty */\n      0x20\n      add\n        /* \"contracts/ERC20/Staking.sol\":6999:7139  summary.penalty =... */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6936:7150  if (summary.stake.releaseTime > block.timestamp) {... */\n    tag_86:\n        /* \"contracts/ERC20/Staking.sol\":7208:7209  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":7164:7205  calculateWeek(user_stake.latestClaimDrop) */\n      tag_95\n        /* \"contracts/ERC20/Staking.sol\":7178:7188  user_stake */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":7178:7204  user_stake.latestClaimDrop */\n      0xc0\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7164:7177  calculateWeek */\n      tag_59\n        /* \"contracts/ERC20/Staking.sol\":7164:7205  calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_95:\n        /* \"contracts/ERC20/Staking.sol\":7164:7209  calculateWeek(user_stake.latestClaimDrop) > 0 */\n      gt\n        /* \"contracts/ERC20/Staking.sol\":7160:7409  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      iszero\n      tag_96\n      jumpi\n        /* \"contracts/ERC20/Staking.sol\":7225:7240  uint256 airdrop */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":7243:7279  _calculateAirdrop(user_stake.amount) */\n      tag_97\n        /* \"contracts/ERC20/Staking.sol\":7261:7271  user_stake */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":7261:7278  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7243:7260  _calculateAirdrop */\n      tag_98\n        /* \"contracts/ERC20/Staking.sol\":7243:7279  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_97:\n        /* \"contracts/ERC20/Staking.sol\":7225:7279  uint256 airdrop = _calculateAirdrop(user_stake.amount) */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":7326:7333  airdrop */\n      dup1\n        /* \"contracts/ERC20/Staking.sol\":7293:7300  summary */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":7293:7306  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7293:7323  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/ERC20/Staking.sol\":7293:7333  summary.stake.claimableAirdrop = airdrop */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":7211:7344  {... */\n      pop\n        /* \"contracts/ERC20/Staking.sol\":7160:7409  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      jump(tag_99)\n    tag_96:\n        /* \"contracts/ERC20/Staking.sol\":7397:7398  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":7364:7371  summary */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":7364:7377  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7364:7394  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/ERC20/Staking.sol\":7364:7398  summary.stake.claimableAirdrop = 0 */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":7160:7409  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n    tag_99:\n        /* \"contracts/ERC20/Staking.sol\":7445:7451  reward */\n      dup1\n        /* \"contracts/ERC20/Staking.sol\":7419:7426  summary */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":7419:7432  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7419:7442  summary.stake.claimable */\n      0x80\n      add\n        /* \"contracts/ERC20/Staking.sol\":7419:7451  summary.stake.claimable = reward */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":7484:7494  user_stake */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":7484:7501  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7461:7468  summary */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":7461:7481  summary.total_amount */\n      0x00\n      add\n        /* \"contracts/ERC20/Staking.sol\":7461:7501  summary.total_amount = user_stake.amount */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":7519:7526  summary */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":7512:7526  return summary */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6602:7533  function hasStake() external view returns (StakingSummary memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":625:650  bool public airdropStatus */\n    tag_28:\n      0x06\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":8396:9091  function claimAirdrop() external airdropStatusTrue {... */\n    tag_32:\n        /* \"contracts/ERC20/Staking.sol\":2575:2596  _checkAirdropStatus() */\n      tag_101\n        /* \"contracts/ERC20/Staking.sol\":2575:2594  _checkAirdropStatus */\n      tag_102\n        /* \"contracts/ERC20/Staking.sol\":2575:2596  _checkAirdropStatus() */\n      jump\t// in\n    tag_101:\n        /* \"contracts/ERC20/Staking.sol\":8509:8533  Stake storage user_stake */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8536:8548  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":8536:8560  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8549:8559  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":8536:8560  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC20/Staking.sol\":8509:8560  Stake storage user_stake = stakeholders[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":8600:8601  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8579:8589  user_stake */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":8579:8596  user_stake.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/ERC20/Staking.sol\":8579:8601  user_stake.amount != 0 */\n      eq\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":8571:8623  require(user_stake.amount != 0, \"Staking not found\") */\n      tag_104\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_105\n      swap1\n      tag_83\n      jump\t// in\n    tag_105:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_104:\n        /* \"contracts/ERC20/Staking.sol\":8633:8652  uint256 latestClaim */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8655:8696  calculateWeek(user_stake.latestClaimDrop) */\n      tag_106\n        /* \"contracts/ERC20/Staking.sol\":8669:8679  user_stake */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":8669:8695  user_stake.latestClaimDrop */\n      0x06\n      add\n      sload\n        /* \"contracts/ERC20/Staking.sol\":8655:8668  calculateWeek */\n      tag_59\n        /* \"contracts/ERC20/Staking.sol\":8655:8696  calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_106:\n        /* \"contracts/ERC20/Staking.sol\":8633:8696  uint256 latestClaim = calculateWeek(user_stake.latestClaimDrop) */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":8731:8732  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8711:8721  user_stake */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":8711:8728  user_stake.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/ERC20/Staking.sol\":8711:8732  user_stake.amount > 0 */\n      gt\n        /* \"contracts/ERC20/Staking.sol\":8707:9085  if (user_stake.amount > 0) {... */\n      iszero\n      tag_107\n      jumpi\n        /* \"contracts/ERC20/Staking.sol\":8771:8772  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8756:8767  latestClaim */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":8756:8772  latestClaim != 0 */\n      eq\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":8748:8798  require(latestClaim != 0, \"Claimable once a week\") */\n      tag_108\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_109\n      swap1\n      tag_110\n      jump\t// in\n    tag_109:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_108:\n        /* \"contracts/ERC20/Staking.sol\":8843:8844  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8813:8823  user_stake */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":8813:8840  user_stake.claimableAirdrop */\n      0x05\n      add\n        /* \"contracts/ERC20/Staking.sol\":8813:8844  user_stake.claimableAirdrop = 0 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20/Staking.sol\":8887:8902  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":8858:8868  user_stake */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":8858:8884  user_stake.latestClaimDrop */\n      0x06\n      add\n        /* \"contracts/ERC20/Staking.sol\":8858:8902  user_stake.latestClaimDrop = block.timestamp */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20/Staking.sol\":8917:9074  SafeERC20.safeTransfer(... */\n      tag_111\n        /* \"contracts/ERC20/Staking.sol\":8964:8977  token_address */\n      0x06\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20/Staking.sol\":8996:9006  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":9024:9060  _calculateAirdrop(user_stake.amount) */\n      tag_112\n        /* \"contracts/ERC20/Staking.sol\":9042:9052  user_stake */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":9042:9059  user_stake.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/ERC20/Staking.sol\":9024:9041  _calculateAirdrop */\n      tag_98\n        /* \"contracts/ERC20/Staking.sol\":9024:9060  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_112:\n        /* \"contracts/ERC20/Staking.sol\":8917:8939  SafeERC20.safeTransfer */\n      tag_113\n        /* \"contracts/ERC20/Staking.sol\":8917:9074  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_111:\n        /* \"contracts/ERC20/Staking.sol\":8707:9085  if (user_stake.amount > 0) {... */\n    tag_107:\n        /* \"contracts/ERC20/Staking.sol\":8447:9091  {... */\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":8396:9091  function claimAirdrop() external airdropStatusTrue {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_34:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_115\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_115:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_118\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_118:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":2931:4098  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_38:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      tag_121\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2280  _nonReentrantBefore */\n      tag_122\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      jump\t// in\n    tag_121:\n        /* \"contracts/ERC20/Staking.sol\":3241:3242  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3206:3218  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":3206:3230  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3219:3229  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":3206:3230  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC20/Staking.sol\":3206:3237  stakeholders[msg.sender].amount */\n      0x00\n      add\n      sload\n        /* \"contracts/ERC20/Staking.sol\":3206:3242  stakeholders[msg.sender].amount == 0 */\n      eq\n        /* \"contracts/ERC20/Staking.sol\":3198:3263  require(stakeholders[msg.sender].amount == 0, \"User is a Staker\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_125\n      swap1\n      tag_126\n      jump\t// in\n    tag_125:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_124:\n        /* \"contracts/ERC20/Staking.sol\":3312:3313  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3281:3295  stakingPackage */\n      0x02\n        /* \"contracts/ERC20/Staking.sol\":3281:3308  stakingPackage[stakePeriod] */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3296:3307  stakePeriod */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":3281:3308  stakingPackage[stakePeriod] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC20/Staking.sol\":3281:3313  stakingPackage[stakePeriod] != 0 */\n      eq\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":3273:3335  require(stakingPackage[stakePeriod] != 0, \"Package not Found\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_128\n      swap1\n      tag_129\n      jump\t// in\n    tag_128:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_127:\n        /* \"contracts/ERC20/Staking.sol\":3433:3450  uint256 timestamp */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3453:3468  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":3433:3468  uint256 timestamp = block.timestamp */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/ERC20/Staking.sol\":3643:3649  amount */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/ERC20/Staking.sol\":3663:3672  timestamp */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/ERC20/Staking.sol\":3686:3700  stakingPackage */\n      0x02\n        /* \"contracts/ERC20/Staking.sol\":3686:3713  stakingPackage[stakePeriod] */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3701:3712  stakePeriod */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":3686:3713  stakingPackage[stakePeriod] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/ERC20/Staking.sol\":3742:3751  timestamp */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":3728:3739  stakePeriod */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":3728:3751  stakePeriod + timestamp */\n      tag_130\n      swap2\n      swap1\n      tag_94\n      jump\t// in\n    tag_130:\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/ERC20/Staking.sol\":3766:3767  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/ERC20/Staking.sol\":3781:3782  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/ERC20/Staking.sol\":3796:3797  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      dup2\n      mstore\n      pop\n        /* \"contracts/ERC20/Staking.sol\":3597:3609  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":3597:3621  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3610:3620  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":3597:3621  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC20/Staking.sol\":3597:3807  stakeholders[msg.sender] = Stake(... */\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      sstore\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x01\n      add\n      sstore\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      sstore\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x03\n      add\n      sstore\n      0x80\n      dup3\n      add\n      mload\n      dup2\n      0x04\n      add\n      sstore\n      0xa0\n      dup3\n      add\n      mload\n      dup2\n      0x05\n      add\n      sstore\n      0xc0\n      dup3\n      add\n      mload\n      dup2\n      0x06\n      add\n      sstore\n      swap1\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":3818:3960  SafeERC20.safeTransferFrom(... */\n      tag_131\n        /* \"contracts/ERC20/Staking.sol\":3865:3878  token_address */\n      0x06\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20/Staking.sol\":3893:3903  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":3925:3929  this */\n      address\n        /* \"contracts/ERC20/Staking.sol\":3944:3950  amount */\n      dup7\n        /* \"contracts/ERC20/Staking.sol\":3818:3844  SafeERC20.safeTransferFrom */\n      tag_132\n        /* \"contracts/ERC20/Staking.sol\":3818:3960  SafeERC20.safeTransferFrom(... */\n      jump\t// in\n    tag_131:\n        /* \"contracts/ERC20/Staking.sol\":4034:4044  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":4027:4091  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed\n        /* \"contracts/ERC20/Staking.sol\":4046:4052  amount */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":4054:4063  timestamp */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":4080:4089  timestamp */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":4066:4077  stakePeriod */\n      dup7\n        /* \"contracts/ERC20/Staking.sol\":4066:4089  stakePeriod + timestamp */\n      tag_133\n      swap2\n      swap1\n      tag_94\n      jump\t// in\n    tag_133:\n        /* \"contracts/ERC20/Staking.sol\":4027:4091  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      mload(0x40)\n      tag_134\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_134:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/ERC20/Staking.sol\":3005:4098  {... */\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2323  _nonReentrantAfter() */\n      tag_136\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2321  _nonReentrantAfter */\n      tag_137\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2323  _nonReentrantAfter() */\n      jump\t// in\n    tag_136:\n        /* \"contracts/ERC20/Staking.sol\":2931:4098  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":560:586  uint256 public airdropRate */\n    tag_40:\n      sload(0x04)\n      dup2\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":4104:4370  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_46:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_139\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_139:\n        /* \"contracts/ERC20/Staking.sol\":4267:4269  30 */\n      0x1e\n        /* \"contracts/ERC20/Staking.sol\":4257:4263  amount */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":4257:4269  amount <= 30 */\n      gt\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":4249:4289  require(amount <= 30, \"Penalty max 30%\") */\n      tag_141\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_142\n      swap1\n      tag_143\n      jump\t// in\n    tag_142:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_141:\n        /* \"contracts/ERC20/Staking.sol\":4320:4326  amount */\n      dup1\n        /* \"contracts/ERC20/Staking.sol\":4299:4317  stakingPenaltyRate */\n      0x03\n        /* \"contracts/ERC20/Staking.sol\":4299:4326  stakingPenaltyRate = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20/Staking.sol\":4341:4363  PenaltyChanged(amount) */\n      0xcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9\n        /* \"contracts/ERC20/Staking.sol\":4356:4362  amount */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":4341:4363  PenaltyChanged(amount) */\n      mload(0x40)\n      tag_144\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_144:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/ERC20/Staking.sol\":4104:4370  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":657:685  address public token_address */\n    tag_48:\n      0x06\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1266:1279  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":7970:8065  function blockTimestamp() public view returns (uint256) {... */\n    tag_55:\n        /* \"contracts/ERC20/Staking.sol\":8017:8024  uint256 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8043:8058  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":8036:8058  return block.timestamp */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":7970:8065  function blockTimestamp() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":8071:8205  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_59:\n        /* \"contracts/ERC20/Staking.sol\":8134:8141  uint256 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8192:8198  7 days */\n      0x093a80\n        /* \"contracts/ERC20/Staking.sol\":8179:8188  timestamp */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":8161:8176  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":8161:8188  block.timestamp - timestamp */\n      tag_148\n      swap2\n      swap1\n      tag_149\n      jump\t// in\n    tag_148:\n        /* \"contracts/ERC20/Staking.sol\":8160:8198  (block.timestamp - timestamp) / 7 days */\n      tag_150\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_150:\n        /* \"contracts/ERC20/Staking.sol\":8153:8198  return (block.timestamp - timestamp) / 7 days */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":8071:8205  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":592:619  uint256 public airdropSince */\n    tag_62:\n      sload(0x05)\n      dup2\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":5628:6596  function withdrawStake() external nonReentrant {... */\n    tag_65:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      tag_152\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2280  _nonReentrantBefore */\n      tag_122\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      jump\t// in\n    tag_152:\n        /* \"contracts/ERC20/Staking.sol\":5793:5816  Stake memory user_stake */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":5819:5831  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":5819:5843  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":5832:5842  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":5819:5843  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC20/Staking.sol\":5793:5843  Stake memory user_stake = stakeholders[msg.sender] */\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x01\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x02\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x03\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x04\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x05\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x06\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":5882:5883  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":5861:5871  user_stake */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":5861:5878  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":5861:5883  user_stake.amount != 0 */\n      eq\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":5853:5905  require(user_stake.amount != 0, \"Staking not found\") */\n      tag_154\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_155\n      swap1\n      tag_83\n      jump\t// in\n    tag_155:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_154:\n        /* \"contracts/ERC20/Staking.sol\":5916:5930  uint256 reward */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":5933:5966  _calculateStakeReward(user_stake) */\n      tag_156\n        /* \"contracts/ERC20/Staking.sol\":5955:5965  user_stake */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":5933:5954  _calculateStakeReward */\n      tag_85\n        /* \"contracts/ERC20/Staking.sol\":5933:5966  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_156:\n        /* \"contracts/ERC20/Staking.sol\":5916:5966  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":5983:5995  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":5983:6007  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":5996:6006  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":5983:6007  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":5976:6007  delete stakeholders[msg.sender] */\n      dup1\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x01\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x02\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x03\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x04\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x05\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x06\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6047:6062  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":6022:6032  user_stake */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":6022:6044  user_stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":6022:6062  user_stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/ERC20/Staking.sol\":6018:6590  if (user_stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_157\n      jumpi\n        /* \"contracts/ERC20/Staking.sol\":6096:6118  uint256 amount_reduced */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":6136:6158  uint256 reward_reduced */\n      dup1\n        /* \"contracts/ERC20/Staking.sol\":6175:6230  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      tag_158\n        /* \"contracts/ERC20/Staking.sol\":6204:6214  user_stake */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":6204:6221  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":6223:6229  reward */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":6175:6203  _calculateStakingWithPenalty */\n      tag_159\n        /* \"contracts/ERC20/Staking.sol\":6175:6230  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      jump\t// in\n    tag_158:\n        /* \"contracts/ERC20/Staking.sol\":6078:6230  (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6245:6399  SafeERC20.safeTransfer(... */\n      tag_160\n        /* \"contracts/ERC20/Staking.sol\":6292:6305  token_address */\n      0x06\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20/Staking.sol\":6324:6334  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":6370:6384  reward_reduced */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":6353:6367  amount_reduced */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":6353:6384  amount_reduced + reward_reduced */\n      tag_161\n      swap2\n      swap1\n      tag_94\n      jump\t// in\n    tag_161:\n        /* \"contracts/ERC20/Staking.sol\":6245:6267  SafeERC20.safeTransfer */\n      tag_113\n        /* \"contracts/ERC20/Staking.sol\":6245:6399  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_160:\n        /* \"contracts/ERC20/Staking.sol\":6064:6410  {... */\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6018:6590  if (user_stake.releaseTime > block.timestamp) {... */\n      jump(tag_162)\n    tag_157:\n        /* \"contracts/ERC20/Staking.sol\":6430:6579  SafeERC20.safeTransfer(... */\n      tag_163\n        /* \"contracts/ERC20/Staking.sol\":6477:6490  token_address */\n      0x06\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20/Staking.sol\":6509:6519  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":6558:6564  reward */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":6538:6548  user_stake */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":6538:6555  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":6538:6564  user_stake.amount + reward */\n      tag_164\n      swap2\n      swap1\n      tag_94\n      jump\t// in\n    tag_164:\n        /* \"contracts/ERC20/Staking.sol\":6430:6452  SafeERC20.safeTransfer */\n      tag_113\n        /* \"contracts/ERC20/Staking.sol\":6430:6579  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_163:\n        /* \"contracts/ERC20/Staking.sol\":6018:6590  if (user_stake.releaseTime > block.timestamp) {... */\n    tag_162:\n        /* \"contracts/ERC20/Staking.sol\":5675:6596  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2323  _nonReentrantAfter() */\n      tag_165\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2321  _nonReentrantAfter */\n      tag_137\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2323  _nonReentrantAfter() */\n      jump\t// in\n    tag_165:\n        /* \"contracts/ERC20/Staking.sol\":5628:6596  function withdrawStake() external nonReentrant {... */\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":521:554  uint256 public stakingPenaltyRate */\n    tag_67:\n      sload(0x03)\n      dup2\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":7645:7765  function startAirdrop() external onlyOwner {... */\n    tag_70:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_167\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_167:\n        /* \"contracts/ERC20/Staking.sol\":7713:7728  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":7698:7710  airdropSince */\n      0x05\n        /* \"contracts/ERC20/Staking.sol\":7698:7728  airdropSince = block.timestamp */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20/Staking.sol\":7754:7758  true */\n      0x01\n        /* \"contracts/ERC20/Staking.sol\":7738:7751  airdropStatus */\n      0x06\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":7738:7758  airdropStatus = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20/Staking.sol\":7645:7765  function startAirdrop() external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":7771:7964  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_170\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_170:\n        /* \"contracts/ERC20/Staking.sol\":7867:7870  200 */\n      0xc8\n        /* \"contracts/ERC20/Staking.sol\":7857:7863  amount */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":7857:7870  amount <= 200 */\n      gt\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":7849:7890  require(amount <= 200, \"Airdrop max 20%\") */\n      tag_172\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_173\n      swap1\n      tag_174\n      jump\t// in\n    tag_173:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_172:\n        /* \"contracts/ERC20/Staking.sol\":7914:7920  amount */\n      dup1\n        /* \"contracts/ERC20/Staking.sol\":7900:7911  airdropRate */\n      0x04\n        /* \"contracts/ERC20/Staking.sol\":7900:7920  airdropRate = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20/Staking.sol\":7935:7957  AirdropChanged(amount) */\n      0xcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e\n        /* \"contracts/ERC20/Staking.sol\":7950:7956  amount */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":7935:7957  AirdropChanged(amount) */\n      mload(0x40)\n      tag_175\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_175:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/ERC20/Staking.sol\":7771:7964  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_77:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_177\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_177:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2189:2190  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2177  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_179\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_181\n      jump\t// in\n    tag_180:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_179:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_182\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_182:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":4613:4980  function _calculateStakeReward(Stake memory user_stake)... */\n    tag_85:\n        /* \"contracts/ERC20/Staking.sol\":4716:4723  uint256 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":4969:4973  1e26 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/ERC20/Staking.sol\":4922:4965  _calculateStakingDuration(user_stake.since) */\n      tag_184\n        /* \"contracts/ERC20/Staking.sol\":4948:4958  user_stake */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":4948:4964  user_stake.since */\n      0x20\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":4922:4947  _calculateStakingDuration */\n      tag_185\n        /* \"contracts/ERC20/Staking.sol\":4922:4965  _calculateStakingDuration(user_stake.since) */\n      jump\t// in\n    tag_184:\n        /* \"contracts/ERC20/Staking.sol\":4883:4893  user_stake */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":4883:4903  user_stake.rewardAPY */\n      0x40\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":4847:4857  user_stake */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":4847:4864  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":4847:4903  user_stake.amount *... */\n      tag_186\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_186:\n        /* \"contracts/ERC20/Staking.sol\":4847:4965  user_stake.amount *... */\n      tag_187\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_187:\n        /* \"contracts/ERC20/Staking.sol\":4846:4973  (user_stake.amount *... */\n      tag_188\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_188:\n        /* \"contracts/ERC20/Staking.sol\":4827:4973  return... */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":4613:4980  function _calculateStakeReward(Stake memory user_stake)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":8211:8390  function _calculateAirdrop(uint256 stakeAmount)... */\n    tag_98:\n        /* \"contracts/ERC20/Staking.sol\":8306:8313  uint256 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8375:8383  52 weeks */\n      0x01dfe200\n        /* \"contracts/ERC20/Staking.sol\":8367:8371  1000 */\n      0x03e8\n        /* \"contracts/ERC20/Staking.sol\":8352:8363  airdropRate */\n      sload(0x04)\n        /* \"contracts/ERC20/Staking.sol\":8338:8349  stakeAmount */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":8338:8363  stakeAmount * airdropRate */\n      tag_190\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_190:\n        /* \"contracts/ERC20/Staking.sol\":8337:8371  (stakeAmount * airdropRate) / 1000 */\n      tag_191\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_191:\n        /* \"contracts/ERC20/Staking.sol\":8336:8383  ((stakeAmount * airdropRate) / 1000) / 52 weeks */\n      tag_192\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_192:\n        /* \"contracts/ERC20/Staking.sol\":8329:8383  return ((stakeAmount * airdropRate) / 1000) / 52 weeks */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":8211:8390  function _calculateAirdrop(uint256 stakeAmount)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":2415:2530  function _checkAirdropStatus() internal view {... */\n    tag_102:\n        /* \"contracts/ERC20/Staking.sol\":2495:2499  true */\n      0x01\n        /* \"contracts/ERC20/Staking.sol\":2478:2499  airdropStatus == true */\n      iszero\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":2478:2491  airdropStatus */\n      0x06\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/ERC20/Staking.sol\":2478:2499  airdropStatus == true */\n      iszero\n      iszero\n      eq\n        /* \"contracts/ERC20/Staking.sol\":2470:2523  require(airdropStatus == true, \"Airdrop not started\") */\n      tag_194\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_195\n      swap1\n      tag_196\n      jump\t// in\n    tag_195:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_194:\n        /* \"contracts/ERC20/Staking.sol\":2415:2530  function _checkAirdropStatus() internal view {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n    tag_113:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_198\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":895:900  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":925:948  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":950:952  to */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":954:959  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_199\n      swap3\n      swap2\n      swap1\n      tag_200\n      jump\t// in\n    tag_199:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:894  _callOptionalReturn */\n      tag_201\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_198:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_116:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      tag_203\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1443  _msgSender */\n      tag_204\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      jump\t// in\n    tag_203:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      tag_205\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1427  owner */\n      tag_52\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      jump\t// in\n    tag_205:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_206\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_207\n      swap1\n      tag_208\n      jump\t// in\n    tag_207:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_206:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_119:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2550:2558  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2547  _owner */\n      0x01\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2604:2612  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2594:2602  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n    tag_122:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2487  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_211\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_212\n      swap1\n      tag_213\n      jump\t// in\n    tag_212:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_211:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2598:2605  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2598:2616  _status = _ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n    tag_132:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_215\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1132:1137  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1162:1189  token.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1191:1195  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1197:1199  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1201:1206  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      tag_216\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_217\n      jump\t// in\n    tag_216:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1131  _callOptionalReturn */\n      tag_201\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_215:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2629:2838  function _nonReentrantAfter() private {... */\n    tag_137:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2816  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2831  _status = _NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2629:2838  function _nonReentrantAfter() private {... */\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":4986:5281  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_159:\n        /* \"contracts/ERC20/Staking.sol\":5103:5110  uint256 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":5112:5119  uint256 */\n      dup1\n        /* \"contracts/ERC20/Staking.sol\":5198:5202  1000 */\n      0x03e8\n        /* \"contracts/ERC20/Staking.sol\":5176:5194  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/ERC20/Staking.sol\":5167:5173  amount */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":5167:5194  amount * stakingPenaltyRate */\n      tag_220\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_220:\n        /* \"contracts/ERC20/Staking.sol\":5166:5202  (amount * stakingPenaltyRate) / 1000 */\n      tag_221\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_221:\n        /* \"contracts/ERC20/Staking.sol\":5156:5162  amount */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":5156:5203  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_222\n      swap2\n      swap1\n      tag_149\n      jump\t// in\n    tag_222:\n        /* \"contracts/ERC20/Staking.sol\":5259:5263  1000 */\n      0x03e8\n        /* \"contracts/ERC20/Staking.sol\":5237:5255  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/ERC20/Staking.sol\":5228:5234  reward */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":5228:5255  reward * stakingPenaltyRate */\n      tag_223\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_223:\n        /* \"contracts/ERC20/Staking.sol\":5227:5263  (reward * stakingPenaltyRate) / 1000 */\n      tag_224\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_224:\n        /* \"contracts/ERC20/Staking.sol\":5217:5223  reward */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":5217:5264  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_225\n      swap2\n      swap1\n      tag_149\n      jump\t// in\n    tag_225:\n        /* \"contracts/ERC20/Staking.sol\":5135:5274  return (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/ERC20/Staking.sol\":4986:5281  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":4376:4607  function _calculateStakingDuration(uint256 since)... */\n    tag_185:\n        /* \"contracts/ERC20/Staking.sol\":4473:4480  uint256 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":4592:4600  365 days */\n      0x01e13380\n        /* \"contracts/ERC20/Staking.sol\":4584:4588  1e24 */\n      0xd3c21bcecceda1000000\n        /* \"contracts/ERC20/Staking.sol\":4575:4580  since */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":4557:4572  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":4557:4580  block.timestamp - since */\n      tag_227\n      swap2\n      swap1\n      tag_149\n      jump\t// in\n    tag_227:\n        /* \"contracts/ERC20/Staking.sol\":4556:4588  (block.timestamp - since) * 1e24 */\n      tag_228\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_228:\n        /* \"contracts/ERC20/Staking.sol\":4555:4600  ((block.timestamp - since) * 1e24) / 365 days */\n      tag_229\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_229:\n        /* \"contracts/ERC20/Staking.sol\":4548:4600  return ((block.timestamp - since) * 1e24) / 365 days */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":4376:4607  function _calculateStakingDuration(uint256 since)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_201:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4189  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_231\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4220:4224  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4200:4205  token */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4219  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_232\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_231:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4261  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4295:4296  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4285  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4292  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4296  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4271:4447  if (returndata.length > 0) {... */\n      iszero\n      tag_233\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4370:4380  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4359:4389  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_234\n      swap2\n      swap1\n      tag_235\n      jump\t// in\n    tag_234:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_236\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_237\n      swap1\n      tag_238\n      jump\t// in\n    tag_237:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_236:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4271:4447  if (returndata.length > 0) {... */\n    tag_233:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3817:4453  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_204:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n    tag_232:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4006:4018  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_241\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4059:4065  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4067:4071  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4073:4074  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4076:4088  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4058  functionCallWithValue */\n      tag_242\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_241:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4030:4089  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n    tag_242:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5125:5137  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5182:5187  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5178  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5187  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_244\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_245\n      swap1\n      tag_246\n      jump\t// in\n    tag_245:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_244:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5241:5253  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5255:5278  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5288  target */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5293  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5301:5306  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5308:5312  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5313  target.call{value: value}(data) */\n      mload(0x40)\n      tag_247\n      swap2\n      swap1\n      tag_248\n      jump\t// in\n    tag_247:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_251\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_250)\n    tag_251:\n      0x60\n      swap2\n      pop\n    tag_250:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5240:5313  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_252\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5357:5363  target */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5365:5372  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5374:5384  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5386:5398  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5356  verifyCallResultFromTarget */\n      tag_253\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_252:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5323:5399  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7466:8094  function verifyCallResultFromTarget(... */\n    tag_253:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7646:7658  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7674:7681  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n      iszero\n      tag_255\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7722:7723  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7711  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7718  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7723  returndata.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7697:7983  if (returndata.length == 0) {... */\n      iszero\n      tag_256\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7916:7934  isContract(target) */\n      tag_257\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7927:7933  target */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7916:7926  isContract */\n      tag_258\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7916:7934  isContract(target) */\n      jump\t// in\n    tag_257:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_259\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_260\n      swap1\n      tag_261\n      jump\t// in\n    tag_260:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_259:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7697:7983  if (returndata.length == 0) {... */\n    tag_256:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8003:8013  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7996:8013  return returndata */\n      swap1\n      pop\n      jump(tag_254)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n    tag_255:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8077  _revert(returndata, errorMessage) */\n      tag_263\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8052:8062  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8076  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8051  _revert */\n      tag_264\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8077  _revert(returndata, errorMessage) */\n      jump\t// in\n    tag_263:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7466:8094  function verifyCallResultFromTarget(... */\n    tag_254:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n    tag_258:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1235:1239  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1487:1488  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1472  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1458:1488  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8616:9156  function _revert(bytes memory returndata, string memory errorMessage) private pure {... */\n    tag_264:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8795:8796  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8785  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8792  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8796  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n      iszero\n      tag_267\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9003:9013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8997:9014  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9059:9074  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9046:9056  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9042:9044  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9038:9057  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9031:9075  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n    tag_267:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9126:9138  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9119:9139  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_269\n      swap2\n      swap1\n      tag_270\n      jump\t// in\n    tag_269:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_79:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      tag_271\n      tag_272\n      jump\t// in\n    tag_271:\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n    tag_272:\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_274:\n        /* \"#utility.yul\":53:58   */\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_276\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_277\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":7:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:289   */\n    tag_278:\n        /* \"#utility.yul\":206:211   */\n      0x00\n        /* \"#utility.yul\":237:243   */\n      dup2\n        /* \"#utility.yul\":231:244   */\n      mload\n        /* \"#utility.yul\":222:244   */\n      swap1\n      pop\n        /* \"#utility.yul\":253:283   */\n      tag_280\n        /* \"#utility.yul\":277:282   */\n      dup2\n        /* \"#utility.yul\":253:283   */\n      tag_281\n      jump\t// in\n    tag_280:\n        /* \"#utility.yul\":152:289   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":295:434   */\n    tag_282:\n        /* \"#utility.yul\":341:346   */\n      0x00\n        /* \"#utility.yul\":379:385   */\n      dup2\n        /* \"#utility.yul\":366:386   */\n      calldataload\n        /* \"#utility.yul\":357:386   */\n      swap1\n      pop\n        /* \"#utility.yul\":395:428   */\n      tag_284\n        /* \"#utility.yul\":422:427   */\n      dup2\n        /* \"#utility.yul\":395:428   */\n      tag_285\n      jump\t// in\n    tag_284:\n        /* \"#utility.yul\":295:434   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":440:769   */\n    tag_76:\n        /* \"#utility.yul\":499:505   */\n      0x00\n        /* \"#utility.yul\":548:550   */\n      0x20\n        /* \"#utility.yul\":536:545   */\n      dup3\n        /* \"#utility.yul\":527:534   */\n      dup5\n        /* \"#utility.yul\":523:546   */\n      sub\n        /* \"#utility.yul\":519:551   */\n      slt\n        /* \"#utility.yul\":516:635   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":554:633   */\n      tag_288\n      tag_289\n      jump\t// in\n    tag_288:\n        /* \"#utility.yul\":516:635   */\n    tag_287:\n        /* \"#utility.yul\":674:675   */\n      0x00\n        /* \"#utility.yul\":699:752   */\n      tag_290\n        /* \"#utility.yul\":744:751   */\n      dup5\n        /* \"#utility.yul\":735:741   */\n      dup3\n        /* \"#utility.yul\":724:733   */\n      dup6\n        /* \"#utility.yul\":720:742   */\n      add\n        /* \"#utility.yul\":699:752   */\n      tag_274\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":689:752   */\n      swap2\n      pop\n        /* \"#utility.yul\":645:762   */\n      pop\n        /* \"#utility.yul\":440:769   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":775:1120   */\n    tag_235:\n        /* \"#utility.yul\":842:848   */\n      0x00\n        /* \"#utility.yul\":891:893   */\n      0x20\n        /* \"#utility.yul\":879:888   */\n      dup3\n        /* \"#utility.yul\":870:877   */\n      dup5\n        /* \"#utility.yul\":866:889   */\n      sub\n        /* \"#utility.yul\":862:894   */\n      slt\n        /* \"#utility.yul\":859:978   */\n      iszero\n      tag_292\n      jumpi\n        /* \"#utility.yul\":897:976   */\n      tag_293\n      tag_289\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":859:978   */\n    tag_292:\n        /* \"#utility.yul\":1017:1018   */\n      0x00\n        /* \"#utility.yul\":1042:1103   */\n      tag_294\n        /* \"#utility.yul\":1095:1102   */\n      dup5\n        /* \"#utility.yul\":1086:1092   */\n      dup3\n        /* \"#utility.yul\":1075:1084   */\n      dup6\n        /* \"#utility.yul\":1071:1093   */\n      add\n        /* \"#utility.yul\":1042:1103   */\n      tag_278\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":1032:1103   */\n      swap2\n      pop\n        /* \"#utility.yul\":988:1113   */\n      pop\n        /* \"#utility.yul\":775:1120   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1126:1455   */\n    tag_45:\n        /* \"#utility.yul\":1185:1191   */\n      0x00\n        /* \"#utility.yul\":1234:1236   */\n      0x20\n        /* \"#utility.yul\":1222:1231   */\n      dup3\n        /* \"#utility.yul\":1213:1220   */\n      dup5\n        /* \"#utility.yul\":1209:1232   */\n      sub\n        /* \"#utility.yul\":1205:1237   */\n      slt\n        /* \"#utility.yul\":1202:1321   */\n      iszero\n      tag_296\n      jumpi\n        /* \"#utility.yul\":1240:1319   */\n      tag_297\n      tag_289\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":1202:1321   */\n    tag_296:\n        /* \"#utility.yul\":1360:1361   */\n      0x00\n        /* \"#utility.yul\":1385:1438   */\n      tag_298\n        /* \"#utility.yul\":1430:1437   */\n      dup5\n        /* \"#utility.yul\":1421:1427   */\n      dup3\n        /* \"#utility.yul\":1410:1419   */\n      dup6\n        /* \"#utility.yul\":1406:1428   */\n      add\n        /* \"#utility.yul\":1385:1438   */\n      tag_282\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":1375:1438   */\n      swap2\n      pop\n        /* \"#utility.yul\":1331:1448   */\n      pop\n        /* \"#utility.yul\":1126:1455   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1461:1935   */\n    tag_37:\n        /* \"#utility.yul\":1529:1535   */\n      0x00\n        /* \"#utility.yul\":1537:1543   */\n      dup1\n        /* \"#utility.yul\":1586:1588   */\n      0x40\n        /* \"#utility.yul\":1574:1583   */\n      dup4\n        /* \"#utility.yul\":1565:1572   */\n      dup6\n        /* \"#utility.yul\":1561:1584   */\n      sub\n        /* \"#utility.yul\":1557:1589   */\n      slt\n        /* \"#utility.yul\":1554:1673   */\n      iszero\n      tag_300\n      jumpi\n        /* \"#utility.yul\":1592:1671   */\n      tag_301\n      tag_289\n      jump\t// in\n    tag_301:\n        /* \"#utility.yul\":1554:1673   */\n    tag_300:\n        /* \"#utility.yul\":1712:1713   */\n      0x00\n        /* \"#utility.yul\":1737:1790   */\n      tag_302\n        /* \"#utility.yul\":1782:1789   */\n      dup6\n        /* \"#utility.yul\":1773:1779   */\n      dup3\n        /* \"#utility.yul\":1762:1771   */\n      dup7\n        /* \"#utility.yul\":1758:1780   */\n      add\n        /* \"#utility.yul\":1737:1790   */\n      tag_282\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":1727:1790   */\n      swap3\n      pop\n        /* \"#utility.yul\":1683:1800   */\n      pop\n        /* \"#utility.yul\":1839:1841   */\n      0x20\n        /* \"#utility.yul\":1865:1918   */\n      tag_303\n        /* \"#utility.yul\":1910:1917   */\n      dup6\n        /* \"#utility.yul\":1901:1907   */\n      dup3\n        /* \"#utility.yul\":1890:1899   */\n      dup7\n        /* \"#utility.yul\":1886:1908   */\n      add\n        /* \"#utility.yul\":1865:1918   */\n      tag_282\n      jump\t// in\n    tag_303:\n        /* \"#utility.yul\":1855:1918   */\n      swap2\n      pop\n        /* \"#utility.yul\":1810:1928   */\n      pop\n        /* \"#utility.yul\":1461:1935   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1941:2059   */\n    tag_304:\n        /* \"#utility.yul\":2028:2052   */\n      tag_306\n        /* \"#utility.yul\":2046:2051   */\n      dup2\n        /* \"#utility.yul\":2028:2052   */\n      tag_307\n      jump\t// in\n    tag_306:\n        /* \"#utility.yul\":2023:2026   */\n      dup3\n        /* \"#utility.yul\":2016:2053   */\n      mstore\n        /* \"#utility.yul\":1941:2059   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2065:2174   */\n    tag_308:\n        /* \"#utility.yul\":2146:2167   */\n      tag_310\n        /* \"#utility.yul\":2161:2166   */\n      dup2\n        /* \"#utility.yul\":2146:2167   */\n      tag_311\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":2141:2144   */\n      dup3\n        /* \"#utility.yul\":2134:2168   */\n      mstore\n        /* \"#utility.yul\":2065:2174   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2180:2553   */\n    tag_312:\n        /* \"#utility.yul\":2284:2287   */\n      0x00\n        /* \"#utility.yul\":2312:2350   */\n      tag_314\n        /* \"#utility.yul\":2344:2349   */\n      dup3\n        /* \"#utility.yul\":2312:2350   */\n      tag_315\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":2366:2454   */\n      tag_316\n        /* \"#utility.yul\":2447:2453   */\n      dup2\n        /* \"#utility.yul\":2442:2445   */\n      dup6\n        /* \"#utility.yul\":2366:2454   */\n      tag_317\n      jump\t// in\n    tag_316:\n        /* \"#utility.yul\":2359:2454   */\n      swap4\n      pop\n        /* \"#utility.yul\":2463:2515   */\n      tag_318\n        /* \"#utility.yul\":2508:2514   */\n      dup2\n        /* \"#utility.yul\":2503:2506   */\n      dup6\n        /* \"#utility.yul\":2496:2500   */\n      0x20\n        /* \"#utility.yul\":2489:2494   */\n      dup7\n        /* \"#utility.yul\":2485:2501   */\n      add\n        /* \"#utility.yul\":2463:2515   */\n      tag_319\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":2540:2546   */\n      dup1\n        /* \"#utility.yul\":2535:2538   */\n      dup5\n        /* \"#utility.yul\":2531:2547   */\n      add\n        /* \"#utility.yul\":2524:2547   */\n      swap2\n      pop\n        /* \"#utility.yul\":2288:2553   */\n      pop\n        /* \"#utility.yul\":2180:2553   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2559:2923   */\n    tag_320:\n        /* \"#utility.yul\":2647:2650   */\n      0x00\n        /* \"#utility.yul\":2675:2714   */\n      tag_322\n        /* \"#utility.yul\":2708:2713   */\n      dup3\n        /* \"#utility.yul\":2675:2714   */\n      tag_323\n      jump\t// in\n    tag_322:\n        /* \"#utility.yul\":2730:2801   */\n      tag_324\n        /* \"#utility.yul\":2794:2800   */\n      dup2\n        /* \"#utility.yul\":2789:2792   */\n      dup6\n        /* \"#utility.yul\":2730:2801   */\n      tag_325\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":2723:2801   */\n      swap4\n      pop\n        /* \"#utility.yul\":2810:2862   */\n      tag_326\n        /* \"#utility.yul\":2855:2861   */\n      dup2\n        /* \"#utility.yul\":2850:2853   */\n      dup6\n        /* \"#utility.yul\":2843:2847   */\n      0x20\n        /* \"#utility.yul\":2836:2841   */\n      dup7\n        /* \"#utility.yul\":2832:2848   */\n      add\n        /* \"#utility.yul\":2810:2862   */\n      tag_319\n      jump\t// in\n    tag_326:\n        /* \"#utility.yul\":2887:2916   */\n      tag_327\n        /* \"#utility.yul\":2909:2915   */\n      dup2\n        /* \"#utility.yul\":2887:2916   */\n      tag_328\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":2882:2885   */\n      dup5\n        /* \"#utility.yul\":2878:2917   */\n      add\n        /* \"#utility.yul\":2871:2917   */\n      swap2\n      pop\n        /* \"#utility.yul\":2651:2923   */\n      pop\n        /* \"#utility.yul\":2559:2923   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2929:3295   */\n    tag_329:\n        /* \"#utility.yul\":3071:3074   */\n      0x00\n        /* \"#utility.yul\":3092:3159   */\n      tag_331\n        /* \"#utility.yul\":3156:3158   */\n      0x10\n        /* \"#utility.yul\":3151:3154   */\n      dup4\n        /* \"#utility.yul\":3092:3159   */\n      tag_325\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":3085:3159   */\n      swap2\n      pop\n        /* \"#utility.yul\":3168:3261   */\n      tag_332\n        /* \"#utility.yul\":3257:3260   */\n      dup3\n        /* \"#utility.yul\":3168:3261   */\n      tag_333\n      jump\t// in\n    tag_332:\n        /* \"#utility.yul\":3286:3288   */\n      0x20\n        /* \"#utility.yul\":3281:3284   */\n      dup3\n        /* \"#utility.yul\":3277:3289   */\n      add\n        /* \"#utility.yul\":3270:3289   */\n      swap1\n      pop\n        /* \"#utility.yul\":2929:3295   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3301:3667   */\n    tag_334:\n        /* \"#utility.yul\":3443:3446   */\n      0x00\n        /* \"#utility.yul\":3464:3531   */\n      tag_336\n        /* \"#utility.yul\":3528:3530   */\n      0x26\n        /* \"#utility.yul\":3523:3526   */\n      dup4\n        /* \"#utility.yul\":3464:3531   */\n      tag_325\n      jump\t// in\n    tag_336:\n        /* \"#utility.yul\":3457:3531   */\n      swap2\n      pop\n        /* \"#utility.yul\":3540:3633   */\n      tag_337\n        /* \"#utility.yul\":3629:3632   */\n      dup3\n        /* \"#utility.yul\":3540:3633   */\n      tag_338\n      jump\t// in\n    tag_337:\n        /* \"#utility.yul\":3658:3660   */\n      0x40\n        /* \"#utility.yul\":3653:3656   */\n      dup3\n        /* \"#utility.yul\":3649:3661   */\n      add\n        /* \"#utility.yul\":3642:3661   */\n      swap1\n      pop\n        /* \"#utility.yul\":3301:3667   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3673:4039   */\n    tag_339:\n        /* \"#utility.yul\":3815:3818   */\n      0x00\n        /* \"#utility.yul\":3836:3903   */\n      tag_341\n        /* \"#utility.yul\":3900:3902   */\n      0x11\n        /* \"#utility.yul\":3895:3898   */\n      dup4\n        /* \"#utility.yul\":3836:3903   */\n      tag_325\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":3829:3903   */\n      swap2\n      pop\n        /* \"#utility.yul\":3912:4005   */\n      tag_342\n        /* \"#utility.yul\":4001:4004   */\n      dup3\n        /* \"#utility.yul\":3912:4005   */\n      tag_343\n      jump\t// in\n    tag_342:\n        /* \"#utility.yul\":4030:4032   */\n      0x20\n        /* \"#utility.yul\":4025:4028   */\n      dup3\n        /* \"#utility.yul\":4021:4033   */\n      add\n        /* \"#utility.yul\":4014:4033   */\n      swap1\n      pop\n        /* \"#utility.yul\":3673:4039   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4045:4411   */\n    tag_344:\n        /* \"#utility.yul\":4187:4190   */\n      0x00\n        /* \"#utility.yul\":4208:4275   */\n      tag_346\n        /* \"#utility.yul\":4272:4274   */\n      0x26\n        /* \"#utility.yul\":4267:4270   */\n      dup4\n        /* \"#utility.yul\":4208:4275   */\n      tag_325\n      jump\t// in\n    tag_346:\n        /* \"#utility.yul\":4201:4275   */\n      swap2\n      pop\n        /* \"#utility.yul\":4284:4377   */\n      tag_347\n        /* \"#utility.yul\":4373:4376   */\n      dup3\n        /* \"#utility.yul\":4284:4377   */\n      tag_348\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":4402:4404   */\n      0x40\n        /* \"#utility.yul\":4397:4400   */\n      dup3\n        /* \"#utility.yul\":4393:4405   */\n      add\n        /* \"#utility.yul\":4386:4405   */\n      swap1\n      pop\n        /* \"#utility.yul\":4045:4411   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4417:4783   */\n    tag_349:\n        /* \"#utility.yul\":4559:4562   */\n      0x00\n        /* \"#utility.yul\":4580:4647   */\n      tag_351\n        /* \"#utility.yul\":4644:4646   */\n      0x13\n        /* \"#utility.yul\":4639:4642   */\n      dup4\n        /* \"#utility.yul\":4580:4647   */\n      tag_325\n      jump\t// in\n    tag_351:\n        /* \"#utility.yul\":4573:4647   */\n      swap2\n      pop\n        /* \"#utility.yul\":4656:4749   */\n      tag_352\n        /* \"#utility.yul\":4745:4748   */\n      dup3\n        /* \"#utility.yul\":4656:4749   */\n      tag_353\n      jump\t// in\n    tag_352:\n        /* \"#utility.yul\":4774:4776   */\n      0x20\n        /* \"#utility.yul\":4769:4772   */\n      dup3\n        /* \"#utility.yul\":4765:4777   */\n      add\n        /* \"#utility.yul\":4758:4777   */\n      swap1\n      pop\n        /* \"#utility.yul\":4417:4783   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4789:5155   */\n    tag_354:\n        /* \"#utility.yul\":4931:4934   */\n      0x00\n        /* \"#utility.yul\":4952:5019   */\n      tag_356\n        /* \"#utility.yul\":5016:5018   */\n      0x20\n        /* \"#utility.yul\":5011:5014   */\n      dup4\n        /* \"#utility.yul\":4952:5019   */\n      tag_325\n      jump\t// in\n    tag_356:\n        /* \"#utility.yul\":4945:5019   */\n      swap2\n      pop\n        /* \"#utility.yul\":5028:5121   */\n      tag_357\n        /* \"#utility.yul\":5117:5120   */\n      dup3\n        /* \"#utility.yul\":5028:5121   */\n      tag_358\n      jump\t// in\n    tag_357:\n        /* \"#utility.yul\":5146:5148   */\n      0x20\n        /* \"#utility.yul\":5141:5144   */\n      dup3\n        /* \"#utility.yul\":5137:5149   */\n      add\n        /* \"#utility.yul\":5130:5149   */\n      swap1\n      pop\n        /* \"#utility.yul\":4789:5155   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5161:5527   */\n    tag_359:\n        /* \"#utility.yul\":5303:5306   */\n      0x00\n        /* \"#utility.yul\":5324:5391   */\n      tag_361\n        /* \"#utility.yul\":5388:5390   */\n      0x15\n        /* \"#utility.yul\":5383:5386   */\n      dup4\n        /* \"#utility.yul\":5324:5391   */\n      tag_325\n      jump\t// in\n    tag_361:\n        /* \"#utility.yul\":5317:5391   */\n      swap2\n      pop\n        /* \"#utility.yul\":5400:5493   */\n      tag_362\n        /* \"#utility.yul\":5489:5492   */\n      dup3\n        /* \"#utility.yul\":5400:5493   */\n      tag_363\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":5518:5520   */\n      0x20\n        /* \"#utility.yul\":5513:5516   */\n      dup3\n        /* \"#utility.yul\":5509:5521   */\n      add\n        /* \"#utility.yul\":5502:5521   */\n      swap1\n      pop\n        /* \"#utility.yul\":5161:5527   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5533:5899   */\n    tag_364:\n        /* \"#utility.yul\":5675:5678   */\n      0x00\n        /* \"#utility.yul\":5696:5763   */\n      tag_366\n        /* \"#utility.yul\":5760:5762   */\n      0x11\n        /* \"#utility.yul\":5755:5758   */\n      dup4\n        /* \"#utility.yul\":5696:5763   */\n      tag_325\n      jump\t// in\n    tag_366:\n        /* \"#utility.yul\":5689:5763   */\n      swap2\n      pop\n        /* \"#utility.yul\":5772:5865   */\n      tag_367\n        /* \"#utility.yul\":5861:5864   */\n      dup3\n        /* \"#utility.yul\":5772:5865   */\n      tag_368\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":5890:5892   */\n      0x20\n        /* \"#utility.yul\":5885:5888   */\n      dup3\n        /* \"#utility.yul\":5881:5893   */\n      add\n        /* \"#utility.yul\":5874:5893   */\n      swap1\n      pop\n        /* \"#utility.yul\":5533:5899   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5905:6271   */\n    tag_369:\n        /* \"#utility.yul\":6047:6050   */\n      0x00\n        /* \"#utility.yul\":6068:6135   */\n      tag_371\n        /* \"#utility.yul\":6132:6134   */\n      0x0f\n        /* \"#utility.yul\":6127:6130   */\n      dup4\n        /* \"#utility.yul\":6068:6135   */\n      tag_325\n      jump\t// in\n    tag_371:\n        /* \"#utility.yul\":6061:6135   */\n      swap2\n      pop\n        /* \"#utility.yul\":6144:6237   */\n      tag_372\n        /* \"#utility.yul\":6233:6236   */\n      dup3\n        /* \"#utility.yul\":6144:6237   */\n      tag_373\n      jump\t// in\n    tag_372:\n        /* \"#utility.yul\":6262:6264   */\n      0x20\n        /* \"#utility.yul\":6257:6260   */\n      dup3\n        /* \"#utility.yul\":6253:6265   */\n      add\n        /* \"#utility.yul\":6246:6265   */\n      swap1\n      pop\n        /* \"#utility.yul\":5905:6271   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6277:6643   */\n    tag_374:\n        /* \"#utility.yul\":6419:6422   */\n      0x00\n        /* \"#utility.yul\":6440:6507   */\n      tag_376\n        /* \"#utility.yul\":6504:6506   */\n      0x0f\n        /* \"#utility.yul\":6499:6502   */\n      dup4\n        /* \"#utility.yul\":6440:6507   */\n      tag_325\n      jump\t// in\n    tag_376:\n        /* \"#utility.yul\":6433:6507   */\n      swap2\n      pop\n        /* \"#utility.yul\":6516:6609   */\n      tag_377\n        /* \"#utility.yul\":6605:6608   */\n      dup3\n        /* \"#utility.yul\":6516:6609   */\n      tag_378\n      jump\t// in\n    tag_377:\n        /* \"#utility.yul\":6634:6636   */\n      0x20\n        /* \"#utility.yul\":6629:6632   */\n      dup3\n        /* \"#utility.yul\":6625:6637   */\n      add\n        /* \"#utility.yul\":6618:6637   */\n      swap1\n      pop\n        /* \"#utility.yul\":6277:6643   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6649:7015   */\n    tag_379:\n        /* \"#utility.yul\":6791:6794   */\n      0x00\n        /* \"#utility.yul\":6812:6879   */\n      tag_381\n        /* \"#utility.yul\":6876:6878   */\n      0x1d\n        /* \"#utility.yul\":6871:6874   */\n      dup4\n        /* \"#utility.yul\":6812:6879   */\n      tag_325\n      jump\t// in\n    tag_381:\n        /* \"#utility.yul\":6805:6879   */\n      swap2\n      pop\n        /* \"#utility.yul\":6888:6981   */\n      tag_382\n        /* \"#utility.yul\":6977:6980   */\n      dup3\n        /* \"#utility.yul\":6888:6981   */\n      tag_383\n      jump\t// in\n    tag_382:\n        /* \"#utility.yul\":7006:7008   */\n      0x20\n        /* \"#utility.yul\":7001:7004   */\n      dup3\n        /* \"#utility.yul\":6997:7009   */\n      add\n        /* \"#utility.yul\":6990:7009   */\n      swap1\n      pop\n        /* \"#utility.yul\":6649:7015   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7021:7387   */\n    tag_384:\n        /* \"#utility.yul\":7163:7166   */\n      0x00\n        /* \"#utility.yul\":7184:7251   */\n      tag_386\n        /* \"#utility.yul\":7248:7250   */\n      0x2a\n        /* \"#utility.yul\":7243:7246   */\n      dup4\n        /* \"#utility.yul\":7184:7251   */\n      tag_325\n      jump\t// in\n    tag_386:\n        /* \"#utility.yul\":7177:7251   */\n      swap2\n      pop\n        /* \"#utility.yul\":7260:7353   */\n      tag_387\n        /* \"#utility.yul\":7349:7352   */\n      dup3\n        /* \"#utility.yul\":7260:7353   */\n      tag_388\n      jump\t// in\n    tag_387:\n        /* \"#utility.yul\":7378:7380   */\n      0x40\n        /* \"#utility.yul\":7373:7376   */\n      dup3\n        /* \"#utility.yul\":7369:7381   */\n      add\n        /* \"#utility.yul\":7362:7381   */\n      swap1\n      pop\n        /* \"#utility.yul\":7021:7387   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7393:7759   */\n    tag_389:\n        /* \"#utility.yul\":7535:7538   */\n      0x00\n        /* \"#utility.yul\":7556:7623   */\n      tag_391\n        /* \"#utility.yul\":7620:7622   */\n      0x1f\n        /* \"#utility.yul\":7615:7618   */\n      dup4\n        /* \"#utility.yul\":7556:7623   */\n      tag_325\n      jump\t// in\n    tag_391:\n        /* \"#utility.yul\":7549:7623   */\n      swap2\n      pop\n        /* \"#utility.yul\":7632:7725   */\n      tag_392\n        /* \"#utility.yul\":7721:7724   */\n      dup3\n        /* \"#utility.yul\":7632:7725   */\n      tag_393\n      jump\t// in\n    tag_392:\n        /* \"#utility.yul\":7750:7752   */\n      0x20\n        /* \"#utility.yul\":7745:7748   */\n      dup3\n        /* \"#utility.yul\":7741:7753   */\n      add\n        /* \"#utility.yul\":7734:7753   */\n      swap1\n      pop\n        /* \"#utility.yul\":7393:7759   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7817:9221   */\n    tag_394:\n        /* \"#utility.yul\":7948:7952   */\n      0xe0\n        /* \"#utility.yul\":7943:7946   */\n      dup3\n        /* \"#utility.yul\":7939:7953   */\n      add\n        /* \"#utility.yul\":8037:8041   */\n      0x00\n        /* \"#utility.yul\":8030:8035   */\n      dup3\n        /* \"#utility.yul\":8026:8042   */\n      add\n        /* \"#utility.yul\":8020:8043   */\n      mload\n        /* \"#utility.yul\":8056:8119   */\n      tag_396\n        /* \"#utility.yul\":8113:8117   */\n      0x00\n        /* \"#utility.yul\":8108:8111   */\n      dup6\n        /* \"#utility.yul\":8104:8118   */\n      add\n        /* \"#utility.yul\":8090:8102   */\n      dup3\n        /* \"#utility.yul\":8056:8119   */\n      tag_397\n      jump\t// in\n    tag_396:\n        /* \"#utility.yul\":7963:8129   */\n      pop\n        /* \"#utility.yul\":8212:8216   */\n      0x20\n        /* \"#utility.yul\":8205:8210   */\n      dup3\n        /* \"#utility.yul\":8201:8217   */\n      add\n        /* \"#utility.yul\":8195:8218   */\n      mload\n        /* \"#utility.yul\":8231:8294   */\n      tag_398\n        /* \"#utility.yul\":8288:8292   */\n      0x20\n        /* \"#utility.yul\":8283:8286   */\n      dup6\n        /* \"#utility.yul\":8279:8293   */\n      add\n        /* \"#utility.yul\":8265:8277   */\n      dup3\n        /* \"#utility.yul\":8231:8294   */\n      tag_397\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":8139:8304   */\n      pop\n        /* \"#utility.yul\":8391:8395   */\n      0x40\n        /* \"#utility.yul\":8384:8389   */\n      dup3\n        /* \"#utility.yul\":8380:8396   */\n      add\n        /* \"#utility.yul\":8374:8397   */\n      mload\n        /* \"#utility.yul\":8410:8473   */\n      tag_399\n        /* \"#utility.yul\":8467:8471   */\n      0x40\n        /* \"#utility.yul\":8462:8465   */\n      dup6\n        /* \"#utility.yul\":8458:8472   */\n      add\n        /* \"#utility.yul\":8444:8456   */\n      dup3\n        /* \"#utility.yul\":8410:8473   */\n      tag_397\n      jump\t// in\n    tag_399:\n        /* \"#utility.yul\":8314:8483   */\n      pop\n        /* \"#utility.yul\":8572:8576   */\n      0x60\n        /* \"#utility.yul\":8565:8570   */\n      dup3\n        /* \"#utility.yul\":8561:8577   */\n      add\n        /* \"#utility.yul\":8555:8578   */\n      mload\n        /* \"#utility.yul\":8591:8654   */\n      tag_400\n        /* \"#utility.yul\":8648:8652   */\n      0x60\n        /* \"#utility.yul\":8643:8646   */\n      dup6\n        /* \"#utility.yul\":8639:8653   */\n      add\n        /* \"#utility.yul\":8625:8637   */\n      dup3\n        /* \"#utility.yul\":8591:8654   */\n      tag_397\n      jump\t// in\n    tag_400:\n        /* \"#utility.yul\":8493:8664   */\n      pop\n        /* \"#utility.yul\":8751:8755   */\n      0x80\n        /* \"#utility.yul\":8744:8749   */\n      dup3\n        /* \"#utility.yul\":8740:8756   */\n      add\n        /* \"#utility.yul\":8734:8757   */\n      mload\n        /* \"#utility.yul\":8770:8833   */\n      tag_401\n        /* \"#utility.yul\":8827:8831   */\n      0x80\n        /* \"#utility.yul\":8822:8825   */\n      dup6\n        /* \"#utility.yul\":8818:8832   */\n      add\n        /* \"#utility.yul\":8804:8816   */\n      dup3\n        /* \"#utility.yul\":8770:8833   */\n      tag_397\n      jump\t// in\n    tag_401:\n        /* \"#utility.yul\":8674:8843   */\n      pop\n        /* \"#utility.yul\":8937:8941   */\n      0xa0\n        /* \"#utility.yul\":8930:8935   */\n      dup3\n        /* \"#utility.yul\":8926:8942   */\n      add\n        /* \"#utility.yul\":8920:8943   */\n      mload\n        /* \"#utility.yul\":8956:9019   */\n      tag_402\n        /* \"#utility.yul\":9013:9017   */\n      0xa0\n        /* \"#utility.yul\":9008:9011   */\n      dup6\n        /* \"#utility.yul\":9004:9018   */\n      add\n        /* \"#utility.yul\":8990:9002   */\n      dup3\n        /* \"#utility.yul\":8956:9019   */\n      tag_397\n      jump\t// in\n    tag_402:\n        /* \"#utility.yul\":8853:9029   */\n      pop\n        /* \"#utility.yul\":9122:9126   */\n      0xc0\n        /* \"#utility.yul\":9115:9120   */\n      dup3\n        /* \"#utility.yul\":9111:9127   */\n      add\n        /* \"#utility.yul\":9105:9128   */\n      mload\n        /* \"#utility.yul\":9141:9204   */\n      tag_403\n        /* \"#utility.yul\":9198:9202   */\n      0xc0\n        /* \"#utility.yul\":9193:9196   */\n      dup6\n        /* \"#utility.yul\":9189:9203   */\n      add\n        /* \"#utility.yul\":9175:9187   */\n      dup3\n        /* \"#utility.yul\":9141:9204   */\n      tag_397\n      jump\t// in\n    tag_403:\n        /* \"#utility.yul\":9039:9214   */\n      pop\n        /* \"#utility.yul\":7917:9221   */\n      pop\n        /* \"#utility.yul\":7817:9221   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9297:10048   */\n    tag_404:\n        /* \"#utility.yul\":9456:9462   */\n      0x0120\n        /* \"#utility.yul\":9451:9454   */\n      dup3\n        /* \"#utility.yul\":9447:9463   */\n      add\n        /* \"#utility.yul\":9553:9557   */\n      0x00\n        /* \"#utility.yul\":9546:9551   */\n      dup3\n        /* \"#utility.yul\":9542:9558   */\n      add\n        /* \"#utility.yul\":9536:9559   */\n      mload\n        /* \"#utility.yul\":9572:9635   */\n      tag_406\n        /* \"#utility.yul\":9629:9633   */\n      0x00\n        /* \"#utility.yul\":9624:9627   */\n      dup6\n        /* \"#utility.yul\":9620:9634   */\n      add\n        /* \"#utility.yul\":9606:9618   */\n      dup3\n        /* \"#utility.yul\":9572:9635   */\n      tag_397\n      jump\t// in\n    tag_406:\n        /* \"#utility.yul\":9473:9645   */\n      pop\n        /* \"#utility.yul\":9730:9734   */\n      0x20\n        /* \"#utility.yul\":9723:9728   */\n      dup3\n        /* \"#utility.yul\":9719:9735   */\n      add\n        /* \"#utility.yul\":9713:9736   */\n      mload\n        /* \"#utility.yul\":9749:9812   */\n      tag_407\n        /* \"#utility.yul\":9806:9810   */\n      0x20\n        /* \"#utility.yul\":9801:9804   */\n      dup6\n        /* \"#utility.yul\":9797:9811   */\n      add\n        /* \"#utility.yul\":9783:9795   */\n      dup3\n        /* \"#utility.yul\":9749:9812   */\n      tag_397\n      jump\t// in\n    tag_407:\n        /* \"#utility.yul\":9655:9822   */\n      pop\n        /* \"#utility.yul\":9905:9909   */\n      0x40\n        /* \"#utility.yul\":9898:9903   */\n      dup3\n        /* \"#utility.yul\":9894:9910   */\n      add\n        /* \"#utility.yul\":9888:9911   */\n      mload\n        /* \"#utility.yul\":9924:10031   */\n      tag_408\n        /* \"#utility.yul\":10025:10029   */\n      0x40\n        /* \"#utility.yul\":10020:10023   */\n      dup6\n        /* \"#utility.yul\":10016:10030   */\n      add\n        /* \"#utility.yul\":10002:10014   */\n      dup3\n        /* \"#utility.yul\":9924:10031   */\n      tag_394\n      jump\t// in\n    tag_408:\n        /* \"#utility.yul\":9832:10041   */\n      pop\n        /* \"#utility.yul\":9425:10048   */\n      pop\n        /* \"#utility.yul\":9297:10048   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10054:10162   */\n    tag_397:\n        /* \"#utility.yul\":10131:10155   */\n      tag_410\n        /* \"#utility.yul\":10149:10154   */\n      dup2\n        /* \"#utility.yul\":10131:10155   */\n      tag_411\n      jump\t// in\n    tag_410:\n        /* \"#utility.yul\":10126:10129   */\n      dup3\n        /* \"#utility.yul\":10119:10156   */\n      mstore\n        /* \"#utility.yul\":10054:10162   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10168:10286   */\n    tag_412:\n        /* \"#utility.yul\":10255:10279   */\n      tag_414\n        /* \"#utility.yul\":10273:10278   */\n      dup2\n        /* \"#utility.yul\":10255:10279   */\n      tag_411\n      jump\t// in\n    tag_414:\n        /* \"#utility.yul\":10250:10253   */\n      dup3\n        /* \"#utility.yul\":10243:10280   */\n      mstore\n        /* \"#utility.yul\":10168:10286   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10292:10563   */\n    tag_248:\n        /* \"#utility.yul\":10422:10425   */\n      0x00\n        /* \"#utility.yul\":10444:10537   */\n      tag_416\n        /* \"#utility.yul\":10533:10536   */\n      dup3\n        /* \"#utility.yul\":10524:10530   */\n      dup5\n        /* \"#utility.yul\":10444:10537   */\n      tag_312\n      jump\t// in\n    tag_416:\n        /* \"#utility.yul\":10437:10537   */\n      swap2\n      pop\n        /* \"#utility.yul\":10554:10557   */\n      dup2\n        /* \"#utility.yul\":10547:10557   */\n      swap1\n      pop\n        /* \"#utility.yul\":10292:10563   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10569:10791   */\n    tag_50:\n        /* \"#utility.yul\":10662:10666   */\n      0x00\n        /* \"#utility.yul\":10700:10702   */\n      0x20\n        /* \"#utility.yul\":10689:10698   */\n      dup3\n        /* \"#utility.yul\":10685:10703   */\n      add\n        /* \"#utility.yul\":10677:10703   */\n      swap1\n      pop\n        /* \"#utility.yul\":10713:10784   */\n      tag_418\n        /* \"#utility.yul\":10781:10782   */\n      0x00\n        /* \"#utility.yul\":10770:10779   */\n      dup4\n        /* \"#utility.yul\":10766:10783   */\n      add\n        /* \"#utility.yul\":10757:10763   */\n      dup5\n        /* \"#utility.yul\":10713:10784   */\n      tag_304\n      jump\t// in\n    tag_418:\n        /* \"#utility.yul\":10569:10791   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10797:11239   */\n    tag_217:\n        /* \"#utility.yul\":10946:10950   */\n      0x00\n        /* \"#utility.yul\":10984:10986   */\n      0x60\n        /* \"#utility.yul\":10973:10982   */\n      dup3\n        /* \"#utility.yul\":10969:10987   */\n      add\n        /* \"#utility.yul\":10961:10987   */\n      swap1\n      pop\n        /* \"#utility.yul\":10997:11068   */\n      tag_420\n        /* \"#utility.yul\":11065:11066   */\n      0x00\n        /* \"#utility.yul\":11054:11063   */\n      dup4\n        /* \"#utility.yul\":11050:11067   */\n      add\n        /* \"#utility.yul\":11041:11047   */\n      dup7\n        /* \"#utility.yul\":10997:11068   */\n      tag_304\n      jump\t// in\n    tag_420:\n        /* \"#utility.yul\":11078:11150   */\n      tag_421\n        /* \"#utility.yul\":11146:11148   */\n      0x20\n        /* \"#utility.yul\":11135:11144   */\n      dup4\n        /* \"#utility.yul\":11131:11149   */\n      add\n        /* \"#utility.yul\":11122:11128   */\n      dup6\n        /* \"#utility.yul\":11078:11150   */\n      tag_304\n      jump\t// in\n    tag_421:\n        /* \"#utility.yul\":11160:11232   */\n      tag_422\n        /* \"#utility.yul\":11228:11230   */\n      0x40\n        /* \"#utility.yul\":11217:11226   */\n      dup4\n        /* \"#utility.yul\":11213:11231   */\n      add\n        /* \"#utility.yul\":11204:11210   */\n      dup5\n        /* \"#utility.yul\":11160:11232   */\n      tag_412\n      jump\t// in\n    tag_422:\n        /* \"#utility.yul\":10797:11239   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11245:11577   */\n    tag_200:\n        /* \"#utility.yul\":11366:11370   */\n      0x00\n        /* \"#utility.yul\":11404:11406   */\n      0x40\n        /* \"#utility.yul\":11393:11402   */\n      dup3\n        /* \"#utility.yul\":11389:11407   */\n      add\n        /* \"#utility.yul\":11381:11407   */\n      swap1\n      pop\n        /* \"#utility.yul\":11417:11488   */\n      tag_424\n        /* \"#utility.yul\":11485:11486   */\n      0x00\n        /* \"#utility.yul\":11474:11483   */\n      dup4\n        /* \"#utility.yul\":11470:11487   */\n      add\n        /* \"#utility.yul\":11461:11467   */\n      dup6\n        /* \"#utility.yul\":11417:11488   */\n      tag_304\n      jump\t// in\n    tag_424:\n        /* \"#utility.yul\":11498:11570   */\n      tag_425\n        /* \"#utility.yul\":11566:11568   */\n      0x20\n        /* \"#utility.yul\":11555:11564   */\n      dup4\n        /* \"#utility.yul\":11551:11569   */\n      add\n        /* \"#utility.yul\":11542:11548   */\n      dup5\n        /* \"#utility.yul\":11498:11570   */\n      tag_412\n      jump\t// in\n    tag_425:\n        /* \"#utility.yul\":11245:11577   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11583:11793   */\n    tag_30:\n        /* \"#utility.yul\":11670:11674   */\n      0x00\n        /* \"#utility.yul\":11708:11710   */\n      0x20\n        /* \"#utility.yul\":11697:11706   */\n      dup3\n        /* \"#utility.yul\":11693:11711   */\n      add\n        /* \"#utility.yul\":11685:11711   */\n      swap1\n      pop\n        /* \"#utility.yul\":11721:11786   */\n      tag_427\n        /* \"#utility.yul\":11783:11784   */\n      0x00\n        /* \"#utility.yul\":11772:11781   */\n      dup4\n        /* \"#utility.yul\":11768:11785   */\n      add\n        /* \"#utility.yul\":11759:11765   */\n      dup5\n        /* \"#utility.yul\":11721:11786   */\n      tag_308\n      jump\t// in\n    tag_427:\n        /* \"#utility.yul\":11583:11793   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11799:12112   */\n    tag_270:\n        /* \"#utility.yul\":11912:11916   */\n      0x00\n        /* \"#utility.yul\":11950:11952   */\n      0x20\n        /* \"#utility.yul\":11939:11948   */\n      dup3\n        /* \"#utility.yul\":11935:11953   */\n      add\n        /* \"#utility.yul\":11927:11953   */\n      swap1\n      pop\n        /* \"#utility.yul\":11999:12008   */\n      dup2\n        /* \"#utility.yul\":11993:11997   */\n      dup2\n        /* \"#utility.yul\":11989:12009   */\n      sub\n        /* \"#utility.yul\":11985:11986   */\n      0x00\n        /* \"#utility.yul\":11974:11983   */\n      dup4\n        /* \"#utility.yul\":11970:11987   */\n      add\n        /* \"#utility.yul\":11963:12010   */\n      mstore\n        /* \"#utility.yul\":12027:12105   */\n      tag_429\n        /* \"#utility.yul\":12100:12104   */\n      dup2\n        /* \"#utility.yul\":12091:12097   */\n      dup5\n        /* \"#utility.yul\":12027:12105   */\n      tag_320\n      jump\t// in\n    tag_429:\n        /* \"#utility.yul\":12019:12105   */\n      swap1\n      pop\n        /* \"#utility.yul\":11799:12112   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12118:12537   */\n    tag_126:\n        /* \"#utility.yul\":12284:12288   */\n      0x00\n        /* \"#utility.yul\":12322:12324   */\n      0x20\n        /* \"#utility.yul\":12311:12320   */\n      dup3\n        /* \"#utility.yul\":12307:12325   */\n      add\n        /* \"#utility.yul\":12299:12325   */\n      swap1\n      pop\n        /* \"#utility.yul\":12371:12380   */\n      dup2\n        /* \"#utility.yul\":12365:12369   */\n      dup2\n        /* \"#utility.yul\":12361:12381   */\n      sub\n        /* \"#utility.yul\":12357:12358   */\n      0x00\n        /* \"#utility.yul\":12346:12355   */\n      dup4\n        /* \"#utility.yul\":12342:12359   */\n      add\n        /* \"#utility.yul\":12335:12382   */\n      mstore\n        /* \"#utility.yul\":12399:12530   */\n      tag_431\n        /* \"#utility.yul\":12525:12529   */\n      dup2\n        /* \"#utility.yul\":12399:12530   */\n      tag_329\n      jump\t// in\n    tag_431:\n        /* \"#utility.yul\":12391:12530   */\n      swap1\n      pop\n        /* \"#utility.yul\":12118:12537   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12543:12962   */\n    tag_181:\n        /* \"#utility.yul\":12709:12713   */\n      0x00\n        /* \"#utility.yul\":12747:12749   */\n      0x20\n        /* \"#utility.yul\":12736:12745   */\n      dup3\n        /* \"#utility.yul\":12732:12750   */\n      add\n        /* \"#utility.yul\":12724:12750   */\n      swap1\n      pop\n        /* \"#utility.yul\":12796:12805   */\n      dup2\n        /* \"#utility.yul\":12790:12794   */\n      dup2\n        /* \"#utility.yul\":12786:12806   */\n      sub\n        /* \"#utility.yul\":12782:12783   */\n      0x00\n        /* \"#utility.yul\":12771:12780   */\n      dup4\n        /* \"#utility.yul\":12767:12784   */\n      add\n        /* \"#utility.yul\":12760:12807   */\n      mstore\n        /* \"#utility.yul\":12824:12955   */\n      tag_433\n        /* \"#utility.yul\":12950:12954   */\n      dup2\n        /* \"#utility.yul\":12824:12955   */\n      tag_334\n      jump\t// in\n    tag_433:\n        /* \"#utility.yul\":12816:12955   */\n      swap1\n      pop\n        /* \"#utility.yul\":12543:12962   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12968:13387   */\n    tag_83:\n        /* \"#utility.yul\":13134:13138   */\n      0x00\n        /* \"#utility.yul\":13172:13174   */\n      0x20\n        /* \"#utility.yul\":13161:13170   */\n      dup3\n        /* \"#utility.yul\":13157:13175   */\n      add\n        /* \"#utility.yul\":13149:13175   */\n      swap1\n      pop\n        /* \"#utility.yul\":13221:13230   */\n      dup2\n        /* \"#utility.yul\":13215:13219   */\n      dup2\n        /* \"#utility.yul\":13211:13231   */\n      sub\n        /* \"#utility.yul\":13207:13208   */\n      0x00\n        /* \"#utility.yul\":13196:13205   */\n      dup4\n        /* \"#utility.yul\":13192:13209   */\n      add\n        /* \"#utility.yul\":13185:13232   */\n      mstore\n        /* \"#utility.yul\":13249:13380   */\n      tag_435\n        /* \"#utility.yul\":13375:13379   */\n      dup2\n        /* \"#utility.yul\":13249:13380   */\n      tag_339\n      jump\t// in\n    tag_435:\n        /* \"#utility.yul\":13241:13380   */\n      swap1\n      pop\n        /* \"#utility.yul\":12968:13387   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13393:13812   */\n    tag_246:\n        /* \"#utility.yul\":13559:13563   */\n      0x00\n        /* \"#utility.yul\":13597:13599   */\n      0x20\n        /* \"#utility.yul\":13586:13595   */\n      dup3\n        /* \"#utility.yul\":13582:13600   */\n      add\n        /* \"#utility.yul\":13574:13600   */\n      swap1\n      pop\n        /* \"#utility.yul\":13646:13655   */\n      dup2\n        /* \"#utility.yul\":13640:13644   */\n      dup2\n        /* \"#utility.yul\":13636:13656   */\n      sub\n        /* \"#utility.yul\":13632:13633   */\n      0x00\n        /* \"#utility.yul\":13621:13630   */\n      dup4\n        /* \"#utility.yul\":13617:13634   */\n      add\n        /* \"#utility.yul\":13610:13657   */\n      mstore\n        /* \"#utility.yul\":13674:13805   */\n      tag_437\n        /* \"#utility.yul\":13800:13804   */\n      dup2\n        /* \"#utility.yul\":13674:13805   */\n      tag_344\n      jump\t// in\n    tag_437:\n        /* \"#utility.yul\":13666:13805   */\n      swap1\n      pop\n        /* \"#utility.yul\":13393:13812   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13818:14237   */\n    tag_196:\n        /* \"#utility.yul\":13984:13988   */\n      0x00\n        /* \"#utility.yul\":14022:14024   */\n      0x20\n        /* \"#utility.yul\":14011:14020   */\n      dup3\n        /* \"#utility.yul\":14007:14025   */\n      add\n        /* \"#utility.yul\":13999:14025   */\n      swap1\n      pop\n        /* \"#utility.yul\":14071:14080   */\n      dup2\n        /* \"#utility.yul\":14065:14069   */\n      dup2\n        /* \"#utility.yul\":14061:14081   */\n      sub\n        /* \"#utility.yul\":14057:14058   */\n      0x00\n        /* \"#utility.yul\":14046:14055   */\n      dup4\n        /* \"#utility.yul\":14042:14059   */\n      add\n        /* \"#utility.yul\":14035:14082   */\n      mstore\n        /* \"#utility.yul\":14099:14230   */\n      tag_439\n        /* \"#utility.yul\":14225:14229   */\n      dup2\n        /* \"#utility.yul\":14099:14230   */\n      tag_349\n      jump\t// in\n    tag_439:\n        /* \"#utility.yul\":14091:14230   */\n      swap1\n      pop\n        /* \"#utility.yul\":13818:14237   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14243:14662   */\n    tag_208:\n        /* \"#utility.yul\":14409:14413   */\n      0x00\n        /* \"#utility.yul\":14447:14449   */\n      0x20\n        /* \"#utility.yul\":14436:14445   */\n      dup3\n        /* \"#utility.yul\":14432:14450   */\n      add\n        /* \"#utility.yul\":14424:14450   */\n      swap1\n      pop\n        /* \"#utility.yul\":14496:14505   */\n      dup2\n        /* \"#utility.yul\":14490:14494   */\n      dup2\n        /* \"#utility.yul\":14486:14506   */\n      sub\n        /* \"#utility.yul\":14482:14483   */\n      0x00\n        /* \"#utility.yul\":14471:14480   */\n      dup4\n        /* \"#utility.yul\":14467:14484   */\n      add\n        /* \"#utility.yul\":14460:14507   */\n      mstore\n        /* \"#utility.yul\":14524:14655   */\n      tag_441\n        /* \"#utility.yul\":14650:14654   */\n      dup2\n        /* \"#utility.yul\":14524:14655   */\n      tag_354\n      jump\t// in\n    tag_441:\n        /* \"#utility.yul\":14516:14655   */\n      swap1\n      pop\n        /* \"#utility.yul\":14243:14662   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14668:15087   */\n    tag_110:\n        /* \"#utility.yul\":14834:14838   */\n      0x00\n        /* \"#utility.yul\":14872:14874   */\n      0x20\n        /* \"#utility.yul\":14861:14870   */\n      dup3\n        /* \"#utility.yul\":14857:14875   */\n      add\n        /* \"#utility.yul\":14849:14875   */\n      swap1\n      pop\n        /* \"#utility.yul\":14921:14930   */\n      dup2\n        /* \"#utility.yul\":14915:14919   */\n      dup2\n        /* \"#utility.yul\":14911:14931   */\n      sub\n        /* \"#utility.yul\":14907:14908   */\n      0x00\n        /* \"#utility.yul\":14896:14905   */\n      dup4\n        /* \"#utility.yul\":14892:14909   */\n      add\n        /* \"#utility.yul\":14885:14932   */\n      mstore\n        /* \"#utility.yul\":14949:15080   */\n      tag_443\n        /* \"#utility.yul\":15075:15079   */\n      dup2\n        /* \"#utility.yul\":14949:15080   */\n      tag_359\n      jump\t// in\n    tag_443:\n        /* \"#utility.yul\":14941:15080   */\n      swap1\n      pop\n        /* \"#utility.yul\":14668:15087   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15093:15512   */\n    tag_129:\n        /* \"#utility.yul\":15259:15263   */\n      0x00\n        /* \"#utility.yul\":15297:15299   */\n      0x20\n        /* \"#utility.yul\":15286:15295   */\n      dup3\n        /* \"#utility.yul\":15282:15300   */\n      add\n        /* \"#utility.yul\":15274:15300   */\n      swap1\n      pop\n        /* \"#utility.yul\":15346:15355   */\n      dup2\n        /* \"#utility.yul\":15340:15344   */\n      dup2\n        /* \"#utility.yul\":15336:15356   */\n      sub\n        /* \"#utility.yul\":15332:15333   */\n      0x00\n        /* \"#utility.yul\":15321:15330   */\n      dup4\n        /* \"#utility.yul\":15317:15334   */\n      add\n        /* \"#utility.yul\":15310:15357   */\n      mstore\n        /* \"#utility.yul\":15374:15505   */\n      tag_445\n        /* \"#utility.yul\":15500:15504   */\n      dup2\n        /* \"#utility.yul\":15374:15505   */\n      tag_364\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":15366:15505   */\n      swap1\n      pop\n        /* \"#utility.yul\":15093:15512   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15518:15937   */\n    tag_143:\n        /* \"#utility.yul\":15684:15688   */\n      0x00\n        /* \"#utility.yul\":15722:15724   */\n      0x20\n        /* \"#utility.yul\":15711:15720   */\n      dup3\n        /* \"#utility.yul\":15707:15725   */\n      add\n        /* \"#utility.yul\":15699:15725   */\n      swap1\n      pop\n        /* \"#utility.yul\":15771:15780   */\n      dup2\n        /* \"#utility.yul\":15765:15769   */\n      dup2\n        /* \"#utility.yul\":15761:15781   */\n      sub\n        /* \"#utility.yul\":15757:15758   */\n      0x00\n        /* \"#utility.yul\":15746:15755   */\n      dup4\n        /* \"#utility.yul\":15742:15759   */\n      add\n        /* \"#utility.yul\":15735:15782   */\n      mstore\n        /* \"#utility.yul\":15799:15930   */\n      tag_447\n        /* \"#utility.yul\":15925:15929   */\n      dup2\n        /* \"#utility.yul\":15799:15930   */\n      tag_369\n      jump\t// in\n    tag_447:\n        /* \"#utility.yul\":15791:15930   */\n      swap1\n      pop\n        /* \"#utility.yul\":15518:15937   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15943:16362   */\n    tag_174:\n        /* \"#utility.yul\":16109:16113   */\n      0x00\n        /* \"#utility.yul\":16147:16149   */\n      0x20\n        /* \"#utility.yul\":16136:16145   */\n      dup3\n        /* \"#utility.yul\":16132:16150   */\n      add\n        /* \"#utility.yul\":16124:16150   */\n      swap1\n      pop\n        /* \"#utility.yul\":16196:16205   */\n      dup2\n        /* \"#utility.yul\":16190:16194   */\n      dup2\n        /* \"#utility.yul\":16186:16206   */\n      sub\n        /* \"#utility.yul\":16182:16183   */\n      0x00\n        /* \"#utility.yul\":16171:16180   */\n      dup4\n        /* \"#utility.yul\":16167:16184   */\n      add\n        /* \"#utility.yul\":16160:16207   */\n      mstore\n        /* \"#utility.yul\":16224:16355   */\n      tag_449\n        /* \"#utility.yul\":16350:16354   */\n      dup2\n        /* \"#utility.yul\":16224:16355   */\n      tag_374\n      jump\t// in\n    tag_449:\n        /* \"#utility.yul\":16216:16355   */\n      swap1\n      pop\n        /* \"#utility.yul\":15943:16362   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16368:16787   */\n    tag_261:\n        /* \"#utility.yul\":16534:16538   */\n      0x00\n        /* \"#utility.yul\":16572:16574   */\n      0x20\n        /* \"#utility.yul\":16561:16570   */\n      dup3\n        /* \"#utility.yul\":16557:16575   */\n      add\n        /* \"#utility.yul\":16549:16575   */\n      swap1\n      pop\n        /* \"#utility.yul\":16621:16630   */\n      dup2\n        /* \"#utility.yul\":16615:16619   */\n      dup2\n        /* \"#utility.yul\":16611:16631   */\n      sub\n        /* \"#utility.yul\":16607:16608   */\n      0x00\n        /* \"#utility.yul\":16596:16605   */\n      dup4\n        /* \"#utility.yul\":16592:16609   */\n      add\n        /* \"#utility.yul\":16585:16632   */\n      mstore\n        /* \"#utility.yul\":16649:16780   */\n      tag_451\n        /* \"#utility.yul\":16775:16779   */\n      dup2\n        /* \"#utility.yul\":16649:16780   */\n      tag_379\n      jump\t// in\n    tag_451:\n        /* \"#utility.yul\":16641:16780   */\n      swap1\n      pop\n        /* \"#utility.yul\":16368:16787   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16793:17212   */\n    tag_238:\n        /* \"#utility.yul\":16959:16963   */\n      0x00\n        /* \"#utility.yul\":16997:16999   */\n      0x20\n        /* \"#utility.yul\":16986:16995   */\n      dup3\n        /* \"#utility.yul\":16982:17000   */\n      add\n        /* \"#utility.yul\":16974:17000   */\n      swap1\n      pop\n        /* \"#utility.yul\":17046:17055   */\n      dup2\n        /* \"#utility.yul\":17040:17044   */\n      dup2\n        /* \"#utility.yul\":17036:17056   */\n      sub\n        /* \"#utility.yul\":17032:17033   */\n      0x00\n        /* \"#utility.yul\":17021:17030   */\n      dup4\n        /* \"#utility.yul\":17017:17034   */\n      add\n        /* \"#utility.yul\":17010:17057   */\n      mstore\n        /* \"#utility.yul\":17074:17205   */\n      tag_453\n        /* \"#utility.yul\":17200:17204   */\n      dup2\n        /* \"#utility.yul\":17074:17205   */\n      tag_384\n      jump\t// in\n    tag_453:\n        /* \"#utility.yul\":17066:17205   */\n      swap1\n      pop\n        /* \"#utility.yul\":16793:17212   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17218:17637   */\n    tag_213:\n        /* \"#utility.yul\":17384:17388   */\n      0x00\n        /* \"#utility.yul\":17422:17424   */\n      0x20\n        /* \"#utility.yul\":17411:17420   */\n      dup3\n        /* \"#utility.yul\":17407:17425   */\n      add\n        /* \"#utility.yul\":17399:17425   */\n      swap1\n      pop\n        /* \"#utility.yul\":17471:17480   */\n      dup2\n        /* \"#utility.yul\":17465:17469   */\n      dup2\n        /* \"#utility.yul\":17461:17481   */\n      sub\n        /* \"#utility.yul\":17457:17458   */\n      0x00\n        /* \"#utility.yul\":17446:17455   */\n      dup4\n        /* \"#utility.yul\":17442:17459   */\n      add\n        /* \"#utility.yul\":17435:17482   */\n      mstore\n        /* \"#utility.yul\":17499:17630   */\n      tag_455\n        /* \"#utility.yul\":17625:17629   */\n      dup2\n        /* \"#utility.yul\":17499:17630   */\n      tag_389\n      jump\t// in\n    tag_455:\n        /* \"#utility.yul\":17491:17630   */\n      swap1\n      pop\n        /* \"#utility.yul\":17218:17637   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17643:17990   */\n    tag_26:\n        /* \"#utility.yul\":17798:17802   */\n      0x00\n        /* \"#utility.yul\":17836:17839   */\n      0x0120\n        /* \"#utility.yul\":17825:17834   */\n      dup3\n        /* \"#utility.yul\":17821:17840   */\n      add\n        /* \"#utility.yul\":17813:17840   */\n      swap1\n      pop\n        /* \"#utility.yul\":17850:17983   */\n      tag_457\n        /* \"#utility.yul\":17980:17981   */\n      0x00\n        /* \"#utility.yul\":17969:17978   */\n      dup4\n        /* \"#utility.yul\":17965:17982   */\n      add\n        /* \"#utility.yul\":17956:17962   */\n      dup5\n        /* \"#utility.yul\":17850:17983   */\n      tag_404\n      jump\t// in\n    tag_457:\n        /* \"#utility.yul\":17643:17990   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17996:18218   */\n    tag_42:\n        /* \"#utility.yul\":18089:18093   */\n      0x00\n        /* \"#utility.yul\":18127:18129   */\n      0x20\n        /* \"#utility.yul\":18116:18125   */\n      dup3\n        /* \"#utility.yul\":18112:18130   */\n      add\n        /* \"#utility.yul\":18104:18130   */\n      swap1\n      pop\n        /* \"#utility.yul\":18140:18211   */\n      tag_459\n        /* \"#utility.yul\":18208:18209   */\n      0x00\n        /* \"#utility.yul\":18197:18206   */\n      dup4\n        /* \"#utility.yul\":18193:18210   */\n      add\n        /* \"#utility.yul\":18184:18190   */\n      dup5\n        /* \"#utility.yul\":18140:18211   */\n      tag_412\n      jump\t// in\n    tag_459:\n        /* \"#utility.yul\":17996:18218   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18224:18666   */\n    tag_135:\n        /* \"#utility.yul\":18373:18377   */\n      0x00\n        /* \"#utility.yul\":18411:18413   */\n      0x60\n        /* \"#utility.yul\":18400:18409   */\n      dup3\n        /* \"#utility.yul\":18396:18414   */\n      add\n        /* \"#utility.yul\":18388:18414   */\n      swap1\n      pop\n        /* \"#utility.yul\":18424:18495   */\n      tag_461\n        /* \"#utility.yul\":18492:18493   */\n      0x00\n        /* \"#utility.yul\":18481:18490   */\n      dup4\n        /* \"#utility.yul\":18477:18494   */\n      add\n        /* \"#utility.yul\":18468:18474   */\n      dup7\n        /* \"#utility.yul\":18424:18495   */\n      tag_412\n      jump\t// in\n    tag_461:\n        /* \"#utility.yul\":18505:18577   */\n      tag_462\n        /* \"#utility.yul\":18573:18575   */\n      0x20\n        /* \"#utility.yul\":18562:18571   */\n      dup4\n        /* \"#utility.yul\":18558:18576   */\n      add\n        /* \"#utility.yul\":18549:18555   */\n      dup6\n        /* \"#utility.yul\":18505:18577   */\n      tag_412\n      jump\t// in\n    tag_462:\n        /* \"#utility.yul\":18587:18659   */\n      tag_463\n        /* \"#utility.yul\":18655:18657   */\n      0x40\n        /* \"#utility.yul\":18644:18653   */\n      dup4\n        /* \"#utility.yul\":18640:18658   */\n      add\n        /* \"#utility.yul\":18631:18637   */\n      dup5\n        /* \"#utility.yul\":18587:18659   */\n      tag_412\n      jump\t// in\n    tag_463:\n        /* \"#utility.yul\":18224:18666   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18753:18851   */\n    tag_315:\n        /* \"#utility.yul\":18804:18810   */\n      0x00\n        /* \"#utility.yul\":18838:18843   */\n      dup2\n        /* \"#utility.yul\":18832:18844   */\n      mload\n        /* \"#utility.yul\":18822:18844   */\n      swap1\n      pop\n        /* \"#utility.yul\":18753:18851   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18857:18956   */\n    tag_323:\n        /* \"#utility.yul\":18909:18915   */\n      0x00\n        /* \"#utility.yul\":18943:18948   */\n      dup2\n        /* \"#utility.yul\":18937:18949   */\n      mload\n        /* \"#utility.yul\":18927:18949   */\n      swap1\n      pop\n        /* \"#utility.yul\":18857:18956   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18962:19109   */\n    tag_317:\n        /* \"#utility.yul\":19063:19074   */\n      0x00\n        /* \"#utility.yul\":19100:19103   */\n      dup2\n        /* \"#utility.yul\":19085:19103   */\n      swap1\n      pop\n        /* \"#utility.yul\":18962:19109   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19115:19284   */\n    tag_325:\n        /* \"#utility.yul\":19199:19210   */\n      0x00\n        /* \"#utility.yul\":19233:19239   */\n      dup3\n        /* \"#utility.yul\":19228:19231   */\n      dup3\n        /* \"#utility.yul\":19221:19240   */\n      mstore\n        /* \"#utility.yul\":19273:19277   */\n      0x20\n        /* \"#utility.yul\":19268:19271   */\n      dup3\n        /* \"#utility.yul\":19264:19278   */\n      add\n        /* \"#utility.yul\":19249:19278   */\n      swap1\n      pop\n        /* \"#utility.yul\":19115:19284   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19290:19595   */\n    tag_94:\n        /* \"#utility.yul\":19330:19333   */\n      0x00\n        /* \"#utility.yul\":19349:19369   */\n      tag_471\n        /* \"#utility.yul\":19367:19368   */\n      dup3\n        /* \"#utility.yul\":19349:19369   */\n      tag_411\n      jump\t// in\n    tag_471:\n        /* \"#utility.yul\":19344:19369   */\n      swap2\n      pop\n        /* \"#utility.yul\":19383:19403   */\n      tag_472\n        /* \"#utility.yul\":19401:19402   */\n      dup4\n        /* \"#utility.yul\":19383:19403   */\n      tag_411\n      jump\t// in\n    tag_472:\n        /* \"#utility.yul\":19378:19403   */\n      swap3\n      pop\n        /* \"#utility.yul\":19537:19538   */\n      dup3\n        /* \"#utility.yul\":19469:19535   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":19465:19539   */\n      sub\n        /* \"#utility.yul\":19462:19463   */\n      dup3\n        /* \"#utility.yul\":19459:19540   */\n      gt\n        /* \"#utility.yul\":19456:19563   */\n      iszero\n      tag_473\n      jumpi\n        /* \"#utility.yul\":19543:19561   */\n      tag_474\n      tag_475\n      jump\t// in\n    tag_474:\n        /* \"#utility.yul\":19456:19563   */\n    tag_473:\n        /* \"#utility.yul\":19587:19588   */\n      dup3\n        /* \"#utility.yul\":19584:19585   */\n      dup3\n        /* \"#utility.yul\":19580:19589   */\n      add\n        /* \"#utility.yul\":19573:19589   */\n      swap1\n      pop\n        /* \"#utility.yul\":19290:19595   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19601:19786   */\n    tag_90:\n        /* \"#utility.yul\":19641:19642   */\n      0x00\n        /* \"#utility.yul\":19658:19678   */\n      tag_477\n        /* \"#utility.yul\":19676:19677   */\n      dup3\n        /* \"#utility.yul\":19658:19678   */\n      tag_411\n      jump\t// in\n    tag_477:\n        /* \"#utility.yul\":19653:19678   */\n      swap2\n      pop\n        /* \"#utility.yul\":19692:19712   */\n      tag_478\n        /* \"#utility.yul\":19710:19711   */\n      dup4\n        /* \"#utility.yul\":19692:19712   */\n      tag_411\n      jump\t// in\n    tag_478:\n        /* \"#utility.yul\":19687:19712   */\n      swap3\n      pop\n        /* \"#utility.yul\":19731:19732   */\n      dup3\n        /* \"#utility.yul\":19721:19756   */\n      tag_479\n      jumpi\n        /* \"#utility.yul\":19736:19754   */\n      tag_480\n      tag_481\n      jump\t// in\n    tag_480:\n        /* \"#utility.yul\":19721:19756   */\n    tag_479:\n        /* \"#utility.yul\":19778:19779   */\n      dup3\n        /* \"#utility.yul\":19775:19776   */\n      dup3\n        /* \"#utility.yul\":19771:19780   */\n      div\n        /* \"#utility.yul\":19766:19780   */\n      swap1\n      pop\n        /* \"#utility.yul\":19601:19786   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19792:20140   */\n    tag_88:\n        /* \"#utility.yul\":19832:19839   */\n      0x00\n        /* \"#utility.yul\":19855:19875   */\n      tag_483\n        /* \"#utility.yul\":19873:19874   */\n      dup3\n        /* \"#utility.yul\":19855:19875   */\n      tag_411\n      jump\t// in\n    tag_483:\n        /* \"#utility.yul\":19850:19875   */\n      swap2\n      pop\n        /* \"#utility.yul\":19889:19909   */\n      tag_484\n        /* \"#utility.yul\":19907:19908   */\n      dup4\n        /* \"#utility.yul\":19889:19909   */\n      tag_411\n      jump\t// in\n    tag_484:\n        /* \"#utility.yul\":19884:19909   */\n      swap3\n      pop\n        /* \"#utility.yul\":20077:20078   */\n      dup2\n        /* \"#utility.yul\":20009:20075   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":20005:20079   */\n      div\n        /* \"#utility.yul\":20002:20003   */\n      dup4\n        /* \"#utility.yul\":19999:20080   */\n      gt\n        /* \"#utility.yul\":19994:19995   */\n      dup3\n        /* \"#utility.yul\":19987:19996   */\n      iszero\n        /* \"#utility.yul\":19980:19997   */\n      iszero\n        /* \"#utility.yul\":19976:20081   */\n      and\n        /* \"#utility.yul\":19973:20104   */\n      iszero\n      tag_485\n      jumpi\n        /* \"#utility.yul\":20084:20102   */\n      tag_486\n      tag_475\n      jump\t// in\n    tag_486:\n        /* \"#utility.yul\":19973:20104   */\n    tag_485:\n        /* \"#utility.yul\":20132:20133   */\n      dup3\n        /* \"#utility.yul\":20129:20130   */\n      dup3\n        /* \"#utility.yul\":20125:20134   */\n      mul\n        /* \"#utility.yul\":20114:20134   */\n      swap1\n      pop\n        /* \"#utility.yul\":19792:20140   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20146:20337   */\n    tag_149:\n        /* \"#utility.yul\":20186:20190   */\n      0x00\n        /* \"#utility.yul\":20206:20226   */\n      tag_488\n        /* \"#utility.yul\":20224:20225   */\n      dup3\n        /* \"#utility.yul\":20206:20226   */\n      tag_411\n      jump\t// in\n    tag_488:\n        /* \"#utility.yul\":20201:20226   */\n      swap2\n      pop\n        /* \"#utility.yul\":20240:20260   */\n      tag_489\n        /* \"#utility.yul\":20258:20259   */\n      dup4\n        /* \"#utility.yul\":20240:20260   */\n      tag_411\n      jump\t// in\n    tag_489:\n        /* \"#utility.yul\":20235:20260   */\n      swap3\n      pop\n        /* \"#utility.yul\":20279:20280   */\n      dup3\n        /* \"#utility.yul\":20276:20277   */\n      dup3\n        /* \"#utility.yul\":20273:20281   */\n      lt\n        /* \"#utility.yul\":20270:20304   */\n      iszero\n      tag_490\n      jumpi\n        /* \"#utility.yul\":20284:20302   */\n      tag_491\n      tag_475\n      jump\t// in\n    tag_491:\n        /* \"#utility.yul\":20270:20304   */\n    tag_490:\n        /* \"#utility.yul\":20329:20330   */\n      dup3\n        /* \"#utility.yul\":20326:20327   */\n      dup3\n        /* \"#utility.yul\":20322:20331   */\n      sub\n        /* \"#utility.yul\":20314:20331   */\n      swap1\n      pop\n        /* \"#utility.yul\":20146:20337   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20343:20439   */\n    tag_307:\n        /* \"#utility.yul\":20380:20387   */\n      0x00\n        /* \"#utility.yul\":20409:20433   */\n      tag_493\n        /* \"#utility.yul\":20427:20432   */\n      dup3\n        /* \"#utility.yul\":20409:20433   */\n      tag_494\n      jump\t// in\n    tag_493:\n        /* \"#utility.yul\":20398:20433   */\n      swap1\n      pop\n        /* \"#utility.yul\":20343:20439   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20445:20535   */\n    tag_311:\n        /* \"#utility.yul\":20479:20486   */\n      0x00\n        /* \"#utility.yul\":20522:20527   */\n      dup2\n        /* \"#utility.yul\":20515:20528   */\n      iszero\n        /* \"#utility.yul\":20508:20529   */\n      iszero\n        /* \"#utility.yul\":20497:20529   */\n      swap1\n      pop\n        /* \"#utility.yul\":20445:20535   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20541:20667   */\n    tag_494:\n        /* \"#utility.yul\":20578:20585   */\n      0x00\n        /* \"#utility.yul\":20618:20660   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":20611:20616   */\n      dup3\n        /* \"#utility.yul\":20607:20661   */\n      and\n        /* \"#utility.yul\":20596:20661   */\n      swap1\n      pop\n        /* \"#utility.yul\":20541:20667   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20673:20750   */\n    tag_411:\n        /* \"#utility.yul\":20710:20717   */\n      0x00\n        /* \"#utility.yul\":20739:20744   */\n      dup2\n        /* \"#utility.yul\":20728:20744   */\n      swap1\n      pop\n        /* \"#utility.yul\":20673:20750   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20756:21063   */\n    tag_319:\n        /* \"#utility.yul\":20824:20825   */\n      0x00\n        /* \"#utility.yul\":20834:20947   */\n    tag_499:\n        /* \"#utility.yul\":20848:20854   */\n      dup4\n        /* \"#utility.yul\":20845:20846   */\n      dup2\n        /* \"#utility.yul\":20842:20855   */\n      lt\n        /* \"#utility.yul\":20834:20947   */\n      iszero\n      tag_501\n      jumpi\n        /* \"#utility.yul\":20933:20934   */\n      dup1\n        /* \"#utility.yul\":20928:20931   */\n      dup3\n        /* \"#utility.yul\":20924:20935   */\n      add\n        /* \"#utility.yul\":20918:20936   */\n      mload\n        /* \"#utility.yul\":20914:20915   */\n      dup2\n        /* \"#utility.yul\":20909:20912   */\n      dup5\n        /* \"#utility.yul\":20905:20916   */\n      add\n        /* \"#utility.yul\":20898:20937   */\n      mstore\n        /* \"#utility.yul\":20870:20872   */\n      0x20\n        /* \"#utility.yul\":20867:20868   */\n      dup2\n        /* \"#utility.yul\":20863:20873   */\n      add\n        /* \"#utility.yul\":20858:20873   */\n      swap1\n      pop\n        /* \"#utility.yul\":20834:20947   */\n      jump(tag_499)\n    tag_501:\n        /* \"#utility.yul\":20965:20971   */\n      dup4\n        /* \"#utility.yul\":20962:20963   */\n      dup2\n        /* \"#utility.yul\":20959:20972   */\n      gt\n        /* \"#utility.yul\":20956:21057   */\n      iszero\n      tag_502\n      jumpi\n        /* \"#utility.yul\":21045:21046   */\n      0x00\n        /* \"#utility.yul\":21036:21042   */\n      dup5\n        /* \"#utility.yul\":21031:21034   */\n      dup5\n        /* \"#utility.yul\":21027:21043   */\n      add\n        /* \"#utility.yul\":21020:21047   */\n      mstore\n        /* \"#utility.yul\":20956:21057   */\n    tag_502:\n        /* \"#utility.yul\":20805:21063   */\n      pop\n        /* \"#utility.yul\":20756:21063   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21069:21249   */\n    tag_475:\n        /* \"#utility.yul\":21117:21194   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":21114:21115   */\n      0x00\n        /* \"#utility.yul\":21107:21195   */\n      mstore\n        /* \"#utility.yul\":21214:21218   */\n      0x11\n        /* \"#utility.yul\":21211:21212   */\n      0x04\n        /* \"#utility.yul\":21204:21219   */\n      mstore\n        /* \"#utility.yul\":21238:21242   */\n      0x24\n        /* \"#utility.yul\":21235:21236   */\n      0x00\n        /* \"#utility.yul\":21228:21243   */\n      revert\n        /* \"#utility.yul\":21255:21435   */\n    tag_481:\n        /* \"#utility.yul\":21303:21380   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":21300:21301   */\n      0x00\n        /* \"#utility.yul\":21293:21381   */\n      mstore\n        /* \"#utility.yul\":21400:21404   */\n      0x12\n        /* \"#utility.yul\":21397:21398   */\n      0x04\n        /* \"#utility.yul\":21390:21405   */\n      mstore\n        /* \"#utility.yul\":21424:21428   */\n      0x24\n        /* \"#utility.yul\":21421:21422   */\n      0x00\n        /* \"#utility.yul\":21414:21429   */\n      revert\n        /* \"#utility.yul\":21564:21681   */\n    tag_289:\n        /* \"#utility.yul\":21673:21674   */\n      0x00\n        /* \"#utility.yul\":21670:21671   */\n      dup1\n        /* \"#utility.yul\":21663:21675   */\n      revert\n        /* \"#utility.yul\":21687:21789   */\n    tag_328:\n        /* \"#utility.yul\":21728:21734   */\n      0x00\n        /* \"#utility.yul\":21779:21781   */\n      0x1f\n        /* \"#utility.yul\":21775:21782   */\n      not\n        /* \"#utility.yul\":21770:21772   */\n      0x1f\n        /* \"#utility.yul\":21763:21768   */\n      dup4\n        /* \"#utility.yul\":21759:21773   */\n      add\n        /* \"#utility.yul\":21755:21783   */\n      and\n        /* \"#utility.yul\":21745:21783   */\n      swap1\n      pop\n        /* \"#utility.yul\":21687:21789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21795:21961   */\n    tag_333:\n        /* \"#utility.yul\":21935:21953   */\n      0x557365722069732061205374616b657200000000000000000000000000000000\n        /* \"#utility.yul\":21931:21932   */\n      0x00\n        /* \"#utility.yul\":21923:21929   */\n      dup3\n        /* \"#utility.yul\":21919:21933   */\n      add\n        /* \"#utility.yul\":21912:21954   */\n      mstore\n        /* \"#utility.yul\":21795:21961   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21967:22192   */\n    tag_338:\n        /* \"#utility.yul\":22107:22141   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":22103:22104   */\n      0x00\n        /* \"#utility.yul\":22095:22101   */\n      dup3\n        /* \"#utility.yul\":22091:22105   */\n      add\n        /* \"#utility.yul\":22084:22142   */\n      mstore\n        /* \"#utility.yul\":22176:22184   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":22171:22173   */\n      0x20\n        /* \"#utility.yul\":22163:22169   */\n      dup3\n        /* \"#utility.yul\":22159:22174   */\n      add\n        /* \"#utility.yul\":22152:22185   */\n      mstore\n        /* \"#utility.yul\":21967:22192   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22198:22365   */\n    tag_343:\n        /* \"#utility.yul\":22338:22357   */\n      0x5374616b696e67206e6f7420666f756e64000000000000000000000000000000\n        /* \"#utility.yul\":22334:22335   */\n      0x00\n        /* \"#utility.yul\":22326:22332   */\n      dup3\n        /* \"#utility.yul\":22322:22336   */\n      add\n        /* \"#utility.yul\":22315:22358   */\n      mstore\n        /* \"#utility.yul\":22198:22365   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22371:22596   */\n    tag_348:\n        /* \"#utility.yul\":22511:22545   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":22507:22508   */\n      0x00\n        /* \"#utility.yul\":22499:22505   */\n      dup3\n        /* \"#utility.yul\":22495:22509   */\n      add\n        /* \"#utility.yul\":22488:22546   */\n      mstore\n        /* \"#utility.yul\":22580:22588   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":22575:22577   */\n      0x20\n        /* \"#utility.yul\":22567:22573   */\n      dup3\n        /* \"#utility.yul\":22563:22578   */\n      add\n        /* \"#utility.yul\":22556:22589   */\n      mstore\n        /* \"#utility.yul\":22371:22596   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22602:22771   */\n    tag_353:\n        /* \"#utility.yul\":22742:22763   */\n      0x41697264726f70206e6f74207374617274656400000000000000000000000000\n        /* \"#utility.yul\":22738:22739   */\n      0x00\n        /* \"#utility.yul\":22730:22736   */\n      dup3\n        /* \"#utility.yul\":22726:22740   */\n      add\n        /* \"#utility.yul\":22719:22764   */\n      mstore\n        /* \"#utility.yul\":22602:22771   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22777:22959   */\n    tag_358:\n        /* \"#utility.yul\":22917:22951   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":22913:22914   */\n      0x00\n        /* \"#utility.yul\":22905:22911   */\n      dup3\n        /* \"#utility.yul\":22901:22915   */\n      add\n        /* \"#utility.yul\":22894:22952   */\n      mstore\n        /* \"#utility.yul\":22777:22959   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22965:23136   */\n    tag_363:\n        /* \"#utility.yul\":23105:23128   */\n      0x436c61696d61626c65206f6e63652061207765656b0000000000000000000000\n        /* \"#utility.yul\":23101:23102   */\n      0x00\n        /* \"#utility.yul\":23093:23099   */\n      dup3\n        /* \"#utility.yul\":23089:23103   */\n      add\n        /* \"#utility.yul\":23082:23129   */\n      mstore\n        /* \"#utility.yul\":22965:23136   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23142:23309   */\n    tag_368:\n        /* \"#utility.yul\":23282:23301   */\n      0x5061636b616765206e6f7420466f756e64000000000000000000000000000000\n        /* \"#utility.yul\":23278:23279   */\n      0x00\n        /* \"#utility.yul\":23270:23276   */\n      dup3\n        /* \"#utility.yul\":23266:23280   */\n      add\n        /* \"#utility.yul\":23259:23302   */\n      mstore\n        /* \"#utility.yul\":23142:23309   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23315:23480   */\n    tag_373:\n        /* \"#utility.yul\":23455:23472   */\n      0x50656e616c7479206d6178203330250000000000000000000000000000000000\n        /* \"#utility.yul\":23451:23452   */\n      0x00\n        /* \"#utility.yul\":23443:23449   */\n      dup3\n        /* \"#utility.yul\":23439:23453   */\n      add\n        /* \"#utility.yul\":23432:23473   */\n      mstore\n        /* \"#utility.yul\":23315:23480   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23486:23651   */\n    tag_378:\n        /* \"#utility.yul\":23626:23643   */\n      0x41697264726f70206d6178203230250000000000000000000000000000000000\n        /* \"#utility.yul\":23622:23623   */\n      0x00\n        /* \"#utility.yul\":23614:23620   */\n      dup3\n        /* \"#utility.yul\":23610:23624   */\n      add\n        /* \"#utility.yul\":23603:23644   */\n      mstore\n        /* \"#utility.yul\":23486:23651   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23657:23836   */\n    tag_383:\n        /* \"#utility.yul\":23797:23828   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":23793:23794   */\n      0x00\n        /* \"#utility.yul\":23785:23791   */\n      dup3\n        /* \"#utility.yul\":23781:23795   */\n      add\n        /* \"#utility.yul\":23774:23829   */\n      mstore\n        /* \"#utility.yul\":23657:23836   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23842:24071   */\n    tag_388:\n        /* \"#utility.yul\":23982:24016   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":23978:23979   */\n      0x00\n        /* \"#utility.yul\":23970:23976   */\n      dup3\n        /* \"#utility.yul\":23966:23980   */\n      add\n        /* \"#utility.yul\":23959:24017   */\n      mstore\n        /* \"#utility.yul\":24051:24063   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":24046:24048   */\n      0x20\n        /* \"#utility.yul\":24038:24044   */\n      dup3\n        /* \"#utility.yul\":24034:24049   */\n      add\n        /* \"#utility.yul\":24027:24064   */\n      mstore\n        /* \"#utility.yul\":23842:24071   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":24077:24258   */\n    tag_393:\n        /* \"#utility.yul\":24217:24250   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":24213:24214   */\n      0x00\n        /* \"#utility.yul\":24205:24211   */\n      dup3\n        /* \"#utility.yul\":24201:24215   */\n      add\n        /* \"#utility.yul\":24194:24251   */\n      mstore\n        /* \"#utility.yul\":24077:24258   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":24264:24386   */\n    tag_277:\n        /* \"#utility.yul\":24337:24361   */\n      tag_523\n        /* \"#utility.yul\":24355:24360   */\n      dup2\n        /* \"#utility.yul\":24337:24361   */\n      tag_307\n      jump\t// in\n    tag_523:\n        /* \"#utility.yul\":24330:24335   */\n      dup2\n        /* \"#utility.yul\":24327:24362   */\n      eq\n        /* \"#utility.yul\":24317:24380   */\n      tag_524\n      jumpi\n        /* \"#utility.yul\":24376:24377   */\n      0x00\n        /* \"#utility.yul\":24373:24374   */\n      dup1\n        /* \"#utility.yul\":24366:24378   */\n      revert\n        /* \"#utility.yul\":24317:24380   */\n    tag_524:\n        /* \"#utility.yul\":24264:24386   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":24392:24508   */\n    tag_281:\n        /* \"#utility.yul\":24462:24483   */\n      tag_526\n        /* \"#utility.yul\":24477:24482   */\n      dup2\n        /* \"#utility.yul\":24462:24483   */\n      tag_311\n      jump\t// in\n    tag_526:\n        /* \"#utility.yul\":24455:24460   */\n      dup2\n        /* \"#utility.yul\":24452:24484   */\n      eq\n        /* \"#utility.yul\":24442:24502   */\n      tag_527\n      jumpi\n        /* \"#utility.yul\":24498:24499   */\n      0x00\n        /* \"#utility.yul\":24495:24496   */\n      dup1\n        /* \"#utility.yul\":24488:24500   */\n      revert\n        /* \"#utility.yul\":24442:24502   */\n    tag_527:\n        /* \"#utility.yul\":24392:24508   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":24514:24636   */\n    tag_285:\n        /* \"#utility.yul\":24587:24611   */\n      tag_529\n        /* \"#utility.yul\":24605:24610   */\n      dup2\n        /* \"#utility.yul\":24587:24611   */\n      tag_411\n      jump\t// in\n    tag_529:\n        /* \"#utility.yul\":24580:24585   */\n      dup2\n        /* \"#utility.yul\":24577:24612   */\n      eq\n        /* \"#utility.yul\":24567:24630   */\n      tag_530\n      jumpi\n        /* \"#utility.yul\":24626:24627   */\n      0x00\n        /* \"#utility.yul\":24623:24624   */\n      dup1\n        /* \"#utility.yul\":24616:24628   */\n      revert\n        /* \"#utility.yul\":24567:24630   */\n    tag_530:\n        /* \"#utility.yul\":24514:24636   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212202e33eea25d2d72d72b0e974fd72d2516e232ef634c30469895eb254c8d4bc4e264736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_131": {
									"entryPoint": null,
									"id": 131,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_973": {
									"entryPoint": null,
									"id": 973,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_msgSender_903": {
									"entryPoint": 268,
									"id": 903,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 276,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 474,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 497,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 547,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 567,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 599,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 604,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1199:8",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "70:80:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "80:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "89:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "89:13:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "80:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "138:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "111:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "111:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "111:33:8"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "48:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "56:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "64:5:8",
														"type": ""
													}
												],
												"src": "7:143:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "233:274:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "279:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "281:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "281:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "281:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "254:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "263:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "250:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "250:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "275:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "246:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "246:32:8"
															},
															"nodeType": "YulIf",
															"src": "243:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "372:128:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "387:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "401:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "391:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "416:74:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "462:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "473:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "458:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "458:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "482:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "426:31:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "426:64:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "416:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "203:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "214:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "226:6:8",
														"type": ""
													}
												],
												"src": "156:351:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "553:35:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "563:19:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "579:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "573:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "573:9:8"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "563:6:8"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "546:6:8",
														"type": ""
													}
												],
												"src": "513:75:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "639:51:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "649:35:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "678:5:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "660:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "660:24:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "649:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "621:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "631:7:8",
														"type": ""
													}
												],
												"src": "594:96:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "741:81:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "751:65:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "766:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "773:42:8",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "762:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "762:54:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "751:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "723:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "733:7:8",
														"type": ""
													}
												],
												"src": "696:126:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "917:28:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "934:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "937:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "927:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "927:12:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "927:12:8"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "828:117:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1040:28:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1057:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1060:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1050:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1050:12:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1050:12:8"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "951:117:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1117:79:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1174:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1183:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1186:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1176:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1176:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1176:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1140:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1165:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "1147:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1147:24:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1137:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1137:35:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1130:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1130:43:8"
															},
															"nodeType": "YulIf",
															"src": "1127:63:8"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1110:5:8",
														"type": ""
													}
												],
												"src": "1074:122:8"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x22D1 CODESIZE SUB DUP1 PUSH3 0x22D1 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH3 0x5F PUSH3 0x53 PUSH3 0x10C PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x114 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xF PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH1 0x50 PUSH1 0x4 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x6 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x6 PUSH1 0x2 PUSH1 0x0 PUSH3 0x76A700 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x7 PUSH1 0x2 PUSH1 0x0 PUSH3 0xED4E00 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 PUSH1 0x2 PUSH1 0x0 PUSH4 0x1E13380 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP PUSH3 0x276 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1EB DUP2 PUSH3 0x25C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x20A JUMPI PUSH3 0x209 PUSH3 0x257 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x21A DUP5 DUP3 DUP6 ADD PUSH3 0x1DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x230 DUP3 PUSH3 0x237 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x267 DUP2 PUSH3 0x223 JUMP JUMPDEST DUP2 EQ PUSH3 0x273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x204B DUP1 PUSH3 0x286 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xBED9D861 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x286 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2AC JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0xADB61832 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x240 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1B6 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x2CF1A5FB EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x156 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x2C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x1AA5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x136 PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x143 SWAP2 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x154 PUSH2 0x4BA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15E PUSH2 0x600 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x14B8 JUMP JUMPDEST PUSH2 0x614 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x184 PUSH2 0x871 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x191 SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AF SWAP2 SWAP1 PUSH2 0x148B JUMP JUMPDEST PUSH2 0x877 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BE PUSH2 0x904 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CB SWAP2 SWAP1 PUSH2 0x184D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DC PUSH2 0x92A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x184D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FA PUSH2 0x954 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x225 SWAP2 SWAP1 PUSH2 0x148B JUMP JUMPDEST PUSH2 0x95C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x248 PUSH2 0x97F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x266 PUSH2 0x985 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x270 PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28E PUSH2 0xB9F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A5 SWAP2 SWAP1 PUSH2 0x148B JUMP JUMPDEST PUSH2 0xBCB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x1431 JUMP JUMPDEST PUSH2 0xC58 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D0 PUSH2 0x138E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD EQ ISZERO PUSH2 0x3AC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A3 SWAP1 PUSH2 0x1945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH2 0x3D8 DUP4 PUSH2 0xCDC JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x438 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x3FB SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x405 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x41A SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x424 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH2 0x42E SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 PUSH2 0x447 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x95C JUMP JUMPDEST GT ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 PUSH2 0x45C DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xD26 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP1 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x80 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4C2 PUSH2 0xD59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD EQ ISZERO PUSH2 0x54D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x544 SWAP1 PUSH2 0x1945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x55C DUP3 PUSH1 0x6 ADD SLOAD PUSH2 0x95C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x5AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A6 SWAP1 PUSH2 0x19C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP DUP3 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x5FB PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH2 0x5F6 DUP6 PUSH1 0x0 ADD SLOAD PUSH2 0xD26 JUMP JUMPDEST PUSH2 0xDB1 JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x608 PUSH2 0xE37 JUMP JUMPDEST PUSH2 0x612 PUSH1 0x0 PUSH2 0xEB5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x61C PUSH2 0xF7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ PUSH2 0x6A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x698 SWAP1 PUSH2 0x1905 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0x6F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EF SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 TIMESTAMP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP5 PUSH2 0x739 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP PUSH2 0x807 PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER ADDRESS DUP7 PUSH2 0xFCB JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 DUP5 DUP7 PUSH2 0x84D SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x85C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ADC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x86D PUSH2 0x1054 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x87F PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x8C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8BA SWAP1 PUSH2 0x1A05 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x8F9 SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 TIMESTAMP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 DUP3 TIMESTAMP PUSH2 0x96E SWAP2 SWAP1 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x978 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x98D PUSH2 0xF7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD EQ ISZERO PUSH2 0xA69 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA60 SWAP1 PUSH2 0x1945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA74 DUP3 PUSH2 0xCDC JUMP JUMPDEST SWAP1 POP PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP TIMESTAMP DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0xB50 JUMPI PUSH1 0x0 DUP1 PUSH2 0xB0D DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x105E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xB49 PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH2 0xB44 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH2 0xDB1 JUMP JUMPDEST POP POP PUSH2 0xB8D JUMP JUMPDEST PUSH2 0xB8C PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0xB87 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH2 0xDB1 JUMP JUMPDEST JUMPDEST POP POP PUSH2 0xB97 PUSH2 0x1054 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xBA7 PUSH2 0xE37 JUMP JUMPDEST TIMESTAMP PUSH1 0x5 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xBD3 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xC17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC0E SWAP1 PUSH2 0x1A25 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E DUP2 PUSH1 0x40 MLOAD PUSH2 0xC4D SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xC60 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCD0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCC7 SWAP1 PUSH2 0x1925 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCD9 DUP2 PUSH2 0xEB5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0xCF7 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x10B8 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xD0B SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0xD15 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0xD1F SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0xD3E SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0xD48 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH2 0xD52 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xDAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA6 SWAP1 PUSH2 0x1985 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xE32 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xDD0 SWAP3 SWAP2 SWAP1 PUSH2 0x189F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x10F1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xE3F PUSH2 0x11B8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE5D PUSH2 0x92A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEAA SWAP1 PUSH2 0x19A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xFC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFB8 SWAP1 PUSH2 0x1A85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x104E DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFEC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1868 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x10F1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x1072 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x107C SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST DUP5 PUSH2 0x1087 SWAP2 SWAP1 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x1098 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x10A2 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST DUP5 PUSH2 0x10AD SWAP2 SWAP1 PUSH2 0x1C26 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH10 0xD3C21BCECCEDA1000000 DUP4 TIMESTAMP PUSH2 0x10D6 SWAP2 SWAP1 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x10E0 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x10EA SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1153 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11C0 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x11B3 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1173 SWAP2 SWAP1 PUSH2 0x145E JUMP JUMPDEST PUSH2 0x11B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11A9 SWAP1 PUSH2 0x1A65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x11CF DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x11D8 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x121D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1214 SWAP1 PUSH2 0x1965 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1246 SWAP2 SWAP1 PUSH2 0x1836 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1283 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1288 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1299 DUP8 DUP4 DUP4 DUP8 PUSH2 0x12A5 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1308 JUMPI PUSH1 0x0 DUP4 MLOAD EQ ISZERO PUSH2 0x1300 JUMPI PUSH2 0x12C0 DUP6 PUSH2 0x131B JUMP JUMPDEST PUSH2 0x12FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12F6 SWAP1 PUSH2 0x1A45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1313 JUMP JUMPDEST PUSH2 0x1312 DUP4 DUP4 PUSH2 0x133E JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1351 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1385 SWAP2 SWAP1 PUSH2 0x18E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13AF PUSH2 0x13B5 JUMP JUMPDEST DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1401 DUP2 PUSH2 0x1FD0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1416 DUP2 PUSH2 0x1FE7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x142B DUP2 PUSH2 0x1FFE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1447 JUMPI PUSH2 0x1446 PUSH2 0x1D33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1455 DUP5 DUP3 DUP6 ADD PUSH2 0x13F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1474 JUMPI PUSH2 0x1473 PUSH2 0x1D33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1482 DUP5 DUP3 DUP6 ADD PUSH2 0x1407 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14A1 JUMPI PUSH2 0x14A0 PUSH2 0x1D33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14AF DUP5 DUP3 DUP6 ADD PUSH2 0x141C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14CF JUMPI PUSH2 0x14CE PUSH2 0x1D33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14DD DUP6 DUP3 DUP7 ADD PUSH2 0x141C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x14EE DUP6 DUP3 DUP7 ADD PUSH2 0x141C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1501 DUP2 PUSH2 0x1C5A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1510 DUP2 PUSH2 0x1C6C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1521 DUP3 PUSH2 0x1B13 JUMP JUMPDEST PUSH2 0x152B DUP2 DUP6 PUSH2 0x1B29 JUMP JUMPDEST SWAP4 POP PUSH2 0x153B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CA2 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1552 DUP3 PUSH2 0x1B1E JUMP JUMPDEST PUSH2 0x155C DUP2 DUP6 PUSH2 0x1B34 JUMP JUMPDEST SWAP4 POP PUSH2 0x156C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CA2 JUMP JUMPDEST PUSH2 0x1575 DUP2 PUSH2 0x1D38 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158D PUSH1 0x10 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1598 DUP3 PUSH2 0x1D49 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B0 PUSH1 0x26 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x15BB DUP3 PUSH2 0x1D72 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15D3 PUSH1 0x11 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x15DE DUP3 PUSH2 0x1DC1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F6 PUSH1 0x26 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1601 DUP3 PUSH2 0x1DEA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1619 PUSH1 0x13 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1624 DUP3 PUSH2 0x1E39 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x163C PUSH1 0x20 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1647 DUP3 PUSH2 0x1E62 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x165F PUSH1 0x15 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x166A DUP3 PUSH2 0x1E8B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1682 PUSH1 0x11 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x168D DUP3 PUSH2 0x1EB4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16A5 PUSH1 0xF DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x16B0 DUP3 PUSH2 0x1EDD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16C8 PUSH1 0xF DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x16D3 DUP3 PUSH2 0x1F06 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16EB PUSH1 0x1D DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x16F6 DUP3 PUSH2 0x1F2F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170E PUSH1 0x2A DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1719 DUP3 PUSH2 0x1F58 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1731 PUSH1 0x1F DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x173C DUP3 PUSH2 0x1FA7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x175D PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1770 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1783 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1796 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x17A9 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x17BC PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x17CF PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x17EC PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x17FF PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1812 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1747 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1821 DUP2 PUSH2 0x1C98 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1830 DUP2 PUSH2 0x1C98 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1842 DUP3 DUP5 PUSH2 0x1516 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1862 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x14F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x187D PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x14F8 JUMP JUMPDEST PUSH2 0x188A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x14F8 JUMP JUMPDEST PUSH2 0x1897 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1827 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x18B4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x14F8 JUMP JUMPDEST PUSH2 0x18C1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1827 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18DD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1507 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18FD DUP2 DUP5 PUSH2 0x1547 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x191E DUP2 PUSH2 0x1580 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x193E DUP2 PUSH2 0x15A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x195E DUP2 PUSH2 0x15C6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x197E DUP2 PUSH2 0x15E9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x199E DUP2 PUSH2 0x160C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19BE DUP2 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19DE DUP2 PUSH2 0x1652 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19FE DUP2 PUSH2 0x1675 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A1E DUP2 PUSH2 0x1698 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A3E DUP2 PUSH2 0x16BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A5E DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A7E DUP2 PUSH2 0x1701 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A9E DUP2 PUSH2 0x1724 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x1ABB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1AD6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1827 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1AF1 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1827 JUMP JUMPDEST PUSH2 0x1AFE PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1827 JUMP JUMPDEST PUSH2 0x1B0B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1827 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B50 DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B5B DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1B90 JUMPI PUSH2 0x1B8F PUSH2 0x1CD5 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BA6 DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BB1 DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1BC1 JUMPI PUSH2 0x1BC0 PUSH2 0x1D04 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD7 DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BE2 DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1C1B JUMPI PUSH2 0x1C1A PUSH2 0x1CD5 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C31 DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C3C DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1C4F JUMPI PUSH2 0x1C4E PUSH2 0x1CD5 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C65 DUP3 PUSH2 0x1C78 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CC0 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1CA5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1CCF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x557365722069732061205374616B657200000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5374616B696E67206E6F7420666F756E64000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x41697264726F70206E6F74207374617274656400000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x436C61696D61626C65206F6E63652061207765656B0000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5061636B616765206E6F7420466F756E64000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x50656E616C7479206D6178203330250000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x41697264726F70206D6178203230250000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1FD9 DUP2 PUSH2 0x1C5A JUMP JUMPDEST DUP2 EQ PUSH2 0x1FE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1FF0 DUP2 PUSH2 0x1C6C JUMP JUMPDEST DUP2 EQ PUSH2 0x1FFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2007 DUP2 PUSH2 0x1C98 JUMP JUMPDEST DUP2 EQ PUSH2 0x2012 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E CALLER 0xEE LOG2 0x5D 0x2D PUSH19 0xD72B0E974FD72D2516E232EF634C30469895EB 0x25 0x4C DUP14 0x4B 0xC4 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "247:8846:7:-:0;;;692:301;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1716:1:1;1821:7;:22;;;;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;812:2:7;791:18;:23;;;;838:2;824:11;:16;;;;867:5;851:13;;:21;;;;;;;;;;;;;;;;;;909:1;883:14;:23;898:7;883:23;;;;;;;;;;;:27;;;;947:1;920:14;:24;935:8;920:24;;;;;;;;;;;:28;;;;985:1;958:14;:24;973:8;958:24;;;;;;;;;;;:28;;;;692:301;247:8846;;640:96:6;693:7;719:10;712:17;;640:96;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;7:143:8:-;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:351::-;226:6;275:2;263:9;254:7;250:23;246:32;243:119;;;281:79;;:::i;:::-;243:119;401:1;426:64;482:7;473:6;462:9;458:22;426:64;:::i;:::-;416:74;;372:128;156:351;;;;:::o;594:96::-;631:7;660:24;678:5;660:24;:::i;:::-;649:35;;594:96;;;:::o;696:126::-;733:7;773:42;766:5;762:54;751:65;;696:126;;;:::o;951:117::-;1060:1;1057;1050:12;1074:122;1147:24;1165:5;1147:24;:::i;:::-;1140:5;1137:35;1127:63;;1186:1;1183;1176:12;1127:63;1074:122;:::o;247:8846:7:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_calculateAirdrop_1497": {
									"entryPoint": 3366,
									"id": 1497,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakeReward_1186": {
									"entryPoint": 3292,
									"id": 1186,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingDuration_1163": {
									"entryPoint": 4280,
									"id": 1163,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingWithPenalty_1218": {
									"entryPoint": 4190,
									"id": 1218,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@_callOptionalReturn_560": {
									"entryPoint": 4337,
									"id": 560,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkAirdropStatus_1032": {
									"entryPoint": 3417,
									"id": 1032,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOwner_54": {
									"entryPoint": 3639,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_903": {
									"entryPoint": 4536,
									"id": 903,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_nonReentrantAfter_165": {
									"entryPoint": 4180,
									"id": 165,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_nonReentrantBefore_157": {
									"entryPoint": 3963,
									"id": 157,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_revert_890": {
									"entryPoint": 4926,
									"id": 890,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_111": {
									"entryPoint": 3765,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@airdropRate_931": {
									"entryPoint": 2161,
									"id": 931,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropSince_933": {
									"entryPoint": 2431,
									"id": 933,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropStatus_935": {
									"entryPoint": 1191,
									"id": 935,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@blockTimestamp_1463": {
									"entryPoint": 2388,
									"id": 1463,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@calculateWeek_1479": {
									"entryPoint": 2396,
									"id": 1479,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@changeAirdropPercentage_1454": {
									"entryPoint": 3019,
									"id": 1454,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changePenaltyFee_1144": {
									"entryPoint": 2167,
									"id": 1144,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@claimAirdrop_1566": {
									"entryPoint": 1210,
									"id": 1566,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@functionCallWithValue_715": {
									"entryPoint": 4568,
									"id": 715,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_651": {
									"entryPoint": 4544,
									"id": 651,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@hasStake_1416": {
									"entryPoint": 712,
									"id": 1416,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isContract_579": {
									"entryPoint": 4891,
									"id": 579,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_40": {
									"entryPoint": 2346,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_68": {
									"entryPoint": 1536,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_338": {
									"entryPoint": 4043,
									"id": 338,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_312": {
									"entryPoint": 3505,
									"id": 312,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@stake_1121": {
									"entryPoint": 1556,
									"id": 1121,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@stakingPenaltyRate_929": {
									"entryPoint": 2969,
									"id": 929,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startAirdrop_1431": {
									"entryPoint": 2975,
									"id": 1431,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@token_address_937": {
									"entryPoint": 2308,
									"id": 937,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_91": {
									"entryPoint": 3160,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_846": {
									"entryPoint": 4773,
									"id": 846,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@withdrawStake_1300": {
									"entryPoint": 2437,
									"id": 1300,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 5106,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 5127,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 5148,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 5169,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 5214,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 5259,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 5304,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 5368,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 5383,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 5398,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5447,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5504,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5539,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5574,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5609,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5644,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5679,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5714,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5749,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5784,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5819,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5854,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5889,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5924,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_struct$_Stake_$988_memory_ptr_to_t_struct$_Stake_$988_memory_ptr": {
									"entryPoint": 5959,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_struct$_StakingSummary_$996_memory_ptr_to_t_struct$_StakingSummary_$996_memory_ptr_fromStack": {
									"entryPoint": 6101,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256": {
									"entryPoint": 6168,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 6183,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 6198,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 6221,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 6248,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 6303,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 6344,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6371,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6405,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6437,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6469,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6501,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6533,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6565,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6597,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6629,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6661,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6693,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6725,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6757,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6789,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_StakingSummary_$996_memory_ptr__to_t_struct$_StakingSummary_$996_memory_ptr__fromStack_reversed": {
									"entryPoint": 6821,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 6849,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 6876,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 6931,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 6942,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 6953,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 6964,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 6981,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 7067,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 7116,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 7206,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 7258,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 7276,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 7288,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 7320,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 7330,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 7381,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 7428,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 7475,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 7480,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8": {
									"entryPoint": 7497,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
									"entryPoint": 7538,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e": {
									"entryPoint": 7617,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
									"entryPoint": 7658,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9": {
									"entryPoint": 7737,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
									"entryPoint": 7778,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3": {
									"entryPoint": 7819,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734": {
									"entryPoint": 7860,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a": {
									"entryPoint": 7901,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287": {
									"entryPoint": 7942,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
									"entryPoint": 7983,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
									"entryPoint": 8024,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619": {
									"entryPoint": 8103,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 8144,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 8167,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 8190,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:24639:8",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:8"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:8",
														"type": ""
													}
												],
												"src": "7:139:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "212:77:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "222:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "237:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "231:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "231:13:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "222:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "277:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "253:23:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "253:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "253:30:8"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "190:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "198:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "206:5:8",
														"type": ""
													}
												],
												"src": "152:137:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "347:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "357:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "379:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "366:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "366:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "357:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "422:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "395:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "395:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "395:33:8"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "325:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "333:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "341:5:8",
														"type": ""
													}
												],
												"src": "295:139:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "506:263:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "552:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "554:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "554:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "554:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "527:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "536:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "523:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "523:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "548:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "519:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "519:32:8"
															},
															"nodeType": "YulIf",
															"src": "516:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "645:117:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "660:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "674:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "664:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "689:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "724:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "735:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "720:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "720:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "744:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "699:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "699:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "689:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "476:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "487:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "499:6:8",
														"type": ""
													}
												],
												"src": "440:329:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "849:271:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "895:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "897:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "897:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "897:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "870:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "879:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "866:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "866:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "891:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "862:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "862:32:8"
															},
															"nodeType": "YulIf",
															"src": "859:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "988:125:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1003:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1017:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1007:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1032:71:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1075:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1086:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1071:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1071:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1095:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1042:28:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1042:61:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1032:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "819:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "830:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "842:6:8",
														"type": ""
													}
												],
												"src": "775:345:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1192:263:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1238:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1240:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1240:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1240:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1213:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1222:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1209:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1209:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1234:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1205:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1205:32:8"
															},
															"nodeType": "YulIf",
															"src": "1202:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "1331:117:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1346:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1360:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1350:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1375:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1410:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1421:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1406:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1406:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1430:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1385:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1385:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1375:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1162:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1173:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1185:6:8",
														"type": ""
													}
												],
												"src": "1126:329:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1544:391:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1590:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1592:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1592:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1592:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1565:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1574:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1561:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1561:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1586:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1557:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1557:32:8"
															},
															"nodeType": "YulIf",
															"src": "1554:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "1683:117:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1698:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1712:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1702:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1727:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1762:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1773:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1758:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1758:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1782:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1737:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1737:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1727:6:8"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1810:118:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1825:16:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1839:2:8",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1829:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1855:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1890:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1901:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1886:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1886:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1910:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1865:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1865:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1855:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1506:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1517:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1529:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1537:6:8",
														"type": ""
													}
												],
												"src": "1461:474:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2006:53:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2023:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2046:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2028:17:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2028:24:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2016:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2016:37:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2016:37:8"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1994:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2001:3:8",
														"type": ""
													}
												],
												"src": "1941:118:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2124:50:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2141:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2161:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "2146:14:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2146:21:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2134:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2134:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2134:34:8"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2112:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2119:3:8",
														"type": ""
													}
												],
												"src": "2065:109:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2288:265:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2298:52:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2344:5:8"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "2312:31:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2312:38:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2302:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2359:95:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2442:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2447:6:8"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2366:75:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2366:88:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2359:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2489:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2496:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2485:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2485:16:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2503:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2508:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2463:21:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2463:52:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2463:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2524:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2535:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2540:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2531:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2531:16:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2524:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2269:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2276:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2284:3:8",
														"type": ""
													}
												],
												"src": "2180:373:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2651:272:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2661:53:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2708:5:8"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "2675:32:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2675:39:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2665:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2723:78:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2789:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2794:6:8"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2730:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2730:71:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2723:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2836:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2843:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2832:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2832:16:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2850:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2855:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2810:21:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2810:52:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2810:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2871:46:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2882:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2909:6:8"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "2887:21:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2887:29:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2878:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2878:39:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2871:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2632:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2639:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2647:3:8",
														"type": ""
													}
												],
												"src": "2559:364:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3075:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3085:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3151:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3156:2:8",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3092:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3092:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3085:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3257:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8",
																	"nodeType": "YulIdentifier",
																	"src": "3168:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3168:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3168:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3270:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3281:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3286:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3277:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3277:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3270:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3063:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3071:3:8",
														"type": ""
													}
												],
												"src": "2929:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3447:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3457:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3523:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3528:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3464:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3464:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3457:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3629:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																	"nodeType": "YulIdentifier",
																	"src": "3540:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3540:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3540:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3642:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3653:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3658:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3649:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3649:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3642:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3435:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3443:3:8",
														"type": ""
													}
												],
												"src": "3301:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3819:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3829:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3895:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3900:2:8",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3836:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3836:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3829:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4001:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																	"nodeType": "YulIdentifier",
																	"src": "3912:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3912:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3912:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4014:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4025:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4030:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4021:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4021:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4014:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3807:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3815:3:8",
														"type": ""
													}
												],
												"src": "3673:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4191:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4201:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4267:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4272:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4208:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4208:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4201:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4373:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																	"nodeType": "YulIdentifier",
																	"src": "4284:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4284:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4284:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4386:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4397:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4402:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4393:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4393:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4386:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4179:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4187:3:8",
														"type": ""
													}
												],
												"src": "4045:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4563:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4573:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4639:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4644:2:8",
																		"type": "",
																		"value": "19"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4580:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4580:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4573:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4745:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9",
																	"nodeType": "YulIdentifier",
																	"src": "4656:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4656:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4656:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4758:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4769:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4774:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4765:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4765:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4758:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4551:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4559:3:8",
														"type": ""
													}
												],
												"src": "4417:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4935:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4945:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5011:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5016:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4952:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4952:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4945:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5117:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																	"nodeType": "YulIdentifier",
																	"src": "5028:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5028:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5028:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5130:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5141:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5146:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5137:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5137:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5130:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4923:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4931:3:8",
														"type": ""
													}
												],
												"src": "4789:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5307:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5317:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5383:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5388:2:8",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5324:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5324:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5317:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5489:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3",
																	"nodeType": "YulIdentifier",
																	"src": "5400:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5400:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5400:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5502:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5513:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5518:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5509:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5509:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5502:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5295:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5303:3:8",
														"type": ""
													}
												],
												"src": "5161:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5679:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5689:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5755:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5760:2:8",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5696:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5696:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5689:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5861:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734",
																	"nodeType": "YulIdentifier",
																	"src": "5772:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5772:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5772:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5874:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5885:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5890:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5881:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5881:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5874:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5667:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5675:3:8",
														"type": ""
													}
												],
												"src": "5533:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6051:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6061:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6127:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6132:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6068:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6068:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6061:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6233:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a",
																	"nodeType": "YulIdentifier",
																	"src": "6144:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6144:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6144:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6246:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6257:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6262:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6253:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6253:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6246:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6039:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6047:3:8",
														"type": ""
													}
												],
												"src": "5905:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6423:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6433:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6499:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6504:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6440:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6440:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6433:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6605:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287",
																	"nodeType": "YulIdentifier",
																	"src": "6516:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6516:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6516:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6618:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6629:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6634:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6625:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6625:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6618:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6411:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6419:3:8",
														"type": ""
													}
												],
												"src": "6277:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6795:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6805:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6871:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6876:2:8",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6812:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6812:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6805:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6977:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																	"nodeType": "YulIdentifier",
																	"src": "6888:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6888:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6888:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6990:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7001:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7006:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6997:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6997:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6990:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6783:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6791:3:8",
														"type": ""
													}
												],
												"src": "6649:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7167:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7177:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7243:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7248:2:8",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7184:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7184:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7177:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7349:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																	"nodeType": "YulIdentifier",
																	"src": "7260:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7260:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7260:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7362:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7373:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7378:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7369:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7369:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7362:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7155:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7163:3:8",
														"type": ""
													}
												],
												"src": "7021:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7539:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7549:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7615:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7620:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7556:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7556:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7549:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7721:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																	"nodeType": "YulIdentifier",
																	"src": "7632:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7632:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7632:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7734:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7745:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7750:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7741:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7741:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7734:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7527:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7535:3:8",
														"type": ""
													}
												],
												"src": "7393:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7917:1304:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7927:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7943:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7948:4:8",
																		"type": "",
																		"value": "0xe0"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7939:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7939:14:8"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "7931:4:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7963:166:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8000:43:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8030:5:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8037:4:8",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8026:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8026:16:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8020:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8020:23:8"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8004:12:8",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8090:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8108:3:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8113:4:8",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8104:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8104:14:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8056:33:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8056:63:8"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8056:63:8"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8139:165:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8175:43:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8205:5:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8212:4:8",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8201:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8201:16:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8195:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8195:23:8"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8179:12:8",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8265:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8283:3:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8288:4:8",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8279:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8279:14:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8231:33:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8231:63:8"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8231:63:8"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8314:169:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8354:43:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8384:5:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8391:4:8",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8380:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8380:16:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8374:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8374:23:8"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8358:12:8",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8444:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8462:3:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8467:4:8",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8458:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8458:14:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8410:33:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8410:63:8"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8410:63:8"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8493:171:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8535:43:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8565:5:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8572:4:8",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8561:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8561:16:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8555:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8555:23:8"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8539:12:8",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8625:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8643:3:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8648:4:8",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8639:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8639:14:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8591:33:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8591:63:8"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8591:63:8"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8674:169:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8714:43:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8744:5:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8751:4:8",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8740:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8740:16:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8734:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8734:23:8"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8718:12:8",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8804:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8822:3:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8827:4:8",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8818:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8818:14:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8770:33:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8770:63:8"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8770:63:8"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8853:176:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8900:43:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8930:5:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8937:4:8",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8926:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8926:16:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8920:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8920:23:8"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8904:12:8",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8990:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "9008:3:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9013:4:8",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9004:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9004:14:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8956:33:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8956:63:8"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8956:63:8"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9039:175:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9085:43:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "9115:5:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9122:4:8",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9111:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9111:16:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "9105:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9105:23:8"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "9089:12:8",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "9175:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "9193:3:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9198:4:8",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9189:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9189:14:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "9141:33:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9141:63:8"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "9141:63:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_Stake_$988_memory_ptr_to_t_struct$_Stake_$988_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7904:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7911:3:8",
														"type": ""
													}
												],
												"src": "7817:1404:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9425:623:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9435:28:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9451:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9456:6:8",
																		"type": "",
																		"value": "0x0120"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9447:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9447:16:8"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "9439:4:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9473:172:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9516:43:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "9546:5:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9553:4:8",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9542:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9542:16:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "9536:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9536:23:8"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "9520:12:8",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "9606:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "9624:3:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9629:4:8",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9620:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9620:14:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "9572:33:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9572:63:8"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "9572:63:8"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9655:167:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9693:43:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "9723:5:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9730:4:8",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9719:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9719:16:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "9713:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9713:23:8"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "9697:12:8",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "9783:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "9801:3:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9806:4:8",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9797:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9797:14:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "9749:33:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9749:63:8"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "9749:63:8"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9832:209:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9868:43:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "9898:5:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9905:4:8",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9894:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9894:16:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "9888:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9888:23:8"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "9872:12:8",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "10002:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "10020:3:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10025:4:8",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10016:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10016:14:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_struct$_Stake_$988_memory_ptr_to_t_struct$_Stake_$988_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "9924:77:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9924:107:8"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "9924:107:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_StakingSummary_$996_memory_ptr_to_t_struct$_StakingSummary_$996_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9412:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9419:3:8",
														"type": ""
													}
												],
												"src": "9297:751:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10109:53:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10126:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10149:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "10131:17:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10131:24:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10119:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10119:37:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10119:37:8"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10097:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10104:3:8",
														"type": ""
													}
												],
												"src": "10054:108:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10233:53:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10250:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10273:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "10255:17:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10255:24:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10243:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10243:37:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10243:37:8"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10221:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10228:3:8",
														"type": ""
													}
												],
												"src": "10168:118:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10426:137:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10437:100:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10524:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10533:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10444:79:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10444:93:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10437:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10547:10:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "10554:3:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10547:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10405:3:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10411:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10422:3:8",
														"type": ""
													}
												],
												"src": "10292:271:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10667:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10677:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10689:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10700:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10685:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10685:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10677:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10757:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10770:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10781:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10766:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10766:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10713:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10713:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10713:71:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10639:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10651:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10662:4:8",
														"type": ""
													}
												],
												"src": "10569:222:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10951:288:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10961:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10973:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10984:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10969:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10969:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10961:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11041:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11054:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11065:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11050:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11050:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10997:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10997:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10997:71:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11122:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11135:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11146:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11131:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11131:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11078:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11078:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11078:72:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "11204:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11217:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11228:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11213:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11213:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11160:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11160:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11160:72:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10907:9:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10919:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10927:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10935:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10946:4:8",
														"type": ""
													}
												],
												"src": "10797:442:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11371:206:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11381:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11393:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11404:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11389:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11389:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11381:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11461:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11474:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11485:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11470:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11470:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11417:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11417:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11417:71:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11542:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11555:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11566:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11551:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11551:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11498:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11498:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11498:72:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11335:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11347:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11355:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11366:4:8",
														"type": ""
													}
												],
												"src": "11245:332:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11675:118:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11685:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11697:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11708:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11693:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11693:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11685:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11759:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11772:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11783:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11768:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11768:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11721:37:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11721:65:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11721:65:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11647:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11659:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11670:4:8",
														"type": ""
													}
												],
												"src": "11583:210:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11917:195:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11927:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11939:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11950:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11935:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11935:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11927:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11974:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11985:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11970:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11970:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11993:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11999:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11989:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11989:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11963:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11963:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11963:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12019:86:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12091:6:8"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12100:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12027:63:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12027:78:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12019:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11889:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11901:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11912:4:8",
														"type": ""
													}
												],
												"src": "11799:313:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12289:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12299:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12311:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12322:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12307:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12307:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12299:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12346:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12357:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12342:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12342:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "12365:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12371:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12361:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12361:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12335:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12335:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12335:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12391:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12525:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12399:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12399:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12391:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12269:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12284:4:8",
														"type": ""
													}
												],
												"src": "12118:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12714:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12724:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12736:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12747:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12732:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12732:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12724:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12771:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12782:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12767:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12767:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "12790:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12796:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12786:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12786:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12760:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12760:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12760:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12816:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12950:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12824:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12824:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12816:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12694:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12709:4:8",
														"type": ""
													}
												],
												"src": "12543:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13139:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13149:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13161:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13172:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13157:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13157:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13149:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13196:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13207:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13192:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13192:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13215:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13221:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13211:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13211:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13185:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13185:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13185:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13241:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "13375:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13249:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13249:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13241:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13119:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13134:4:8",
														"type": ""
													}
												],
												"src": "12968:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13564:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13574:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13586:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13597:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13582:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13582:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13574:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13621:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13632:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13617:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13617:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13640:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13646:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13636:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13636:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13610:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13610:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13610:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13666:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "13800:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13674:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13674:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13666:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13544:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13559:4:8",
														"type": ""
													}
												],
												"src": "13393:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13989:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13999:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14011:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14022:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14007:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14007:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13999:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14046:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14057:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14042:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14042:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14065:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14071:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14061:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14061:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14035:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14035:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14035:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14091:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14225:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14099:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14099:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14091:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13969:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13984:4:8",
														"type": ""
													}
												],
												"src": "13818:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14414:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14424:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14436:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14447:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14432:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14432:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14424:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14471:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14482:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14467:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14467:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14490:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14496:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14486:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14486:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14460:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14460:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14460:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14516:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14650:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14524:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14524:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14516:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14394:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14409:4:8",
														"type": ""
													}
												],
												"src": "14243:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14839:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14849:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14861:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14872:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14857:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14857:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14849:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14896:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14907:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14892:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14892:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14915:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14921:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14911:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14911:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14885:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14885:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14885:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14941:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15075:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14949:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14949:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14941:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14819:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14834:4:8",
														"type": ""
													}
												],
												"src": "14668:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15264:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15274:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15286:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15297:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15282:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15282:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15274:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15321:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15332:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15317:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15317:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "15340:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15346:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "15336:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15336:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15310:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15310:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15310:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15366:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15500:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15374:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15374:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15366:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15244:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15259:4:8",
														"type": ""
													}
												],
												"src": "15093:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15689:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15699:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15711:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15722:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15707:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15707:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15699:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15746:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15757:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15742:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15742:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "15765:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15771:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "15761:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15761:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15735:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15735:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15735:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15791:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15925:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15799:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15799:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15791:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15669:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15684:4:8",
														"type": ""
													}
												],
												"src": "15518:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16114:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16124:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16136:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16147:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16132:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16132:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16124:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16171:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16182:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16167:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16167:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "16190:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16196:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "16186:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16186:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16160:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16160:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16160:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16216:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "16350:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16224:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16224:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16216:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16094:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16109:4:8",
														"type": ""
													}
												],
												"src": "15943:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16539:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16549:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16561:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16572:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16557:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16557:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16549:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16596:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16607:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16592:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16592:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "16615:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16621:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "16611:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16611:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16585:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16585:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16585:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16641:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "16775:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16649:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16649:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16641:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16519:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16534:4:8",
														"type": ""
													}
												],
												"src": "16368:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16964:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16974:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16986:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16997:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16982:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16982:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16974:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17021:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17032:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17017:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17017:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "17040:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17046:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "17036:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17036:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17010:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17010:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17010:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17066:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "17200:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17074:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17074:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17066:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16944:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16959:4:8",
														"type": ""
													}
												],
												"src": "16793:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17389:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17399:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17411:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17422:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17407:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17407:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17399:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17446:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17457:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17442:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17442:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "17465:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17471:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "17461:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17461:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17435:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17435:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17435:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17491:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "17625:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17499:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17499:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17491:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17369:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17384:4:8",
														"type": ""
													}
												],
												"src": "17218:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17803:187:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17813:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17825:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17836:3:8",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17821:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17821:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17813:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "17956:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17969:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17980:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17965:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17965:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_struct$_StakingSummary_$996_memory_ptr_to_t_struct$_StakingSummary_$996_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17850:105:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17850:133:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17850:133:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_StakingSummary_$996_memory_ptr__to_t_struct$_StakingSummary_$996_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17775:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "17787:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17798:4:8",
														"type": ""
													}
												],
												"src": "17643:347:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18094:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18104:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18116:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18127:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18112:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18112:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18104:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "18184:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18197:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18208:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18193:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18193:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "18140:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18140:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18140:71:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "18066:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "18078:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18089:4:8",
														"type": ""
													}
												],
												"src": "17996:222:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18378:288:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18388:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18400:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18411:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18396:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18396:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18388:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "18468:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18481:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18492:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18477:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18477:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "18424:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18424:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18424:71:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "18549:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18562:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18573:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18558:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18558:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "18505:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18505:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18505:72:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "18631:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18644:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18655:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18640:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18640:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "18587:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18587:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18587:72:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "18334:9:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "18346:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "18354:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "18362:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18373:4:8",
														"type": ""
													}
												],
												"src": "18224:442:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18712:35:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18722:19:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18738:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "18732:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18732:9:8"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "18722:6:8"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "18705:6:8",
														"type": ""
													}
												],
												"src": "18672:75:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18811:40:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18822:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "18838:5:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "18832:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18832:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "18822:6:8"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18794:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "18804:6:8",
														"type": ""
													}
												],
												"src": "18753:98:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18916:40:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18927:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "18943:5:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "18937:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18937:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "18927:6:8"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18899:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "18909:6:8",
														"type": ""
													}
												],
												"src": "18857:99:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19075:34:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "19085:18:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "19100:3:8"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "19085:11:8"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "19047:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "19052:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "19063:11:8",
														"type": ""
													}
												],
												"src": "18962:147:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19211:73:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "19228:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "19233:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19221:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19221:19:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19221:19:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19249:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "19268:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19273:4:8",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19264:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19264:14:8"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "19249:11:8"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "19183:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "19188:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "19199:11:8",
														"type": ""
													}
												],
												"src": "19115:169:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19334:261:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "19344:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "19367:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "19349:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19349:20:8"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "19344:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "19378:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "19401:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "19383:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19383:20:8"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "19378:1:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19541:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "19543:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19543:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19543:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "19462:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19469:66:8",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "19537:1:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "19465:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19465:74:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "19459:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19459:81:8"
															},
															"nodeType": "YulIf",
															"src": "19456:107:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19573:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "19584:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "19587:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19580:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19580:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "19573:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "19321:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "19324:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "19330:3:8",
														"type": ""
													}
												],
												"src": "19290:305:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19643:143:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "19653:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "19676:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "19658:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19658:20:8"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "19653:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "19687:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "19710:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "19692:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19692:20:8"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "19687:1:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19734:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "19736:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19736:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19736:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "19731:1:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "19724:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19724:9:8"
															},
															"nodeType": "YulIf",
															"src": "19721:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19766:14:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "19775:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "19778:1:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "19771:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19771:9:8"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "19766:1:8"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "19632:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "19635:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "19641:1:8",
														"type": ""
													}
												],
												"src": "19601:185:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19840:300:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "19850:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "19873:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "19855:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19855:20:8"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "19850:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "19884:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "19907:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "19889:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19889:20:8"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "19884:1:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "20082:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "20084:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "20084:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "20084:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "19994:1:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "19987:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "19987:9:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "19980:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19980:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "20002:1:8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "20009:66:8",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "20077:1:8"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "20005:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "20005:74:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "19999:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19999:81:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "19976:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19976:105:8"
															},
															"nodeType": "YulIf",
															"src": "19973:131:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "20114:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "20129:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "20132:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "20125:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20125:9:8"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "20114:7:8"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "19823:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "19826:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "19832:7:8",
														"type": ""
													}
												],
												"src": "19792:348:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20191:146:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "20201:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "20224:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "20206:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20206:20:8"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "20201:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "20235:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "20258:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "20240:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20240:20:8"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "20235:1:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "20282:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "20284:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "20284:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "20284:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "20276:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "20279:1:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "20273:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20273:8:8"
															},
															"nodeType": "YulIf",
															"src": "20270:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "20314:17:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "20326:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "20329:1:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "20322:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20322:9:8"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "20314:4:8"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "20177:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "20180:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "20186:4:8",
														"type": ""
													}
												],
												"src": "20146:191:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20388:51:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "20398:35:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "20427:5:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "20409:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20409:24:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "20398:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "20370:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "20380:7:8",
														"type": ""
													}
												],
												"src": "20343:96:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20487:48:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "20497:32:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "20522:5:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "20515:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20515:13:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "20508:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20508:21:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "20497:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "20469:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "20479:7:8",
														"type": ""
													}
												],
												"src": "20445:90:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20586:81:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "20596:65:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "20611:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20618:42:8",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "20607:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20607:54:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "20596:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "20568:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "20578:7:8",
														"type": ""
													}
												],
												"src": "20541:126:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20718:32:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "20728:16:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "20739:5:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "20728:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "20700:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "20710:7:8",
														"type": ""
													}
												],
												"src": "20673:77:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20805:258:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "20815:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "20824:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "20819:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "20884:63:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "20909:3:8"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "20914:1:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "20905:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "20905:11:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "20928:3:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "20933:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "20924:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "20924:11:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "20918:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "20918:18:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "20898:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "20898:39:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "20898:39:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "20845:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "20848:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "20842:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20842:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "20856:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "20858:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "20867:1:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "20870:2:8",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "20863:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "20863:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "20858:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "20838:3:8",
																"statements": []
															},
															"src": "20834:113:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "20981:76:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "21031:3:8"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "21036:6:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "21027:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "21027:16:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "21045:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "21020:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "21020:27:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "21020:27:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "20962:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "20965:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "20959:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20959:13:8"
															},
															"nodeType": "YulIf",
															"src": "20956:101:8"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "20787:3:8",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "20792:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "20797:6:8",
														"type": ""
													}
												],
												"src": "20756:307:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21097:152:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21114:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21117:77:8",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21107:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21107:88:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21107:88:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21211:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21214:4:8",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21204:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21204:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21204:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21235:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21238:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "21228:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21228:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21228:15:8"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "21069:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21283:152:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21300:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21303:77:8",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21293:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21293:88:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21293:88:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21397:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21400:4:8",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21390:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21390:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21390:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21421:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21424:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "21414:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21414:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21414:15:8"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "21255:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21530:28:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21547:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21550:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "21540:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21540:12:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21540:12:8"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "21441:117:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21653:28:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21670:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21673:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "21663:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21663:12:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21663:12:8"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "21564:117:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21735:54:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "21745:38:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "21763:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21770:2:8",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21759:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21759:14:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21779:2:8",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "21775:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21775:7:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "21755:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21755:28:8"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "21745:6:8"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "21718:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "21728:6:8",
														"type": ""
													}
												],
												"src": "21687:102:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21901:60:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21923:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21931:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21919:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21919:14:8"
																	},
																	{
																		"hexValue": "557365722069732061205374616b6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21935:18:8",
																		"type": "",
																		"value": "User is a Staker"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21912:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21912:42:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21912:42:8"
														}
													]
												},
												"name": "store_literal_in_memory_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "21893:6:8",
														"type": ""
													}
												],
												"src": "21795:166:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22073:119:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22095:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22103:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22091:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22091:14:8"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22107:34:8",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22084:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22084:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22084:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22163:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22171:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22159:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22159:15:8"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22176:8:8",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22152:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22152:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22152:33:8"
														}
													]
												},
												"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "22065:6:8",
														"type": ""
													}
												],
												"src": "21967:225:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22304:61:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22326:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22334:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22322:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22322:14:8"
																	},
																	{
																		"hexValue": "5374616b696e67206e6f7420666f756e64",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22338:19:8",
																		"type": "",
																		"value": "Staking not found"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22315:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22315:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22315:43:8"
														}
													]
												},
												"name": "store_literal_in_memory_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "22296:6:8",
														"type": ""
													}
												],
												"src": "22198:167:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22477:119:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22499:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22507:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22495:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22495:14:8"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22511:34:8",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22488:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22488:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22488:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22567:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22575:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22563:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22563:15:8"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22580:8:8",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22556:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22556:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22556:33:8"
														}
													]
												},
												"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "22469:6:8",
														"type": ""
													}
												],
												"src": "22371:225:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22708:63:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22730:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22738:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22726:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22726:14:8"
																	},
																	{
																		"hexValue": "41697264726f70206e6f742073746172746564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22742:21:8",
																		"type": "",
																		"value": "Airdrop not started"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22719:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22719:45:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22719:45:8"
														}
													]
												},
												"name": "store_literal_in_memory_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "22700:6:8",
														"type": ""
													}
												],
												"src": "22602:169:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22883:76:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "22905:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22913:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22901:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22901:14:8"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22917:34:8",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22894:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22894:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22894:58:8"
														}
													]
												},
												"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "22875:6:8",
														"type": ""
													}
												],
												"src": "22777:182:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23071:65:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "23093:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23101:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23089:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23089:14:8"
																	},
																	{
																		"hexValue": "436c61696d61626c65206f6e63652061207765656b",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "23105:23:8",
																		"type": "",
																		"value": "Claimable once a week"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "23082:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23082:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23082:47:8"
														}
													]
												},
												"name": "store_literal_in_memory_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "23063:6:8",
														"type": ""
													}
												],
												"src": "22965:171:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23248:61:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "23270:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23278:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23266:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23266:14:8"
																	},
																	{
																		"hexValue": "5061636b616765206e6f7420466f756e64",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "23282:19:8",
																		"type": "",
																		"value": "Package not Found"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "23259:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23259:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23259:43:8"
														}
													]
												},
												"name": "store_literal_in_memory_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "23240:6:8",
														"type": ""
													}
												],
												"src": "23142:167:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23421:59:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "23443:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23451:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23439:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23439:14:8"
																	},
																	{
																		"hexValue": "50656e616c7479206d617820333025",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "23455:17:8",
																		"type": "",
																		"value": "Penalty max 30%"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "23432:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23432:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23432:41:8"
														}
													]
												},
												"name": "store_literal_in_memory_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "23413:6:8",
														"type": ""
													}
												],
												"src": "23315:165:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23592:59:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "23614:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23622:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23610:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23610:14:8"
																	},
																	{
																		"hexValue": "41697264726f70206d617820323025",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "23626:17:8",
																		"type": "",
																		"value": "Airdrop max 20%"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "23603:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23603:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23603:41:8"
														}
													]
												},
												"name": "store_literal_in_memory_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "23584:6:8",
														"type": ""
													}
												],
												"src": "23486:165:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23763:73:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "23785:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23793:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23781:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23781:14:8"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "23797:31:8",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "23774:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23774:55:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23774:55:8"
														}
													]
												},
												"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "23755:6:8",
														"type": ""
													}
												],
												"src": "23657:179:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23948:123:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "23970:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23978:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23966:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23966:14:8"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "23982:34:8",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "23959:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23959:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23959:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "24038:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "24046:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "24034:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24034:15:8"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "24051:12:8",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24027:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24027:37:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24027:37:8"
														}
													]
												},
												"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "23940:6:8",
														"type": ""
													}
												],
												"src": "23842:229:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "24183:75:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "24205:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "24213:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "24201:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24201:14:8"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "24217:33:8",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24194:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24194:57:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24194:57:8"
														}
													]
												},
												"name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "24175:6:8",
														"type": ""
													}
												],
												"src": "24077:181:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "24307:79:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "24364:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "24373:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "24376:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "24366:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "24366:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "24366:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "24330:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "24355:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "24337:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "24337:24:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "24327:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24327:35:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "24320:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24320:43:8"
															},
															"nodeType": "YulIf",
															"src": "24317:63:8"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "24300:5:8",
														"type": ""
													}
												],
												"src": "24264:122:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "24432:76:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "24486:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "24495:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "24498:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "24488:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "24488:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "24488:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "24455:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "24477:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "24462:14:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "24462:21:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "24452:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24452:32:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "24445:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24445:40:8"
															},
															"nodeType": "YulIf",
															"src": "24442:60:8"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "24425:5:8",
														"type": ""
													}
												],
												"src": "24392:116:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "24557:79:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "24614:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "24623:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "24626:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "24616:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "24616:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "24616:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "24580:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "24605:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "24587:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "24587:24:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "24577:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24577:35:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "24570:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24570:43:8"
															},
															"nodeType": "YulIf",
															"src": "24567:63:8"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "24550:5:8",
														"type": ""
													}
												],
												"src": "24514:122:8"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n        store_literal_in_memory_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 15)\n        store_literal_in_memory_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 15)\n        store_literal_in_memory_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    // struct Staking.Stake -> struct Staking.Stake\n    function abi_encode_t_struct$_Stake_$988_memory_ptr_to_t_struct$_Stake_$988_memory_ptr(value, pos)  {\n        let tail := add(pos, 0xe0)\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // since\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // rewardAPY\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // releaseTime\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // claimable\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // claimableAirdrop\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // latestClaimDrop\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xc0))\n        }\n\n    }\n\n    // struct Staking.StakingSummary -> struct Staking.StakingSummary\n    function abi_encode_t_struct$_StakingSummary_$996_memory_ptr_to_t_struct$_StakingSummary_$996_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x0120)\n\n        {\n            // total_amount\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // penalty\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // stake\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_struct$_Stake_$988_memory_ptr_to_t_struct$_Stake_$988_memory_ptr(memberValue0, add(pos, 0x40))\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_struct$_StakingSummary_$996_memory_ptr__to_t_struct$_StakingSummary_$996_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 288)\n\n        abi_encode_t_struct$_StakingSummary_$996_memory_ptr_to_t_struct$_StakingSummary_$996_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8(memPtr) {\n\n        mstore(add(memPtr, 0), \"User is a Staker\")\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function store_literal_in_memory_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e(memPtr) {\n\n        mstore(add(memPtr, 0), \"Staking not found\")\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function store_literal_in_memory_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9(memPtr) {\n\n        mstore(add(memPtr, 0), \"Airdrop not started\")\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function store_literal_in_memory_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Claimable once a week\")\n\n    }\n\n    function store_literal_in_memory_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734(memPtr) {\n\n        mstore(add(memPtr, 0), \"Package not Found\")\n\n    }\n\n    function store_literal_in_memory_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Penalty max 30%\")\n\n    }\n\n    function store_literal_in_memory_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287(memPtr) {\n\n        mstore(add(memPtr, 0), \"Airdrop max 20%\")\n\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063bed9d86111610071578063bed9d8611461025e578063cb79c2e114610268578063d2a569c314610286578063d5dbdf1b14610290578063f2fde38b146102ac5761010b565b80638da5cb5b146101d4578063adb61832146101f2578063b5d9df8314610210578063b87da76d146102405761010b565b80637b0472f0116100de5780637b0472f0146101605780638891cf0d1461017c5780638c63f97f1461019a5780638c8e8fee146101b65761010b565b806310486b6a146101105780632cf1a5fb1461012e5780635b88349d1461014c578063715018a614610156575b600080fd5b6101186102c8565b6040516101259190611aa5565b60405180910390f35b6101366104a7565b60405161014391906118c8565b60405180910390f35b6101546104ba565b005b61015e610600565b005b61017a600480360381019061017591906114b8565b610614565b005b610184610871565b6040516101919190611ac1565b60405180910390f35b6101b460048036038101906101af919061148b565b610877565b005b6101be610904565b6040516101cb919061184d565b60405180910390f35b6101dc61092a565b6040516101e9919061184d565b60405180910390f35b6101fa610954565b6040516102079190611ac1565b60405180910390f35b61022a6004803603810190610225919061148b565b61095c565b6040516102379190611ac1565b60405180910390f35b61024861097f565b6040516102559190611ac1565b60405180910390f35b610266610985565b005b610270610b99565b60405161027d9190611ac1565b60405180910390f35b61028e610b9f565b005b6102aa60048036038101906102a5919061148b565b610bcb565b005b6102c660048036038101906102c19190611431565b610c58565b005b6102d061138e565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000816000015114156103ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a390611945565b60405180910390fd5b60006040518060600160405280600081526020016000815260200183815250905060006103d883610cdc565b9050428260400151606001511115610438576103e8600354826103fb9190611bcc565b6104059190611b9b565b6103e8600354856000015161041a9190611bcc565b6104249190611b9b565b61042e9190611b45565b8260200181815250505b60006104478460c0015161095c565b111561047257600061045c8460000151610d26565b905080836040015160a001818152505050610482565b6000826040015160a00181815250505b8082604001516080018181525050826000015182600001818152505081935050505090565b600660009054906101000a900460ff1681565b6104c2610d59565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561054d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054490611945565b60405180910390fd5b600061055c826006015461095c565b90506000826000015411156105fc5760008114156105af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a6906119c5565b60405180910390fd5b600082600501819055504282600601819055506105fb600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336105f68560000154610d26565b610db1565b5b5050565b610608610e37565b6106126000610eb5565b565b61061c610f7b565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154146106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890611905565b60405180910390fd5b6000600260008381526020019081526020016000205414156106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ef906119e5565b60405180910390fd5b60004290506040518060e001604052808481526020018281526020016002600085815260200190815260200160002054815260200182846107399190611b45565b815260200160008152602001600081526020016000815250600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155905050610807600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333086610fcb565b3373ffffffffffffffffffffffffffffffffffffffff167fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed8483848661084d9190611b45565b60405161085c93929190611adc565b60405180910390a25061086d611054565b5050565b60045481565b61087f610e37565b601e8111156108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba90611a05565b60405180910390fd5b806003819055507fcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9816040516108f99190611ac1565b60405180910390a150565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600042905090565b600062093a80824261096e9190611c26565b6109789190611b9b565b9050919050565b60055481565b61098d610f7b565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815250509050600081600001511415610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6090611945565b60405180910390fd5b6000610a7482610cdc565b9050600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905560048201600090556005820160009055600682016000905550504282606001511115610b5057600080610b0d84600001518461105e565b91509150610b49600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338385610b449190611b45565b610db1565b5050610b8d565b610b8c600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633838560000151610b879190611b45565b610db1565b5b5050610b97611054565b565b60035481565b610ba7610e37565b426005819055506001600660006101000a81548160ff021916908315150217905550565b610bd3610e37565b60c8811115610c17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0e90611a25565b60405180910390fd5b806004819055507fcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e81604051610c4d9190611ac1565b60405180910390a150565b610c60610e37565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc790611925565b60405180910390fd5b610cd981610eb5565b50565b60006a52b7d2dcc80cd2e4000000610cf783602001516110b8565b83604001518460000151610d0b9190611bcc565b610d159190611bcc565b610d1f9190611b9b565b9050919050565b60006301dfe2006103e860045484610d3e9190611bcc565b610d489190611b9b565b610d529190611b9b565b9050919050565b60011515600660009054906101000a900460ff16151514610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da690611985565b60405180910390fd5b565b610e328363a9059cbb60e01b8484604051602401610dd092919061189f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110f1565b505050565b610e3f6111b8565b73ffffffffffffffffffffffffffffffffffffffff16610e5d61092a565b73ffffffffffffffffffffffffffffffffffffffff1614610eb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eaa906119a5565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60026000541415610fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb890611a85565b60405180910390fd5b6002600081905550565b61104e846323b872dd60e01b858585604051602401610fec93929190611868565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110f1565b50505050565b6001600081905550565b6000806103e8600354856110729190611bcc565b61107c9190611b9b565b846110879190611c26565b6103e8600354856110989190611bcc565b6110a29190611b9b565b846110ad9190611c26565b915091509250929050565b60006301e1338069d3c21bcecceda100000083426110d69190611c26565b6110e09190611bcc565b6110ea9190611b9b565b9050919050565b6000611153826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111c09092919063ffffffff16565b90506000815111156111b35780806020019051810190611173919061145e565b6111b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a990611a65565b60405180910390fd5b5b505050565b600033905090565b60606111cf84846000856111d8565b90509392505050565b60608247101561121d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121490611965565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112469190611836565b60006040518083038185875af1925050503d8060008114611283576040519150601f19603f3d011682016040523d82523d6000602084013e611288565b606091505b5091509150611299878383876112a5565b92505050949350505050565b6060831561130857600083511415611300576112c08561131b565b6112ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f690611a45565b60405180910390fd5b5b829050611313565b611312838361133e565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156113515781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138591906118e3565b60405180910390fd5b604051806060016040528060008152602001600081526020016113af6113b5565b81525090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008135905061140181611fd0565b92915050565b60008151905061141681611fe7565b92915050565b60008135905061142b81611ffe565b92915050565b60006020828403121561144757611446611d33565b5b6000611455848285016113f2565b91505092915050565b60006020828403121561147457611473611d33565b5b600061148284828501611407565b91505092915050565b6000602082840312156114a1576114a0611d33565b5b60006114af8482850161141c565b91505092915050565b600080604083850312156114cf576114ce611d33565b5b60006114dd8582860161141c565b92505060206114ee8582860161141c565b9150509250929050565b61150181611c5a565b82525050565b61151081611c6c565b82525050565b600061152182611b13565b61152b8185611b29565b935061153b818560208601611ca2565b80840191505092915050565b600061155282611b1e565b61155c8185611b34565b935061156c818560208601611ca2565b61157581611d38565b840191505092915050565b600061158d601083611b34565b915061159882611d49565b602082019050919050565b60006115b0602683611b34565b91506115bb82611d72565b604082019050919050565b60006115d3601183611b34565b91506115de82611dc1565b602082019050919050565b60006115f6602683611b34565b915061160182611dea565b604082019050919050565b6000611619601383611b34565b915061162482611e39565b602082019050919050565b600061163c602083611b34565b915061164782611e62565b602082019050919050565b600061165f601583611b34565b915061166a82611e8b565b602082019050919050565b6000611682601183611b34565b915061168d82611eb4565b602082019050919050565b60006116a5600f83611b34565b91506116b082611edd565b602082019050919050565b60006116c8600f83611b34565b91506116d382611f06565b602082019050919050565b60006116eb601d83611b34565b91506116f682611f2f565b602082019050919050565b600061170e602a83611b34565b915061171982611f58565b604082019050919050565b6000611731601f83611b34565b915061173c82611fa7565b602082019050919050565b60e08201600082015161175d6000850182611818565b5060208201516117706020850182611818565b5060408201516117836040850182611818565b5060608201516117966060850182611818565b5060808201516117a96080850182611818565b5060a08201516117bc60a0850182611818565b5060c08201516117cf60c0850182611818565b50505050565b610120820160008201516117ec6000850182611818565b5060208201516117ff6020850182611818565b5060408201516118126040850182611747565b50505050565b61182181611c98565b82525050565b61183081611c98565b82525050565b60006118428284611516565b915081905092915050565b600060208201905061186260008301846114f8565b92915050565b600060608201905061187d60008301866114f8565b61188a60208301856114f8565b6118976040830184611827565b949350505050565b60006040820190506118b460008301856114f8565b6118c16020830184611827565b9392505050565b60006020820190506118dd6000830184611507565b92915050565b600060208201905081810360008301526118fd8184611547565b905092915050565b6000602082019050818103600083015261191e81611580565b9050919050565b6000602082019050818103600083015261193e816115a3565b9050919050565b6000602082019050818103600083015261195e816115c6565b9050919050565b6000602082019050818103600083015261197e816115e9565b9050919050565b6000602082019050818103600083015261199e8161160c565b9050919050565b600060208201905081810360008301526119be8161162f565b9050919050565b600060208201905081810360008301526119de81611652565b9050919050565b600060208201905081810360008301526119fe81611675565b9050919050565b60006020820190508181036000830152611a1e81611698565b9050919050565b60006020820190508181036000830152611a3e816116bb565b9050919050565b60006020820190508181036000830152611a5e816116de565b9050919050565b60006020820190508181036000830152611a7e81611701565b9050919050565b60006020820190508181036000830152611a9e81611724565b9050919050565b600061012082019050611abb60008301846117d5565b92915050565b6000602082019050611ad66000830184611827565b92915050565b6000606082019050611af16000830186611827565b611afe6020830185611827565b611b0b6040830184611827565b949350505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611b5082611c98565b9150611b5b83611c98565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611b9057611b8f611cd5565b5b828201905092915050565b6000611ba682611c98565b9150611bb183611c98565b925082611bc157611bc0611d04565b5b828204905092915050565b6000611bd782611c98565b9150611be283611c98565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c1b57611c1a611cd5565b5b828202905092915050565b6000611c3182611c98565b9150611c3c83611c98565b925082821015611c4f57611c4e611cd5565b5b828203905092915050565b6000611c6582611c78565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015611cc0578082015181840152602081019050611ca5565b83811115611ccf576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f557365722069732061205374616b657200000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e67206e6f7420666f756e64000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f41697264726f70206e6f74207374617274656400000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f436c61696d61626c65206f6e63652061207765656b0000000000000000000000600082015250565b7f5061636b616765206e6f7420466f756e64000000000000000000000000000000600082015250565b7f50656e616c7479206d6178203330250000000000000000000000000000000000600082015250565b7f41697264726f70206d6178203230250000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b611fd981611c5a565b8114611fe457600080fd5b50565b611ff081611c6c565b8114611ffb57600080fd5b50565b61200781611c98565b811461201257600080fd5b5056fea26469706673582212202e33eea25d2d72d72b0e974fd72d2516e232ef634c30469895eb254c8d4bc4e264736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xBED9D861 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x286 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2AC JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0xADB61832 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x240 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1B6 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x2CF1A5FB EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x156 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x2C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x1AA5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x136 PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x143 SWAP2 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x154 PUSH2 0x4BA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15E PUSH2 0x600 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x14B8 JUMP JUMPDEST PUSH2 0x614 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x184 PUSH2 0x871 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x191 SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AF SWAP2 SWAP1 PUSH2 0x148B JUMP JUMPDEST PUSH2 0x877 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BE PUSH2 0x904 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CB SWAP2 SWAP1 PUSH2 0x184D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DC PUSH2 0x92A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x184D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FA PUSH2 0x954 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x225 SWAP2 SWAP1 PUSH2 0x148B JUMP JUMPDEST PUSH2 0x95C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x248 PUSH2 0x97F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x266 PUSH2 0x985 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x270 PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28E PUSH2 0xB9F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A5 SWAP2 SWAP1 PUSH2 0x148B JUMP JUMPDEST PUSH2 0xBCB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x1431 JUMP JUMPDEST PUSH2 0xC58 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D0 PUSH2 0x138E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD EQ ISZERO PUSH2 0x3AC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A3 SWAP1 PUSH2 0x1945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH2 0x3D8 DUP4 PUSH2 0xCDC JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x438 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x3FB SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x405 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x41A SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x424 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH2 0x42E SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 PUSH2 0x447 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x95C JUMP JUMPDEST GT ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 PUSH2 0x45C DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xD26 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP1 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x80 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4C2 PUSH2 0xD59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD EQ ISZERO PUSH2 0x54D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x544 SWAP1 PUSH2 0x1945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x55C DUP3 PUSH1 0x6 ADD SLOAD PUSH2 0x95C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x5AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A6 SWAP1 PUSH2 0x19C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP DUP3 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x5FB PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH2 0x5F6 DUP6 PUSH1 0x0 ADD SLOAD PUSH2 0xD26 JUMP JUMPDEST PUSH2 0xDB1 JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x608 PUSH2 0xE37 JUMP JUMPDEST PUSH2 0x612 PUSH1 0x0 PUSH2 0xEB5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x61C PUSH2 0xF7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ PUSH2 0x6A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x698 SWAP1 PUSH2 0x1905 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0x6F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EF SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 TIMESTAMP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP5 PUSH2 0x739 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP PUSH2 0x807 PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER ADDRESS DUP7 PUSH2 0xFCB JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 DUP5 DUP7 PUSH2 0x84D SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x85C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ADC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x86D PUSH2 0x1054 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x87F PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x8C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8BA SWAP1 PUSH2 0x1A05 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x8F9 SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 TIMESTAMP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 DUP3 TIMESTAMP PUSH2 0x96E SWAP2 SWAP1 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x978 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x98D PUSH2 0xF7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD EQ ISZERO PUSH2 0xA69 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA60 SWAP1 PUSH2 0x1945 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA74 DUP3 PUSH2 0xCDC JUMP JUMPDEST SWAP1 POP PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP TIMESTAMP DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0xB50 JUMPI PUSH1 0x0 DUP1 PUSH2 0xB0D DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x105E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xB49 PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH2 0xB44 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH2 0xDB1 JUMP JUMPDEST POP POP PUSH2 0xB8D JUMP JUMPDEST PUSH2 0xB8C PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0xB87 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH2 0xDB1 JUMP JUMPDEST JUMPDEST POP POP PUSH2 0xB97 PUSH2 0x1054 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xBA7 PUSH2 0xE37 JUMP JUMPDEST TIMESTAMP PUSH1 0x5 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xBD3 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xC17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC0E SWAP1 PUSH2 0x1A25 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E DUP2 PUSH1 0x40 MLOAD PUSH2 0xC4D SWAP2 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xC60 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCD0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCC7 SWAP1 PUSH2 0x1925 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCD9 DUP2 PUSH2 0xEB5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0xCF7 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x10B8 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xD0B SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0xD15 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0xD1F SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0xD3E SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0xD48 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH2 0xD52 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xDAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA6 SWAP1 PUSH2 0x1985 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xE32 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xDD0 SWAP3 SWAP2 SWAP1 PUSH2 0x189F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x10F1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xE3F PUSH2 0x11B8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE5D PUSH2 0x92A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEAA SWAP1 PUSH2 0x19A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xFC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFB8 SWAP1 PUSH2 0x1A85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x104E DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFEC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1868 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x10F1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x1072 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x107C SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST DUP5 PUSH2 0x1087 SWAP2 SWAP1 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x1098 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x10A2 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST DUP5 PUSH2 0x10AD SWAP2 SWAP1 PUSH2 0x1C26 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH10 0xD3C21BCECCEDA1000000 DUP4 TIMESTAMP PUSH2 0x10D6 SWAP2 SWAP1 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x10E0 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x10EA SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1153 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11C0 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x11B3 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1173 SWAP2 SWAP1 PUSH2 0x145E JUMP JUMPDEST PUSH2 0x11B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11A9 SWAP1 PUSH2 0x1A65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x11CF DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x11D8 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x121D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1214 SWAP1 PUSH2 0x1965 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1246 SWAP2 SWAP1 PUSH2 0x1836 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1283 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1288 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1299 DUP8 DUP4 DUP4 DUP8 PUSH2 0x12A5 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1308 JUMPI PUSH1 0x0 DUP4 MLOAD EQ ISZERO PUSH2 0x1300 JUMPI PUSH2 0x12C0 DUP6 PUSH2 0x131B JUMP JUMPDEST PUSH2 0x12FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12F6 SWAP1 PUSH2 0x1A45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1313 JUMP JUMPDEST PUSH2 0x1312 DUP4 DUP4 PUSH2 0x133E JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1351 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1385 SWAP2 SWAP1 PUSH2 0x18E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13AF PUSH2 0x13B5 JUMP JUMPDEST DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1401 DUP2 PUSH2 0x1FD0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1416 DUP2 PUSH2 0x1FE7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x142B DUP2 PUSH2 0x1FFE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1447 JUMPI PUSH2 0x1446 PUSH2 0x1D33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1455 DUP5 DUP3 DUP6 ADD PUSH2 0x13F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1474 JUMPI PUSH2 0x1473 PUSH2 0x1D33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1482 DUP5 DUP3 DUP6 ADD PUSH2 0x1407 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14A1 JUMPI PUSH2 0x14A0 PUSH2 0x1D33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14AF DUP5 DUP3 DUP6 ADD PUSH2 0x141C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14CF JUMPI PUSH2 0x14CE PUSH2 0x1D33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14DD DUP6 DUP3 DUP7 ADD PUSH2 0x141C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x14EE DUP6 DUP3 DUP7 ADD PUSH2 0x141C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1501 DUP2 PUSH2 0x1C5A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1510 DUP2 PUSH2 0x1C6C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1521 DUP3 PUSH2 0x1B13 JUMP JUMPDEST PUSH2 0x152B DUP2 DUP6 PUSH2 0x1B29 JUMP JUMPDEST SWAP4 POP PUSH2 0x153B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CA2 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1552 DUP3 PUSH2 0x1B1E JUMP JUMPDEST PUSH2 0x155C DUP2 DUP6 PUSH2 0x1B34 JUMP JUMPDEST SWAP4 POP PUSH2 0x156C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CA2 JUMP JUMPDEST PUSH2 0x1575 DUP2 PUSH2 0x1D38 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158D PUSH1 0x10 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1598 DUP3 PUSH2 0x1D49 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B0 PUSH1 0x26 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x15BB DUP3 PUSH2 0x1D72 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15D3 PUSH1 0x11 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x15DE DUP3 PUSH2 0x1DC1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F6 PUSH1 0x26 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1601 DUP3 PUSH2 0x1DEA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1619 PUSH1 0x13 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1624 DUP3 PUSH2 0x1E39 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x163C PUSH1 0x20 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1647 DUP3 PUSH2 0x1E62 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x165F PUSH1 0x15 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x166A DUP3 PUSH2 0x1E8B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1682 PUSH1 0x11 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x168D DUP3 PUSH2 0x1EB4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16A5 PUSH1 0xF DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x16B0 DUP3 PUSH2 0x1EDD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16C8 PUSH1 0xF DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x16D3 DUP3 PUSH2 0x1F06 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16EB PUSH1 0x1D DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x16F6 DUP3 PUSH2 0x1F2F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170E PUSH1 0x2A DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1719 DUP3 PUSH2 0x1F58 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1731 PUSH1 0x1F DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x173C DUP3 PUSH2 0x1FA7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x175D PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1770 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1783 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1796 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x17A9 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x17BC PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x17CF PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x17EC PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x17FF PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1818 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1812 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1747 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1821 DUP2 PUSH2 0x1C98 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1830 DUP2 PUSH2 0x1C98 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1842 DUP3 DUP5 PUSH2 0x1516 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1862 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x14F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x187D PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x14F8 JUMP JUMPDEST PUSH2 0x188A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x14F8 JUMP JUMPDEST PUSH2 0x1897 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1827 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x18B4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x14F8 JUMP JUMPDEST PUSH2 0x18C1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1827 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18DD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1507 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18FD DUP2 DUP5 PUSH2 0x1547 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x191E DUP2 PUSH2 0x1580 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x193E DUP2 PUSH2 0x15A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x195E DUP2 PUSH2 0x15C6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x197E DUP2 PUSH2 0x15E9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x199E DUP2 PUSH2 0x160C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19BE DUP2 PUSH2 0x162F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19DE DUP2 PUSH2 0x1652 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19FE DUP2 PUSH2 0x1675 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A1E DUP2 PUSH2 0x1698 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A3E DUP2 PUSH2 0x16BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A5E DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A7E DUP2 PUSH2 0x1701 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A9E DUP2 PUSH2 0x1724 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x1ABB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1AD6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1827 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1AF1 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1827 JUMP JUMPDEST PUSH2 0x1AFE PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1827 JUMP JUMPDEST PUSH2 0x1B0B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1827 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B50 DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B5B DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1B90 JUMPI PUSH2 0x1B8F PUSH2 0x1CD5 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BA6 DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BB1 DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1BC1 JUMPI PUSH2 0x1BC0 PUSH2 0x1D04 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD7 DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BE2 DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1C1B JUMPI PUSH2 0x1C1A PUSH2 0x1CD5 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C31 DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C3C DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1C4F JUMPI PUSH2 0x1C4E PUSH2 0x1CD5 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C65 DUP3 PUSH2 0x1C78 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CC0 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1CA5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1CCF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x557365722069732061205374616B657200000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5374616B696E67206E6F7420666F756E64000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x41697264726F70206E6F74207374617274656400000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x436C61696D61626C65206F6E63652061207765656B0000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5061636B616765206E6F7420466F756E64000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x50656E616C7479206D6178203330250000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x41697264726F70206D6178203230250000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1FD9 DUP2 PUSH2 0x1C5A JUMP JUMPDEST DUP2 EQ PUSH2 0x1FE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1FF0 DUP2 PUSH2 0x1C6C JUMP JUMPDEST DUP2 EQ PUSH2 0x1FFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2007 DUP2 PUSH2 0x1C98 JUMP JUMPDEST DUP2 EQ PUSH2 0x2012 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E CALLER 0xEE LOG2 0x5D 0x2D PUSH19 0xD72B0E974FD72D2516E232EF634C30469895EB 0x25 0x4C DUP14 0x4B 0xC4 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "247:8846:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6602:931;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;625:25;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8396:695;;;:::i;:::-;;1831:101:0;;;:::i;:::-;;2931:1167:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;560:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4104:266;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;657:28;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1201:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7970:95:7;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8071:134;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;592:27;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5628:968;;;:::i;:::-;;521:33;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7645:120;;;:::i;:::-;;7771:193;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2081:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6602:931:7;6645:21;;:::i;:::-;6678:23;6704:12;:24;6717:10;6704:24;;;;;;;;;;;;;;;6678:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6767:1;6746:10;:17;;;:22;;6738:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;6800:29;6832:32;;;;;;;;6847:1;6832:32;;;;6850:1;6832:32;;;;6853:10;6832:32;;;6800:64;;6875:14;6892:33;6914:10;6892:21;:33::i;:::-;6875:50;;6968:15;6940:7;:13;;;:25;;;:43;6936:214;;;7134:4;7112:18;;7103:6;:27;;;;:::i;:::-;7102:36;;;;:::i;:::-;7077:4;7055:18;;7035:10;:17;;;:38;;;;:::i;:::-;7034:47;;;;:::i;:::-;7033:106;;;;:::i;:::-;6999:7;:15;;:140;;;;;6936:214;7208:1;7164:41;7178:10;:26;;;7164:13;:41::i;:::-;:45;7160:249;;;7225:15;7243:36;7261:10;:17;;;7243;:36::i;:::-;7225:54;;7326:7;7293;:13;;;:30;;:40;;;;;7211:133;7160:249;;;7397:1;7364:7;:13;;;:30;;:34;;;;;7160:249;7445:6;7419:7;:13;;;:23;;:32;;;;;7484:10;:17;;;7461:7;:20;;:40;;;;;7519:7;7512:14;;;;;6602:931;:::o;625:25::-;;;;;;;;;;;;;:::o;8396:695::-;2575:21;:19;:21::i;:::-;8509:24:::1;8536:12;:24;8549:10;8536:24;;;;;;;;;;;;;;;8509:51;;8600:1;8579:10;:17;;;:22;;8571:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;8633:19;8655:41;8669:10;:26;;;8655:13;:41::i;:::-;8633:63;;8731:1;8711:10;:17;;;:21;8707:378;;;8771:1;8756:11;:16;;8748:50;;;;;;;;;;;;:::i;:::-;;;;;;;;;8843:1;8813:10;:27;;:31;;;;8887:15;8858:10;:26;;:44;;;;8917:157;8964:13;;;;;;;;;;;8996:10;9024:36;9042:10;:17;;;9024;:36::i;:::-;8917:22;:157::i;:::-;8707:378;8447:644;;8396:695::o:0;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;2931:1167:7:-;2261:21:1;:19;:21::i;:::-;3241:1:7::1;3206:12;:24;3219:10;3206:24;;;;;;;;;;;;;;;:31;;;:36;3198:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;3312:1;3281:14;:27;3296:11;3281:27;;;;;;;;;;;;:32;;3273:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;3433:17;3453:15;3433:35;;3624:183;;;;;;;;3643:6;3624:183;;;;3663:9;3624:183;;;;3686:14;:27;3701:11;3686:27;;;;;;;;;;;;3624:183;;;;3742:9;3728:11;:23;;;;:::i;:::-;3624:183;;;;3766:1;3624:183;;;;3781:1;3624:183;;;;3796:1;3624:183;;::::0;3597:12:::1;:24;3610:10;3597:24;;;;;;;;;;;;;;;:210;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3818:142;3865:13;;;;;;;;;;;3893:10;3925:4;3944:6;3818:26;:142::i;:::-;4034:10;4027:64;;;4046:6;4054:9;4080;4066:11;:23;;;;:::i;:::-;4027:64;;;;;;;;:::i;:::-;;;;;;;;3005:1093;2303:20:1::0;:18;:20::i;:::-;2931:1167:7;;:::o;560:26::-;;;;:::o;4104:266::-;1094:13:0;:11;:13::i;:::-;4267:2:7::1;4257:6;:12;;4249:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;4320:6;4299:18;:27;;;;4341:22;4356:6;4341:22;;;;;;:::i;:::-;;;;;;;;4104:266:::0;:::o;657:28::-;;;;;;;;;;;;;:::o;1201:85:0:-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;7970:95:7:-;8017:7;8043:15;8036:22;;7970:95;:::o;8071:134::-;8134:7;8192:6;8179:9;8161:15;:27;;;;:::i;:::-;8160:38;;;;:::i;:::-;8153:45;;8071:134;;;:::o;592:27::-;;;;:::o;5628:968::-;2261:21:1;:19;:21::i;:::-;5793:23:7::1;5819:12;:24;5832:10;5819:24;;;;;;;;;;;;;;;5793:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;5882:1;5861:10;:17;;;:22;;5853:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;5916:14;5933:33;5955:10;5933:21;:33::i;:::-;5916:50;;5983:12;:24;5996:10;5983:24;;;;;;;;;;;;;;;;5976:31:::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6047:15;6022:10;:22;;;:40;6018:572;;;6096:22;6136::::0;6175:55:::1;6204:10;:17;;;6223:6;6175:28;:55::i;:::-;6078:152;;;;6245:154;6292:13;;;;;;;;;;;6324:10;6370:14;6353;:31;;;;:::i;:::-;6245:22;:154::i;:::-;6064:346;;6018:572;;;6430:149;6477:13;;;;;;;;;;;6509:10;6558:6;6538:10;:17;;;:26;;;;:::i;:::-;6430:22;:149::i;:::-;6018:572;5675:921;;2303:20:1::0;:18;:20::i;:::-;5628:968:7:o;521:33::-;;;;:::o;7645:120::-;1094:13:0;:11;:13::i;:::-;7713:15:7::1;7698:12;:30;;;;7754:4;7738:13;;:20;;;;;;;;;;;;;;;;;;7645:120::o:0;7771:193::-;1094:13:0;:11;:13::i;:::-;7867:3:7::1;7857:6;:13;;7849:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;7914:6;7900:11;:20;;;;7935:22;7950:6;7935:22;;;;;;:::i;:::-;;;;;;;;7771:193:::0;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;2189:1:::1;2169:22;;:8;:22;;;;2161:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;4613:367:7:-;4716:7;4969:4;4922:43;4948:10;:16;;;4922:25;:43::i;:::-;4883:10;:20;;;4847:10;:17;;;:56;;;;:::i;:::-;:118;;;;:::i;:::-;4846:127;;;;:::i;:::-;4827:146;;4613:367;;;:::o;8211:179::-;8306:7;8375:8;8367:4;8352:11;;8338;:25;;;;:::i;:::-;8337:34;;;;:::i;:::-;8336:47;;;;:::i;:::-;8329:54;;8211:179;;;:::o;2415:115::-;2495:4;2478:21;;:13;;;;;;;;;;;:21;;;2470:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;2415:115::o;763:205:4:-;875:86;895:5;925:23;;;950:2;954:5;902:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;875:19;:86::i;:::-;763:205;;;:::o;1359:130:0:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;2433:187::-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;2336:287:1:-;1759:1;2468:7;;:19;;2460:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1759:1;2598:7;:18;;;;2336:287::o;974:241:4:-;1112:96;1132:5;1162:27;;;1191:4;1197:2;1201:5;1139:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1112:19;:96::i;:::-;974:241;;;;:::o;2629:209:1:-;1716:1;2809:7;:22;;;;2629:209::o;4986:295:7:-;5103:7;5112;5198:4;5176:18;;5167:6;:27;;;;:::i;:::-;5166:36;;;;:::i;:::-;5156:6;:47;;;;:::i;:::-;5259:4;5237:18;;5228:6;:27;;;;:::i;:::-;5227:36;;;;:::i;:::-;5217:6;:47;;;;:::i;:::-;5135:139;;;;4986:295;;;;;:::o;4376:231::-;4473:7;4592:8;4584:4;4575:5;4557:15;:23;;;;:::i;:::-;4556:32;;;;:::i;:::-;4555:45;;;;:::i;:::-;4548:52;;4376:231;;;:::o;3747:706:4:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;4192:27;;;;:69;;;;;:::i;:::-;4166:95;;4295:1;4275:10;:17;:21;4271:176;;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;4271:176;3817:636;3747:706;;:::o;640:96:6:-;693:7;719:10;712:17;;640:96;:::o;3873:223:5:-;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;;3873:223;;;;;:::o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5241:12;5255:23;5282:6;:11;;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;;;;4960:446;;;;;;:::o;7466:628::-;7646:12;7674:7;7670:418;;;7722:1;7701:10;:17;:22;7697:286;;;7916:18;7927:6;7916:10;:18::i;:::-;7908:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;7697:286;8003:10;7996:17;;;;7670:418;8044:33;8052:10;8064:12;8044:7;:33::i;:::-;7466:628;;;;;;;:::o;1175:320::-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;8616:540::-;8795:1;8775:10;:17;:21;8771:379;;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:139:8:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:137::-;206:5;237:6;231:13;222:22;;253:30;277:5;253:30;:::i;:::-;152:137;;;;:::o;295:139::-;341:5;379:6;366:20;357:29;;395:33;422:5;395:33;:::i;:::-;295:139;;;;:::o;440:329::-;499:6;548:2;536:9;527:7;523:23;519:32;516:119;;;554:79;;:::i;:::-;516:119;674:1;699:53;744:7;735:6;724:9;720:22;699:53;:::i;:::-;689:63;;645:117;440:329;;;;:::o;775:345::-;842:6;891:2;879:9;870:7;866:23;862:32;859:119;;;897:79;;:::i;:::-;859:119;1017:1;1042:61;1095:7;1086:6;1075:9;1071:22;1042:61;:::i;:::-;1032:71;;988:125;775:345;;;;:::o;1126:329::-;1185:6;1234:2;1222:9;1213:7;1209:23;1205:32;1202:119;;;1240:79;;:::i;:::-;1202:119;1360:1;1385:53;1430:7;1421:6;1410:9;1406:22;1385:53;:::i;:::-;1375:63;;1331:117;1126:329;;;;:::o;1461:474::-;1529:6;1537;1586:2;1574:9;1565:7;1561:23;1557:32;1554:119;;;1592:79;;:::i;:::-;1554:119;1712:1;1737:53;1782:7;1773:6;1762:9;1758:22;1737:53;:::i;:::-;1727:63;;1683:117;1839:2;1865:53;1910:7;1901:6;1890:9;1886:22;1865:53;:::i;:::-;1855:63;;1810:118;1461:474;;;;;:::o;1941:118::-;2028:24;2046:5;2028:24;:::i;:::-;2023:3;2016:37;1941:118;;:::o;2065:109::-;2146:21;2161:5;2146:21;:::i;:::-;2141:3;2134:34;2065:109;;:::o;2180:373::-;2284:3;2312:38;2344:5;2312:38;:::i;:::-;2366:88;2447:6;2442:3;2366:88;:::i;:::-;2359:95;;2463:52;2508:6;2503:3;2496:4;2489:5;2485:16;2463:52;:::i;:::-;2540:6;2535:3;2531:16;2524:23;;2288:265;2180:373;;;;:::o;2559:364::-;2647:3;2675:39;2708:5;2675:39;:::i;:::-;2730:71;2794:6;2789:3;2730:71;:::i;:::-;2723:78;;2810:52;2855:6;2850:3;2843:4;2836:5;2832:16;2810:52;:::i;:::-;2887:29;2909:6;2887:29;:::i;:::-;2882:3;2878:39;2871:46;;2651:272;2559:364;;;;:::o;2929:366::-;3071:3;3092:67;3156:2;3151:3;3092:67;:::i;:::-;3085:74;;3168:93;3257:3;3168:93;:::i;:::-;3286:2;3281:3;3277:12;3270:19;;2929:366;;;:::o;3301:::-;3443:3;3464:67;3528:2;3523:3;3464:67;:::i;:::-;3457:74;;3540:93;3629:3;3540:93;:::i;:::-;3658:2;3653:3;3649:12;3642:19;;3301:366;;;:::o;3673:::-;3815:3;3836:67;3900:2;3895:3;3836:67;:::i;:::-;3829:74;;3912:93;4001:3;3912:93;:::i;:::-;4030:2;4025:3;4021:12;4014:19;;3673:366;;;:::o;4045:::-;4187:3;4208:67;4272:2;4267:3;4208:67;:::i;:::-;4201:74;;4284:93;4373:3;4284:93;:::i;:::-;4402:2;4397:3;4393:12;4386:19;;4045:366;;;:::o;4417:::-;4559:3;4580:67;4644:2;4639:3;4580:67;:::i;:::-;4573:74;;4656:93;4745:3;4656:93;:::i;:::-;4774:2;4769:3;4765:12;4758:19;;4417:366;;;:::o;4789:::-;4931:3;4952:67;5016:2;5011:3;4952:67;:::i;:::-;4945:74;;5028:93;5117:3;5028:93;:::i;:::-;5146:2;5141:3;5137:12;5130:19;;4789:366;;;:::o;5161:::-;5303:3;5324:67;5388:2;5383:3;5324:67;:::i;:::-;5317:74;;5400:93;5489:3;5400:93;:::i;:::-;5518:2;5513:3;5509:12;5502:19;;5161:366;;;:::o;5533:::-;5675:3;5696:67;5760:2;5755:3;5696:67;:::i;:::-;5689:74;;5772:93;5861:3;5772:93;:::i;:::-;5890:2;5885:3;5881:12;5874:19;;5533:366;;;:::o;5905:::-;6047:3;6068:67;6132:2;6127:3;6068:67;:::i;:::-;6061:74;;6144:93;6233:3;6144:93;:::i;:::-;6262:2;6257:3;6253:12;6246:19;;5905:366;;;:::o;6277:::-;6419:3;6440:67;6504:2;6499:3;6440:67;:::i;:::-;6433:74;;6516:93;6605:3;6516:93;:::i;:::-;6634:2;6629:3;6625:12;6618:19;;6277:366;;;:::o;6649:::-;6791:3;6812:67;6876:2;6871:3;6812:67;:::i;:::-;6805:74;;6888:93;6977:3;6888:93;:::i;:::-;7006:2;7001:3;6997:12;6990:19;;6649:366;;;:::o;7021:::-;7163:3;7184:67;7248:2;7243:3;7184:67;:::i;:::-;7177:74;;7260:93;7349:3;7260:93;:::i;:::-;7378:2;7373:3;7369:12;7362:19;;7021:366;;;:::o;7393:::-;7535:3;7556:67;7620:2;7615:3;7556:67;:::i;:::-;7549:74;;7632:93;7721:3;7632:93;:::i;:::-;7750:2;7745:3;7741:12;7734:19;;7393:366;;;:::o;7817:1404::-;7948:4;7943:3;7939:14;8037:4;8030:5;8026:16;8020:23;8056:63;8113:4;8108:3;8104:14;8090:12;8056:63;:::i;:::-;7963:166;8212:4;8205:5;8201:16;8195:23;8231:63;8288:4;8283:3;8279:14;8265:12;8231:63;:::i;:::-;8139:165;8391:4;8384:5;8380:16;8374:23;8410:63;8467:4;8462:3;8458:14;8444:12;8410:63;:::i;:::-;8314:169;8572:4;8565:5;8561:16;8555:23;8591:63;8648:4;8643:3;8639:14;8625:12;8591:63;:::i;:::-;8493:171;8751:4;8744:5;8740:16;8734:23;8770:63;8827:4;8822:3;8818:14;8804:12;8770:63;:::i;:::-;8674:169;8937:4;8930:5;8926:16;8920:23;8956:63;9013:4;9008:3;9004:14;8990:12;8956:63;:::i;:::-;8853:176;9122:4;9115:5;9111:16;9105:23;9141:63;9198:4;9193:3;9189:14;9175:12;9141:63;:::i;:::-;9039:175;7917:1304;7817:1404;;:::o;9297:751::-;9456:6;9451:3;9447:16;9553:4;9546:5;9542:16;9536:23;9572:63;9629:4;9624:3;9620:14;9606:12;9572:63;:::i;:::-;9473:172;9730:4;9723:5;9719:16;9713:23;9749:63;9806:4;9801:3;9797:14;9783:12;9749:63;:::i;:::-;9655:167;9905:4;9898:5;9894:16;9888:23;9924:107;10025:4;10020:3;10016:14;10002:12;9924:107;:::i;:::-;9832:209;9425:623;9297:751;;:::o;10054:108::-;10131:24;10149:5;10131:24;:::i;:::-;10126:3;10119:37;10054:108;;:::o;10168:118::-;10255:24;10273:5;10255:24;:::i;:::-;10250:3;10243:37;10168:118;;:::o;10292:271::-;10422:3;10444:93;10533:3;10524:6;10444:93;:::i;:::-;10437:100;;10554:3;10547:10;;10292:271;;;;:::o;10569:222::-;10662:4;10700:2;10689:9;10685:18;10677:26;;10713:71;10781:1;10770:9;10766:17;10757:6;10713:71;:::i;:::-;10569:222;;;;:::o;10797:442::-;10946:4;10984:2;10973:9;10969:18;10961:26;;10997:71;11065:1;11054:9;11050:17;11041:6;10997:71;:::i;:::-;11078:72;11146:2;11135:9;11131:18;11122:6;11078:72;:::i;:::-;11160;11228:2;11217:9;11213:18;11204:6;11160:72;:::i;:::-;10797:442;;;;;;:::o;11245:332::-;11366:4;11404:2;11393:9;11389:18;11381:26;;11417:71;11485:1;11474:9;11470:17;11461:6;11417:71;:::i;:::-;11498:72;11566:2;11555:9;11551:18;11542:6;11498:72;:::i;:::-;11245:332;;;;;:::o;11583:210::-;11670:4;11708:2;11697:9;11693:18;11685:26;;11721:65;11783:1;11772:9;11768:17;11759:6;11721:65;:::i;:::-;11583:210;;;;:::o;11799:313::-;11912:4;11950:2;11939:9;11935:18;11927:26;;11999:9;11993:4;11989:20;11985:1;11974:9;11970:17;11963:47;12027:78;12100:4;12091:6;12027:78;:::i;:::-;12019:86;;11799:313;;;;:::o;12118:419::-;12284:4;12322:2;12311:9;12307:18;12299:26;;12371:9;12365:4;12361:20;12357:1;12346:9;12342:17;12335:47;12399:131;12525:4;12399:131;:::i;:::-;12391:139;;12118:419;;;:::o;12543:::-;12709:4;12747:2;12736:9;12732:18;12724:26;;12796:9;12790:4;12786:20;12782:1;12771:9;12767:17;12760:47;12824:131;12950:4;12824:131;:::i;:::-;12816:139;;12543:419;;;:::o;12968:::-;13134:4;13172:2;13161:9;13157:18;13149:26;;13221:9;13215:4;13211:20;13207:1;13196:9;13192:17;13185:47;13249:131;13375:4;13249:131;:::i;:::-;13241:139;;12968:419;;;:::o;13393:::-;13559:4;13597:2;13586:9;13582:18;13574:26;;13646:9;13640:4;13636:20;13632:1;13621:9;13617:17;13610:47;13674:131;13800:4;13674:131;:::i;:::-;13666:139;;13393:419;;;:::o;13818:::-;13984:4;14022:2;14011:9;14007:18;13999:26;;14071:9;14065:4;14061:20;14057:1;14046:9;14042:17;14035:47;14099:131;14225:4;14099:131;:::i;:::-;14091:139;;13818:419;;;:::o;14243:::-;14409:4;14447:2;14436:9;14432:18;14424:26;;14496:9;14490:4;14486:20;14482:1;14471:9;14467:17;14460:47;14524:131;14650:4;14524:131;:::i;:::-;14516:139;;14243:419;;;:::o;14668:::-;14834:4;14872:2;14861:9;14857:18;14849:26;;14921:9;14915:4;14911:20;14907:1;14896:9;14892:17;14885:47;14949:131;15075:4;14949:131;:::i;:::-;14941:139;;14668:419;;;:::o;15093:::-;15259:4;15297:2;15286:9;15282:18;15274:26;;15346:9;15340:4;15336:20;15332:1;15321:9;15317:17;15310:47;15374:131;15500:4;15374:131;:::i;:::-;15366:139;;15093:419;;;:::o;15518:::-;15684:4;15722:2;15711:9;15707:18;15699:26;;15771:9;15765:4;15761:20;15757:1;15746:9;15742:17;15735:47;15799:131;15925:4;15799:131;:::i;:::-;15791:139;;15518:419;;;:::o;15943:::-;16109:4;16147:2;16136:9;16132:18;16124:26;;16196:9;16190:4;16186:20;16182:1;16171:9;16167:17;16160:47;16224:131;16350:4;16224:131;:::i;:::-;16216:139;;15943:419;;;:::o;16368:::-;16534:4;16572:2;16561:9;16557:18;16549:26;;16621:9;16615:4;16611:20;16607:1;16596:9;16592:17;16585:47;16649:131;16775:4;16649:131;:::i;:::-;16641:139;;16368:419;;;:::o;16793:::-;16959:4;16997:2;16986:9;16982:18;16974:26;;17046:9;17040:4;17036:20;17032:1;17021:9;17017:17;17010:47;17074:131;17200:4;17074:131;:::i;:::-;17066:139;;16793:419;;;:::o;17218:::-;17384:4;17422:2;17411:9;17407:18;17399:26;;17471:9;17465:4;17461:20;17457:1;17446:9;17442:17;17435:47;17499:131;17625:4;17499:131;:::i;:::-;17491:139;;17218:419;;;:::o;17643:347::-;17798:4;17836:3;17825:9;17821:19;17813:27;;17850:133;17980:1;17969:9;17965:17;17956:6;17850:133;:::i;:::-;17643:347;;;;:::o;17996:222::-;18089:4;18127:2;18116:9;18112:18;18104:26;;18140:71;18208:1;18197:9;18193:17;18184:6;18140:71;:::i;:::-;17996:222;;;;:::o;18224:442::-;18373:4;18411:2;18400:9;18396:18;18388:26;;18424:71;18492:1;18481:9;18477:17;18468:6;18424:71;:::i;:::-;18505:72;18573:2;18562:9;18558:18;18549:6;18505:72;:::i;:::-;18587;18655:2;18644:9;18640:18;18631:6;18587:72;:::i;:::-;18224:442;;;;;;:::o;18753:98::-;18804:6;18838:5;18832:12;18822:22;;18753:98;;;:::o;18857:99::-;18909:6;18943:5;18937:12;18927:22;;18857:99;;;:::o;18962:147::-;19063:11;19100:3;19085:18;;18962:147;;;;:::o;19115:169::-;19199:11;19233:6;19228:3;19221:19;19273:4;19268:3;19264:14;19249:29;;19115:169;;;;:::o;19290:305::-;19330:3;19349:20;19367:1;19349:20;:::i;:::-;19344:25;;19383:20;19401:1;19383:20;:::i;:::-;19378:25;;19537:1;19469:66;19465:74;19462:1;19459:81;19456:107;;;19543:18;;:::i;:::-;19456:107;19587:1;19584;19580:9;19573:16;;19290:305;;;;:::o;19601:185::-;19641:1;19658:20;19676:1;19658:20;:::i;:::-;19653:25;;19692:20;19710:1;19692:20;:::i;:::-;19687:25;;19731:1;19721:35;;19736:18;;:::i;:::-;19721:35;19778:1;19775;19771:9;19766:14;;19601:185;;;;:::o;19792:348::-;19832:7;19855:20;19873:1;19855:20;:::i;:::-;19850:25;;19889:20;19907:1;19889:20;:::i;:::-;19884:25;;20077:1;20009:66;20005:74;20002:1;19999:81;19994:1;19987:9;19980:17;19976:105;19973:131;;;20084:18;;:::i;:::-;19973:131;20132:1;20129;20125:9;20114:20;;19792:348;;;;:::o;20146:191::-;20186:4;20206:20;20224:1;20206:20;:::i;:::-;20201:25;;20240:20;20258:1;20240:20;:::i;:::-;20235:25;;20279:1;20276;20273:8;20270:34;;;20284:18;;:::i;:::-;20270:34;20329:1;20326;20322:9;20314:17;;20146:191;;;;:::o;20343:96::-;20380:7;20409:24;20427:5;20409:24;:::i;:::-;20398:35;;20343:96;;;:::o;20445:90::-;20479:7;20522:5;20515:13;20508:21;20497:32;;20445:90;;;:::o;20541:126::-;20578:7;20618:42;20611:5;20607:54;20596:65;;20541:126;;;:::o;20673:77::-;20710:7;20739:5;20728:16;;20673:77;;;:::o;20756:307::-;20824:1;20834:113;20848:6;20845:1;20842:13;20834:113;;;20933:1;20928:3;20924:11;20918:18;20914:1;20909:3;20905:11;20898:39;20870:2;20867:1;20863:10;20858:15;;20834:113;;;20965:6;20962:1;20959:13;20956:101;;;21045:1;21036:6;21031:3;21027:16;21020:27;20956:101;20805:258;20756:307;;;:::o;21069:180::-;21117:77;21114:1;21107:88;21214:4;21211:1;21204:15;21238:4;21235:1;21228:15;21255:180;21303:77;21300:1;21293:88;21400:4;21397:1;21390:15;21424:4;21421:1;21414:15;21564:117;21673:1;21670;21663:12;21687:102;21728:6;21779:2;21775:7;21770:2;21763:5;21759:14;21755:28;21745:38;;21687:102;;;:::o;21795:166::-;21935:18;21931:1;21923:6;21919:14;21912:42;21795:166;:::o;21967:225::-;22107:34;22103:1;22095:6;22091:14;22084:58;22176:8;22171:2;22163:6;22159:15;22152:33;21967:225;:::o;22198:167::-;22338:19;22334:1;22326:6;22322:14;22315:43;22198:167;:::o;22371:225::-;22511:34;22507:1;22499:6;22495:14;22488:58;22580:8;22575:2;22567:6;22563:15;22556:33;22371:225;:::o;22602:169::-;22742:21;22738:1;22730:6;22726:14;22719:45;22602:169;:::o;22777:182::-;22917:34;22913:1;22905:6;22901:14;22894:58;22777:182;:::o;22965:171::-;23105:23;23101:1;23093:6;23089:14;23082:47;22965:171;:::o;23142:167::-;23282:19;23278:1;23270:6;23266:14;23259:43;23142:167;:::o;23315:165::-;23455:17;23451:1;23443:6;23439:14;23432:41;23315:165;:::o;23486:::-;23626:17;23622:1;23614:6;23610:14;23603:41;23486:165;:::o;23657:179::-;23797:31;23793:1;23785:6;23781:14;23774:55;23657:179;:::o;23842:229::-;23982:34;23978:1;23970:6;23966:14;23959:58;24051:12;24046:2;24038:6;24034:15;24027:37;23842:229;:::o;24077:181::-;24217:33;24213:1;24205:6;24201:14;24194:57;24077:181;:::o;24264:122::-;24337:24;24355:5;24337:24;:::i;:::-;24330:5;24327:35;24317:63;;24376:1;24373;24366:12;24317:63;24264:122;:::o;24392:116::-;24462:21;24477:5;24462:21;:::i;:::-;24455:5;24452:32;24442:60;;24498:1;24495;24488:12;24442:60;24392:116;:::o;24514:122::-;24587:24;24605:5;24587:24;:::i;:::-;24580:5;24577:35;24567:63;;24626:1;24623;24616:12;24567:63;24514:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1653400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"airdropRate()": "2474",
								"airdropSince()": "2518",
								"airdropStatus()": "2517",
								"blockTimestamp()": "381",
								"calculateWeek(uint256)": "infinite",
								"changeAirdropPercentage(uint256)": "infinite",
								"changePenaltyFee(uint256)": "infinite",
								"claimAirdrop()": "infinite",
								"hasStake()": "infinite",
								"owner()": "2545",
								"renounceOwnership()": "30488",
								"stake(uint256,uint256)": "infinite",
								"stakingPenaltyRate()": "2473",
								"startAirdrop()": "48854",
								"token_address()": "2653",
								"transferOwnership(address)": "30857",
								"withdrawStake()": "infinite"
							},
							"internal": {
								"_calculateAirdrop(uint256)": "infinite",
								"_calculateStakeReward(struct Staking.Stake memory)": "infinite",
								"_calculateStakingDuration(uint256)": "infinite",
								"_calculateStakingWithPenalty(uint256,uint256)": "infinite",
								"_checkAirdropStatus()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "CODESIZE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "tag",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1821,
									"end": 1828,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 812,
									"end": 814,
									"name": "PUSH",
									"source": 7,
									"value": "F"
								},
								{
									"begin": 791,
									"end": 809,
									"name": "PUSH",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 791,
									"end": 814,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 791,
									"end": 814,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 791,
									"end": 814,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 791,
									"end": 814,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 838,
									"end": 840,
									"name": "PUSH",
									"source": 7,
									"value": "50"
								},
								{
									"begin": 824,
									"end": 835,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 824,
									"end": 840,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 824,
									"end": 840,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 824,
									"end": 840,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 824,
									"end": 840,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 867,
									"end": 872,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 851,
									"end": 864,
									"name": "PUSH",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 851,
									"end": 864,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 851,
									"end": 872,
									"name": "PUSH",
									"source": 7,
									"value": "100"
								},
								{
									"begin": 851,
									"end": 872,
									"name": "EXP",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 851,
									"end": 872,
									"name": "MUL",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "NOT",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 851,
									"end": 872,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "MUL",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "OR",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 909,
									"end": 910,
									"name": "PUSH",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 883,
									"end": 897,
									"name": "PUSH",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 883,
									"end": 906,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 898,
									"end": 905,
									"name": "PUSH",
									"source": 7,
									"value": "76A700"
								},
								{
									"begin": 883,
									"end": 906,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 883,
									"end": 906,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 883,
									"end": 906,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 883,
									"end": 906,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 883,
									"end": 906,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 883,
									"end": 906,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 883,
									"end": 906,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 883,
									"end": 906,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 883,
									"end": 906,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 883,
									"end": 906,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 883,
									"end": 906,
									"name": "KECCAK256",
									"source": 7
								},
								{
									"begin": 883,
									"end": 910,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 883,
									"end": 910,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 883,
									"end": 910,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 883,
									"end": 910,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 947,
									"end": 948,
									"name": "PUSH",
									"source": 7,
									"value": "7"
								},
								{
									"begin": 920,
									"end": 934,
									"name": "PUSH",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 920,
									"end": 944,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 935,
									"end": 943,
									"name": "PUSH",
									"source": 7,
									"value": "ED4E00"
								},
								{
									"begin": 920,
									"end": 944,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 920,
									"end": 944,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 920,
									"end": 944,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 920,
									"end": 944,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 920,
									"end": 944,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 920,
									"end": 944,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 920,
									"end": 944,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 920,
									"end": 944,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 920,
									"end": 944,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 920,
									"end": 944,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 920,
									"end": 944,
									"name": "KECCAK256",
									"source": 7
								},
								{
									"begin": 920,
									"end": 948,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 920,
									"end": 948,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 920,
									"end": 948,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 920,
									"end": 948,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 985,
									"end": 986,
									"name": "PUSH",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 958,
									"end": 972,
									"name": "PUSH",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 958,
									"end": 982,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 973,
									"end": 981,
									"name": "PUSH",
									"source": 7,
									"value": "1E13380"
								},
								{
									"begin": 958,
									"end": 982,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 958,
									"end": 982,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 958,
									"end": 982,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 958,
									"end": 982,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 958,
									"end": 982,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 958,
									"end": 982,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 958,
									"end": 982,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 958,
									"end": 982,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 958,
									"end": 982,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 958,
									"end": 982,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 958,
									"end": 982,
									"name": "KECCAK256",
									"source": 7
								},
								{
									"begin": 958,
									"end": 986,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 958,
									"end": 986,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 958,
									"end": 986,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 958,
									"end": 986,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "14"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 6,
									"value": "11"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 693,
									"end": 700,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 6
								},
								{
									"begin": 712,
									"end": 729,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 712,
									"end": 729,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2550,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2604,
									"end": 2612,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2594,
									"end": 2602,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 7,
									"end": 150,
									"name": "tag",
									"source": 8,
									"value": "18"
								},
								{
									"begin": 7,
									"end": 150,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 64,
									"end": 69,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 95,
									"end": 101,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 89,
									"end": 102,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 80,
									"end": 102,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 80,
									"end": 102,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 111,
									"end": 144,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 138,
									"end": 143,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 111,
									"end": 144,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "21"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "tag",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 7,
									"end": 150,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 7,
									"end": 150,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 7,
									"end": 150,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 7,
									"end": 150,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 7,
									"end": 150,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 156,
									"end": 507,
									"name": "tag",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 156,
									"end": 507,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 226,
									"end": 232,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 275,
									"end": 277,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 263,
									"end": 272,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 254,
									"end": 261,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 250,
									"end": 273,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 246,
									"end": 278,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 243,
									"end": 362,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 243,
									"end": 362,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "23"
								},
								{
									"begin": 243,
									"end": 362,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 281,
									"end": 360,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 281,
									"end": 360,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "25"
								},
								{
									"begin": 281,
									"end": 360,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 281,
									"end": 360,
									"name": "tag",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 281,
									"end": 360,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 243,
									"end": 362,
									"name": "tag",
									"source": 8,
									"value": "23"
								},
								{
									"begin": 243,
									"end": 362,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 401,
									"end": 402,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 426,
									"end": 490,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "26"
								},
								{
									"begin": 482,
									"end": 489,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 473,
									"end": 479,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 462,
									"end": 471,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 458,
									"end": 480,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 426,
									"end": 490,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "18"
								},
								{
									"begin": 426,
									"end": 490,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 426,
									"end": 490,
									"name": "tag",
									"source": 8,
									"value": "26"
								},
								{
									"begin": 426,
									"end": 490,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 416,
									"end": 490,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 416,
									"end": 490,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 372,
									"end": 500,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 156,
									"end": 507,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 156,
									"end": 507,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 156,
									"end": 507,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 156,
									"end": 507,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 156,
									"end": 507,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 594,
									"end": 690,
									"name": "tag",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 594,
									"end": 690,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 631,
									"end": 638,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 660,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "31"
								},
								{
									"begin": 678,
									"end": 683,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 660,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "32"
								},
								{
									"begin": 660,
									"end": 684,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 660,
									"end": 684,
									"name": "tag",
									"source": 8,
									"value": "31"
								},
								{
									"begin": 660,
									"end": 684,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 649,
									"end": 684,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 649,
									"end": 684,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 594,
									"end": 690,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 594,
									"end": 690,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 594,
									"end": 690,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 594,
									"end": 690,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 696,
									"end": 822,
									"name": "tag",
									"source": 8,
									"value": "32"
								},
								{
									"begin": 696,
									"end": 822,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 733,
									"end": 740,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 773,
									"end": 815,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 766,
									"end": 771,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 762,
									"end": 816,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 751,
									"end": 816,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 751,
									"end": 816,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 696,
									"end": 822,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 696,
									"end": 822,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 696,
									"end": 822,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 696,
									"end": 822,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 951,
									"end": 1068,
									"name": "tag",
									"source": 8,
									"value": "25"
								},
								{
									"begin": 951,
									"end": 1068,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1060,
									"end": 1061,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1057,
									"end": 1058,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1050,
									"end": 1062,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1074,
									"end": 1196,
									"name": "tag",
									"source": 8,
									"value": "21"
								},
								{
									"begin": 1074,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1147,
									"end": 1171,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "38"
								},
								{
									"begin": 1165,
									"end": 1170,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1147,
									"end": 1171,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 1147,
									"end": 1171,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 1147,
									"end": 1171,
									"name": "tag",
									"source": 8,
									"value": "38"
								},
								{
									"begin": 1147,
									"end": 1171,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1140,
									"end": 1145,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1137,
									"end": 1172,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 1127,
									"end": 1190,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "39"
								},
								{
									"begin": 1127,
									"end": 1190,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1186,
									"end": 1187,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1183,
									"end": 1184,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1176,
									"end": 1188,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1127,
									"end": 1190,
									"name": "tag",
									"source": 8,
									"value": "39"
								},
								{
									"begin": 1127,
									"end": 1190,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1074,
									"end": 1196,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1074,
									"end": 1196,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "tag",
									"source": 7,
									"value": "14"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202e33eea25d2d72d72b0e974fd72d2516e232ef634c30469895eb254c8d4bc4e264736f6c63430008070033",
									".code": [
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "8DA5CB5B"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "BED9D861"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "BED9D861"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "CB79C2E1"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "D2A569C3"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "D5DBDF1B"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "F2FDE38B"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "tag",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "8DA5CB5B"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "ADB61832"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "B5D9DF83"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "B87DA76D"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "7B0472F0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "7B0472F0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "8891CF0D"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "8C63F97F"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "8C8E8FEE"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "10486B6A"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "2CF1A5FB"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "5B88349D"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "715018A6"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "tag",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "tag",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "tag",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "tag",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "tag",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "tag",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "tag",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "tag",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "tag",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "tag",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "tag",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "tag",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "tag",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "tag",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "tag",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "tag",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "tag",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "tag",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "tag",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "tag",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "tag",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "tag",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "tag",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "tag",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "tag",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "tag",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "tag",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6645,
											"end": 6666,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 6645,
											"end": 6666,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 6645,
											"end": 6666,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6645,
											"end": 6666,
											"name": "tag",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 6645,
											"end": 6666,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6701,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6704,
											"end": 6716,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6717,
											"end": 6727,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6767,
											"end": 6768,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6746,
											"end": 6756,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6746,
											"end": 6763,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6746,
											"end": 6763,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6746,
											"end": 6763,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6746,
											"end": 6768,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 6746,
											"end": 6768,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "tag",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "tag",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6800,
											"end": 6829,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6847,
											"end": 6848,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6850,
											"end": 6851,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6853,
											"end": 6863,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6800,
											"end": 6864,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6800,
											"end": 6864,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6875,
											"end": 6889,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6892,
											"end": 6925,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 6914,
											"end": 6924,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6892,
											"end": 6913,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 6892,
											"end": 6925,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6892,
											"end": 6925,
											"name": "tag",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 6892,
											"end": 6925,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6875,
											"end": 6925,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6875,
											"end": 6925,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6968,
											"end": 6983,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6947,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6953,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6940,
											"end": 6953,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6953,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6965,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 6940,
											"end": 6965,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6965,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6983,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 6936,
											"end": 7150,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6936,
											"end": 7150,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 6936,
											"end": 7150,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7134,
											"end": 7138,
											"name": "PUSH",
											"source": 7,
											"value": "3E8"
										},
										{
											"begin": 7112,
											"end": 7130,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 7112,
											"end": 7130,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7109,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "tag",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "tag",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7077,
											"end": 7081,
											"name": "PUSH",
											"source": 7,
											"value": "3E8"
										},
										{
											"begin": 7055,
											"end": 7073,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 7055,
											"end": 7073,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 7035,
											"end": 7045,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 7035,
											"end": 7052,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7035,
											"end": 7052,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7035,
											"end": 7052,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "tag",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "tag",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "tag",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7006,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7014,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6999,
											"end": 7014,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7139,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7139,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7139,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6936,
											"end": 7150,
											"name": "tag",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 6936,
											"end": 7150,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7208,
											"end": 7209,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7164,
											"end": 7205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 7178,
											"end": 7188,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7178,
											"end": 7204,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 7178,
											"end": 7204,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7178,
											"end": 7204,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7164,
											"end": 7177,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 7164,
											"end": 7205,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7164,
											"end": 7205,
											"name": "tag",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 7164,
											"end": 7205,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7164,
											"end": 7209,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7225,
											"end": 7240,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7243,
											"end": 7279,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 7261,
											"end": 7271,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7261,
											"end": 7278,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7261,
											"end": 7278,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7261,
											"end": 7278,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7243,
											"end": 7260,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 7243,
											"end": 7279,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7243,
											"end": 7279,
											"name": "tag",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 7243,
											"end": 7279,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7225,
											"end": 7279,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7225,
											"end": 7279,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7326,
											"end": 7333,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7300,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7306,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7293,
											"end": 7306,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7306,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7323,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 7293,
											"end": 7323,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7333,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7333,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7333,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7333,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7333,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7211,
											"end": 7344,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "tag",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7397,
											"end": 7398,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7364,
											"end": 7371,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7377,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7364,
											"end": 7377,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7377,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7394,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 7364,
											"end": 7394,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7398,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7398,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7398,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7398,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7398,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "tag",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7445,
											"end": 7451,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7426,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7432,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7419,
											"end": 7432,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7432,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7442,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 7419,
											"end": 7442,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7451,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7451,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7451,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7451,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7451,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7484,
											"end": 7494,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7484,
											"end": 7501,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7484,
											"end": 7501,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7484,
											"end": 7501,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7461,
											"end": 7468,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7461,
											"end": 7481,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7461,
											"end": 7481,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7461,
											"end": 7501,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7461,
											"end": 7501,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7461,
											"end": 7501,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7461,
											"end": 7501,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7461,
											"end": 7501,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7519,
											"end": 7526,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7512,
											"end": 7526,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 7512,
											"end": 7526,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7512,
											"end": 7526,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7512,
											"end": 7526,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7512,
											"end": 7526,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "tag",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "tag",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2575,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 2575,
											"end": 2594,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 2575,
											"end": 2596,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2575,
											"end": 2596,
											"name": "tag",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 2575,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8509,
											"end": 8533,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8536,
											"end": 8548,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8549,
											"end": 8559,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 8509,
											"end": 8560,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8509,
											"end": 8560,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8600,
											"end": 8601,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8579,
											"end": 8589,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8579,
											"end": 8596,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8579,
											"end": 8596,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8579,
											"end": 8596,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8579,
											"end": 8601,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 8579,
											"end": 8601,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "105"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "tag",
											"source": 7,
											"value": "105"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "tag",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8633,
											"end": 8652,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8655,
											"end": 8696,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 8669,
											"end": 8679,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8669,
											"end": 8695,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 8669,
											"end": 8695,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8669,
											"end": 8695,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8655,
											"end": 8668,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 8655,
											"end": 8696,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8655,
											"end": 8696,
											"name": "tag",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 8655,
											"end": 8696,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8633,
											"end": 8696,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8633,
											"end": 8696,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8731,
											"end": 8732,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8711,
											"end": 8721,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8711,
											"end": 8728,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8711,
											"end": 8728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8711,
											"end": 8728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8711,
											"end": 8732,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 8707,
											"end": 9085,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8707,
											"end": 9085,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "107"
										},
										{
											"begin": 8707,
											"end": 9085,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8771,
											"end": 8772,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8756,
											"end": 8767,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8756,
											"end": 8772,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 8756,
											"end": 8772,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "110"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "tag",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "tag",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8843,
											"end": 8844,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8813,
											"end": 8823,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8813,
											"end": 8840,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 8813,
											"end": 8840,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8813,
											"end": 8844,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8813,
											"end": 8844,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8813,
											"end": 8844,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 8813,
											"end": 8844,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8887,
											"end": 8902,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8868,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8884,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 8858,
											"end": 8884,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8902,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8902,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8902,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8902,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8917,
											"end": 9074,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "111"
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8996,
											"end": 9006,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 9024,
											"end": 9060,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 9042,
											"end": 9052,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 9042,
											"end": 9059,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9042,
											"end": 9059,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9042,
											"end": 9059,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 9024,
											"end": 9041,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 9024,
											"end": 9060,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9024,
											"end": 9060,
											"name": "tag",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 9024,
											"end": 9060,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8917,
											"end": 8939,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 8917,
											"end": 9074,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8917,
											"end": 9074,
											"name": "tag",
											"source": 7,
											"value": "111"
										},
										{
											"begin": 8917,
											"end": 9074,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8707,
											"end": 9085,
											"name": "tag",
											"source": 7,
											"value": "107"
										},
										{
											"begin": 8707,
											"end": 9085,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8447,
											"end": 9091,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8447,
											"end": 9091,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "tag",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 2261,
											"end": 2280,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "tag",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3241,
											"end": 3242,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3206,
											"end": 3218,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3219,
											"end": 3229,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3237,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3206,
											"end": 3237,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3237,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3242,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "tag",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "tag",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3312,
											"end": 3313,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3281,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3296,
											"end": 3307,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3313,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3313,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "129"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "tag",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "tag",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3433,
											"end": 3450,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3453,
											"end": 3468,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 3433,
											"end": 3468,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3433,
											"end": 3468,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3643,
											"end": 3649,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3663,
											"end": 3672,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3700,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3701,
											"end": 3712,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3742,
											"end": 3751,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3739,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "tag",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3766,
											"end": 3767,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 3782,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3796,
											"end": 3797,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3609,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3610,
											"end": 3620,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3818,
											"end": 3960,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3893,
											"end": 3903,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3925,
											"end": 3929,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 3944,
											"end": 3950,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3818,
											"end": 3844,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 3818,
											"end": 3960,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3818,
											"end": 3960,
											"name": "tag",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 3818,
											"end": 3960,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4034,
											"end": 4044,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "PUSH",
											"source": 7,
											"value": "B4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED"
										},
										{
											"begin": 4046,
											"end": 4052,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4054,
											"end": 4063,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4080,
											"end": 4089,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4066,
											"end": 4077,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "133"
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "tag",
											"source": 7,
											"value": "133"
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "134"
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "135"
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "tag",
											"source": 7,
											"value": "134"
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "LOG2",
											"source": 7
										},
										{
											"begin": 3005,
											"end": 4098,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 2303,
											"end": 2321,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "tag",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "tag",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "tag",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4267,
											"end": 4269,
											"name": "PUSH",
											"source": 7,
											"value": "1E"
										},
										{
											"begin": 4257,
											"end": 4263,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4257,
											"end": 4269,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 4257,
											"end": 4269,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "142"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "tag",
											"source": 7,
											"value": "142"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "tag",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4320,
											"end": 4326,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4299,
											"end": 4317,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 4299,
											"end": 4326,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4299,
											"end": 4326,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4299,
											"end": 4326,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 4299,
											"end": 4326,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "PUSH",
											"source": 7,
											"value": "CFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9"
										},
										{
											"begin": 4356,
											"end": 4362,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "tag",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "LOG1",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "tag",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8017,
											"end": 8024,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8043,
											"end": 8058,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 8036,
											"end": 8058,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8036,
											"end": 8058,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "tag",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8134,
											"end": 8141,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8192,
											"end": 8198,
											"name": "PUSH",
											"source": 7,
											"value": "93A80"
										},
										{
											"begin": 8179,
											"end": 8188,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8161,
											"end": 8176,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "tag",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "tag",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8153,
											"end": 8198,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8153,
											"end": 8198,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "tag",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "tag",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "152"
										},
										{
											"begin": 2261,
											"end": 2280,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "tag",
											"source": 1,
											"value": "152"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5793,
											"end": 5816,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5819,
											"end": 5831,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5832,
											"end": 5842,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5882,
											"end": 5883,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5861,
											"end": 5871,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5861,
											"end": 5878,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5861,
											"end": 5878,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5861,
											"end": 5878,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5861,
											"end": 5883,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 5861,
											"end": 5883,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "tag",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "tag",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5916,
											"end": 5930,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5933,
											"end": 5966,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 5955,
											"end": 5965,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5933,
											"end": 5954,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 5933,
											"end": 5966,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5933,
											"end": 5966,
											"name": "tag",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 5933,
											"end": 5966,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5916,
											"end": 5966,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5916,
											"end": 5966,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 5995,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5996,
											"end": 6006,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6047,
											"end": 6062,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 6022,
											"end": 6032,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6022,
											"end": 6044,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 6022,
											"end": 6044,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6022,
											"end": 6044,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6022,
											"end": 6062,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "157"
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6096,
											"end": 6118,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6136,
											"end": 6158,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6175,
											"end": 6230,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 6204,
											"end": 6214,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6204,
											"end": 6221,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6204,
											"end": 6221,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6204,
											"end": 6221,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6223,
											"end": 6229,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6175,
											"end": 6203,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 6175,
											"end": 6230,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6175,
											"end": 6230,
											"name": "tag",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 6175,
											"end": 6230,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6078,
											"end": 6230,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6078,
											"end": 6230,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6078,
											"end": 6230,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6078,
											"end": 6230,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6245,
											"end": 6399,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6324,
											"end": 6334,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 6370,
											"end": 6384,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6353,
											"end": 6367,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6353,
											"end": 6384,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 6353,
											"end": 6384,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6353,
											"end": 6384,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6353,
											"end": 6384,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 6353,
											"end": 6384,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6353,
											"end": 6384,
											"name": "tag",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 6353,
											"end": 6384,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6245,
											"end": 6267,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 6245,
											"end": 6399,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6245,
											"end": 6399,
											"name": "tag",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 6245,
											"end": 6399,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6064,
											"end": 6410,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6064,
											"end": 6410,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "tag",
											"source": 7,
											"value": "157"
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6430,
											"end": 6579,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6509,
											"end": 6519,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 6558,
											"end": 6564,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6538,
											"end": 6548,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6538,
											"end": 6555,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6538,
											"end": 6555,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6538,
											"end": 6555,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6538,
											"end": 6564,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 6538,
											"end": 6564,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6538,
											"end": 6564,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6538,
											"end": 6564,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 6538,
											"end": 6564,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6538,
											"end": 6564,
											"name": "tag",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 6538,
											"end": 6564,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6430,
											"end": 6452,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 6430,
											"end": 6579,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6430,
											"end": 6579,
											"name": "tag",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 6430,
											"end": 6579,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "tag",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5675,
											"end": 6596,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5675,
											"end": 6596,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "165"
										},
										{
											"begin": 2303,
											"end": 2321,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "tag",
											"source": 1,
											"value": "165"
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "tag",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "tag",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7713,
											"end": 7728,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 7698,
											"end": 7710,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 7698,
											"end": 7728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7698,
											"end": 7728,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7698,
											"end": 7728,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 7698,
											"end": 7728,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7754,
											"end": 7758,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 7738,
											"end": 7751,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 7738,
											"end": 7751,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "tag",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7867,
											"end": 7870,
											"name": "PUSH",
											"source": 7,
											"value": "C8"
										},
										{
											"begin": 7857,
											"end": 7863,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7857,
											"end": 7870,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7857,
											"end": 7870,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "173"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "tag",
											"source": 7,
											"value": "173"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "tag",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7914,
											"end": 7920,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7900,
											"end": 7911,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7900,
											"end": 7920,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7900,
											"end": 7920,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7900,
											"end": 7920,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 7900,
											"end": 7920,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "PUSH",
											"source": 7,
											"value": "CC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E"
										},
										{
											"begin": 7950,
											"end": 7956,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "tag",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "LOG1",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2189,
											"end": 2190,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2177,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 2263,
											"end": 2271,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4613,
											"end": 4980,
											"name": "tag",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 4613,
											"end": 4980,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4716,
											"end": 4723,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4969,
											"end": 4973,
											"name": "PUSH",
											"source": 7,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 4922,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 4948,
											"end": 4958,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4948,
											"end": 4964,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4948,
											"end": 4964,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4948,
											"end": 4964,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4922,
											"end": 4947,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "185"
										},
										{
											"begin": 4922,
											"end": 4965,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4922,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 4922,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4893,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4903,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4883,
											"end": 4903,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4903,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4857,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4864,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4847,
											"end": 4864,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4864,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "tag",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4846,
											"end": 4973,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 4846,
											"end": 4973,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4846,
											"end": 4973,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4846,
											"end": 4973,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 4846,
											"end": 4973,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4846,
											"end": 4973,
											"name": "tag",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 4846,
											"end": 4973,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4827,
											"end": 4973,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4827,
											"end": 4973,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4613,
											"end": 4980,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4613,
											"end": 4980,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4613,
											"end": 4980,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4613,
											"end": 4980,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8211,
											"end": 8390,
											"name": "tag",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 8211,
											"end": 8390,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8306,
											"end": 8313,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8375,
											"end": 8383,
											"name": "PUSH",
											"source": 7,
											"value": "1DFE200"
										},
										{
											"begin": 8367,
											"end": 8371,
											"name": "PUSH",
											"source": 7,
											"value": "3E8"
										},
										{
											"begin": 8352,
											"end": 8363,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8352,
											"end": 8363,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8338,
											"end": 8349,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "tag",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "tag",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8336,
											"end": 8383,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 8336,
											"end": 8383,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8336,
											"end": 8383,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8336,
											"end": 8383,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 8336,
											"end": 8383,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8336,
											"end": 8383,
											"name": "tag",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 8336,
											"end": 8383,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8329,
											"end": 8383,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8329,
											"end": 8383,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8211,
											"end": 8390,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8211,
											"end": 8390,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8211,
											"end": 8390,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8211,
											"end": 8390,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2415,
											"end": 2530,
											"name": "tag",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 2415,
											"end": 2530,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2495,
											"end": 2499,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2478,
											"end": 2499,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2499,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2499,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2499,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2499,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "194"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "195"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "tag",
											"source": 7,
											"value": "195"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "tag",
											"source": 7,
											"value": "194"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2530,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 763,
											"end": 968,
											"name": "tag",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 875,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "198"
										},
										{
											"begin": 895,
											"end": 900,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 925,
											"end": 948,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 925,
											"end": 948,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 925,
											"end": 948,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 950,
											"end": 952,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 954,
											"end": 959,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "199"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "200"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "tag",
											"source": 4,
											"value": "199"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 875,
											"end": 894,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "201"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "tag",
											"source": 4,
											"value": "198"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 1433,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "tag",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 1422,
											"end": 1427,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "tag",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "207"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "208"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "207"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2604,
											"end": 2612,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "tag",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "211"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "212"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "213"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "tag",
											"source": 1,
											"value": "212"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "tag",
											"source": 1,
											"value": "211"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2598,
											"end": 2605,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2598,
											"end": 2616,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2598,
											"end": 2616,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2598,
											"end": 2616,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2598,
											"end": 2616,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "215"
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1162,
											"end": 1189,
											"name": "PUSH",
											"source": 4,
											"value": "23B872DD"
										},
										{
											"begin": 1162,
											"end": 1189,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 1162,
											"end": 1189,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 1191,
											"end": 1195,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1197,
											"end": 1199,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1201,
											"end": 1206,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "216"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "217"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "tag",
											"source": 4,
											"value": "216"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1112,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "201"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "tag",
											"source": 4,
											"value": "215"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2629,
											"end": 2838,
											"name": "tag",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 2629,
											"end": 2838,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1716,
											"end": 1717,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2809,
											"end": 2816,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2629,
											"end": 2838,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "tag",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5103,
											"end": 5110,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5112,
											"end": 5119,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5198,
											"end": 5202,
											"name": "PUSH",
											"source": 7,
											"value": "3E8"
										},
										{
											"begin": 5176,
											"end": 5194,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 5176,
											"end": 5194,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5167,
											"end": 5173,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "220"
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "tag",
											"source": 7,
											"value": "220"
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "tag",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5156,
											"end": 5162,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "tag",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5259,
											"end": 5263,
											"name": "PUSH",
											"source": 7,
											"value": "3E8"
										},
										{
											"begin": 5237,
											"end": 5255,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 5237,
											"end": 5255,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5234,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "tag",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "tag",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5217,
											"end": 5223,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "225"
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "tag",
											"source": 7,
											"value": "225"
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5135,
											"end": 5274,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5135,
											"end": 5274,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5135,
											"end": 5274,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5135,
											"end": 5274,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4376,
											"end": 4607,
											"name": "tag",
											"source": 7,
											"value": "185"
										},
										{
											"begin": 4376,
											"end": 4607,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4473,
											"end": 4480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4592,
											"end": 4600,
											"name": "PUSH",
											"source": 7,
											"value": "1E13380"
										},
										{
											"begin": 4584,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "D3C21BCECCEDA1000000"
										},
										{
											"begin": 4575,
											"end": 4580,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4557,
											"end": 4572,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "tag",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4556,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "228"
										},
										{
											"begin": 4556,
											"end": 4588,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4556,
											"end": 4588,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4556,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 4556,
											"end": 4588,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4556,
											"end": 4588,
											"name": "tag",
											"source": 7,
											"value": "228"
										},
										{
											"begin": 4556,
											"end": 4588,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4555,
											"end": 4600,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "229"
										},
										{
											"begin": 4555,
											"end": 4600,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4555,
											"end": 4600,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4555,
											"end": 4600,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 4555,
											"end": 4600,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4555,
											"end": 4600,
											"name": "tag",
											"source": 7,
											"value": "229"
										},
										{
											"begin": 4555,
											"end": 4600,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4548,
											"end": 4600,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4548,
											"end": 4600,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4376,
											"end": 4607,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4376,
											"end": 4607,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4376,
											"end": 4607,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4376,
											"end": 4607,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "tag",
											"source": 4,
											"value": "201"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4166,
											"end": 4189,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "231"
										},
										{
											"begin": 4220,
											"end": 4224,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4200,
											"end": 4205,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "232"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "tag",
											"source": 4,
											"value": "231"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4295,
											"end": 4296,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4275,
											"end": 4285,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4275,
											"end": 4296,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "233"
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4370,
											"end": 4380,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "234"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "235"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "tag",
											"source": 4,
											"value": "234"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "236"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "tag",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "tag",
											"source": 4,
											"value": "236"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "tag",
											"source": 4,
											"value": "233"
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3817,
											"end": 4453,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "tag",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 4059,
											"end": 4065,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4067,
											"end": 4071,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4088,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4037,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "tag",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4030,
											"end": 4089,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4030,
											"end": 4089,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "tag",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5125,
											"end": 5137,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5182,
											"end": 5187,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5157,
											"end": 5178,
											"name": "SELFBALANCE",
											"source": 5
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "245"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "tag",
											"source": 5,
											"value": "245"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "tag",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5241,
											"end": 5253,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5255,
											"end": 5278,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5288,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5293,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5282,
											"end": 5293,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5301,
											"end": 5306,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5308,
											"end": 5312,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "248"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "3F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "250"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 5,
											"value": "250"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 5357,
											"end": 5363,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5374,
											"end": 5384,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5386,
											"end": 5398,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5330,
											"end": 5356,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "tag",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "tag",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7646,
											"end": 7658,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 7674,
											"end": 7681,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "255"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7722,
											"end": 7723,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7701,
											"end": 7711,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7701,
											"end": 7718,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7701,
											"end": 7723,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "256"
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7916,
											"end": 7934,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "257"
										},
										{
											"begin": 7927,
											"end": 7933,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 7916,
											"end": 7926,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "258"
										},
										{
											"begin": 7916,
											"end": 7934,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 7916,
											"end": 7934,
											"name": "tag",
											"source": 5,
											"value": "257"
										},
										{
											"begin": 7916,
											"end": 7934,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "259"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "260"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "261"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "tag",
											"source": 5,
											"value": "260"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "tag",
											"source": 5,
											"value": "259"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "tag",
											"source": 5,
											"value": "256"
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8003,
											"end": 8013,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "254"
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "tag",
											"source": 5,
											"value": "255"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "263"
										},
										{
											"begin": 8052,
											"end": 8062,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8064,
											"end": 8076,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8044,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "264"
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "tag",
											"source": 5,
											"value": "263"
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "tag",
											"source": 5,
											"value": "254"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "tag",
											"source": 5,
											"value": "258"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1235,
											"end": 1239,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1487,
											"end": 1488,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1472,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 8616,
											"end": 9156,
											"name": "tag",
											"source": 5,
											"value": "264"
										},
										{
											"begin": 8616,
											"end": 9156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8795,
											"end": 8796,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8775,
											"end": 8785,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8775,
											"end": 8796,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "267"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 9003,
											"end": 9013,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8997,
											"end": 9014,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9059,
											"end": 9074,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9046,
											"end": 9056,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9042,
											"end": 9044,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 9038,
											"end": 9057,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9031,
											"end": 9075,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "tag",
											"source": 5,
											"value": "267"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9126,
											"end": 9138,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "269"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "270"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "tag",
											"source": 5,
											"value": "269"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "271"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "272"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "271"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "272"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 8,
											"value": "274"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 53,
											"end": 58,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 289,
											"name": "tag",
											"source": 8,
											"value": "278"
										},
										{
											"begin": 152,
											"end": 289,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 206,
											"end": 211,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 237,
											"end": 243,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 231,
											"end": 244,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 222,
											"end": 244,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 222,
											"end": 244,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 253,
											"end": 283,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "280"
										},
										{
											"begin": 277,
											"end": 282,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 253,
											"end": 283,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "281"
										},
										{
											"begin": 253,
											"end": 283,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 253,
											"end": 283,
											"name": "tag",
											"source": 8,
											"value": "280"
										},
										{
											"begin": 253,
											"end": 283,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 152,
											"end": 289,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 152,
											"end": 289,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 152,
											"end": 289,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 152,
											"end": 289,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 152,
											"end": 289,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 295,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 295,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 341,
											"end": 346,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 379,
											"end": 385,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 366,
											"end": 386,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 357,
											"end": 386,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 357,
											"end": 386,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 395,
											"end": 428,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "284"
										},
										{
											"begin": 422,
											"end": 427,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 395,
											"end": 428,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 395,
											"end": 428,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 395,
											"end": 428,
											"name": "tag",
											"source": 8,
											"value": "284"
										},
										{
											"begin": 395,
											"end": 428,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 295,
											"end": 434,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 295,
											"end": 434,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 295,
											"end": 434,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 295,
											"end": 434,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 295,
											"end": 434,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 440,
											"end": 769,
											"name": "tag",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 440,
											"end": 769,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 499,
											"end": 505,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 548,
											"end": 550,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 536,
											"end": 545,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 527,
											"end": 534,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 523,
											"end": 546,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 519,
											"end": 551,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 516,
											"end": 635,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 516,
											"end": 635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 516,
											"end": 635,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 554,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "288"
										},
										{
											"begin": 554,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 554,
											"end": 633,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 554,
											"end": 633,
											"name": "tag",
											"source": 8,
											"value": "288"
										},
										{
											"begin": 554,
											"end": 633,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 516,
											"end": 635,
											"name": "tag",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 516,
											"end": 635,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 674,
											"end": 675,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 699,
											"end": 752,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "290"
										},
										{
											"begin": 744,
											"end": 751,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 735,
											"end": 741,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 724,
											"end": 733,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 720,
											"end": 742,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 699,
											"end": 752,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "274"
										},
										{
											"begin": 699,
											"end": 752,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 699,
											"end": 752,
											"name": "tag",
											"source": 8,
											"value": "290"
										},
										{
											"begin": 699,
											"end": 752,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 689,
											"end": 752,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 689,
											"end": 752,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 645,
											"end": 762,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 440,
											"end": 769,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 440,
											"end": 769,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 440,
											"end": 769,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 440,
											"end": 769,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 440,
											"end": 769,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 775,
											"end": 1120,
											"name": "tag",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 775,
											"end": 1120,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 842,
											"end": 848,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 891,
											"end": 893,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 879,
											"end": 888,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 870,
											"end": 877,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 866,
											"end": 889,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 862,
											"end": 894,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 859,
											"end": 978,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 859,
											"end": 978,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 859,
											"end": 978,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 897,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 897,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 897,
											"end": 976,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 897,
											"end": 976,
											"name": "tag",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 897,
											"end": 976,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 859,
											"end": 978,
											"name": "tag",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 859,
											"end": 978,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1017,
											"end": 1018,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1042,
											"end": 1103,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "294"
										},
										{
											"begin": 1095,
											"end": 1102,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1086,
											"end": 1092,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1075,
											"end": 1084,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1071,
											"end": 1093,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1042,
											"end": 1103,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "278"
										},
										{
											"begin": 1042,
											"end": 1103,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1042,
											"end": 1103,
											"name": "tag",
											"source": 8,
											"value": "294"
										},
										{
											"begin": 1042,
											"end": 1103,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 988,
											"end": 1113,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 775,
											"end": 1120,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 775,
											"end": 1120,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 775,
											"end": 1120,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 775,
											"end": 1120,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 775,
											"end": 1120,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1126,
											"end": 1455,
											"name": "tag",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 1126,
											"end": 1455,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1185,
											"end": 1191,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1234,
											"end": 1236,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1222,
											"end": 1231,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1213,
											"end": 1220,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1209,
											"end": 1232,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1205,
											"end": 1237,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1202,
											"end": 1321,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1202,
											"end": 1321,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 1202,
											"end": 1321,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1240,
											"end": 1319,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 1240,
											"end": 1319,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 1240,
											"end": 1319,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1319,
											"name": "tag",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 1240,
											"end": 1319,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1202,
											"end": 1321,
											"name": "tag",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 1202,
											"end": 1321,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1360,
											"end": 1361,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1385,
											"end": 1438,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 1430,
											"end": 1437,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1421,
											"end": 1427,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1410,
											"end": 1419,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1406,
											"end": 1428,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1385,
											"end": 1438,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 1385,
											"end": 1438,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1385,
											"end": 1438,
											"name": "tag",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 1385,
											"end": 1438,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1438,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1438,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1331,
											"end": 1448,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1126,
											"end": 1455,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1126,
											"end": 1455,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1126,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1126,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1126,
											"end": 1455,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1461,
											"end": 1935,
											"name": "tag",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 1461,
											"end": 1935,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1529,
											"end": 1535,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1537,
											"end": 1543,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1586,
											"end": 1588,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1574,
											"end": 1583,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1572,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1561,
											"end": 1584,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1557,
											"end": 1589,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1554,
											"end": 1673,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1554,
											"end": 1673,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 1554,
											"end": 1673,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1592,
											"end": 1671,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 1592,
											"end": 1671,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 1592,
											"end": 1671,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1592,
											"end": 1671,
											"name": "tag",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 1592,
											"end": 1671,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1554,
											"end": 1673,
											"name": "tag",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 1554,
											"end": 1673,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1712,
											"end": 1713,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1737,
											"end": 1790,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "302"
										},
										{
											"begin": 1782,
											"end": 1789,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1773,
											"end": 1779,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1762,
											"end": 1771,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1758,
											"end": 1780,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1737,
											"end": 1790,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 1737,
											"end": 1790,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1737,
											"end": 1790,
											"name": "tag",
											"source": 8,
											"value": "302"
										},
										{
											"begin": 1737,
											"end": 1790,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1727,
											"end": 1790,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1727,
											"end": 1790,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1683,
											"end": 1800,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1839,
											"end": 1841,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1865,
											"end": 1918,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 1910,
											"end": 1917,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1901,
											"end": 1907,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1890,
											"end": 1899,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1886,
											"end": 1908,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1865,
											"end": 1918,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 1865,
											"end": 1918,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1865,
											"end": 1918,
											"name": "tag",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 1865,
											"end": 1918,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1855,
											"end": 1918,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1855,
											"end": 1918,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1810,
											"end": 1928,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1461,
											"end": 1935,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1461,
											"end": 1935,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1461,
											"end": 1935,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1461,
											"end": 1935,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1461,
											"end": 1935,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1461,
											"end": 1935,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1941,
											"end": 2059,
											"name": "tag",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 1941,
											"end": 2059,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2028,
											"end": 2052,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "306"
										},
										{
											"begin": 2046,
											"end": 2051,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2028,
											"end": 2052,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 2028,
											"end": 2052,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2028,
											"end": 2052,
											"name": "tag",
											"source": 8,
											"value": "306"
										},
										{
											"begin": 2028,
											"end": 2052,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2023,
											"end": 2026,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2016,
											"end": 2053,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1941,
											"end": 2059,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1941,
											"end": 2059,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1941,
											"end": 2059,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2065,
											"end": 2174,
											"name": "tag",
											"source": 8,
											"value": "308"
										},
										{
											"begin": 2065,
											"end": 2174,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2146,
											"end": 2167,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "310"
										},
										{
											"begin": 2161,
											"end": 2166,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2146,
											"end": 2167,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "311"
										},
										{
											"begin": 2146,
											"end": 2167,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2146,
											"end": 2167,
											"name": "tag",
											"source": 8,
											"value": "310"
										},
										{
											"begin": 2146,
											"end": 2167,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2141,
											"end": 2144,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2134,
											"end": 2168,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2065,
											"end": 2174,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2065,
											"end": 2174,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2065,
											"end": 2174,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2180,
											"end": 2553,
											"name": "tag",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 2180,
											"end": 2553,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2284,
											"end": 2287,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2312,
											"end": 2350,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "314"
										},
										{
											"begin": 2344,
											"end": 2349,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2312,
											"end": 2350,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "315"
										},
										{
											"begin": 2312,
											"end": 2350,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2312,
											"end": 2350,
											"name": "tag",
											"source": 8,
											"value": "314"
										},
										{
											"begin": 2312,
											"end": 2350,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2366,
											"end": 2454,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "316"
										},
										{
											"begin": 2447,
											"end": 2453,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2442,
											"end": 2445,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2366,
											"end": 2454,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "317"
										},
										{
											"begin": 2366,
											"end": 2454,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2366,
											"end": 2454,
											"name": "tag",
											"source": 8,
											"value": "316"
										},
										{
											"begin": 2366,
											"end": 2454,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2359,
											"end": 2454,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2359,
											"end": 2454,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2463,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "318"
										},
										{
											"begin": 2508,
											"end": 2514,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2506,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2496,
											"end": 2500,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2489,
											"end": 2494,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2485,
											"end": 2501,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2463,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "319"
										},
										{
											"begin": 2463,
											"end": 2515,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2463,
											"end": 2515,
											"name": "tag",
											"source": 8,
											"value": "318"
										},
										{
											"begin": 2463,
											"end": 2515,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2540,
											"end": 2546,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2535,
											"end": 2538,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2531,
											"end": 2547,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2524,
											"end": 2547,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2524,
											"end": 2547,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2288,
											"end": 2553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2180,
											"end": 2553,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2180,
											"end": 2553,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2180,
											"end": 2553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2180,
											"end": 2553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2180,
											"end": 2553,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2559,
											"end": 2923,
											"name": "tag",
											"source": 8,
											"value": "320"
										},
										{
											"begin": 2559,
											"end": 2923,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2647,
											"end": 2650,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2675,
											"end": 2714,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "322"
										},
										{
											"begin": 2708,
											"end": 2713,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2675,
											"end": 2714,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "323"
										},
										{
											"begin": 2675,
											"end": 2714,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2675,
											"end": 2714,
											"name": "tag",
											"source": 8,
											"value": "322"
										},
										{
											"begin": 2675,
											"end": 2714,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2730,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "324"
										},
										{
											"begin": 2794,
											"end": 2800,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2789,
											"end": 2792,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2730,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 2730,
											"end": 2801,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2730,
											"end": 2801,
											"name": "tag",
											"source": 8,
											"value": "324"
										},
										{
											"begin": 2730,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2723,
											"end": 2801,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2723,
											"end": 2801,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2810,
											"end": 2862,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "326"
										},
										{
											"begin": 2855,
											"end": 2861,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2850,
											"end": 2853,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2843,
											"end": 2847,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2836,
											"end": 2841,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2832,
											"end": 2848,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2810,
											"end": 2862,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "319"
										},
										{
											"begin": 2810,
											"end": 2862,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2810,
											"end": 2862,
											"name": "tag",
											"source": 8,
											"value": "326"
										},
										{
											"begin": 2810,
											"end": 2862,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2887,
											"end": 2916,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "327"
										},
										{
											"begin": 2909,
											"end": 2915,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2887,
											"end": 2916,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "328"
										},
										{
											"begin": 2887,
											"end": 2916,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2887,
											"end": 2916,
											"name": "tag",
											"source": 8,
											"value": "327"
										},
										{
											"begin": 2887,
											"end": 2916,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2882,
											"end": 2885,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2878,
											"end": 2917,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2871,
											"end": 2917,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2871,
											"end": 2917,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2651,
											"end": 2923,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2559,
											"end": 2923,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2559,
											"end": 2923,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2559,
											"end": 2923,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2559,
											"end": 2923,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2559,
											"end": 2923,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2929,
											"end": 3295,
											"name": "tag",
											"source": 8,
											"value": "329"
										},
										{
											"begin": 2929,
											"end": 3295,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3071,
											"end": 3074,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3092,
											"end": 3159,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "331"
										},
										{
											"begin": 3156,
											"end": 3158,
											"name": "PUSH",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 3151,
											"end": 3154,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3092,
											"end": 3159,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 3092,
											"end": 3159,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3092,
											"end": 3159,
											"name": "tag",
											"source": 8,
											"value": "331"
										},
										{
											"begin": 3092,
											"end": 3159,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3085,
											"end": 3159,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3085,
											"end": 3159,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3168,
											"end": 3261,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "332"
										},
										{
											"begin": 3257,
											"end": 3260,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3168,
											"end": 3261,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "333"
										},
										{
											"begin": 3168,
											"end": 3261,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3168,
											"end": 3261,
											"name": "tag",
											"source": 8,
											"value": "332"
										},
										{
											"begin": 3168,
											"end": 3261,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3286,
											"end": 3288,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3281,
											"end": 3284,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3277,
											"end": 3289,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3270,
											"end": 3289,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3270,
											"end": 3289,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2929,
											"end": 3295,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2929,
											"end": 3295,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2929,
											"end": 3295,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2929,
											"end": 3295,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3301,
											"end": 3667,
											"name": "tag",
											"source": 8,
											"value": "334"
										},
										{
											"begin": 3301,
											"end": 3667,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3443,
											"end": 3446,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3464,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 3528,
											"end": 3530,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 3523,
											"end": 3526,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3464,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 3464,
											"end": 3531,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3464,
											"end": 3531,
											"name": "tag",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 3464,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3457,
											"end": 3531,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3457,
											"end": 3531,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3540,
											"end": 3633,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "337"
										},
										{
											"begin": 3629,
											"end": 3632,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3540,
											"end": 3633,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "338"
										},
										{
											"begin": 3540,
											"end": 3633,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3540,
											"end": 3633,
											"name": "tag",
											"source": 8,
											"value": "337"
										},
										{
											"begin": 3540,
											"end": 3633,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3658,
											"end": 3660,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3653,
											"end": 3656,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3649,
											"end": 3661,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3642,
											"end": 3661,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3642,
											"end": 3661,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3301,
											"end": 3667,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3301,
											"end": 3667,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3301,
											"end": 3667,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3301,
											"end": 3667,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3673,
											"end": 4039,
											"name": "tag",
											"source": 8,
											"value": "339"
										},
										{
											"begin": 3673,
											"end": 4039,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3815,
											"end": 3818,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3836,
											"end": 3903,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 3900,
											"end": 3902,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 3895,
											"end": 3898,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3836,
											"end": 3903,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 3836,
											"end": 3903,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3836,
											"end": 3903,
											"name": "tag",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 3836,
											"end": 3903,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3829,
											"end": 3903,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3829,
											"end": 3903,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3912,
											"end": 4005,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "342"
										},
										{
											"begin": 4001,
											"end": 4004,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3912,
											"end": 4005,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "343"
										},
										{
											"begin": 3912,
											"end": 4005,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3912,
											"end": 4005,
											"name": "tag",
											"source": 8,
											"value": "342"
										},
										{
											"begin": 3912,
											"end": 4005,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4030,
											"end": 4032,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4025,
											"end": 4028,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4021,
											"end": 4033,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4014,
											"end": 4033,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4014,
											"end": 4033,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3673,
											"end": 4039,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3673,
											"end": 4039,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3673,
											"end": 4039,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3673,
											"end": 4039,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4045,
											"end": 4411,
											"name": "tag",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 4045,
											"end": 4411,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4187,
											"end": 4190,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4208,
											"end": 4275,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "346"
										},
										{
											"begin": 4272,
											"end": 4274,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 4267,
											"end": 4270,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4208,
											"end": 4275,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 4208,
											"end": 4275,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4208,
											"end": 4275,
											"name": "tag",
											"source": 8,
											"value": "346"
										},
										{
											"begin": 4208,
											"end": 4275,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4201,
											"end": 4275,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4201,
											"end": 4275,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4284,
											"end": 4377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "347"
										},
										{
											"begin": 4373,
											"end": 4376,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4284,
											"end": 4377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 4284,
											"end": 4377,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4284,
											"end": 4377,
											"name": "tag",
											"source": 8,
											"value": "347"
										},
										{
											"begin": 4284,
											"end": 4377,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4402,
											"end": 4404,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4397,
											"end": 4400,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4393,
											"end": 4405,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4386,
											"end": 4405,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4386,
											"end": 4405,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4045,
											"end": 4411,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4045,
											"end": 4411,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4045,
											"end": 4411,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4045,
											"end": 4411,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4417,
											"end": 4783,
											"name": "tag",
											"source": 8,
											"value": "349"
										},
										{
											"begin": 4417,
											"end": 4783,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4559,
											"end": 4562,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4580,
											"end": 4647,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "351"
										},
										{
											"begin": 4644,
											"end": 4646,
											"name": "PUSH",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 4639,
											"end": 4642,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4580,
											"end": 4647,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 4580,
											"end": 4647,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4580,
											"end": 4647,
											"name": "tag",
											"source": 8,
											"value": "351"
										},
										{
											"begin": 4580,
											"end": 4647,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4573,
											"end": 4647,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4573,
											"end": 4647,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4656,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 4745,
											"end": 4748,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4656,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 4656,
											"end": 4749,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4656,
											"end": 4749,
											"name": "tag",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 4656,
											"end": 4749,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4774,
											"end": 4776,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4769,
											"end": 4772,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4765,
											"end": 4777,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4758,
											"end": 4777,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4758,
											"end": 4777,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4417,
											"end": 4783,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4417,
											"end": 4783,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4417,
											"end": 4783,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4417,
											"end": 4783,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4789,
											"end": 5155,
											"name": "tag",
											"source": 8,
											"value": "354"
										},
										{
											"begin": 4789,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4931,
											"end": 4934,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4952,
											"end": 5019,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "356"
										},
										{
											"begin": 5016,
											"end": 5018,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5011,
											"end": 5014,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4952,
											"end": 5019,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 4952,
											"end": 5019,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4952,
											"end": 5019,
											"name": "tag",
											"source": 8,
											"value": "356"
										},
										{
											"begin": 4952,
											"end": 5019,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4945,
											"end": 5019,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4945,
											"end": 5019,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5028,
											"end": 5121,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "357"
										},
										{
											"begin": 5117,
											"end": 5120,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5028,
											"end": 5121,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "358"
										},
										{
											"begin": 5028,
											"end": 5121,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5028,
											"end": 5121,
											"name": "tag",
											"source": 8,
											"value": "357"
										},
										{
											"begin": 5028,
											"end": 5121,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5146,
											"end": 5148,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5141,
											"end": 5144,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5137,
											"end": 5149,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5130,
											"end": 5149,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5130,
											"end": 5149,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4789,
											"end": 5155,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4789,
											"end": 5155,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4789,
											"end": 5155,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4789,
											"end": 5155,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5161,
											"end": 5527,
											"name": "tag",
											"source": 8,
											"value": "359"
										},
										{
											"begin": 5161,
											"end": 5527,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5303,
											"end": 5306,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5324,
											"end": 5391,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "361"
										},
										{
											"begin": 5388,
											"end": 5390,
											"name": "PUSH",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 5383,
											"end": 5386,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5324,
											"end": 5391,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 5324,
											"end": 5391,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5324,
											"end": 5391,
											"name": "tag",
											"source": 8,
											"value": "361"
										},
										{
											"begin": 5324,
											"end": 5391,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5317,
											"end": 5391,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5317,
											"end": 5391,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5400,
											"end": 5493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "362"
										},
										{
											"begin": 5489,
											"end": 5492,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5400,
											"end": 5493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "363"
										},
										{
											"begin": 5400,
											"end": 5493,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5400,
											"end": 5493,
											"name": "tag",
											"source": 8,
											"value": "362"
										},
										{
											"begin": 5400,
											"end": 5493,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5518,
											"end": 5520,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5513,
											"end": 5516,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5509,
											"end": 5521,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5502,
											"end": 5521,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5502,
											"end": 5521,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5161,
											"end": 5527,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5161,
											"end": 5527,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5161,
											"end": 5527,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5161,
											"end": 5527,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5533,
											"end": 5899,
											"name": "tag",
											"source": 8,
											"value": "364"
										},
										{
											"begin": 5533,
											"end": 5899,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5675,
											"end": 5678,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5696,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 5760,
											"end": 5762,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 5755,
											"end": 5758,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5696,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 5696,
											"end": 5763,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5696,
											"end": 5763,
											"name": "tag",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 5696,
											"end": 5763,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5689,
											"end": 5763,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5689,
											"end": 5763,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5772,
											"end": 5865,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "367"
										},
										{
											"begin": 5861,
											"end": 5864,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5772,
											"end": 5865,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "368"
										},
										{
											"begin": 5772,
											"end": 5865,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5772,
											"end": 5865,
											"name": "tag",
											"source": 8,
											"value": "367"
										},
										{
											"begin": 5772,
											"end": 5865,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5890,
											"end": 5892,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5885,
											"end": 5888,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5881,
											"end": 5893,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5874,
											"end": 5893,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5874,
											"end": 5893,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5533,
											"end": 5899,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5533,
											"end": 5899,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5533,
											"end": 5899,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5533,
											"end": 5899,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5905,
											"end": 6271,
											"name": "tag",
											"source": 8,
											"value": "369"
										},
										{
											"begin": 5905,
											"end": 6271,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6047,
											"end": 6050,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6068,
											"end": 6135,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "371"
										},
										{
											"begin": 6132,
											"end": 6134,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 6127,
											"end": 6130,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6068,
											"end": 6135,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 6068,
											"end": 6135,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6068,
											"end": 6135,
											"name": "tag",
											"source": 8,
											"value": "371"
										},
										{
											"begin": 6068,
											"end": 6135,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6061,
											"end": 6135,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6061,
											"end": 6135,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6144,
											"end": 6237,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "372"
										},
										{
											"begin": 6233,
											"end": 6236,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6144,
											"end": 6237,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "373"
										},
										{
											"begin": 6144,
											"end": 6237,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6144,
											"end": 6237,
											"name": "tag",
											"source": 8,
											"value": "372"
										},
										{
											"begin": 6144,
											"end": 6237,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6262,
											"end": 6264,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6257,
											"end": 6260,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6253,
											"end": 6265,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6246,
											"end": 6265,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6246,
											"end": 6265,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5905,
											"end": 6271,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5905,
											"end": 6271,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5905,
											"end": 6271,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5905,
											"end": 6271,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6277,
											"end": 6643,
											"name": "tag",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 6277,
											"end": 6643,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6419,
											"end": 6422,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6440,
											"end": 6507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "376"
										},
										{
											"begin": 6504,
											"end": 6506,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 6499,
											"end": 6502,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6440,
											"end": 6507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 6440,
											"end": 6507,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6440,
											"end": 6507,
											"name": "tag",
											"source": 8,
											"value": "376"
										},
										{
											"begin": 6440,
											"end": 6507,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6433,
											"end": 6507,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6433,
											"end": 6507,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6516,
											"end": 6609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 6605,
											"end": 6608,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6516,
											"end": 6609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 6516,
											"end": 6609,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6516,
											"end": 6609,
											"name": "tag",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 6516,
											"end": 6609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6634,
											"end": 6636,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6629,
											"end": 6632,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6625,
											"end": 6637,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6618,
											"end": 6637,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6618,
											"end": 6637,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6277,
											"end": 6643,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6277,
											"end": 6643,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6277,
											"end": 6643,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6277,
											"end": 6643,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6649,
											"end": 7015,
											"name": "tag",
											"source": 8,
											"value": "379"
										},
										{
											"begin": 6649,
											"end": 7015,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6791,
											"end": 6794,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6812,
											"end": 6879,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 6876,
											"end": 6878,
											"name": "PUSH",
											"source": 8,
											"value": "1D"
										},
										{
											"begin": 6871,
											"end": 6874,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6879,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 6812,
											"end": 6879,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6812,
											"end": 6879,
											"name": "tag",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 6812,
											"end": 6879,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6805,
											"end": 6879,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6805,
											"end": 6879,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6888,
											"end": 6981,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 6977,
											"end": 6980,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6888,
											"end": 6981,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 6888,
											"end": 6981,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6888,
											"end": 6981,
											"name": "tag",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 6888,
											"end": 6981,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7006,
											"end": 7008,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7001,
											"end": 7004,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6997,
											"end": 7009,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6990,
											"end": 7009,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6990,
											"end": 7009,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6649,
											"end": 7015,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6649,
											"end": 7015,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6649,
											"end": 7015,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6649,
											"end": 7015,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7021,
											"end": 7387,
											"name": "tag",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 7021,
											"end": 7387,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7163,
											"end": 7166,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7184,
											"end": 7251,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "386"
										},
										{
											"begin": 7248,
											"end": 7250,
											"name": "PUSH",
											"source": 8,
											"value": "2A"
										},
										{
											"begin": 7243,
											"end": 7246,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7184,
											"end": 7251,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 7184,
											"end": 7251,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7184,
											"end": 7251,
											"name": "tag",
											"source": 8,
											"value": "386"
										},
										{
											"begin": 7184,
											"end": 7251,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7177,
											"end": 7251,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7177,
											"end": 7251,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7260,
											"end": 7353,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "387"
										},
										{
											"begin": 7349,
											"end": 7352,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7260,
											"end": 7353,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "388"
										},
										{
											"begin": 7260,
											"end": 7353,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7260,
											"end": 7353,
											"name": "tag",
											"source": 8,
											"value": "387"
										},
										{
											"begin": 7260,
											"end": 7353,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7378,
											"end": 7380,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7373,
											"end": 7376,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7369,
											"end": 7381,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7362,
											"end": 7381,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7362,
											"end": 7381,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7021,
											"end": 7387,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7021,
											"end": 7387,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7021,
											"end": 7387,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7021,
											"end": 7387,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7393,
											"end": 7759,
											"name": "tag",
											"source": 8,
											"value": "389"
										},
										{
											"begin": 7393,
											"end": 7759,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7535,
											"end": 7538,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7556,
											"end": 7623,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "391"
										},
										{
											"begin": 7620,
											"end": 7622,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 7615,
											"end": 7618,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7556,
											"end": 7623,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 7556,
											"end": 7623,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7556,
											"end": 7623,
											"name": "tag",
											"source": 8,
											"value": "391"
										},
										{
											"begin": 7556,
											"end": 7623,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7549,
											"end": 7623,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7549,
											"end": 7623,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7632,
											"end": 7725,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "392"
										},
										{
											"begin": 7721,
											"end": 7724,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7632,
											"end": 7725,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "393"
										},
										{
											"begin": 7632,
											"end": 7725,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7632,
											"end": 7725,
											"name": "tag",
											"source": 8,
											"value": "392"
										},
										{
											"begin": 7632,
											"end": 7725,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7750,
											"end": 7752,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7745,
											"end": 7748,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7741,
											"end": 7753,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7734,
											"end": 7753,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7734,
											"end": 7753,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7393,
											"end": 7759,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7393,
											"end": 7759,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7393,
											"end": 7759,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7393,
											"end": 7759,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7817,
											"end": 9221,
											"name": "tag",
											"source": 8,
											"value": "394"
										},
										{
											"begin": 7817,
											"end": 9221,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7948,
											"end": 7952,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 7943,
											"end": 7946,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7939,
											"end": 7953,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8037,
											"end": 8041,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8030,
											"end": 8035,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8026,
											"end": 8042,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8020,
											"end": 8043,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8056,
											"end": 8119,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "396"
										},
										{
											"begin": 8113,
											"end": 8117,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8108,
											"end": 8111,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8104,
											"end": 8118,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8090,
											"end": 8102,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8056,
											"end": 8119,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 8056,
											"end": 8119,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8056,
											"end": 8119,
											"name": "tag",
											"source": 8,
											"value": "396"
										},
										{
											"begin": 8056,
											"end": 8119,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7963,
											"end": 8129,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8212,
											"end": 8216,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8205,
											"end": 8210,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8201,
											"end": 8217,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8195,
											"end": 8218,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8231,
											"end": 8294,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "398"
										},
										{
											"begin": 8288,
											"end": 8292,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8283,
											"end": 8286,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8279,
											"end": 8293,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8265,
											"end": 8277,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8231,
											"end": 8294,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 8231,
											"end": 8294,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8231,
											"end": 8294,
											"name": "tag",
											"source": 8,
											"value": "398"
										},
										{
											"begin": 8231,
											"end": 8294,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8139,
											"end": 8304,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8391,
											"end": 8395,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8384,
											"end": 8389,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8380,
											"end": 8396,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8374,
											"end": 8397,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8410,
											"end": 8473,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "399"
										},
										{
											"begin": 8467,
											"end": 8471,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8462,
											"end": 8465,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8458,
											"end": 8472,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8444,
											"end": 8456,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8410,
											"end": 8473,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 8410,
											"end": 8473,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8410,
											"end": 8473,
											"name": "tag",
											"source": 8,
											"value": "399"
										},
										{
											"begin": 8410,
											"end": 8473,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8483,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8572,
											"end": 8576,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 8565,
											"end": 8570,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8561,
											"end": 8577,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8555,
											"end": 8578,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8591,
											"end": 8654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "400"
										},
										{
											"begin": 8648,
											"end": 8652,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 8643,
											"end": 8646,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8639,
											"end": 8653,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8625,
											"end": 8637,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8591,
											"end": 8654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 8591,
											"end": 8654,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8591,
											"end": 8654,
											"name": "tag",
											"source": 8,
											"value": "400"
										},
										{
											"begin": 8591,
											"end": 8654,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8493,
											"end": 8664,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8751,
											"end": 8755,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 8744,
											"end": 8749,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8740,
											"end": 8756,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8734,
											"end": 8757,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8770,
											"end": 8833,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "401"
										},
										{
											"begin": 8827,
											"end": 8831,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 8822,
											"end": 8825,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8818,
											"end": 8832,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8804,
											"end": 8816,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8770,
											"end": 8833,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 8770,
											"end": 8833,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8770,
											"end": 8833,
											"name": "tag",
											"source": 8,
											"value": "401"
										},
										{
											"begin": 8770,
											"end": 8833,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8674,
											"end": 8843,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8937,
											"end": 8941,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 8930,
											"end": 8935,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8926,
											"end": 8942,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8920,
											"end": 8943,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8956,
											"end": 9019,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "402"
										},
										{
											"begin": 9013,
											"end": 9017,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 9008,
											"end": 9011,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9004,
											"end": 9018,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8990,
											"end": 9002,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8956,
											"end": 9019,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 8956,
											"end": 9019,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8956,
											"end": 9019,
											"name": "tag",
											"source": 8,
											"value": "402"
										},
										{
											"begin": 8956,
											"end": 9019,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8853,
											"end": 9029,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9122,
											"end": 9126,
											"name": "PUSH",
											"source": 8,
											"value": "C0"
										},
										{
											"begin": 9115,
											"end": 9120,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9111,
											"end": 9127,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9105,
											"end": 9128,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9141,
											"end": 9204,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "403"
										},
										{
											"begin": 9198,
											"end": 9202,
											"name": "PUSH",
											"source": 8,
											"value": "C0"
										},
										{
											"begin": 9193,
											"end": 9196,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9189,
											"end": 9203,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9175,
											"end": 9187,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9141,
											"end": 9204,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 9141,
											"end": 9204,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9141,
											"end": 9204,
											"name": "tag",
											"source": 8,
											"value": "403"
										},
										{
											"begin": 9141,
											"end": 9204,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9039,
											"end": 9214,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7917,
											"end": 9221,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7817,
											"end": 9221,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7817,
											"end": 9221,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7817,
											"end": 9221,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9297,
											"end": 10048,
											"name": "tag",
											"source": 8,
											"value": "404"
										},
										{
											"begin": 9297,
											"end": 10048,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9456,
											"end": 9462,
											"name": "PUSH",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 9451,
											"end": 9454,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9447,
											"end": 9463,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9553,
											"end": 9557,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9546,
											"end": 9551,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9542,
											"end": 9558,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9536,
											"end": 9559,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9572,
											"end": 9635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "406"
										},
										{
											"begin": 9629,
											"end": 9633,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9624,
											"end": 9627,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9620,
											"end": 9634,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9606,
											"end": 9618,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9572,
											"end": 9635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 9572,
											"end": 9635,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9572,
											"end": 9635,
											"name": "tag",
											"source": 8,
											"value": "406"
										},
										{
											"begin": 9572,
											"end": 9635,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9473,
											"end": 9645,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9730,
											"end": 9734,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9723,
											"end": 9728,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9719,
											"end": 9735,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9713,
											"end": 9736,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9749,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "407"
										},
										{
											"begin": 9806,
											"end": 9810,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9801,
											"end": 9804,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9797,
											"end": 9811,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9783,
											"end": 9795,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9749,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 9749,
											"end": 9812,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9749,
											"end": 9812,
											"name": "tag",
											"source": 8,
											"value": "407"
										},
										{
											"begin": 9749,
											"end": 9812,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9655,
											"end": 9822,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9905,
											"end": 9909,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9898,
											"end": 9903,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9894,
											"end": 9910,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9888,
											"end": 9911,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9924,
											"end": 10031,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "408"
										},
										{
											"begin": 10025,
											"end": 10029,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10020,
											"end": 10023,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 10016,
											"end": 10030,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10002,
											"end": 10014,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9924,
											"end": 10031,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "394"
										},
										{
											"begin": 9924,
											"end": 10031,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9924,
											"end": 10031,
											"name": "tag",
											"source": 8,
											"value": "408"
										},
										{
											"begin": 9924,
											"end": 10031,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9832,
											"end": 10041,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9425,
											"end": 10048,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9297,
											"end": 10048,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9297,
											"end": 10048,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9297,
											"end": 10048,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10054,
											"end": 10162,
											"name": "tag",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 10054,
											"end": 10162,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10131,
											"end": 10155,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "410"
										},
										{
											"begin": 10149,
											"end": 10154,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10131,
											"end": 10155,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 10131,
											"end": 10155,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10131,
											"end": 10155,
											"name": "tag",
											"source": 8,
											"value": "410"
										},
										{
											"begin": 10131,
											"end": 10155,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10126,
											"end": 10129,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10119,
											"end": 10156,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10054,
											"end": 10162,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10054,
											"end": 10162,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10054,
											"end": 10162,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10168,
											"end": 10286,
											"name": "tag",
											"source": 8,
											"value": "412"
										},
										{
											"begin": 10168,
											"end": 10286,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10255,
											"end": 10279,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "414"
										},
										{
											"begin": 10273,
											"end": 10278,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10255,
											"end": 10279,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 10255,
											"end": 10279,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10255,
											"end": 10279,
											"name": "tag",
											"source": 8,
											"value": "414"
										},
										{
											"begin": 10255,
											"end": 10279,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10250,
											"end": 10253,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10243,
											"end": 10280,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10168,
											"end": 10286,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10168,
											"end": 10286,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10168,
											"end": 10286,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10292,
											"end": 10563,
											"name": "tag",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 10292,
											"end": 10563,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10422,
											"end": 10425,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10444,
											"end": 10537,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "416"
										},
										{
											"begin": 10533,
											"end": 10536,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10524,
											"end": 10530,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 10444,
											"end": 10537,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 10444,
											"end": 10537,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10444,
											"end": 10537,
											"name": "tag",
											"source": 8,
											"value": "416"
										},
										{
											"begin": 10444,
											"end": 10537,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10437,
											"end": 10537,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10437,
											"end": 10537,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10554,
											"end": 10557,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10547,
											"end": 10557,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10547,
											"end": 10557,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10292,
											"end": 10563,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 10292,
											"end": 10563,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10292,
											"end": 10563,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10292,
											"end": 10563,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10292,
											"end": 10563,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10569,
											"end": 10791,
											"name": "tag",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 10569,
											"end": 10791,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10662,
											"end": 10666,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10700,
											"end": 10702,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10689,
											"end": 10698,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10685,
											"end": 10703,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10677,
											"end": 10703,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10677,
											"end": 10703,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10713,
											"end": 10784,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "418"
										},
										{
											"begin": 10781,
											"end": 10782,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10770,
											"end": 10779,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10766,
											"end": 10783,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10757,
											"end": 10763,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 10713,
											"end": 10784,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 10713,
											"end": 10784,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10713,
											"end": 10784,
											"name": "tag",
											"source": 8,
											"value": "418"
										},
										{
											"begin": 10713,
											"end": 10784,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10569,
											"end": 10791,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 10569,
											"end": 10791,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10569,
											"end": 10791,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10569,
											"end": 10791,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10569,
											"end": 10791,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10797,
											"end": 11239,
											"name": "tag",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 10797,
											"end": 11239,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10946,
											"end": 10950,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10984,
											"end": 10986,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 10973,
											"end": 10982,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10969,
											"end": 10987,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10961,
											"end": 10987,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10961,
											"end": 10987,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10997,
											"end": 11068,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "420"
										},
										{
											"begin": 11065,
											"end": 11066,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11054,
											"end": 11063,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11050,
											"end": 11067,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11041,
											"end": 11047,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 10997,
											"end": 11068,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 10997,
											"end": 11068,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10997,
											"end": 11068,
											"name": "tag",
											"source": 8,
											"value": "420"
										},
										{
											"begin": 10997,
											"end": 11068,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11078,
											"end": 11150,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "421"
										},
										{
											"begin": 11146,
											"end": 11148,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11135,
											"end": 11144,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11131,
											"end": 11149,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11122,
											"end": 11128,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 11078,
											"end": 11150,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 11078,
											"end": 11150,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 11078,
											"end": 11150,
											"name": "tag",
											"source": 8,
											"value": "421"
										},
										{
											"begin": 11078,
											"end": 11150,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11160,
											"end": 11232,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "422"
										},
										{
											"begin": 11228,
											"end": 11230,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11217,
											"end": 11226,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11213,
											"end": 11231,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11204,
											"end": 11210,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 11160,
											"end": 11232,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "412"
										},
										{
											"begin": 11160,
											"end": 11232,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 11160,
											"end": 11232,
											"name": "tag",
											"source": 8,
											"value": "422"
										},
										{
											"begin": 11160,
											"end": 11232,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10797,
											"end": 11239,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 10797,
											"end": 11239,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 10797,
											"end": 11239,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10797,
											"end": 11239,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10797,
											"end": 11239,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10797,
											"end": 11239,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10797,
											"end": 11239,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11245,
											"end": 11577,
											"name": "tag",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 11245,
											"end": 11577,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11366,
											"end": 11370,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11404,
											"end": 11406,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11393,
											"end": 11402,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11389,
											"end": 11407,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11381,
											"end": 11407,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11381,
											"end": 11407,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11417,
											"end": 11488,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "424"
										},
										{
											"begin": 11485,
											"end": 11486,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11474,
											"end": 11483,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11470,
											"end": 11487,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11461,
											"end": 11467,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 11417,
											"end": 11488,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 11417,
											"end": 11488,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 11417,
											"end": 11488,
											"name": "tag",
											"source": 8,
											"value": "424"
										},
										{
											"begin": 11417,
											"end": 11488,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11498,
											"end": 11570,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "425"
										},
										{
											"begin": 11566,
											"end": 11568,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11555,
											"end": 11564,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11551,
											"end": 11569,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11542,
											"end": 11548,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 11498,
											"end": 11570,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "412"
										},
										{
											"begin": 11498,
											"end": 11570,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 11498,
											"end": 11570,
											"name": "tag",
											"source": 8,
											"value": "425"
										},
										{
											"begin": 11498,
											"end": 11570,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11245,
											"end": 11577,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 11245,
											"end": 11577,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 11245,
											"end": 11577,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11245,
											"end": 11577,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11245,
											"end": 11577,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11245,
											"end": 11577,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11583,
											"end": 11793,
											"name": "tag",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 11583,
											"end": 11793,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11670,
											"end": 11674,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11708,
											"end": 11710,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11697,
											"end": 11706,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11693,
											"end": 11711,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11685,
											"end": 11711,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11685,
											"end": 11711,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11721,
											"end": 11786,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "427"
										},
										{
											"begin": 11783,
											"end": 11784,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11772,
											"end": 11781,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11768,
											"end": 11785,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11759,
											"end": 11765,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 11721,
											"end": 11786,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "308"
										},
										{
											"begin": 11721,
											"end": 11786,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 11721,
											"end": 11786,
											"name": "tag",
											"source": 8,
											"value": "427"
										},
										{
											"begin": 11721,
											"end": 11786,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11583,
											"end": 11793,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 11583,
											"end": 11793,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11583,
											"end": 11793,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11583,
											"end": 11793,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11583,
											"end": 11793,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11799,
											"end": 12112,
											"name": "tag",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 11799,
											"end": 12112,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11912,
											"end": 11916,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11950,
											"end": 11952,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11939,
											"end": 11948,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11935,
											"end": 11953,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11927,
											"end": 11953,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11927,
											"end": 11953,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11999,
											"end": 12008,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11993,
											"end": 11997,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11989,
											"end": 12009,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 11985,
											"end": 11986,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11974,
											"end": 11983,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11970,
											"end": 11987,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11963,
											"end": 12010,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12027,
											"end": 12105,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "429"
										},
										{
											"begin": 12100,
											"end": 12104,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12091,
											"end": 12097,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 12027,
											"end": 12105,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "320"
										},
										{
											"begin": 12027,
											"end": 12105,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 12027,
											"end": 12105,
											"name": "tag",
											"source": 8,
											"value": "429"
										},
										{
											"begin": 12027,
											"end": 12105,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 12105,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 12105,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11799,
											"end": 12112,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 11799,
											"end": 12112,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11799,
											"end": 12112,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11799,
											"end": 12112,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11799,
											"end": 12112,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 12118,
											"end": 12537,
											"name": "tag",
											"source": 8,
											"value": "126"
										},
										{
											"begin": 12118,
											"end": 12537,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12284,
											"end": 12288,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12322,
											"end": 12324,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 12311,
											"end": 12320,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12307,
											"end": 12325,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12299,
											"end": 12325,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12299,
											"end": 12325,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12371,
											"end": 12380,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12365,
											"end": 12369,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12361,
											"end": 12381,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 12357,
											"end": 12358,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12346,
											"end": 12355,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 12342,
											"end": 12359,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12335,
											"end": 12382,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12399,
											"end": 12530,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "431"
										},
										{
											"begin": 12525,
											"end": 12529,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12399,
											"end": 12530,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "329"
										},
										{
											"begin": 12399,
											"end": 12530,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 12399,
											"end": 12530,
											"name": "tag",
											"source": 8,
											"value": "431"
										},
										{
											"begin": 12399,
											"end": 12530,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12391,
											"end": 12530,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12391,
											"end": 12530,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12118,
											"end": 12537,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 12118,
											"end": 12537,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12118,
											"end": 12537,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12118,
											"end": 12537,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 12543,
											"end": 12962,
											"name": "tag",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 12543,
											"end": 12962,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12709,
											"end": 12713,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12747,
											"end": 12749,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 12736,
											"end": 12745,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12732,
											"end": 12750,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12724,
											"end": 12750,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12724,
											"end": 12750,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12796,
											"end": 12805,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12790,
											"end": 12794,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12786,
											"end": 12806,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 12782,
											"end": 12783,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12771,
											"end": 12780,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 12767,
											"end": 12784,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12760,
											"end": 12807,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12824,
											"end": 12955,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "433"
										},
										{
											"begin": 12950,
											"end": 12954,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12824,
											"end": 12955,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "334"
										},
										{
											"begin": 12824,
											"end": 12955,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 12824,
											"end": 12955,
											"name": "tag",
											"source": 8,
											"value": "433"
										},
										{
											"begin": 12824,
											"end": 12955,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12816,
											"end": 12955,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12816,
											"end": 12955,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12543,
											"end": 12962,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 12543,
											"end": 12962,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12543,
											"end": 12962,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12543,
											"end": 12962,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 12968,
											"end": 13387,
											"name": "tag",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 12968,
											"end": 13387,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13134,
											"end": 13138,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13172,
											"end": 13174,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 13161,
											"end": 13170,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13157,
											"end": 13175,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13149,
											"end": 13175,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13149,
											"end": 13175,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13221,
											"end": 13230,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13215,
											"end": 13219,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13211,
											"end": 13231,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 13207,
											"end": 13208,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13196,
											"end": 13205,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 13192,
											"end": 13209,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13185,
											"end": 13232,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13249,
											"end": 13380,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "435"
										},
										{
											"begin": 13375,
											"end": 13379,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13249,
											"end": 13380,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "339"
										},
										{
											"begin": 13249,
											"end": 13380,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 13249,
											"end": 13380,
											"name": "tag",
											"source": 8,
											"value": "435"
										},
										{
											"begin": 13249,
											"end": 13380,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13241,
											"end": 13380,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13241,
											"end": 13380,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12968,
											"end": 13387,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 12968,
											"end": 13387,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12968,
											"end": 13387,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12968,
											"end": 13387,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 13393,
											"end": 13812,
											"name": "tag",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 13393,
											"end": 13812,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13559,
											"end": 13563,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13597,
											"end": 13599,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 13586,
											"end": 13595,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13582,
											"end": 13600,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13574,
											"end": 13600,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13574,
											"end": 13600,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13646,
											"end": 13655,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13640,
											"end": 13644,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13636,
											"end": 13656,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 13632,
											"end": 13633,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13621,
											"end": 13630,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 13617,
											"end": 13634,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13610,
											"end": 13657,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13674,
											"end": 13805,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "437"
										},
										{
											"begin": 13800,
											"end": 13804,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13674,
											"end": 13805,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 13674,
											"end": 13805,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 13674,
											"end": 13805,
											"name": "tag",
											"source": 8,
											"value": "437"
										},
										{
											"begin": 13674,
											"end": 13805,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13666,
											"end": 13805,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13666,
											"end": 13805,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13393,
											"end": 13812,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 13393,
											"end": 13812,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13393,
											"end": 13812,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13393,
											"end": 13812,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 13818,
											"end": 14237,
											"name": "tag",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 13818,
											"end": 14237,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13984,
											"end": 13988,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14022,
											"end": 14024,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 14011,
											"end": 14020,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14007,
											"end": 14025,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13999,
											"end": 14025,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13999,
											"end": 14025,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14071,
											"end": 14080,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14065,
											"end": 14069,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14061,
											"end": 14081,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 14057,
											"end": 14058,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14046,
											"end": 14055,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 14042,
											"end": 14059,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14035,
											"end": 14082,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14099,
											"end": 14230,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "439"
										},
										{
											"begin": 14225,
											"end": 14229,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14099,
											"end": 14230,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "349"
										},
										{
											"begin": 14099,
											"end": 14230,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 14099,
											"end": 14230,
											"name": "tag",
											"source": 8,
											"value": "439"
										},
										{
											"begin": 14099,
											"end": 14230,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14091,
											"end": 14230,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14091,
											"end": 14230,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13818,
											"end": 14237,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 13818,
											"end": 14237,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13818,
											"end": 14237,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13818,
											"end": 14237,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 14243,
											"end": 14662,
											"name": "tag",
											"source": 8,
											"value": "208"
										},
										{
											"begin": 14243,
											"end": 14662,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14409,
											"end": 14413,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14447,
											"end": 14449,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 14436,
											"end": 14445,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14432,
											"end": 14450,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14424,
											"end": 14450,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14424,
											"end": 14450,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14496,
											"end": 14505,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14490,
											"end": 14494,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14486,
											"end": 14506,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 14482,
											"end": 14483,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14471,
											"end": 14480,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 14467,
											"end": 14484,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14460,
											"end": 14507,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14524,
											"end": 14655,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "441"
										},
										{
											"begin": 14650,
											"end": 14654,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14524,
											"end": 14655,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "354"
										},
										{
											"begin": 14524,
											"end": 14655,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 14524,
											"end": 14655,
											"name": "tag",
											"source": 8,
											"value": "441"
										},
										{
											"begin": 14524,
											"end": 14655,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14516,
											"end": 14655,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14516,
											"end": 14655,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14243,
											"end": 14662,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14243,
											"end": 14662,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14243,
											"end": 14662,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14243,
											"end": 14662,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 14668,
											"end": 15087,
											"name": "tag",
											"source": 8,
											"value": "110"
										},
										{
											"begin": 14668,
											"end": 15087,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14834,
											"end": 14838,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14872,
											"end": 14874,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 14861,
											"end": 14870,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14857,
											"end": 14875,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14849,
											"end": 14875,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14849,
											"end": 14875,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14921,
											"end": 14930,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14915,
											"end": 14919,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14911,
											"end": 14931,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 14907,
											"end": 14908,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14896,
											"end": 14905,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 14892,
											"end": 14909,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14885,
											"end": 14932,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14949,
											"end": 15080,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "443"
										},
										{
											"begin": 15075,
											"end": 15079,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14949,
											"end": 15080,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "359"
										},
										{
											"begin": 14949,
											"end": 15080,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 14949,
											"end": 15080,
											"name": "tag",
											"source": 8,
											"value": "443"
										},
										{
											"begin": 14949,
											"end": 15080,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14941,
											"end": 15080,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14941,
											"end": 15080,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14668,
											"end": 15087,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14668,
											"end": 15087,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14668,
											"end": 15087,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14668,
											"end": 15087,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 15093,
											"end": 15512,
											"name": "tag",
											"source": 8,
											"value": "129"
										},
										{
											"begin": 15093,
											"end": 15512,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15259,
											"end": 15263,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15297,
											"end": 15299,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 15286,
											"end": 15295,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 15282,
											"end": 15300,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15274,
											"end": 15300,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15274,
											"end": 15300,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15346,
											"end": 15355,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15340,
											"end": 15344,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15336,
											"end": 15356,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 15332,
											"end": 15333,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15321,
											"end": 15330,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 15317,
											"end": 15334,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15310,
											"end": 15357,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 15374,
											"end": 15505,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "445"
										},
										{
											"begin": 15500,
											"end": 15504,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15374,
											"end": 15505,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "364"
										},
										{
											"begin": 15374,
											"end": 15505,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 15374,
											"end": 15505,
											"name": "tag",
											"source": 8,
											"value": "445"
										},
										{
											"begin": 15374,
											"end": 15505,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15366,
											"end": 15505,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15366,
											"end": 15505,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15093,
											"end": 15512,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 15093,
											"end": 15512,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15093,
											"end": 15512,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15093,
											"end": 15512,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 15518,
											"end": 15937,
											"name": "tag",
											"source": 8,
											"value": "143"
										},
										{
											"begin": 15518,
											"end": 15937,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15684,
											"end": 15688,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15722,
											"end": 15724,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 15711,
											"end": 15720,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 15707,
											"end": 15725,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15699,
											"end": 15725,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15699,
											"end": 15725,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15771,
											"end": 15780,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15765,
											"end": 15769,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15761,
											"end": 15781,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 15757,
											"end": 15758,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15746,
											"end": 15755,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 15742,
											"end": 15759,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15735,
											"end": 15782,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 15799,
											"end": 15930,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "447"
										},
										{
											"begin": 15925,
											"end": 15929,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15799,
											"end": 15930,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "369"
										},
										{
											"begin": 15799,
											"end": 15930,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 15799,
											"end": 15930,
											"name": "tag",
											"source": 8,
											"value": "447"
										},
										{
											"begin": 15799,
											"end": 15930,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15791,
											"end": 15930,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15791,
											"end": 15930,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15518,
											"end": 15937,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 15518,
											"end": 15937,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15518,
											"end": 15937,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15518,
											"end": 15937,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 15943,
											"end": 16362,
											"name": "tag",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 15943,
											"end": 16362,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16109,
											"end": 16113,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 16147,
											"end": 16149,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 16136,
											"end": 16145,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 16132,
											"end": 16150,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16124,
											"end": 16150,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 16124,
											"end": 16150,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16196,
											"end": 16205,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 16190,
											"end": 16194,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 16186,
											"end": 16206,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 16182,
											"end": 16183,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 16171,
											"end": 16180,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 16167,
											"end": 16184,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16160,
											"end": 16207,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 16224,
											"end": 16355,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "449"
										},
										{
											"begin": 16350,
											"end": 16354,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 16224,
											"end": 16355,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 16224,
											"end": 16355,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 16224,
											"end": 16355,
											"name": "tag",
											"source": 8,
											"value": "449"
										},
										{
											"begin": 16224,
											"end": 16355,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16216,
											"end": 16355,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 16216,
											"end": 16355,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15943,
											"end": 16362,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 15943,
											"end": 16362,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15943,
											"end": 16362,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15943,
											"end": 16362,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 16368,
											"end": 16787,
											"name": "tag",
											"source": 8,
											"value": "261"
										},
										{
											"begin": 16368,
											"end": 16787,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16534,
											"end": 16538,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 16572,
											"end": 16574,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 16561,
											"end": 16570,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 16557,
											"end": 16575,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16549,
											"end": 16575,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 16549,
											"end": 16575,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16621,
											"end": 16630,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 16615,
											"end": 16619,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 16611,
											"end": 16631,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 16607,
											"end": 16608,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 16596,
											"end": 16605,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 16592,
											"end": 16609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16585,
											"end": 16632,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 16649,
											"end": 16780,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "451"
										},
										{
											"begin": 16775,
											"end": 16779,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 16649,
											"end": 16780,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "379"
										},
										{
											"begin": 16649,
											"end": 16780,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 16649,
											"end": 16780,
											"name": "tag",
											"source": 8,
											"value": "451"
										},
										{
											"begin": 16649,
											"end": 16780,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16641,
											"end": 16780,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 16641,
											"end": 16780,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16368,
											"end": 16787,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 16368,
											"end": 16787,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 16368,
											"end": 16787,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16368,
											"end": 16787,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 16793,
											"end": 17212,
											"name": "tag",
											"source": 8,
											"value": "238"
										},
										{
											"begin": 16793,
											"end": 17212,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16959,
											"end": 16963,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 16997,
											"end": 16999,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 16986,
											"end": 16995,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 16982,
											"end": 17000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16974,
											"end": 17000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 16974,
											"end": 17000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17046,
											"end": 17055,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 17040,
											"end": 17044,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 17036,
											"end": 17056,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 17032,
											"end": 17033,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 17021,
											"end": 17030,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 17017,
											"end": 17034,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17010,
											"end": 17057,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 17074,
											"end": 17205,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "453"
										},
										{
											"begin": 17200,
											"end": 17204,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 17074,
											"end": 17205,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 17074,
											"end": 17205,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 17074,
											"end": 17205,
											"name": "tag",
											"source": 8,
											"value": "453"
										},
										{
											"begin": 17074,
											"end": 17205,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17066,
											"end": 17205,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 17066,
											"end": 17205,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16793,
											"end": 17212,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 16793,
											"end": 17212,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 16793,
											"end": 17212,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16793,
											"end": 17212,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 17218,
											"end": 17637,
											"name": "tag",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 17218,
											"end": 17637,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17384,
											"end": 17388,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 17422,
											"end": 17424,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 17411,
											"end": 17420,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 17407,
											"end": 17425,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17399,
											"end": 17425,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 17399,
											"end": 17425,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17471,
											"end": 17480,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 17465,
											"end": 17469,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 17461,
											"end": 17481,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 17457,
											"end": 17458,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 17446,
											"end": 17455,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 17442,
											"end": 17459,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17435,
											"end": 17482,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 17499,
											"end": 17630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "455"
										},
										{
											"begin": 17625,
											"end": 17629,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 17499,
											"end": 17630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "389"
										},
										{
											"begin": 17499,
											"end": 17630,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 17499,
											"end": 17630,
											"name": "tag",
											"source": 8,
											"value": "455"
										},
										{
											"begin": 17499,
											"end": 17630,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17491,
											"end": 17630,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 17491,
											"end": 17630,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17218,
											"end": 17637,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 17218,
											"end": 17637,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 17218,
											"end": 17637,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17218,
											"end": 17637,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 17643,
											"end": 17990,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 17643,
											"end": 17990,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17798,
											"end": 17802,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 17836,
											"end": 17839,
											"name": "PUSH",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 17825,
											"end": 17834,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 17821,
											"end": 17840,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17813,
											"end": 17840,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 17813,
											"end": 17840,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17850,
											"end": 17983,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "457"
										},
										{
											"begin": 17980,
											"end": 17981,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 17969,
											"end": 17978,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 17965,
											"end": 17982,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17956,
											"end": 17962,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 17850,
											"end": 17983,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "404"
										},
										{
											"begin": 17850,
											"end": 17983,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 17850,
											"end": 17983,
											"name": "tag",
											"source": 8,
											"value": "457"
										},
										{
											"begin": 17850,
											"end": 17983,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17643,
											"end": 17990,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 17643,
											"end": 17990,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 17643,
											"end": 17990,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17643,
											"end": 17990,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17643,
											"end": 17990,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 17996,
											"end": 18218,
											"name": "tag",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 17996,
											"end": 18218,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18089,
											"end": 18093,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18127,
											"end": 18129,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 18116,
											"end": 18125,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 18112,
											"end": 18130,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18104,
											"end": 18130,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18104,
											"end": 18130,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18140,
											"end": 18211,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "459"
										},
										{
											"begin": 18208,
											"end": 18209,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18197,
											"end": 18206,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 18193,
											"end": 18210,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18184,
											"end": 18190,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 18140,
											"end": 18211,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "412"
										},
										{
											"begin": 18140,
											"end": 18211,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 18140,
											"end": 18211,
											"name": "tag",
											"source": 8,
											"value": "459"
										},
										{
											"begin": 18140,
											"end": 18211,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17996,
											"end": 18218,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 17996,
											"end": 18218,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 17996,
											"end": 18218,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17996,
											"end": 18218,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17996,
											"end": 18218,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 18224,
											"end": 18666,
											"name": "tag",
											"source": 8,
											"value": "135"
										},
										{
											"begin": 18224,
											"end": 18666,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18373,
											"end": 18377,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18411,
											"end": 18413,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 18400,
											"end": 18409,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 18396,
											"end": 18414,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18388,
											"end": 18414,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18388,
											"end": 18414,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18424,
											"end": 18495,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "461"
										},
										{
											"begin": 18492,
											"end": 18493,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18481,
											"end": 18490,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 18477,
											"end": 18494,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18468,
											"end": 18474,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 18424,
											"end": 18495,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "412"
										},
										{
											"begin": 18424,
											"end": 18495,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 18424,
											"end": 18495,
											"name": "tag",
											"source": 8,
											"value": "461"
										},
										{
											"begin": 18424,
											"end": 18495,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18505,
											"end": 18577,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "462"
										},
										{
											"begin": 18573,
											"end": 18575,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 18562,
											"end": 18571,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 18558,
											"end": 18576,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18549,
											"end": 18555,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 18505,
											"end": 18577,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "412"
										},
										{
											"begin": 18505,
											"end": 18577,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 18505,
											"end": 18577,
											"name": "tag",
											"source": 8,
											"value": "462"
										},
										{
											"begin": 18505,
											"end": 18577,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18587,
											"end": 18659,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "463"
										},
										{
											"begin": 18655,
											"end": 18657,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 18644,
											"end": 18653,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 18640,
											"end": 18658,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18631,
											"end": 18637,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 18587,
											"end": 18659,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "412"
										},
										{
											"begin": 18587,
											"end": 18659,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 18587,
											"end": 18659,
											"name": "tag",
											"source": 8,
											"value": "463"
										},
										{
											"begin": 18587,
											"end": 18659,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18224,
											"end": 18666,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 18224,
											"end": 18666,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 18224,
											"end": 18666,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18224,
											"end": 18666,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18224,
											"end": 18666,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18224,
											"end": 18666,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18224,
											"end": 18666,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 18753,
											"end": 18851,
											"name": "tag",
											"source": 8,
											"value": "315"
										},
										{
											"begin": 18753,
											"end": 18851,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18804,
											"end": 18810,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18838,
											"end": 18843,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 18832,
											"end": 18844,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 18822,
											"end": 18844,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18822,
											"end": 18844,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18753,
											"end": 18851,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 18753,
											"end": 18851,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18753,
											"end": 18851,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18753,
											"end": 18851,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 18857,
											"end": 18956,
											"name": "tag",
											"source": 8,
											"value": "323"
										},
										{
											"begin": 18857,
											"end": 18956,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18909,
											"end": 18915,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18943,
											"end": 18948,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 18937,
											"end": 18949,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 18927,
											"end": 18949,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18927,
											"end": 18949,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18857,
											"end": 18956,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 18857,
											"end": 18956,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18857,
											"end": 18956,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18857,
											"end": 18956,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 18962,
											"end": 19109,
											"name": "tag",
											"source": 8,
											"value": "317"
										},
										{
											"begin": 18962,
											"end": 19109,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19063,
											"end": 19074,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19100,
											"end": 19103,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 19085,
											"end": 19103,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 19085,
											"end": 19103,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18962,
											"end": 19109,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 18962,
											"end": 19109,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 18962,
											"end": 19109,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18962,
											"end": 19109,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18962,
											"end": 19109,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 19115,
											"end": 19284,
											"name": "tag",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 19115,
											"end": 19284,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19199,
											"end": 19210,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19233,
											"end": 19239,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19228,
											"end": 19231,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19221,
											"end": 19240,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 19273,
											"end": 19277,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 19268,
											"end": 19271,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19264,
											"end": 19278,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19249,
											"end": 19278,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 19249,
											"end": 19278,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19115,
											"end": 19284,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 19115,
											"end": 19284,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19115,
											"end": 19284,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19115,
											"end": 19284,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19115,
											"end": 19284,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 19290,
											"end": 19595,
											"name": "tag",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 19290,
											"end": 19595,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19330,
											"end": 19333,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19349,
											"end": 19369,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "471"
										},
										{
											"begin": 19367,
											"end": 19368,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19349,
											"end": 19369,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 19349,
											"end": 19369,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 19349,
											"end": 19369,
											"name": "tag",
											"source": 8,
											"value": "471"
										},
										{
											"begin": 19349,
											"end": 19369,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19344,
											"end": 19369,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19344,
											"end": 19369,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19383,
											"end": 19403,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "472"
										},
										{
											"begin": 19401,
											"end": 19402,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 19383,
											"end": 19403,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 19383,
											"end": 19403,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 19383,
											"end": 19403,
											"name": "tag",
											"source": 8,
											"value": "472"
										},
										{
											"begin": 19383,
											"end": 19403,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19378,
											"end": 19403,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 19378,
											"end": 19403,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19537,
											"end": 19538,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19469,
											"end": 19535,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 19465,
											"end": 19539,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 19462,
											"end": 19463,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19459,
											"end": 19540,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 19456,
											"end": 19563,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 19456,
											"end": 19563,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "473"
										},
										{
											"begin": 19456,
											"end": 19563,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 19543,
											"end": 19561,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "474"
										},
										{
											"begin": 19543,
											"end": 19561,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "475"
										},
										{
											"begin": 19543,
											"end": 19561,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 19543,
											"end": 19561,
											"name": "tag",
											"source": 8,
											"value": "474"
										},
										{
											"begin": 19543,
											"end": 19561,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19456,
											"end": 19563,
											"name": "tag",
											"source": 8,
											"value": "473"
										},
										{
											"begin": 19456,
											"end": 19563,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19587,
											"end": 19588,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19584,
											"end": 19585,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19580,
											"end": 19589,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19573,
											"end": 19589,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 19573,
											"end": 19589,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19290,
											"end": 19595,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 19290,
											"end": 19595,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19290,
											"end": 19595,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19290,
											"end": 19595,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19290,
											"end": 19595,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 19601,
											"end": 19786,
											"name": "tag",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 19601,
											"end": 19786,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19641,
											"end": 19642,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19658,
											"end": 19678,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "477"
										},
										{
											"begin": 19676,
											"end": 19677,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19658,
											"end": 19678,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 19658,
											"end": 19678,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 19658,
											"end": 19678,
											"name": "tag",
											"source": 8,
											"value": "477"
										},
										{
											"begin": 19658,
											"end": 19678,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19653,
											"end": 19678,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19653,
											"end": 19678,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19692,
											"end": 19712,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "478"
										},
										{
											"begin": 19710,
											"end": 19711,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 19692,
											"end": 19712,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 19692,
											"end": 19712,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 19692,
											"end": 19712,
											"name": "tag",
											"source": 8,
											"value": "478"
										},
										{
											"begin": 19692,
											"end": 19712,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19687,
											"end": 19712,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 19687,
											"end": 19712,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19731,
											"end": 19732,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19721,
											"end": 19756,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "479"
										},
										{
											"begin": 19721,
											"end": 19756,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 19736,
											"end": 19754,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "480"
										},
										{
											"begin": 19736,
											"end": 19754,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "481"
										},
										{
											"begin": 19736,
											"end": 19754,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 19736,
											"end": 19754,
											"name": "tag",
											"source": 8,
											"value": "480"
										},
										{
											"begin": 19736,
											"end": 19754,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19721,
											"end": 19756,
											"name": "tag",
											"source": 8,
											"value": "479"
										},
										{
											"begin": 19721,
											"end": 19756,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19778,
											"end": 19779,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19775,
											"end": 19776,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19771,
											"end": 19780,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 19766,
											"end": 19780,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 19766,
											"end": 19780,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19601,
											"end": 19786,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 19601,
											"end": 19786,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19601,
											"end": 19786,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19601,
											"end": 19786,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19601,
											"end": 19786,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 19792,
											"end": 20140,
											"name": "tag",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 19792,
											"end": 20140,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19832,
											"end": 19839,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19855,
											"end": 19875,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "483"
										},
										{
											"begin": 19873,
											"end": 19874,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19855,
											"end": 19875,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 19855,
											"end": 19875,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 19855,
											"end": 19875,
											"name": "tag",
											"source": 8,
											"value": "483"
										},
										{
											"begin": 19855,
											"end": 19875,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19850,
											"end": 19875,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19850,
											"end": 19875,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19889,
											"end": 19909,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "484"
										},
										{
											"begin": 19907,
											"end": 19908,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 19889,
											"end": 19909,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 19889,
											"end": 19909,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 19889,
											"end": 19909,
											"name": "tag",
											"source": 8,
											"value": "484"
										},
										{
											"begin": 19889,
											"end": 19909,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19884,
											"end": 19909,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 19884,
											"end": 19909,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20077,
											"end": 20078,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 20009,
											"end": 20075,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20005,
											"end": 20079,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 20002,
											"end": 20003,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 19999,
											"end": 20080,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 19994,
											"end": 19995,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19987,
											"end": 19996,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 19980,
											"end": 19997,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 19976,
											"end": 20081,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 19973,
											"end": 20104,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 19973,
											"end": 20104,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "485"
										},
										{
											"begin": 19973,
											"end": 20104,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 20084,
											"end": 20102,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "486"
										},
										{
											"begin": 20084,
											"end": 20102,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "475"
										},
										{
											"begin": 20084,
											"end": 20102,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 20084,
											"end": 20102,
											"name": "tag",
											"source": 8,
											"value": "486"
										},
										{
											"begin": 20084,
											"end": 20102,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19973,
											"end": 20104,
											"name": "tag",
											"source": 8,
											"value": "485"
										},
										{
											"begin": 19973,
											"end": 20104,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20132,
											"end": 20133,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20129,
											"end": 20130,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20125,
											"end": 20134,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 20114,
											"end": 20134,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20114,
											"end": 20134,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19792,
											"end": 20140,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 19792,
											"end": 20140,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19792,
											"end": 20140,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19792,
											"end": 20140,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19792,
											"end": 20140,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 20146,
											"end": 20337,
											"name": "tag",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 20146,
											"end": 20337,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20186,
											"end": 20190,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 20206,
											"end": 20226,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "488"
										},
										{
											"begin": 20224,
											"end": 20225,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20206,
											"end": 20226,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 20206,
											"end": 20226,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 20206,
											"end": 20226,
											"name": "tag",
											"source": 8,
											"value": "488"
										},
										{
											"begin": 20206,
											"end": 20226,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20201,
											"end": 20226,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 20201,
											"end": 20226,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20240,
											"end": 20260,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "489"
										},
										{
											"begin": 20258,
											"end": 20259,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 20240,
											"end": 20260,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 20240,
											"end": 20260,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 20240,
											"end": 20260,
											"name": "tag",
											"source": 8,
											"value": "489"
										},
										{
											"begin": 20240,
											"end": 20260,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20235,
											"end": 20260,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 20235,
											"end": 20260,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20279,
											"end": 20280,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20276,
											"end": 20277,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20273,
											"end": 20281,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 20270,
											"end": 20304,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 20270,
											"end": 20304,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "490"
										},
										{
											"begin": 20270,
											"end": 20304,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 20284,
											"end": 20302,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "491"
										},
										{
											"begin": 20284,
											"end": 20302,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "475"
										},
										{
											"begin": 20284,
											"end": 20302,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 20284,
											"end": 20302,
											"name": "tag",
											"source": 8,
											"value": "491"
										},
										{
											"begin": 20284,
											"end": 20302,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20270,
											"end": 20304,
											"name": "tag",
											"source": 8,
											"value": "490"
										},
										{
											"begin": 20270,
											"end": 20304,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20329,
											"end": 20330,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20326,
											"end": 20327,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20322,
											"end": 20331,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 20314,
											"end": 20331,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20314,
											"end": 20331,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20146,
											"end": 20337,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 20146,
											"end": 20337,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 20146,
											"end": 20337,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20146,
											"end": 20337,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20146,
											"end": 20337,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 20343,
											"end": 20439,
											"name": "tag",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 20343,
											"end": 20439,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20380,
											"end": 20387,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 20409,
											"end": 20433,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "493"
										},
										{
											"begin": 20427,
											"end": 20432,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20409,
											"end": 20433,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "494"
										},
										{
											"begin": 20409,
											"end": 20433,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 20409,
											"end": 20433,
											"name": "tag",
											"source": 8,
											"value": "493"
										},
										{
											"begin": 20409,
											"end": 20433,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20398,
											"end": 20433,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20398,
											"end": 20433,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20343,
											"end": 20439,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 20343,
											"end": 20439,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20343,
											"end": 20439,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20343,
											"end": 20439,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 20445,
											"end": 20535,
											"name": "tag",
											"source": 8,
											"value": "311"
										},
										{
											"begin": 20445,
											"end": 20535,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20479,
											"end": 20486,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 20522,
											"end": 20527,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 20515,
											"end": 20528,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 20508,
											"end": 20529,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 20497,
											"end": 20529,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20497,
											"end": 20529,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20445,
											"end": 20535,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 20445,
											"end": 20535,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20445,
											"end": 20535,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20445,
											"end": 20535,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 20541,
											"end": 20667,
											"name": "tag",
											"source": 8,
											"value": "494"
										},
										{
											"begin": 20541,
											"end": 20667,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20578,
											"end": 20585,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 20618,
											"end": 20660,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20611,
											"end": 20616,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20607,
											"end": 20661,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 20596,
											"end": 20661,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20596,
											"end": 20661,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20541,
											"end": 20667,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 20541,
											"end": 20667,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20541,
											"end": 20667,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20541,
											"end": 20667,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 20673,
											"end": 20750,
											"name": "tag",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 20673,
											"end": 20750,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20710,
											"end": 20717,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 20739,
											"end": 20744,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 20728,
											"end": 20744,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20728,
											"end": 20744,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20673,
											"end": 20750,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 20673,
											"end": 20750,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20673,
											"end": 20750,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20673,
											"end": 20750,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 20756,
											"end": 21063,
											"name": "tag",
											"source": 8,
											"value": "319"
										},
										{
											"begin": 20756,
											"end": 21063,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20824,
											"end": 20825,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 20834,
											"end": 20947,
											"name": "tag",
											"source": 8,
											"value": "499"
										},
										{
											"begin": 20834,
											"end": 20947,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20848,
											"end": 20854,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 20845,
											"end": 20846,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 20842,
											"end": 20855,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 20834,
											"end": 20947,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 20834,
											"end": 20947,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "501"
										},
										{
											"begin": 20834,
											"end": 20947,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 20933,
											"end": 20934,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 20928,
											"end": 20931,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20924,
											"end": 20935,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 20918,
											"end": 20936,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 20914,
											"end": 20915,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 20909,
											"end": 20912,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 20905,
											"end": 20916,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 20898,
											"end": 20937,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 20870,
											"end": 20872,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 20867,
											"end": 20868,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 20863,
											"end": 20873,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 20858,
											"end": 20873,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20858,
											"end": 20873,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20834,
											"end": 20947,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "499"
										},
										{
											"begin": 20834,
											"end": 20947,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 20834,
											"end": 20947,
											"name": "tag",
											"source": 8,
											"value": "501"
										},
										{
											"begin": 20834,
											"end": 20947,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20965,
											"end": 20971,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 20962,
											"end": 20963,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 20959,
											"end": 20972,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 20956,
											"end": 21057,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 20956,
											"end": 21057,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "502"
										},
										{
											"begin": 20956,
											"end": 21057,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 21045,
											"end": 21046,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21036,
											"end": 21042,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 21031,
											"end": 21034,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 21027,
											"end": 21043,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 21020,
											"end": 21047,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 20956,
											"end": 21057,
											"name": "tag",
											"source": 8,
											"value": "502"
										},
										{
											"begin": 20956,
											"end": 21057,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20805,
											"end": 21063,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20756,
											"end": 21063,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20756,
											"end": 21063,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20756,
											"end": 21063,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20756,
											"end": 21063,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 21069,
											"end": 21249,
											"name": "tag",
											"source": 8,
											"value": "475"
										},
										{
											"begin": 21069,
											"end": 21249,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21117,
											"end": 21194,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21114,
											"end": 21115,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21107,
											"end": 21195,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 21214,
											"end": 21218,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 21211,
											"end": 21212,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 21204,
											"end": 21219,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 21238,
											"end": 21242,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 21235,
											"end": 21236,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21228,
											"end": 21243,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 21255,
											"end": 21435,
											"name": "tag",
											"source": 8,
											"value": "481"
										},
										{
											"begin": 21255,
											"end": 21435,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21303,
											"end": 21380,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21300,
											"end": 21301,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21293,
											"end": 21381,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 21400,
											"end": 21404,
											"name": "PUSH",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 21397,
											"end": 21398,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 21390,
											"end": 21405,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 21424,
											"end": 21428,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 21421,
											"end": 21422,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21414,
											"end": 21429,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 21564,
											"end": 21681,
											"name": "tag",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 21564,
											"end": 21681,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21673,
											"end": 21674,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21670,
											"end": 21671,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 21663,
											"end": 21675,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 21687,
											"end": 21789,
											"name": "tag",
											"source": 8,
											"value": "328"
										},
										{
											"begin": 21687,
											"end": 21789,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21728,
											"end": 21734,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21779,
											"end": 21781,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 21775,
											"end": 21782,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 21770,
											"end": 21772,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 21763,
											"end": 21768,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 21759,
											"end": 21773,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 21755,
											"end": 21783,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 21745,
											"end": 21783,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 21745,
											"end": 21783,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21687,
											"end": 21789,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 21687,
											"end": 21789,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 21687,
											"end": 21789,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21687,
											"end": 21789,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 21795,
											"end": 21961,
											"name": "tag",
											"source": 8,
											"value": "333"
										},
										{
											"begin": 21795,
											"end": 21961,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21935,
											"end": 21953,
											"name": "PUSH",
											"source": 8,
											"value": "557365722069732061205374616B657200000000000000000000000000000000"
										},
										{
											"begin": 21931,
											"end": 21932,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21923,
											"end": 21929,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 21919,
											"end": 21933,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 21912,
											"end": 21954,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 21795,
											"end": 21961,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21795,
											"end": 21961,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 21967,
											"end": 22192,
											"name": "tag",
											"source": 8,
											"value": "338"
										},
										{
											"begin": 21967,
											"end": 22192,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22107,
											"end": 22141,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 22103,
											"end": 22104,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 22095,
											"end": 22101,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22091,
											"end": 22105,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 22084,
											"end": 22142,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 22176,
											"end": 22184,
											"name": "PUSH",
											"source": 8,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 22171,
											"end": 22173,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 22163,
											"end": 22169,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22159,
											"end": 22174,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 22152,
											"end": 22185,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 21967,
											"end": 22192,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21967,
											"end": 22192,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 22198,
											"end": 22365,
											"name": "tag",
											"source": 8,
											"value": "343"
										},
										{
											"begin": 22198,
											"end": 22365,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22338,
											"end": 22357,
											"name": "PUSH",
											"source": 8,
											"value": "5374616B696E67206E6F7420666F756E64000000000000000000000000000000"
										},
										{
											"begin": 22334,
											"end": 22335,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 22326,
											"end": 22332,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22322,
											"end": 22336,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 22315,
											"end": 22358,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 22198,
											"end": 22365,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22198,
											"end": 22365,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 22371,
											"end": 22596,
											"name": "tag",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 22371,
											"end": 22596,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22511,
											"end": 22545,
											"name": "PUSH",
											"source": 8,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 22507,
											"end": 22508,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 22499,
											"end": 22505,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22495,
											"end": 22509,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 22488,
											"end": 22546,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 22580,
											"end": 22588,
											"name": "PUSH",
											"source": 8,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 22575,
											"end": 22577,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 22567,
											"end": 22573,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22563,
											"end": 22578,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 22556,
											"end": 22589,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 22371,
											"end": 22596,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22371,
											"end": 22596,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 22602,
											"end": 22771,
											"name": "tag",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 22602,
											"end": 22771,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22742,
											"end": 22763,
											"name": "PUSH",
											"source": 8,
											"value": "41697264726F70206E6F74207374617274656400000000000000000000000000"
										},
										{
											"begin": 22738,
											"end": 22739,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 22730,
											"end": 22736,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22726,
											"end": 22740,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 22719,
											"end": 22764,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 22602,
											"end": 22771,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22602,
											"end": 22771,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 22777,
											"end": 22959,
											"name": "tag",
											"source": 8,
											"value": "358"
										},
										{
											"begin": 22777,
											"end": 22959,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22917,
											"end": 22951,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 22913,
											"end": 22914,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 22905,
											"end": 22911,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22901,
											"end": 22915,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 22894,
											"end": 22952,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 22777,
											"end": 22959,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22777,
											"end": 22959,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 22965,
											"end": 23136,
											"name": "tag",
											"source": 8,
											"value": "363"
										},
										{
											"begin": 22965,
											"end": 23136,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23105,
											"end": 23128,
											"name": "PUSH",
											"source": 8,
											"value": "436C61696D61626C65206F6E63652061207765656B0000000000000000000000"
										},
										{
											"begin": 23101,
											"end": 23102,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 23093,
											"end": 23099,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23089,
											"end": 23103,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 23082,
											"end": 23129,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 22965,
											"end": 23136,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22965,
											"end": 23136,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 23142,
											"end": 23309,
											"name": "tag",
											"source": 8,
											"value": "368"
										},
										{
											"begin": 23142,
											"end": 23309,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23282,
											"end": 23301,
											"name": "PUSH",
											"source": 8,
											"value": "5061636B616765206E6F7420466F756E64000000000000000000000000000000"
										},
										{
											"begin": 23278,
											"end": 23279,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 23270,
											"end": 23276,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23266,
											"end": 23280,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 23259,
											"end": 23302,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 23142,
											"end": 23309,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23142,
											"end": 23309,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 23315,
											"end": 23480,
											"name": "tag",
											"source": 8,
											"value": "373"
										},
										{
											"begin": 23315,
											"end": 23480,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23455,
											"end": 23472,
											"name": "PUSH",
											"source": 8,
											"value": "50656E616C7479206D6178203330250000000000000000000000000000000000"
										},
										{
											"begin": 23451,
											"end": 23452,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 23443,
											"end": 23449,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23439,
											"end": 23453,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 23432,
											"end": 23473,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 23315,
											"end": 23480,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23315,
											"end": 23480,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 23486,
											"end": 23651,
											"name": "tag",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 23486,
											"end": 23651,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23626,
											"end": 23643,
											"name": "PUSH",
											"source": 8,
											"value": "41697264726F70206D6178203230250000000000000000000000000000000000"
										},
										{
											"begin": 23622,
											"end": 23623,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 23614,
											"end": 23620,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23610,
											"end": 23624,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 23603,
											"end": 23644,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 23486,
											"end": 23651,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23486,
											"end": 23651,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 23657,
											"end": 23836,
											"name": "tag",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 23657,
											"end": 23836,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23797,
											"end": 23828,
											"name": "PUSH",
											"source": 8,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 23793,
											"end": 23794,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 23785,
											"end": 23791,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23781,
											"end": 23795,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 23774,
											"end": 23829,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 23657,
											"end": 23836,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23657,
											"end": 23836,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 23842,
											"end": 24071,
											"name": "tag",
											"source": 8,
											"value": "388"
										},
										{
											"begin": 23842,
											"end": 24071,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23982,
											"end": 24016,
											"name": "PUSH",
											"source": 8,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 23978,
											"end": 23979,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 23970,
											"end": 23976,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23966,
											"end": 23980,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 23959,
											"end": 24017,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 24051,
											"end": 24063,
											"name": "PUSH",
											"source": 8,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 24046,
											"end": 24048,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 24038,
											"end": 24044,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 24034,
											"end": 24049,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 24027,
											"end": 24064,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 23842,
											"end": 24071,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23842,
											"end": 24071,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 24077,
											"end": 24258,
											"name": "tag",
											"source": 8,
											"value": "393"
										},
										{
											"begin": 24077,
											"end": 24258,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24217,
											"end": 24250,
											"name": "PUSH",
											"source": 8,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 24213,
											"end": 24214,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 24205,
											"end": 24211,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 24201,
											"end": 24215,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 24194,
											"end": 24251,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 24077,
											"end": 24258,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 24077,
											"end": 24258,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 24264,
											"end": 24386,
											"name": "tag",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 24264,
											"end": 24386,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24337,
											"end": 24361,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "523"
										},
										{
											"begin": 24355,
											"end": 24360,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 24337,
											"end": 24361,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 24337,
											"end": 24361,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 24337,
											"end": 24361,
											"name": "tag",
											"source": 8,
											"value": "523"
										},
										{
											"begin": 24337,
											"end": 24361,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24330,
											"end": 24335,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 24327,
											"end": 24362,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 24317,
											"end": 24380,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "524"
										},
										{
											"begin": 24317,
											"end": 24380,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 24376,
											"end": 24377,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 24373,
											"end": 24374,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 24366,
											"end": 24378,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 24317,
											"end": 24380,
											"name": "tag",
											"source": 8,
											"value": "524"
										},
										{
											"begin": 24317,
											"end": 24380,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24264,
											"end": 24386,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 24264,
											"end": 24386,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 24392,
											"end": 24508,
											"name": "tag",
											"source": 8,
											"value": "281"
										},
										{
											"begin": 24392,
											"end": 24508,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24462,
											"end": 24483,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "526"
										},
										{
											"begin": 24477,
											"end": 24482,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 24462,
											"end": 24483,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "311"
										},
										{
											"begin": 24462,
											"end": 24483,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 24462,
											"end": 24483,
											"name": "tag",
											"source": 8,
											"value": "526"
										},
										{
											"begin": 24462,
											"end": 24483,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24455,
											"end": 24460,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 24452,
											"end": 24484,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 24442,
											"end": 24502,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "527"
										},
										{
											"begin": 24442,
											"end": 24502,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 24498,
											"end": 24499,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 24495,
											"end": 24496,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 24488,
											"end": 24500,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 24442,
											"end": 24502,
											"name": "tag",
											"source": 8,
											"value": "527"
										},
										{
											"begin": 24442,
											"end": 24502,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24392,
											"end": 24508,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 24392,
											"end": 24508,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 24514,
											"end": 24636,
											"name": "tag",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 24514,
											"end": 24636,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24587,
											"end": 24611,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "529"
										},
										{
											"begin": 24605,
											"end": 24610,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 24587,
											"end": 24611,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 24587,
											"end": 24611,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 24587,
											"end": 24611,
											"name": "tag",
											"source": 8,
											"value": "529"
										},
										{
											"begin": 24587,
											"end": 24611,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24580,
											"end": 24585,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 24577,
											"end": 24612,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 24567,
											"end": 24630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "530"
										},
										{
											"begin": 24567,
											"end": 24630,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 24626,
											"end": 24627,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 24623,
											"end": 24624,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 24616,
											"end": 24628,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 24567,
											"end": 24630,
											"name": "tag",
											"source": 8,
											"value": "530"
										},
										{
											"begin": 24567,
											"end": 24630,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24514,
											"end": 24636,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 24514,
											"end": 24636,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"airdropRate()": "8891cf0d",
							"airdropSince()": "b87da76d",
							"airdropStatus()": "2cf1a5fb",
							"blockTimestamp()": "adb61832",
							"calculateWeek(uint256)": "b5d9df83",
							"changeAirdropPercentage(uint256)": "d5dbdf1b",
							"changePenaltyFee(uint256)": "8c63f97f",
							"claimAirdrop()": "5b88349d",
							"hasStake()": "10486b6a",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"stake(uint256,uint256)": "7b0472f0",
							"stakingPenaltyRate()": "cb79c2e1",
							"startAirdrop()": "d2a569c3",
							"token_address()": "8c8e8fee",
							"transferOwnership(address)": "f2fde38b",
							"withdrawStake()": "bed9d861"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdropRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeAirdropPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changePenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimDrop\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"internalType\":\"struct Staking.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Staked(address,uint256,uint256,uint256)\":{\"notice\":\"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\"}},\"kind\":\"user\",\"methods\":{\"stake(uint256,uint256)\":{\"notice\":\"_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID\"},\"withdrawStake()\":{\"notice\":\"withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/ERC20/Staking.sol\":{\"keccak256\":\"0x482c7e8d453231fe530213ec9199bc865e11617eb645117a05d3022dfe7c02e0\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://a8e9945dfb6d274914d9ea2803701e774b724854511a67921d9bf851a4751454\",\"dweb:/ipfs/QmZKyeqBsjE3TKPdKwAUfRR1zy18FqJzgCMHBrF9vp9JCN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 123,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 7,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 927,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "stakingPackage",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 929,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "stakingPenaltyRate",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 931,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "airdropRate",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 933,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "airdropSince",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 935,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "airdropStatus",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 937,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "token_address",
								"offset": 1,
								"slot": "6",
								"type": "t_address"
							},
							{
								"astId": 1002,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "stakeholders",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Stake)988_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Stake)988_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Stake)",
								"numberOfBytes": "32",
								"value": "t_struct(Stake)988_storage"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Stake)988_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Stake",
								"members": [
									{
										"astId": 975,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "amount",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 977,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "since",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 979,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "rewardAPY",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 981,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "releaseTime",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 983,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "claimable",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 985,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "claimableAirdrop",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 987,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "latestClaimDrop",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"events": {
							"Staked(address,uint256,uint256,uint256)": {
								"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
							}
						},
						"kind": "user",
						"methods": {
							"stake(uint256,uint256)": {
								"notice": "_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID"
							},
							"withdrawStake()": {
								"notice": "withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							913
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 914,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 913,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								913
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 903,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 903,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							166
						]
					},
					"id": 167,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 166,
							"linearizedBaseContracts": [
								166
							],
							"name": "ReentrancyGuard",
							"nameLocation": "906:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 118,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1701:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1676:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 116,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 117,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 121,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1748:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1723:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 119,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 120,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 123,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1783:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1767:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 122,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 130,
										"nodeType": "Block",
										"src": "1811:39:1",
										"statements": [
											{
												"expression": {
													"id": 128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 126,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "1821:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 127,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "1831:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 129,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:1"
											}
										]
									},
									"id": 131,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:1"
									},
									"scope": 166,
									"src": "1797:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 141,
										"nodeType": "Block",
										"src": "2251:79:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 134,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 157,
														"src": "2261:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:1"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 138,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2303:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 140,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:1"
											}
										]
									},
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 142,
									"name": "nonReentrant",
									"nameLocation": "2236:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:1"
									},
									"src": "2227:103:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 156,
										"nodeType": "Block",
										"src": "2375:248:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 148,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 146,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 123,
																"src": "2468:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 147,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 121,
																"src": "2479:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 145,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 151,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:1"
											},
											{
												"expression": {
													"id": 154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 152,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "2598:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 153,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 121,
														"src": "2608:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 155,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:1"
											}
										]
									},
									"id": 157,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2345:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:1"
									},
									"returnParameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:1"
									},
									"scope": 166,
									"src": "2336:287:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "2667:171:1",
										"statements": [
											{
												"expression": {
													"id": 162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 160,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "2809:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 161,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "2819:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 163,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:1"
											}
										]
									},
									"id": 165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2638:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:1"
									},
									"returnParameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:1"
									},
									"scope": 166,
									"src": "2629:209:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 167,
							"src": "888:1952:1",
							"usedErrors": []
						}
					],
					"src": "112:2729:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							244
						]
					},
					"id": 245,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 168,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 169,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 244,
							"linearizedBaseContracts": [
								244
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 170,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 178,
									"name": "Transfer",
									"nameLocation": "394:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "403:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "425:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "445:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:2"
									},
									"src": "388:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 187,
									"name": "Approval",
									"nameLocation": "625:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "634:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "657:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "682:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:2"
									},
									"src": "619:78:2"
								},
								{
									"documentation": {
										"id": 188,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:2"
									},
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "820:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:2"
									},
									"scope": 244,
									"src": "774:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "931:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:2"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "971:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:2"
									},
									"scope": 244,
									"src": "912:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1211:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1223:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1257:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 208,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:2"
									},
									"scope": 244,
									"src": "1193:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 221,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "1557:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "1572:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:2"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "1612:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:2"
									},
									"scope": 244,
									"src": "1538:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 222,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 231,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2291:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 223,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2308:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 225,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:2"
									},
									"returnParameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2342:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 228,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:2"
									},
									"scope": 244,
									"src": "2274:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 243,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2677:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2699:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2719:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:2"
									},
									"returnParameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2758:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 240,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:2"
									},
									"scope": 244,
									"src": "2646:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 245,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							280
						]
					},
					"id": 281,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 246,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 247,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:3",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 280,
							"linearizedBaseContracts": [
								280
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 248,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:3",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 265,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1471:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1494:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1519:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1542:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1568:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 257,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1585:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 259,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1604:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 261,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:3"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:3"
									},
									"scope": 280,
									"src": "1446:183:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 266,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:3",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 273,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1950:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 267,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:3"
									},
									"returnParameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1988:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:3"
									},
									"scope": 280,
									"src": "1934:63:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 274,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:3",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 279,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:3"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "2240:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 276,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:3"
									},
									"scope": 280,
									"src": "2189:60:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 281,
							"src": "620:1631:3",
							"usedErrors": []
						}
					],
					"src": "114:2138:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							891
						],
						"IERC20": [
							244
						],
						"IERC20Permit": [
							280
						],
						"SafeERC20": [
							561
						]
					},
					"id": 562,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 282,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 283,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 562,
							"sourceUnit": 245,
							"src": "140:23:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 284,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 562,
							"sourceUnit": 281,
							"src": "164:46:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 285,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 562,
							"sourceUnit": 892,
							"src": "211:36:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 286,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:4",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 561,
							"linearizedBaseContracts": [
								561
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 289,
									"libraryName": {
										"id": 287,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 891,
										"src": "737:7:4"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:4",
									"typeName": {
										"id": 288,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 311,
										"nodeType": "Block",
										"src": "865:103:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 300,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 292,
															"src": "895:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 303,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 292,
																			"src": "925:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 211,
																		"src": "925:14:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 305,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 306,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 294,
																	"src": "950:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 307,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 296,
																	"src": "954:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 301,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 302,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 299,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "875:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 310,
												"nodeType": "ExpressionStatement",
												"src": "875:86:4"
											}
										]
									},
									"id": 312,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "794:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 291,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 290,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "794:6:4"
													},
													"referencedDeclaration": 244,
													"src": "794:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "816:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "836:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:4"
									},
									"returnParameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:4"
									},
									"scope": 561,
									"src": "763:205:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 337,
										"nodeType": "Block",
										"src": "1102:113:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 325,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 315,
															"src": "1132:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 328,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 315,
																			"src": "1162:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 329,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 243,
																		"src": "1162:18:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 330,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 331,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 317,
																	"src": "1191:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 332,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 319,
																	"src": "1197:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 333,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 321,
																	"src": "1201:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 326,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 327,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 324,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "1112:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 336,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:4"
											}
										]
									},
									"id": 338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1009:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 314,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 313,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "1009:6:4"
													},
													"referencedDeclaration": 244,
													"src": "1009:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1031:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1053:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1073:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:4"
									},
									"returnParameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:4"
									},
									"scope": 561,
									"src": "974:241:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 381,
										"nodeType": "Block",
										"src": "1581:497:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 352,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 350,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 346,
																			"src": "1830:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 351,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 353,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 363,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 358,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$561",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$561",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 357,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 356,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:4",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 359,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 360,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 344,
																					"src": "1877:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 354,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 342,
																					"src": "1846:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$244",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 355,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 221,
																				"src": "1846:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 361,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 362,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 364,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 366,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 349,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 368,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 370,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 342,
															"src": "2001:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 373,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 342,
																			"src": "2031:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 231,
																		"src": "2031:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 376,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 344,
																	"src": "2055:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 377,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 346,
																	"src": "2064:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 371,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 369,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "1981:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 380,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:4"
											}
										]
									},
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:4",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 382,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "1505:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 341,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 340,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "1505:6:4"
													},
													"referencedDeclaration": 244,
													"src": "1505:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "1527:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 343,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "1552:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:4"
									},
									"returnParameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:4"
									},
									"scope": 561,
									"src": "1475:603:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 417,
										"nodeType": "Block",
										"src": "2200:194:4",
										"statements": [
											{
												"assignments": [
													393
												],
												"declarations": [
													{
														"constant": false,
														"id": 393,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 417,
														"src": "2210:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 392,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 404,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 398,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$561",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$561",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 397,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 396,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 399,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 400,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 387,
																"src": "2264:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 394,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 385,
																"src": "2233:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$244",
																	"typeString": "contract IERC20"
																}
															},
															"id": 395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 221,
															"src": "2233:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 401,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 402,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 389,
														"src": "2275:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 406,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 385,
															"src": "2310:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 409,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 385,
																			"src": "2340:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 231,
																		"src": "2340:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 411,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 412,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 387,
																	"src": "2364:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 413,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 393,
																	"src": "2373:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 407,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 408,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 414,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 405,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "2290:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 416,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:4"
											}
										]
									},
									"id": 418,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "2124:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 384,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 383,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "2124:6:4"
													},
													"referencedDeclaration": 244,
													"src": "2124:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "2146:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "2171:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:4"
									},
									"returnParameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:4"
									},
									"scope": 561,
									"src": "2084:310:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 465,
										"nodeType": "Block",
										"src": "2516:370:4",
										"statements": [
											{
												"id": 464,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:4",
												"statements": [
													{
														"assignments": [
															429
														],
														"declarations": [
															{
																"constant": false,
																"id": 429,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:4",
																"nodeType": "VariableDeclaration",
																"scope": 464,
																"src": "2550:20:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 428,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 438,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 434,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$561",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$561",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 433,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 432,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 435,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 436,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 423,
																	"src": "2604:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 430,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 421,
																	"src": "2573:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 221,
																"src": "2573:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 442,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 440,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 429,
																		"src": "2634:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 441,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 425,
																		"src": "2650:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 443,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 439,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 444,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 445,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:4"
													},
													{
														"assignments": [
															447
														],
														"declarations": [
															{
																"constant": false,
																"id": 447,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:4",
																"nodeType": "VariableDeclaration",
																"scope": 464,
																"src": "2715:20:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 446,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 451,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 448,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 429,
																"src": "2738:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 449,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 425,
																"src": "2753:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 453,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 421,
																	"src": "2792:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 456,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 421,
																					"src": "2822:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$244",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 457,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 231,
																				"src": "2822:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 458,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 459,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 423,
																			"src": "2846:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 460,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 447,
																			"src": "2855:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 454,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 452,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 560,
																"src": "2772:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 463,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:4"
													}
												]
											}
										]
									},
									"id": 466,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "2440:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 420,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 419,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "2440:6:4"
													},
													"referencedDeclaration": 244,
													"src": "2440:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "2462:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 422,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "2487:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:4"
									},
									"returnParameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:4"
									},
									"scope": 561,
									"src": "2400:486:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 521,
										"nodeType": "Block",
										"src": "3107:257:4",
										"statements": [
											{
												"assignments": [
													487
												],
												"declarations": [
													{
														"constant": false,
														"id": 487,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 521,
														"src": "3117:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 486,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 492,
												"initialValue": {
													"arguments": [
														{
															"id": 490,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "3152:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 488,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "3139:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$280",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 273,
														"src": "3139:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 496,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "3181:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 497,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 473,
															"src": "3188:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 498,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "3197:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 499,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "3204:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 500,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "3214:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 501,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "3217:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 502,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 483,
															"src": "3220:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 493,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "3168:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$280",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 495,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 265,
														"src": "3168:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 504,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:4"
											},
											{
												"assignments": [
													506
												],
												"declarations": [
													{
														"constant": false,
														"id": 506,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 521,
														"src": "3232:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 505,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 511,
												"initialValue": {
													"arguments": [
														{
															"id": 509,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "3266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 507,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "3253:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$280",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 508,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 273,
														"src": "3253:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 517,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 513,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "3290:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 514,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 487,
																	"src": "3304:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 515,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 512,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 520,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:4"
											}
										]
									},
									"id": 522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2921:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$280",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 468,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 467,
														"name": "IERC20Permit",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 280,
														"src": "2921:12:4"
													},
													"referencedDeclaration": 280,
													"src": "2921:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$280",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2949:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 470,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2972:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 472,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2997:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3020:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3046:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 478,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3063:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 480,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3082:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 482,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:4"
									},
									"returnParameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:4"
									},
									"scope": 561,
									"src": "2892:472:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 559,
										"nodeType": "Block",
										"src": "3817:636:4",
										"statements": [
											{
												"assignments": [
													532
												],
												"declarations": [
													{
														"constant": false,
														"id": 532,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 559,
														"src": "4166:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 531,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 541,
												"initialValue": {
													"arguments": [
														{
															"id": 538,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "4220:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 535,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 526,
																	"src": "4200:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 534,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 533,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 536,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 537,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 651,
														"src": "4192:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 542,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "4275:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 543,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 544,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 558,
												"nodeType": "IfStatement",
												"src": "4271:176:4",
												"trueBody": {
													"id": 557,
													"nodeType": "Block",
													"src": "4298:149:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 549,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 532,
																				"src": "4370:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 551,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 550,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:4",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 552,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 547,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 548,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 553,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 554,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 546,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 555,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 556,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 523,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 560,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "3776:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 525,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 524,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "3776:6:4"
													},
													"referencedDeclaration": 244,
													"src": "3776:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "3790:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 527,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:4"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:4"
									},
									"scope": 561,
									"src": "3747:706:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 562,
							"src": "707:3748:4",
							"usedErrors": []
						}
					],
					"src": "115:4341:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							891
						]
					},
					"id": 892,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 563,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 564,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 891,
							"linearizedBaseContracts": [
								891
							],
							"name": "Address",
							"nameLocation": "202:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 578,
										"nodeType": "Block",
										"src": "1241:254:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 572,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 567,
																"src": "1465:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 573,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 574,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 575,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 571,
												"id": 577,
												"nodeType": "Return",
												"src": "1458:30:5"
											}
										]
									},
									"documentation": {
										"id": 565,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:5",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "1195:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:5"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "1235:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 569,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:5"
									},
									"scope": 891,
									"src": "1175:320:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 612,
										"nodeType": "Block",
										"src": "2483:241:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 594,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 590,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$891",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$891",
																				"typeString": "library Address"
																			}
																		],
																		"id": 589,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 588,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 591,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 592,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 593,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 584,
																"src": "2526:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 595,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 587,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 597,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:5"
											},
											{
												"assignments": [
													599,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 599,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 612,
														"src": "2578:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 598,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 606,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 604,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 600,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 582,
																"src": "2596:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 603,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 602,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 584,
																"src": "2618:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 608,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 599,
															"src": "2647:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 609,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 607,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 611,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:5"
											}
										]
									},
									"documentation": {
										"id": 580,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 613,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "2431:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "2458:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 583,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:5"
									},
									"returnParameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:5"
									},
									"scope": 891,
									"src": "2412:312:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 630,
										"nodeType": "Block",
										"src": "3555:96:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 624,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "3594:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 625,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "3602:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 626,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 627,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 623,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															671,
															715
														],
														"referencedDeclaration": 715,
														"src": "3572:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 622,
												"id": 629,
												"nodeType": "Return",
												"src": "3565:79:5"
											}
										]
									},
									"documentation": {
										"id": 614,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 631,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "3488:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 615,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "3504:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 617,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:5"
									},
									"returnParameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "3541:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 620,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:5"
									},
									"scope": 891,
									"src": "3466:185:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 650,
										"nodeType": "Block",
										"src": "4020:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 644,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 634,
															"src": "4059:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 645,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "4067:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 646,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 647,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 638,
															"src": "4076:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 643,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															671,
															715
														],
														"referencedDeclaration": 715,
														"src": "4037:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 642,
												"id": 649,
												"nodeType": "Return",
												"src": "4030:59:5"
											}
										]
									},
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 651,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "3904:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "3928:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 635,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "3955:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 637,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:5"
									},
									"returnParameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 641,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "4006:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 640,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:5"
									},
									"scope": 891,
									"src": "3873:223:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 670,
										"nodeType": "Block",
										"src": "4601:111:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 664,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "4640:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 665,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 656,
															"src": "4648:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 666,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 658,
															"src": "4654:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 663,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															671,
															715
														],
														"referencedDeclaration": 715,
														"src": "4618:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 662,
												"id": 669,
												"nodeType": "Return",
												"src": "4611:94:5"
											}
										]
									},
									"documentation": {
										"id": 652,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 671,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 654,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "4498:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 653,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "4522:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 655,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "4549:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:5"
									},
									"returnParameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "4587:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 660,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:5"
									},
									"scope": 891,
									"src": "4458:254:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 714,
										"nodeType": "Block",
										"src": "5139:267:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 692,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 688,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$891",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$891",
																				"typeString": "library Address"
																			}
																		],
																		"id": 687,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 686,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 689,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 690,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 691,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 678,
																"src": "5182:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 693,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 685,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 695,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:5"
											},
											{
												"assignments": [
													697,
													699
												],
												"declarations": [
													{
														"constant": false,
														"id": 697,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 714,
														"src": "5241:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 696,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 699,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 714,
														"src": "5255:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 698,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 706,
												"initialValue": {
													"arguments": [
														{
															"id": 704,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 676,
															"src": "5308:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 700,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 674,
																"src": "5282:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 701,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 703,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 702,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 678,
																"src": "5301:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 708,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 674,
															"src": "5357:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 709,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 697,
															"src": "5365:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 710,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 699,
															"src": "5374:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 711,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 680,
															"src": "5386:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 707,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "5330:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 684,
												"id": 713,
												"nodeType": "Return",
												"src": "5323:76:5"
											}
										]
									},
									"documentation": {
										"id": 672,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:5",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "5000:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 673,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "5024:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 675,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "5051:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 677,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "5074:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 679,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:5"
									},
									"returnParameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "5125:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 682,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:5"
									},
									"scope": 891,
									"src": "4960:446:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 731,
										"nodeType": "Block",
										"src": "5683:97:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 726,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 718,
															"src": "5719:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 727,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "5727:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 728,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 725,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															732,
															761
														],
														"referencedDeclaration": 761,
														"src": "5700:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 724,
												"id": 730,
												"nodeType": "Return",
												"src": "5693:80:5"
											}
										]
									},
									"documentation": {
										"id": 716,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 732,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "5611:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "5627:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 719,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:5"
									},
									"returnParameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "5669:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 722,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:5"
									},
									"scope": 891,
									"src": "5583:197:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 760,
										"nodeType": "Block",
										"src": "6122:168:5",
										"statements": [
											{
												"assignments": [
													745,
													747
												],
												"declarations": [
													{
														"constant": false,
														"id": 745,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 760,
														"src": "6133:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 744,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 747,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 760,
														"src": "6147:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 746,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 752,
												"initialValue": {
													"arguments": [
														{
															"id": 750,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 737,
															"src": "6192:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 748,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 735,
															"src": "6174:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 749,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 754,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 735,
															"src": "6241:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 755,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 745,
															"src": "6249:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 756,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 747,
															"src": "6258:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 757,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 739,
															"src": "6270:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 753,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "6214:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 743,
												"id": 759,
												"nodeType": "Return",
												"src": "6207:76:5"
											}
										]
									},
									"documentation": {
										"id": 733,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 761,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 735,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "6001:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 734,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "6025:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 736,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 739,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "6052:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 738,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:5"
									},
									"returnParameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "6108:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 741,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:5"
									},
									"scope": 891,
									"src": "5964:326:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 777,
										"nodeType": "Block",
										"src": "6566:101:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 772,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 764,
															"src": "6604:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 773,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 766,
															"src": "6612:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 774,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 771,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															778,
															807
														],
														"referencedDeclaration": 807,
														"src": "6583:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 770,
												"id": 776,
												"nodeType": "Return",
												"src": "6576:84:5"
											}
										]
									},
									"documentation": {
										"id": 762,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 778,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "6499:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 763,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 766,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "6515:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 765,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:5"
									},
									"returnParameters": {
										"id": 770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "6552:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 768,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:5"
									},
									"scope": 891,
									"src": "6469:198:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 806,
										"nodeType": "Block",
										"src": "7008:170:5",
										"statements": [
											{
												"assignments": [
													791,
													793
												],
												"declarations": [
													{
														"constant": false,
														"id": 791,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 806,
														"src": "7019:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 790,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 793,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 806,
														"src": "7033:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 792,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 798,
												"initialValue": {
													"arguments": [
														{
															"id": 796,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "7080:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 794,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "7060:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 795,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 797,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 800,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "7129:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 801,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "7137:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 802,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "7146:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 803,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "7158:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 799,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "7102:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 789,
												"id": 805,
												"nodeType": "Return",
												"src": "7095:76:5"
											}
										]
									},
									"documentation": {
										"id": 779,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 807,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "6892:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 780,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "6916:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 782,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "6943:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 784,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:5"
									},
									"returnParameters": {
										"id": 789,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 788,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "6994:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 787,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:5"
									},
									"scope": 891,
									"src": "6853:325:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 845,
										"nodeType": "Block",
										"src": "7660:434:5",
										"statements": [
											{
												"condition": {
													"id": 821,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 812,
													"src": "7674:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 843,
													"nodeType": "Block",
													"src": "8030:58:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 839,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 814,
																		"src": "8052:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 840,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 816,
																		"src": "8064:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 838,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 890,
																	"src": "8044:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 841,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 842,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:5"
														}
													]
												},
												"id": 844,
												"nodeType": "IfStatement",
												"src": "7670:418:5",
												"trueBody": {
													"id": 837,
													"nodeType": "Block",
													"src": "7683:341:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 825,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 822,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 814,
																		"src": "7701:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 823,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 824,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 834,
															"nodeType": "IfStatement",
															"src": "7697:286:5",
															"trueBody": {
																"id": 833,
																"nodeType": "Block",
																"src": "7725:258:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 828,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 810,
																							"src": "7927:6:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 827,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 579,
																						"src": "7916:10:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 829,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 830,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 826,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 831,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 832,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:5"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 835,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 814,
																"src": "8003:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 820,
															"id": 836,
															"nodeType": "Return",
															"src": "7996:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 808,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:5",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 846,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 810,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "7511:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 809,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 812,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "7535:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 811,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "7557:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 813,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "7590:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 815,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:5"
									},
									"returnParameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "7646:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 818,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:5"
									},
									"scope": 891,
									"src": "7466:628:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 869,
										"nodeType": "Block",
										"src": "8475:135:5",
										"statements": [
											{
												"condition": {
													"id": 858,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 849,
													"src": "8489:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 867,
													"nodeType": "Block",
													"src": "8546:58:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 863,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 851,
																		"src": "8568:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 864,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 853,
																		"src": "8580:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 862,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 890,
																	"src": "8560:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 865,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 866,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:5"
														}
													]
												},
												"id": 868,
												"nodeType": "IfStatement",
												"src": "8485:119:5",
												"trueBody": {
													"id": 861,
													"nodeType": "Block",
													"src": "8498:42:5",
													"statements": [
														{
															"expression": {
																"id": 859,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 851,
																"src": "8519:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 857,
															"id": 860,
															"nodeType": "Return",
															"src": "8512:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 847,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:5",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 870,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "8350:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 848,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "8372:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 850,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "8405:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 852,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:5"
									},
									"returnParameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "8461:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 855,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:5"
									},
									"scope": 891,
									"src": "8315:295:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 889,
										"nodeType": "Block",
										"src": "8699:457:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 877,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 872,
															"src": "8775:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 878,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 879,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 887,
													"nodeType": "Block",
													"src": "9105:45:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 884,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 874,
																		"src": "9126:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 883,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 885,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 886,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:5"
														}
													]
												},
												"id": 888,
												"nodeType": "IfStatement",
												"src": "8771:379:5",
												"trueBody": {
													"id": 882,
													"nodeType": "Block",
													"src": "8798:301:5",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:5",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:5",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:5"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:5"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:5",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:5",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:5"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:5"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:5"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 872,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:5",
																	"valueSize": 1
																},
																{
																	"declaration": 872,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:5",
																	"valueSize": 1
																}
															],
															"id": 881,
															"nodeType": "InlineAssembly",
															"src": "8947:142:5"
														}
													]
												}
											}
										]
									},
									"id": 890,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "8633:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 871,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "8658:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 873,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:5"
									},
									"returnParameters": {
										"id": 876,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:5"
									},
									"scope": 891,
									"src": "8616:540:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 892,
							"src": "194:8964:5",
							"usedErrors": []
						}
					],
					"src": "101:9058:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							913
						]
					},
					"id": 914,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 893,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 894,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 913,
							"linearizedBaseContracts": [
								913
							],
							"name": "Context",
							"nameLocation": "626:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 902,
										"nodeType": "Block",
										"src": "702:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 899,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 898,
												"id": 901,
												"nodeType": "Return",
												"src": "712:17:6"
											}
										]
									},
									"id": 903,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:6"
									},
									"returnParameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 903,
												"src": "693:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 896,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:6"
									},
									"scope": 913,
									"src": "640:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 911,
										"nodeType": "Block",
										"src": "809:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 908,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 907,
												"id": 910,
												"nodeType": "Return",
												"src": "819:15:6"
											}
										]
									},
									"id": 912,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:6"
									},
									"returnParameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "793:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 905,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:6"
									},
									"scope": 913,
									"src": "742:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 914,
							"src": "608:235:6",
							"usedErrors": []
						}
					],
					"src": "86:758:6"
				},
				"id": 6
			},
			"contracts/ERC20/Staking.sol": {
				"ast": {
					"absolutePath": "contracts/ERC20/Staking.sol",
					"exportedSymbols": {
						"Address": [
							891
						],
						"Context": [
							913
						],
						"IERC20": [
							244
						],
						"IERC20Permit": [
							280
						],
						"Ownable": [
							112
						],
						"ReentrancyGuard": [
							166
						],
						"SafeERC20": [
							561
						],
						"Staking": [
							1567
						]
					},
					"id": 1568,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 915,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 916,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1568,
							"sourceUnit": 562,
							"src": "64:65:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 917,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1568,
							"sourceUnit": 167,
							"src": "130:62:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 918,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1568,
							"sourceUnit": 113,
							"src": "193:52:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 919,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 166,
										"src": "267:15:7"
									},
									"id": 920,
									"nodeType": "InheritanceSpecifier",
									"src": "267:15:7"
								},
								{
									"baseName": {
										"id": 921,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "284:7:7"
									},
									"id": 922,
									"nodeType": "InheritanceSpecifier",
									"src": "284:7:7"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1567,
							"linearizedBaseContracts": [
								1567,
								112,
								913,
								166
							],
							"name": "Staking",
							"nameLocation": "256:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 923,
										"nodeType": "StructuredDocumentation",
										"src": "298:159:7",
										"text": " @notice Constructor since this contract is not meant to be used without inheritance\n push once to stakeholders for it to work properly"
									},
									"id": 927,
									"mutability": "mutable",
									"name": "stakingPackage",
									"nameLocation": "500:14:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "463:51:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 926,
										"keyType": {
											"id": 924,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "471:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "463:27:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 925,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "482:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "cb79c2e1",
									"id": 929,
									"mutability": "mutable",
									"name": "stakingPenaltyRate",
									"nameLocation": "536:18:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "521:33:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 928,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "521:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8891cf0d",
									"id": 931,
									"mutability": "mutable",
									"name": "airdropRate",
									"nameLocation": "575:11:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "560:26:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 930,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "560:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b87da76d",
									"id": 933,
									"mutability": "mutable",
									"name": "airdropSince",
									"nameLocation": "607:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "592:27:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 932,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "592:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2cf1a5fb",
									"id": 935,
									"mutability": "mutable",
									"name": "airdropStatus",
									"nameLocation": "637:13:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "625:25:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 934,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "625:4:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8c8e8fee",
									"id": 937,
									"mutability": "mutable",
									"name": "token_address",
									"nameLocation": "672:13:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "657:28:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 936,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "657:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 972,
										"nodeType": "Block",
										"src": "719:274:7",
										"statements": [
											{
												"expression": {
													"id": 944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 942,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 929,
														"src": "791:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3135",
														"id": 943,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "812:2:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_15_by_1",
															"typeString": "int_const 15"
														},
														"value": "15"
													},
													"src": "791:23:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 945,
												"nodeType": "ExpressionStatement",
												"src": "791:23:7"
											},
											{
												"expression": {
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 946,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 931,
														"src": "824:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3830",
														"id": 947,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "838:2:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_80_by_1",
															"typeString": "int_const 80"
														},
														"value": "80"
													},
													"src": "824:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 949,
												"nodeType": "ExpressionStatement",
												"src": "824:16:7"
											},
											{
												"expression": {
													"id": 952,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 950,
														"name": "token_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "851:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 951,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "867:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "851:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 953,
												"nodeType": "ExpressionStatement",
												"src": "851:21:7"
											},
											{
												"expression": {
													"id": 958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 954,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 927,
															"src": "883:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 956,
														"indexExpression": {
															"hexValue": "3930",
															"id": 955,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "898:7:7",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_7776000_by_1",
																"typeString": "int_const 7776000"
															},
															"value": "90"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "883:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "36",
														"id": 957,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "909:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_6_by_1",
															"typeString": "int_const 6"
														},
														"value": "6"
													},
													"src": "883:27:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 959,
												"nodeType": "ExpressionStatement",
												"src": "883:27:7"
											},
											{
												"expression": {
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 960,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 927,
															"src": "920:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 962,
														"indexExpression": {
															"hexValue": "313830",
															"id": 961,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "935:8:7",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_15552000_by_1",
																"typeString": "int_const 15552000"
															},
															"value": "180"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "920:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "37",
														"id": 963,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "947:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_7_by_1",
															"typeString": "int_const 7"
														},
														"value": "7"
													},
													"src": "920:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 965,
												"nodeType": "ExpressionStatement",
												"src": "920:28:7"
											},
											{
												"expression": {
													"id": 970,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 966,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 927,
															"src": "958:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 968,
														"indexExpression": {
															"hexValue": "333635",
															"id": 967,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "973:8:7",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															"value": "365"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "958:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "38",
														"id": 969,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "985:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"src": "958:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 971,
												"nodeType": "ExpressionStatement",
												"src": "958:28:7"
											}
										]
									},
									"id": 973,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "712:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "704:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 938,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "704:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "703:15:7"
									},
									"returnParameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "719:0:7"
									},
									"scope": 1567,
									"src": "692:301:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.Stake",
									"id": 988,
									"members": [
										{
											"constant": false,
											"id": 975,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "1257:6:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1249:14:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 974,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1249:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 977,
											"mutability": "mutable",
											"name": "since",
											"nameLocation": "1281:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1273:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 976,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1273:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 979,
											"mutability": "mutable",
											"name": "rewardAPY",
											"nameLocation": "1304:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1296:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 978,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1296:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 981,
											"mutability": "mutable",
											"name": "releaseTime",
											"nameLocation": "1331:11:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1323:19:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 980,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1323:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 983,
											"mutability": "mutable",
											"name": "claimable",
											"nameLocation": "1459:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1451:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 982,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1451:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 985,
											"mutability": "mutable",
											"name": "claimableAirdrop",
											"nameLocation": "1486:16:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1478:24:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 984,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1478:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 987,
											"mutability": "mutable",
											"name": "latestClaimDrop",
											"nameLocation": "1520:15:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1512:23:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 986,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1512:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stake",
									"nameLocation": "1233:5:7",
									"nodeType": "StructDefinition",
									"scope": 1567,
									"src": "1226:316:7",
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.StakingSummary",
									"id": 996,
									"members": [
										{
											"constant": false,
											"id": 990,
											"mutability": "mutable",
											"name": "total_amount",
											"nameLocation": "1719:12:7",
											"nodeType": "VariableDeclaration",
											"scope": 996,
											"src": "1711:20:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 989,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1711:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 992,
											"mutability": "mutable",
											"name": "penalty",
											"nameLocation": "1749:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 996,
											"src": "1741:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 991,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1741:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 995,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "1772:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 996,
											"src": "1766:11:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
												"typeString": "struct Staking.Stake"
											},
											"typeName": {
												"id": 994,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 993,
													"name": "Stake",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 988,
													"src": "1766:5:7"
												},
												"referencedDeclaration": 988,
												"src": "1766:5:7",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
													"typeString": "struct Staking.Stake"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakingSummary",
									"nameLocation": "1686:14:7",
									"nodeType": "StructDefinition",
									"scope": 1567,
									"src": "1679:105:7",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 997,
										"nodeType": "StructuredDocumentation",
										"src": "1790:111:7",
										"text": " @notice\n stakes is used to keep track of the INDEX for the stakers in the stakes array"
									},
									"id": 1002,
									"mutability": "mutable",
									"name": "stakeholders",
									"nameLocation": "1941:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "1906:47:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
										"typeString": "mapping(address => struct Staking.Stake)"
									},
									"typeName": {
										"id": 1001,
										"keyType": {
											"id": 998,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1914:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1906:25:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
											"typeString": "mapping(address => struct Staking.Stake)"
										},
										"valueType": {
											"id": 1000,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 999,
												"name": "Stake",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 988,
												"src": "1925:5:7"
											},
											"referencedDeclaration": 988,
											"src": "1925:5:7",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
												"typeString": "struct Staking.Stake"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "1960:124:7",
										"text": " @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
									},
									"id": 1013,
									"name": "Staked",
									"nameLocation": "2095:6:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2127:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2111:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1004,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2111:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2149:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2141:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2141:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2173:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2165:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1011,
												"indexed": false,
												"mutability": "mutable",
												"name": "releaseTime",
												"nameLocation": "2200:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2192:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2192:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2101:116:7"
									},
									"src": "2089:129:7"
								},
								{
									"anonymous": false,
									"id": 1017,
									"name": "PenaltyChanged",
									"nameLocation": "2230:14:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2253:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "2245:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1014,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2245:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2244:16:7"
									},
									"src": "2224:37:7"
								},
								{
									"anonymous": false,
									"id": 1021,
									"name": "AirdropChanged",
									"nameLocation": "2272:14:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2295:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1021,
												"src": "2287:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2287:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2286:16:7"
									},
									"src": "2266:37:7"
								},
								{
									"body": {
										"id": 1031,
										"nodeType": "Block",
										"src": "2460:70:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1027,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1025,
																"name": "airdropStatus",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 935,
																"src": "2478:13:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "74727565",
																"id": 1026,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2495:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "2478:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "41697264726f70206e6f742073746172746564",
															"id": 1028,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2501:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9",
																"typeString": "literal_string \"Airdrop not started\""
															},
															"value": "Airdrop not started"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9",
																"typeString": "literal_string \"Airdrop not started\""
															}
														],
														"id": 1024,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2470:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2470:53:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1030,
												"nodeType": "ExpressionStatement",
												"src": "2470:53:7"
											}
										]
									},
									"id": 1032,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkAirdropStatus",
									"nameLocation": "2424:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2443:2:7"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2460:0:7"
									},
									"scope": 1567,
									"src": "2415:115:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1038,
										"nodeType": "Block",
										"src": "2565:49:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1034,
														"name": "_checkAirdropStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1032,
														"src": "2575:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1035,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2575:21:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1036,
												"nodeType": "ExpressionStatement",
												"src": "2575:21:7"
											},
											{
												"id": 1037,
												"nodeType": "PlaceholderStatement",
												"src": "2606:1:7"
											}
										]
									},
									"id": 1039,
									"name": "airdropStatusTrue",
									"nameLocation": "2545:17:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2562:2:7"
									},
									"src": "2536:78:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1120,
										"nodeType": "Block",
										"src": "3005:1093:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1056,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1050,
																		"name": "stakeholders",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1002,
																		"src": "3206:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
																			"typeString": "mapping(address => struct Staking.Stake storage ref)"
																		}
																	},
																	"id": 1053,
																	"indexExpression": {
																		"expression": {
																			"id": 1051,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3219:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1052,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3219:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3206:24:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$988_storage",
																		"typeString": "struct Staking.Stake storage ref"
																	}
																},
																"id": 1054,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 975,
																"src": "3206:31:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1055,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3241:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3206:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "557365722069732061205374616b6572",
															"id": 1057,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3244:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8",
																"typeString": "literal_string \"User is a Staker\""
															},
															"value": "User is a Staker"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8",
																"typeString": "literal_string \"User is a Staker\""
															}
														],
														"id": 1049,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3198:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1058,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3198:65:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1059,
												"nodeType": "ExpressionStatement",
												"src": "3198:65:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1065,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 1061,
																	"name": "stakingPackage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 927,
																	"src": "3281:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 1063,
																"indexExpression": {
																	"id": 1062,
																	"name": "stakePeriod",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1044,
																	"src": "3296:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3281:27:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1064,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3312:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3281:32:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061636b616765206e6f7420466f756e64",
															"id": 1066,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3315:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734",
																"typeString": "literal_string \"Package not Found\""
															},
															"value": "Package not Found"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734",
																"typeString": "literal_string \"Package not Found\""
															}
														],
														"id": 1060,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3273:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1067,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3273:62:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1068,
												"nodeType": "ExpressionStatement",
												"src": "3273:62:7"
											},
											{
												"assignments": [
													1070
												],
												"declarations": [
													{
														"constant": false,
														"id": 1070,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "3441:9:7",
														"nodeType": "VariableDeclaration",
														"scope": 1120,
														"src": "3433:17:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1069,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3433:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1073,
												"initialValue": {
													"expression": {
														"id": 1071,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "3453:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "3453:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3433:35:7"
											},
											{
												"expression": {
													"id": 1092,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1074,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1002,
															"src": "3597:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1077,
														"indexExpression": {
															"expression": {
																"id": 1075,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3610:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1076,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3610:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3597:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1079,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1042,
																"src": "3643:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1080,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1070,
																"src": "3663:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"baseExpression": {
																	"id": 1081,
																	"name": "stakingPackage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 927,
																	"src": "3686:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 1083,
																"indexExpression": {
																	"id": 1082,
																	"name": "stakePeriod",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1044,
																	"src": "3701:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3686:27:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1086,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1084,
																			"name": "stakePeriod",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1044,
																			"src": "3728:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1085,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1070,
																			"src": "3742:9:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3728:23:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1087,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3727:25:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 1088,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3766:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1089,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3781:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1090,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3796:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1078,
															"name": "Stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 988,
															"src": "3624:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Stake_$988_storage_ptr_$",
																"typeString": "type(struct Staking.Stake storage pointer)"
															}
														},
														"id": 1091,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3624:183:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
															"typeString": "struct Staking.Stake memory"
														}
													},
													"src": "3597:210:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$988_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"id": 1093,
												"nodeType": "ExpressionStatement",
												"src": "3597:210:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1098,
																	"name": "token_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 937,
																	"src": "3865:13:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1097,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 244,
																"src": "3858:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$244_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1099,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3858:21:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"expression": {
																"id": 1100,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3893:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3893:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1104,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3925:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Staking_$1567",
																		"typeString": "contract Staking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Staking_$1567",
																		"typeString": "contract Staking"
																	}
																],
																"id": 1103,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3917:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1102,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3917:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1105,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3917:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1106,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1042,
															"src": "3944:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1094,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 561,
															"src": "3818:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$561_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1096,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 338,
														"src": "3818:26:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3818:142:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1108,
												"nodeType": "ExpressionStatement",
												"src": "3818:142:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1110,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4034:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1111,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4034:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1112,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1042,
															"src": "4046:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1113,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "4054:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1116,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1114,
																		"name": "stakePeriod",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1044,
																		"src": "4066:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1115,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1070,
																		"src": "4080:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4066:23:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1117,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "4065:25:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1109,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1013,
														"src": "4027:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4027:64:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1119,
												"nodeType": "EmitStatement",
												"src": "4022:69:7"
											}
										]
									},
									"documentation": {
										"id": 1040,
										"nodeType": "StructuredDocumentation",
										"src": "2726:200:7",
										"text": " @notice\n _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n StakeID"
									},
									"functionSelector": "7b0472f0",
									"id": 1121,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1047,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1046,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 142,
												"src": "2992:12:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2992:12:7"
										}
									],
									"name": "stake",
									"nameLocation": "2940:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2954:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "2946:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1041,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2946:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "stakePeriod",
												"nameLocation": "2970:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "2962:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1043,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2962:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2945:37:7"
									},
									"returnParameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3005:0:7"
									},
									"scope": 1567,
									"src": "2931:1167:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1143,
										"nodeType": "Block",
										"src": "4165:205:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1131,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1129,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1123,
																"src": "4257:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "3330",
																"id": 1130,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4267:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_30_by_1",
																	"typeString": "int_const 30"
																},
																"value": "30"
															},
															"src": "4257:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50656e616c7479206d617820333025",
															"id": 1132,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4271:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a",
																"typeString": "literal_string \"Penalty max 30%\""
															},
															"value": "Penalty max 30%"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a",
																"typeString": "literal_string \"Penalty max 30%\""
															}
														],
														"id": 1128,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4249:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4249:40:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1134,
												"nodeType": "ExpressionStatement",
												"src": "4249:40:7"
											},
											{
												"expression": {
													"id": 1137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1135,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 929,
														"src": "4299:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1136,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1123,
														"src": "4320:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4299:27:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1138,
												"nodeType": "ExpressionStatement",
												"src": "4299:27:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1140,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1123,
															"src": "4356:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1139,
														"name": "PenaltyChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1017,
														"src": "4341:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4341:22:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1142,
												"nodeType": "EmitStatement",
												"src": "4336:27:7"
											}
										]
									},
									"functionSelector": "8c63f97f",
									"id": 1144,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1126,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1125,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "4155:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "4155:9:7"
										}
									],
									"name": "changePenaltyFee",
									"nameLocation": "4113:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4138:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1144,
												"src": "4130:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4130:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4129:16:7"
									},
									"returnParameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4165:0:7"
									},
									"scope": 1567,
									"src": "4104:266:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1162,
										"nodeType": "Block",
										"src": "4486:121:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1157,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1154,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1151,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "4557:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1152,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "4557:15:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1153,
																				"name": "since",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1146,
																				"src": "4575:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4557:23:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1155,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4556:25:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "31653234",
																	"id": 1156,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4584:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000000000"
																	},
																	"value": "1e24"
																},
																"src": "4556:32:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1158,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4555:34:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "333635",
														"id": 1159,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4592:8:7",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31536000_by_1",
															"typeString": "int_const 31536000"
														},
														"value": "365"
													},
													"src": "4555:45:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1150,
												"id": 1161,
												"nodeType": "Return",
												"src": "4548:52:7"
											}
										]
									},
									"id": 1163,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingDuration",
									"nameLocation": "4385:25:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "since",
												"nameLocation": "4419:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "4411:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4411:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4410:15:7"
									},
									"returnParameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "4473:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4473:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4472:9:7"
									},
									"scope": 1567,
									"src": "4376:231:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1185,
										"nodeType": "Block",
										"src": "4729:251:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1180,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1175,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1171,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1166,
																			"src": "4847:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1172,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 975,
																		"src": "4847:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"expression": {
																			"id": 1173,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1166,
																			"src": "4883:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1174,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardAPY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 979,
																		"src": "4883:20:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4847:56:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1177,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1166,
																				"src": "4948:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																					"typeString": "struct Staking.Stake memory"
																				}
																			},
																			"id": 1178,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "since",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 977,
																			"src": "4948:16:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1176,
																		"name": "_calculateStakingDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1163,
																		"src": "4922:25:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1179,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4922:43:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4847:118:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1181,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4846:120:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653236",
														"id": 1182,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4969:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000000000"
														},
														"value": "1e26"
													},
													"src": "4846:127:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1170,
												"id": 1184,
												"nodeType": "Return",
												"src": "4827:146:7"
											}
										]
									},
									"id": 1186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakeReward",
									"nameLocation": "4622:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1166,
												"mutability": "mutable",
												"name": "user_stake",
												"nameLocation": "4657:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "4644:23:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
													"typeString": "struct Staking.Stake"
												},
												"typeName": {
													"id": 1165,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1164,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 988,
														"src": "4644:5:7"
													},
													"referencedDeclaration": 988,
													"src": "4644:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
														"typeString": "struct Staking.Stake"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4643:25:7"
									},
									"returnParameters": {
										"id": 1170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "4716:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1168,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4716:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4715:9:7"
									},
									"scope": 1567,
									"src": "4613:367:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1217,
										"nodeType": "Block",
										"src": "5125:156:7",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1205,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1197,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1188,
																"src": "5156:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1203,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1200,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1198,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1188,
																						"src": "5167:6:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1199,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 929,
																						"src": "5176:18:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "5167:27:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1201,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "5166:29:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1202,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5198:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "5166:36:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1204,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5165:38:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5156:47:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1206,
																"name": "reward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1190,
																"src": "5217:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1212,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1209,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1207,
																						"name": "reward",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1190,
																						"src": "5228:6:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1208,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 929,
																						"src": "5237:18:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "5228:27:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1210,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "5227:29:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1211,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5259:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "5227:36:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1213,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5226:38:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5217:47:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1215,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5142:132:7",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 1196,
												"id": 1216,
												"nodeType": "Return",
												"src": "5135:139:7"
											}
										]
									},
									"id": 1218,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingWithPenalty",
									"nameLocation": "4995:28:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1188,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5032:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1218,
												"src": "5024:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5024:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1190,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "5048:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1218,
												"src": "5040:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5040:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5023:32:7"
									},
									"returnParameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1218,
												"src": "5103:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5103:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1218,
												"src": "5112:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5112:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5102:18:7"
									},
									"scope": 1567,
									"src": "4986:295:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1299,
										"nodeType": "Block",
										"src": "5675:921:7",
										"statements": [
											{
												"assignments": [
													1226
												],
												"declarations": [
													{
														"constant": false,
														"id": 1226,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "5806:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1299,
														"src": "5793:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1225,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1224,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 988,
																"src": "5793:5:7"
															},
															"referencedDeclaration": 988,
															"src": "5793:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1231,
												"initialValue": {
													"baseExpression": {
														"id": 1227,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1002,
														"src": "5819:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1230,
													"indexExpression": {
														"expression": {
															"id": 1228,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "5832:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1229,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "5832:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5819:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$988_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5793:50:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1236,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1233,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1226,
																	"src": "5861:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 1234,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 975,
																"src": "5861:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1235,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5882:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5861:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b696e67206e6f7420666f756e64",
															"id": 1237,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5885:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															},
															"value": "Staking not found"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															}
														],
														"id": 1232,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5853:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5853:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1239,
												"nodeType": "ExpressionStatement",
												"src": "5853:52:7"
											},
											{
												"assignments": [
													1241
												],
												"declarations": [
													{
														"constant": false,
														"id": 1241,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "5924:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1299,
														"src": "5916:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1240,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5916:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1245,
												"initialValue": {
													"arguments": [
														{
															"id": 1243,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1226,
															"src": "5955:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1242,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1186,
														"src": "5933:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$988_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5933:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5916:50:7"
											},
											{
												"expression": {
													"id": 1250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "5976:31:7",
													"subExpression": {
														"baseExpression": {
															"id": 1246,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1002,
															"src": "5983:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1249,
														"indexExpression": {
															"expression": {
																"id": 1247,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5996:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1248,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5996:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5983:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1251,
												"nodeType": "ExpressionStatement",
												"src": "5976:31:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1252,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1226,
															"src": "6022:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1253,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 981,
														"src": "6022:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1254,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "6047:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "6047:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6022:40:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1297,
													"nodeType": "Block",
													"src": "6416:174:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1286,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 937,
																				"src": "6477:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1285,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 244,
																			"src": "6470:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$244_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1287,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6470:21:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1288,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "6509:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1289,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "6509:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1293,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"id": 1290,
																						"name": "user_stake",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1226,
																						"src": "6538:10:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																							"typeString": "struct Staking.Stake memory"
																						}
																					},
																					"id": 1291,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "amount",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 975,
																					"src": "6538:17:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1292,
																					"name": "reward",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1241,
																					"src": "6558:6:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "6538:26:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1294,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "6537:28:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1282,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 561,
																		"src": "6430:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$561_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1284,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 312,
																	"src": "6430:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1295,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6430:149:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1296,
															"nodeType": "ExpressionStatement",
															"src": "6430:149:7"
														}
													]
												},
												"id": 1298,
												"nodeType": "IfStatement",
												"src": "6018:572:7",
												"trueBody": {
													"id": 1281,
													"nodeType": "Block",
													"src": "6064:346:7",
													"statements": [
														{
															"assignments": [
																1258,
																1260
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1258,
																	"mutability": "mutable",
																	"name": "amount_reduced",
																	"nameLocation": "6104:14:7",
																	"nodeType": "VariableDeclaration",
																	"scope": 1281,
																	"src": "6096:22:7",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1257,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6096:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1260,
																	"mutability": "mutable",
																	"name": "reward_reduced",
																	"nameLocation": "6144:14:7",
																	"nodeType": "VariableDeclaration",
																	"scope": 1281,
																	"src": "6136:22:7",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1259,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6136:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1266,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1262,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1226,
																			"src": "6204:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1263,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 975,
																		"src": "6204:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1264,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1241,
																		"src": "6223:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1261,
																	"name": "_calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1218,
																	"src": "6175:28:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 1265,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6175:55:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6078:152:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1271,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 937,
																				"src": "6292:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1270,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 244,
																			"src": "6285:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$244_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1272,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6285:21:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1273,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "6324:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "6324:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1277,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1275,
																					"name": "amount_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1258,
																					"src": "6353:14:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1276,
																					"name": "reward_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1260,
																					"src": "6370:14:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "6353:31:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1278,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "6352:33:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1267,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 561,
																		"src": "6245:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$561_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 312,
																	"src": "6245:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1279,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6245:154:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1280,
															"nodeType": "ExpressionStatement",
															"src": "6245:154:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1219,
										"nodeType": "StructuredDocumentation",
										"src": "5287:335:7",
										"text": " @notice\n withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n Notice index of the stake is the users stake counter, starting at 0 for the first stake\n Will return the amount to MINT onto the account\n Will also _calculateStakeReward and reset timer"
									},
									"functionSelector": "bed9d861",
									"id": 1300,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1222,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1221,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 142,
												"src": "5662:12:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "5662:12:7"
										}
									],
									"name": "withdrawStake",
									"nameLocation": "5637:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5650:2:7"
									},
									"returnParameters": {
										"id": 1223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5675:0:7"
									},
									"scope": 1567,
									"src": "5628:968:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1415,
										"nodeType": "Block",
										"src": "6668:865:7",
										"statements": [
											{
												"assignments": [
													1308
												],
												"declarations": [
													{
														"constant": false,
														"id": 1308,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "6691:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1415,
														"src": "6678:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1307,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1306,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 988,
																"src": "6678:5:7"
															},
															"referencedDeclaration": 988,
															"src": "6678:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1313,
												"initialValue": {
													"baseExpression": {
														"id": 1309,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1002,
														"src": "6704:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1312,
													"indexExpression": {
														"expression": {
															"id": 1310,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "6717:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1311,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "6717:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6704:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$988_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6678:50:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1315,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1308,
																	"src": "6746:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 1316,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 975,
																"src": "6746:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1317,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6767:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6746:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b696e67206e6f7420666f756e64",
															"id": 1319,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6770:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															},
															"value": "Staking not found"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															}
														],
														"id": 1314,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6738:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6738:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1321,
												"nodeType": "ExpressionStatement",
												"src": "6738:52:7"
											},
											{
												"assignments": [
													1324
												],
												"declarations": [
													{
														"constant": false,
														"id": 1324,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "6822:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1415,
														"src": "6800:29:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
															"typeString": "struct Staking.StakingSummary"
														},
														"typeName": {
															"id": 1323,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1322,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 996,
																"src": "6800:14:7"
															},
															"referencedDeclaration": 996,
															"src": "6800:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$996_storage_ptr",
																"typeString": "struct Staking.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1330,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 1326,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6847:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 1327,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6850:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1328,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1308,
															"src": "6853:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1325,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 996,
														"src": "6832:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$996_storage_ptr_$",
															"typeString": "type(struct Staking.StakingSummary storage pointer)"
														}
													},
													"id": 1329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6832:32:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6800:64:7"
											},
											{
												"assignments": [
													1332
												],
												"declarations": [
													{
														"constant": false,
														"id": 1332,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "6883:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1415,
														"src": "6875:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1331,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6875:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1336,
												"initialValue": {
													"arguments": [
														{
															"id": 1334,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1308,
															"src": "6914:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1333,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1186,
														"src": "6892:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$988_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6892:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6875:50:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1337,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1324,
																"src": "6940:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1338,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 995,
															"src": "6940:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1339,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 981,
														"src": "6940:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1340,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "6968:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1341,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "6968:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6940:43:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1365,
												"nodeType": "IfStatement",
												"src": "6936:214:7",
												"trueBody": {
													"id": 1364,
													"nodeType": "Block",
													"src": "6985:165:7",
													"statements": [
														{
															"expression": {
																"id": 1362,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1343,
																		"name": "summary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1324,
																		"src": "6999:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																			"typeString": "struct Staking.StakingSummary memory"
																		}
																	},
																	"id": 1345,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "penalty",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 992,
																	"src": "6999:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1361,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1352,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1349,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"id": 1346,
																									"name": "user_stake",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1308,
																									"src": "7035:10:7",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																										"typeString": "struct Staking.Stake memory"
																									}
																								},
																								"id": 1347,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "amount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 975,
																								"src": "7035:17:7",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1348,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 929,
																								"src": "7055:18:7",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7035:38:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1350,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7034:40:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1351,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7077:4:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "7034:47:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1353,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "7033:49:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1359,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1356,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1354,
																								"name": "reward",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1332,
																								"src": "7103:6:7",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1355,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 929,
																								"src": "7112:18:7",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7103:27:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1357,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7102:29:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1358,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7134:4:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "7102:36:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1360,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "7101:38:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7033:106:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6999:140:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1363,
															"nodeType": "ExpressionStatement",
															"src": "6999:140:7"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1367,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1308,
																	"src": "7178:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 1368,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "latestClaimDrop",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 987,
																"src": "7178:26:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1366,
															"name": "calculateWeek",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1479,
															"src": "7164:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256) view returns (uint256)"
															}
														},
														"id": 1369,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7164:41:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1370,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7208:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7164:45:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1396,
													"nodeType": "Block",
													"src": "7350:59:7",
													"statements": [
														{
															"expression": {
																"id": 1394,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1388,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1324,
																			"src": "7364:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1391,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 995,
																		"src": "7364:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1392,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 985,
																	"src": "7364:30:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1393,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7397:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7364:34:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1395,
															"nodeType": "ExpressionStatement",
															"src": "7364:34:7"
														}
													]
												},
												"id": 1397,
												"nodeType": "IfStatement",
												"src": "7160:249:7",
												"trueBody": {
													"id": 1387,
													"nodeType": "Block",
													"src": "7211:133:7",
													"statements": [
														{
															"assignments": [
																1373
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1373,
																	"mutability": "mutable",
																	"name": "airdrop",
																	"nameLocation": "7233:7:7",
																	"nodeType": "VariableDeclaration",
																	"scope": 1387,
																	"src": "7225:15:7",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1372,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7225:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1378,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1375,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1308,
																			"src": "7261:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1376,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 975,
																		"src": "7261:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1374,
																	"name": "_calculateAirdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1497,
																	"src": "7243:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 1377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7243:36:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7225:54:7"
														},
														{
															"expression": {
																"id": 1385,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1379,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1324,
																			"src": "7293:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1382,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 995,
																		"src": "7293:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1383,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 985,
																	"src": "7293:30:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1384,
																	"name": "airdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1373,
																	"src": "7326:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7293:40:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1386,
															"nodeType": "ExpressionStatement",
															"src": "7293:40:7"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"expression": {
																"id": 1398,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1324,
																"src": "7419:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1401,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 995,
															"src": "7419:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1402,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimable",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 983,
														"src": "7419:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1403,
														"name": "reward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1332,
														"src": "7445:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7419:32:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1405,
												"nodeType": "ExpressionStatement",
												"src": "7419:32:7"
											},
											{
												"expression": {
													"id": 1411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1406,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1324,
															"src": "7461:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																"typeString": "struct Staking.StakingSummary memory"
															}
														},
														"id": 1408,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 990,
														"src": "7461:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1409,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1308,
															"src": "7484:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1410,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 975,
														"src": "7484:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7461:40:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1412,
												"nodeType": "ExpressionStatement",
												"src": "7461:40:7"
											},
											{
												"expression": {
													"id": 1413,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1324,
													"src": "7519:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"functionReturnParameters": 1305,
												"id": 1414,
												"nodeType": "Return",
												"src": "7512:14:7"
											}
										]
									},
									"functionSelector": "10486b6a",
									"id": 1416,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasStake",
									"nameLocation": "6611:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1301,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6619:2:7"
									},
									"returnParameters": {
										"id": 1305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1304,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1416,
												"src": "6645:21:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
													"typeString": "struct Staking.StakingSummary"
												},
												"typeName": {
													"id": 1303,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1302,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 996,
														"src": "6645:14:7"
													},
													"referencedDeclaration": 996,
													"src": "6645:14:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$996_storage_ptr",
														"typeString": "struct Staking.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6644:23:7"
									},
									"scope": 1567,
									"src": "6602:931:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1430,
										"nodeType": "Block",
										"src": "7688:77:7",
										"statements": [
											{
												"expression": {
													"id": 1424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1421,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 933,
														"src": "7698:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1422,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "7713:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1423,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "7713:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7698:30:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1425,
												"nodeType": "ExpressionStatement",
												"src": "7698:30:7"
											},
											{
												"expression": {
													"id": 1428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1426,
														"name": "airdropStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 935,
														"src": "7738:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1427,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7754:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "7738:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1429,
												"nodeType": "ExpressionStatement",
												"src": "7738:20:7"
											}
										]
									},
									"functionSelector": "d2a569c3",
									"id": 1431,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1419,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1418,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "7678:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "7678:9:7"
										}
									],
									"name": "startAirdrop",
									"nameLocation": "7654:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7666:2:7"
									},
									"returnParameters": {
										"id": 1420,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7688:0:7"
									},
									"scope": 1567,
									"src": "7645:120:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1453,
										"nodeType": "Block",
										"src": "7839:125:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1441,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1439,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1433,
																"src": "7857:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "323030",
																"id": 1440,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7867:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_200_by_1",
																	"typeString": "int_const 200"
																},
																"value": "200"
															},
															"src": "7857:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "41697264726f70206d617820323025",
															"id": 1442,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7872:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287",
																"typeString": "literal_string \"Airdrop max 20%\""
															},
															"value": "Airdrop max 20%"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287",
																"typeString": "literal_string \"Airdrop max 20%\""
															}
														],
														"id": 1438,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7849:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7849:41:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1444,
												"nodeType": "ExpressionStatement",
												"src": "7849:41:7"
											},
											{
												"expression": {
													"id": 1447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1445,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 931,
														"src": "7900:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1446,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1433,
														"src": "7914:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7900:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1448,
												"nodeType": "ExpressionStatement",
												"src": "7900:20:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1450,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1433,
															"src": "7950:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1449,
														"name": "AirdropChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1021,
														"src": "7935:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7935:22:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1452,
												"nodeType": "EmitStatement",
												"src": "7930:27:7"
											}
										]
									},
									"functionSelector": "d5dbdf1b",
									"id": 1454,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1436,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1435,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "7829:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "7829:9:7"
										}
									],
									"name": "changeAirdropPercentage",
									"nameLocation": "7780:23:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7812:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "7804:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1432,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7804:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7803:16:7"
									},
									"returnParameters": {
										"id": 1437,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7839:0:7"
									},
									"scope": 1567,
									"src": "7771:193:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1462,
										"nodeType": "Block",
										"src": "8026:39:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1459,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "8043:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "8043:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1458,
												"id": 1461,
												"nodeType": "Return",
												"src": "8036:22:7"
											}
										]
									},
									"functionSelector": "adb61832",
									"id": 1463,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "blockTimestamp",
									"nameLocation": "7979:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1455,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7993:2:7"
									},
									"returnParameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "8017:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8017:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8016:9:7"
									},
									"scope": 1567,
									"src": "7970:95:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1478,
										"nodeType": "Block",
										"src": "8143:62:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1473,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1470,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "8161:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1471,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "8161:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1472,
																	"name": "timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1465,
																	"src": "8179:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8161:27:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1474,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8160:29:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "37",
														"id": 1475,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8192:6:7",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_604800_by_1",
															"typeString": "int_const 604800"
														},
														"value": "7"
													},
													"src": "8160:38:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1469,
												"id": 1477,
												"nodeType": "Return",
												"src": "8153:45:7"
											}
										]
									},
									"functionSelector": "b5d9df83",
									"id": 1479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateWeek",
									"nameLocation": "8080:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "8102:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "8094:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1464,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8094:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8093:19:7"
									},
									"returnParameters": {
										"id": 1469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "8134:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8134:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8133:9:7"
									},
									"scope": 1567,
									"src": "8071:134:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1496,
										"nodeType": "Block",
										"src": "8319:71:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1491,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1488,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1486,
																				"name": "stakeAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1481,
																				"src": "8338:11:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1487,
																				"name": "airdropRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 931,
																				"src": "8352:11:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8338:25:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1489,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8337:27:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 1490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8367:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "8337:34:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1492,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8336:36:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3532",
														"id": 1493,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8375:8:7",
														"subdenomination": "weeks",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31449600_by_1",
															"typeString": "int_const 31449600"
														},
														"value": "52"
													},
													"src": "8336:47:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1485,
												"id": 1495,
												"nodeType": "Return",
												"src": "8329:54:7"
											}
										]
									},
									"id": 1497,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateAirdrop",
									"nameLocation": "8220:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1481,
												"mutability": "mutable",
												"name": "stakeAmount",
												"nameLocation": "8246:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "8238:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8238:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8237:21:7"
									},
									"returnParameters": {
										"id": 1485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1484,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "8306:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1483,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8306:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8305:9:7"
									},
									"scope": 1567,
									"src": "8211:179:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1565,
										"nodeType": "Block",
										"src": "8447:644:7",
										"statements": [
											{
												"assignments": [
													1504
												],
												"declarations": [
													{
														"constant": false,
														"id": 1504,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "8523:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1565,
														"src": "8509:24:7",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1503,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1502,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 988,
																"src": "8509:5:7"
															},
															"referencedDeclaration": 988,
															"src": "8509:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1509,
												"initialValue": {
													"baseExpression": {
														"id": 1505,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1002,
														"src": "8536:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1508,
													"indexExpression": {
														"expression": {
															"id": 1506,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "8549:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1507,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "8549:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8536:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$988_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8509:51:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1514,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1511,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1504,
																	"src": "8579:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																		"typeString": "struct Staking.Stake storage pointer"
																	}
																},
																"id": 1512,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 975,
																"src": "8579:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1513,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8600:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8579:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b696e67206e6f7420666f756e64",
															"id": 1515,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8603:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															},
															"value": "Staking not found"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															}
														],
														"id": 1510,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8571:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8571:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1517,
												"nodeType": "ExpressionStatement",
												"src": "8571:52:7"
											},
											{
												"assignments": [
													1519
												],
												"declarations": [
													{
														"constant": false,
														"id": 1519,
														"mutability": "mutable",
														"name": "latestClaim",
														"nameLocation": "8641:11:7",
														"nodeType": "VariableDeclaration",
														"scope": 1565,
														"src": "8633:19:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1518,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8633:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1524,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1521,
																"name": "user_stake",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1504,
																"src": "8669:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																	"typeString": "struct Staking.Stake storage pointer"
																}
															},
															"id": 1522,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "latestClaimDrop",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 987,
															"src": "8669:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1520,
														"name": "calculateWeek",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1479,
														"src": "8655:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8655:41:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8633:63:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1525,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1504,
															"src": "8711:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																"typeString": "struct Staking.Stake storage pointer"
															}
														},
														"id": 1526,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 975,
														"src": "8711:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1527,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8731:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8711:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1564,
												"nodeType": "IfStatement",
												"src": "8707:378:7",
												"trueBody": {
													"id": 1563,
													"nodeType": "Block",
													"src": "8734:351:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1532,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1530,
																			"name": "latestClaim",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1519,
																			"src": "8756:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1531,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8771:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "8756:16:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "436c61696d61626c65206f6e63652061207765656b",
																		"id": 1533,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8774:23:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3",
																			"typeString": "literal_string \"Claimable once a week\""
																		},
																		"value": "Claimable once a week"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3",
																			"typeString": "literal_string \"Claimable once a week\""
																		}
																	],
																	"id": 1529,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "8748:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1534,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8748:50:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1535,
															"nodeType": "ExpressionStatement",
															"src": "8748:50:7"
														},
														{
															"expression": {
																"id": 1540,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1536,
																		"name": "user_stake",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "8813:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1538,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 985,
																	"src": "8813:27:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1539,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8843:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8813:31:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1541,
															"nodeType": "ExpressionStatement",
															"src": "8813:31:7"
														},
														{
															"expression": {
																"id": 1547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1542,
																		"name": "user_stake",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "8858:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1544,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "latestClaimDrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 987,
																	"src": "8858:26:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 1545,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "8887:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1546,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "8887:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8858:44:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1548,
															"nodeType": "ExpressionStatement",
															"src": "8858:44:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1553,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 937,
																				"src": "8964:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1552,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 244,
																			"src": "8957:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$244_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1554,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8957:21:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1555,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8996:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1556,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8996:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1558,
																					"name": "user_stake",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1504,
																					"src": "9042:10:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																						"typeString": "struct Staking.Stake storage pointer"
																					}
																				},
																				"id": 1559,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 975,
																				"src": "9042:17:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1557,
																			"name": "_calculateAirdrop",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1497,
																			"src": "9024:17:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) view returns (uint256)"
																			}
																		},
																		"id": 1560,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9024:36:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1549,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 561,
																		"src": "8917:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$561_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1551,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 312,
																	"src": "8917:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8917:157:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1562,
															"nodeType": "ExpressionStatement",
															"src": "8917:157:7"
														}
													]
												}
											}
										]
									},
									"functionSelector": "5b88349d",
									"id": 1566,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1500,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1499,
												"name": "airdropStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1039,
												"src": "8429:17:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "8429:17:7"
										}
									],
									"name": "claimAirdrop",
									"nameLocation": "8405:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8417:2:7"
									},
									"returnParameters": {
										"id": 1501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8447:0:7"
									},
									"scope": 1567,
									"src": "8396:695:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1568,
							"src": "247:8846:7",
							"usedErrors": []
						}
					],
					"src": "39:9055:7"
				},
				"id": 7
			}
		}
	}
}