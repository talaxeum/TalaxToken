{
	"id": "c00fabc45255b69b58a57df12bee938d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ERC20/Staking.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Staking is ReentrancyGuard, Ownable {\n    /**\n     * @notice Constructor since this contract is not meant to be used without inheritance\n     * push once to stakeholders for it to work properly\n     */\n\n    mapping(uint256 => uint256) internal stakingPackage;\n\n    uint256 public stakingPenaltyRate;\n    uint256 public airdropRate;\n    uint256 public airdropSince;\n    bool public airdropStatus;\n\n    address public token_address;\n\n    constructor(address token) {\n        //Staking penalty and Airdrop in 0.1 times percentage\n        stakingPenaltyRate = 15;\n        airdropRate = 80;\n\n        token_address = token;\n\n        stakingPackage[90 days] = 6;\n        stakingPackage[180 days] = 7;\n        stakingPackage[365 days] = 8;\n    }\n\n    /**\n     * @notice\n     * A stake struct is used to represent the way we store stakes,\n     * A Stake will contain the users address, the amount staked and a timestamp,\n     * Since which is when the stake was made\n     */\n    struct Stake {\n        uint256 amount;\n        uint256 since;\n        uint256 rewardAPY;\n        uint256 releaseTime;\n        // This claimable field is new and used to tell how big of a reward is currently available\n        uint256 claimable;\n        uint256 claimableAirdrop;\n        uint256 latestClaimDrop;\n    }\n\n    /**\n     * @notice\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\n     */\n    struct StakingSummary {\n        uint256 total_amount;\n        uint256 penalty;\n        Stake stake;\n    }\n\n    /**\n     * @notice\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\n     */\n    mapping(address => Stake) internal stakeholders;\n\n    /**\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\n     */\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 timestamp,\n        uint256 releaseTime\n    );\n\n    event PenaltyChanged(uint256 amount);\n    event AirdropChanged(uint256 amount);\n\n    /* ------------------------------------------ Modifier ------------------------------------------ */\n\n    function _checkAirdropStatus() internal view {\n        require(airdropStatus == true, \"Airdrop not started\");\n    }\n\n    modifier airdropStatusTrue() {\n        _checkAirdropStatus();\n        _;\n    }\n\n    /* ---------------------------------------------- - --------------------------------------------- */\n\n    /**\n     * @notice\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n     * StakeID\n     */\n    function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {\n        // Simple check so that user does not stake 0\n        // require(amount > 0, \"Cannot stake nothing\");\n        // require(stakeholders[user].amount == 0, \"User is a staker\");\n\n        require(stakeholders[msg.sender].amount == 0, \"User is a Staker\");\n        require(stakingPackage[stakePeriod] != 0, \"Package not Found\");\n\n        // block.timestamp = timestamp of the current block in seconds since the epoch\n        uint256 timestamp = block.timestamp;\n\n        // Use the index to push a new Stake\n        // push a newly created Stake with the current block timestamp.\n\n        stakeholders[msg.sender] = Stake(\n            amount,\n            timestamp,\n            stakingPackage[stakePeriod],\n            (stakePeriod + timestamp),\n            0,\n            0,\n            0\n        );\n\n        SafeERC20.safeTransferFrom(\n            IERC20(token_address),\n            msg.sender,\n            address(this),\n            amount\n        );\n        // Emit an event that the stake has occured\n        emit Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp));\n    }\n\n    function changePenaltyFee(uint256 amount) external onlyOwner {\n        // require(amount <= 30, \"Penalty fee cannot exceed 3 percent.\");\n        require(amount <= 30, \"Penalty max 30%\");\n        stakingPenaltyRate = amount;\n        emit PenaltyChanged(amount);\n    }\n\n    function _calculateStakingDuration(uint256 since)\n        internal\n        view\n        returns (uint256)\n    {\n        // times by 1e24 so theres no missing value\n        return ((block.timestamp - since) * 1e24) / 365 days;\n    }\n\n    function _calculateStakeReward(Stake memory user_stake)\n        internal\n        view\n        returns (uint256)\n    {\n        // divided by 1e26 because 1e2 for APY and 1e24 from calculate staking duration\n        return\n            (user_stake.amount *\n                user_stake.rewardAPY *\n                _calculateStakingDuration(user_stake.since)) / 1e26;\n    }\n\n    function _calculateStakingWithPenalty(uint256 amount, uint256 reward)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        return (\n            amount - ((amount * stakingPenaltyRate) / 1000),\n            reward - ((reward * stakingPenaltyRate) / 1000)\n        );\n    }\n\n    /**\n     * @notice\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\n     * Will return the amount to MINT onto the account\n     * Will also _calculateStakeReward and reset timer\n     */\n\n    function withdrawStake() external nonReentrant {\n        // TODO: can be simplified\n        // Grab user_index which is the index to use to grab the Stake[]\n        Stake memory user_stake = stakeholders[msg.sender];\n        require(user_stake.amount != 0, \"Staking not found\");\n\n        uint256 reward = _calculateStakeReward(user_stake);\n        delete stakeholders[msg.sender];\n\n        if (user_stake.releaseTime > block.timestamp) {\n            (\n                uint256 amount_reduced,\n                uint256 reward_reduced\n            ) = _calculateStakingWithPenalty(user_stake.amount, reward);\n\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                (amount_reduced + reward_reduced)\n            );\n        } else {\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                (user_stake.amount + reward)\n            );\n        }\n    }\n\n    function hasStake() external view returns (StakingSummary memory) {\n        Stake memory user_stake = stakeholders[msg.sender];\n        require(user_stake.amount != 0, \"Staking not found\");\n        StakingSummary memory summary = StakingSummary(0, 0, user_stake);\n\n        uint256 reward = _calculateStakeReward(user_stake);\n\n        if (summary.stake.releaseTime > block.timestamp) {\n            summary.penalty =\n                ((user_stake.amount * stakingPenaltyRate) / 1000) +\n                ((reward * stakingPenaltyRate) / 1000);\n        }\n\n        if (calculateWeek(user_stake.latestClaimDrop) > 0) {\n            uint256 airdrop = _calculateAirdrop(user_stake.amount);\n            summary.stake.claimableAirdrop = airdrop;\n        } else {\n            summary.stake.claimableAirdrop = 0;\n        }\n\n        summary.stake.claimable = reward;\n        summary.total_amount = user_stake.amount;\n\n        return summary;\n    }\n\n    /* -------------------------------------- Airdrop functions ------------------------------------- */\n\n    function startAirdrop() external onlyOwner {\n        airdropSince = block.timestamp;\n        airdropStatus = true;\n    }\n\n    function changeAirdropPercentage(uint256 amount) external onlyOwner {\n        require(amount <= 200, \"Airdrop max 20%\");\n        airdropRate = amount;\n        emit AirdropChanged(amount);\n    }\n\n    function blockTimestamp() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function calculateWeek(uint256 timestamp) public view returns (uint256) {\n        return (block.timestamp - timestamp) / 7 days;\n    }\n\n    function _calculateAirdrop(uint256 stakeAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        return ((stakeAmount * airdropRate) / 1000) / 52 weeks;\n    }\n\n    function claimAirdrop() external airdropStatusTrue {\n        // TODO: can be simplified if using address\n        Stake storage user_stake = stakeholders[msg.sender];\n\n        require(user_stake.amount != 0, \"Staking not found\");\n        uint256 latestClaim = calculateWeek(user_stake.latestClaimDrop);\n\n        if (user_stake.amount > 0) {\n            require(latestClaim != 0, \"Claimable once a week\");\n\n            user_stake.claimableAirdrop = 0;\n            user_stake.latestClaimDrop = block.timestamp;\n\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                _calculateAirdrop(user_stake.amount)\n            );\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 123,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a26d75860ca80fc9bdd85f12d85fbc35e5a3233d1089abbcd45e23a47da6571764736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a26d75860ca80fc9bdd85f12d85fbc35e5a3233d1089abbcd45e23a47da6571764736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 PUSH14 0x75860CA80FC9BDD85F12D85FBC35 0xE5 LOG3 0x23 RETURNDATASIZE LT DUP10 0xAB 0xBC 0xD4 0x5E 0x23 LOG4 PUSH30 0xA6571764736F6C6343000807003300000000000000000000000000000000 ",
							"sourceMap": "707:3748:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a26d75860ca80fc9bdd85f12d85fbc35e5a3233d1089abbcd45e23a47da6571764736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 PUSH14 0x75860CA80FC9BDD85F12D85FBC35 0xE5 LOG3 0x23 RETURNDATASIZE LT DUP10 0xAB 0xBC 0xD4 0x5E 0x23 LOG4 PUSH30 0xA6571764736F6C6343000807003300000000000000000000000000000000 ",
							"sourceMap": "707:3748:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a26d75860ca80fc9bdd85f12d85fbc35e5a3233d1089abbcd45e23a47da6571764736f6c63430008070033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202870602c71af2a227b683d2898ab795367eb8b4054b7047ba23204bd0ab996b364736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202870602c71af2a227b683d2898ab795367eb8b4054b7047ba23204bd0ab996b364736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 PUSH17 0x602C71AF2A227B683D2898AB795367EB8B BLOCKHASH SLOAD 0xB7 DIV PUSH28 0xA23204BD0AB996B364736F6C63430008070033000000000000000000 ",
							"sourceMap": "194:8964:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202870602c71af2a227b683d2898ab795367eb8b4054b7047ba23204bd0ab996b364736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 PUSH17 0x602C71AF2A227B683D2898AB795367EB8B BLOCKHASH SLOAD 0xB7 DIV PUSH28 0xA23204BD0AB996B364736F6C63430008070033000000000000000000 ",
							"sourceMap": "194:8964:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202870602c71af2a227b683d2898ab795367eb8b4054b7047ba23204bd0ab996b364736f6c63430008070033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/ERC20/Staking.sol": {
				"Staking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AirdropChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PenaltyChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "releaseTime",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "airdropRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropSince",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropStatus",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "blockTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "calculateWeek",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changeAirdropPercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changePenaltyFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claimAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasStake",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "penalty",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimableAirdrop",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "latestClaimDrop",
													"type": "uint256"
												}
											],
											"internalType": "struct Staking.Stake",
											"name": "stake",
											"type": "tuple"
										}
									],
									"internalType": "struct Staking.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakePeriod",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingPenaltyRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token_address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC20/Staking.sol\":247:9093  contract Staking is ReentrancyGuard, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/ERC20/Staking.sol\":692:993  constructor(address token) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1821:1828  _status */\n  0x00\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1821:1843  _status = _NOT_ENTERED */\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_9\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  tag_12\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_9:\n    /* \"contracts/ERC20/Staking.sol\":812:814  15 */\n  0x0f\n    /* \"contracts/ERC20/Staking.sol\":791:809  stakingPenaltyRate */\n  0x03\n    /* \"contracts/ERC20/Staking.sol\":791:814  stakingPenaltyRate = 15 */\n  sstore\n    /* \"contracts/ERC20/Staking.sol\":838:840  80 */\n  0x50\n    /* \"contracts/ERC20/Staking.sol\":824:835  airdropRate */\n  0x04\n    /* \"contracts/ERC20/Staking.sol\":824:840  airdropRate = 80 */\n  sstore\n    /* \"contracts/ERC20/Staking.sol\":851:864  token_address */\n  0x06\n    /* \"contracts/ERC20/Staking.sol\":851:872  token_address = token */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap1\n  swap3\n  and\n  0x0100\n  mul\n  not(sub(shl(0xa8, 0x01), 0x0100))\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  dup2\n  sstore\n    /* \"contracts/ERC20/Staking.sol\":883:897  stakingPackage */\n  0x02\n    /* \"contracts/ERC20/Staking.sol\":883:906  stakingPackage[90 days] */\n  0x20\n  mstore\n  0xa1ef5b42f18533d67a183a193ea6c3fabfaa3bdabc3fc0e3f65b19b517df6e8c\n    /* \"contracts/ERC20/Staking.sol\":883:910  stakingPackage[90 days] = 6 */\n  sstore\n    /* \"contracts/ERC20/Staking.sol\":947:948  7 */\n  0x07\n    /* \"contracts/ERC20/Staking.sol\":920:944  stakingPackage[180 days] */\n  0x089cfcbf844e824feee5f634cbc488382291f3c9e0de5905f3c30812390dd832\n    /* \"contracts/ERC20/Staking.sol\":920:948  stakingPackage[180 days] = 7 */\n  sstore\n    /* \"contracts/ERC20/Staking.sol\":973:981  365 days */\n  0x01e13380\n  0x00\n    /* \"contracts/ERC20/Staking.sol\":958:982  stakingPackage[365 days] */\n  mstore\n    /* \"contracts/ERC20/Staking.sol\":985:986  8 */\n  0x08\n    /* \"contracts/ERC20/Staking.sol\":958:982  stakingPackage[365 days] */\n  0xdc083eb4da7563bbd761324b5158d9d40af7c7174afe39b0b31a7577c44fc33b\n    /* \"contracts/ERC20/Staking.sol\":958:986  stakingPackage[365 days] = 8 */\n  sstore\n    /* \"contracts/ERC20/Staking.sol\":247:9093  contract Staking is ReentrancyGuard, Ownable {... */\n  jump(tag_17)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_12:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  0x01\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_19\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_19:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_20\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_20:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_17:\n    /* \"contracts/ERC20/Staking.sol\":247:9093  contract Staking is ReentrancyGuard, Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC20/Staking.sol\":247:9093  contract Staking is ReentrancyGuard, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xbed9d861\n      gt\n      tag_21\n      jumpi\n      dup1\n      0xbed9d861\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xcb79c2e1\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xd2a569c3\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xd5dbdf1b\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_19\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_21:\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xadb61832\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xb5d9df83\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xb87da76d\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      dup1\n      0x7b0472f0\n      gt\n      tag_22\n      jumpi\n      dup1\n      0x7b0472f0\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8891cf0d\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x8c63f97f\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8c8e8fee\n      eq\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup1\n      0x10486b6a\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2cf1a5fb\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x5b88349d\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ERC20/Staking.sol\":6602:7533  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_3:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n        /* \"#utility.yul\":7632:7636   */\n      0x00\n        /* \"#utility.yul\":7674:7677   */\n      0x0120\n        /* \"#utility.yul\":7663:7672   */\n      dup3\n        /* \"#utility.yul\":7659:7678   */\n      add\n        /* \"#utility.yul\":7651:7678   */\n      swap1\n      pop\n        /* \"#utility.yul\":7711:7717   */\n      dup3\n        /* \"#utility.yul\":7705:7718   */\n      mload\n        /* \"#utility.yul\":7694:7703   */\n      dup3\n        /* \"#utility.yul\":7687:7719   */\n      mstore\n        /* \"#utility.yul\":7775:7779   */\n      0x20\n        /* \"#utility.yul\":7767:7773   */\n      dup4\n        /* \"#utility.yul\":7763:7780   */\n      add\n        /* \"#utility.yul\":7757:7781   */\n      mload\n        /* \"#utility.yul\":7750:7754   */\n      0x20\n        /* \"#utility.yul\":7739:7748   */\n      dup4\n        /* \"#utility.yul\":7735:7755   */\n      add\n        /* \"#utility.yul\":7728:7782   */\n      mstore\n        /* \"#utility.yul\":7829:7833   */\n      0x40\n        /* \"#utility.yul\":7821:7827   */\n      dup4\n        /* \"#utility.yul\":7817:7834   */\n      add\n        /* \"#utility.yul\":7811:7835   */\n      mload\n        /* \"#utility.yul\":7879:7891   */\n      dup1\n        /* \"#utility.yul\":7873:7892   */\n      mload\n        /* \"#utility.yul\":7866:7870   */\n      0x40\n        /* \"#utility.yul\":7855:7864   */\n      dup5\n        /* \"#utility.yul\":7851:7871   */\n      add\n        /* \"#utility.yul\":7844:7893   */\n      mstore\n        /* \"#utility.yul\":7953:7957   */\n      0x20\n        /* \"#utility.yul\":7939:7951   */\n      dup2\n        /* \"#utility.yul\":7935:7958   */\n      add\n        /* \"#utility.yul\":7929:7959   */\n      mload\n        /* \"#utility.yul\":7924:7926   */\n      0x60\n        /* \"#utility.yul\":7913:7922   */\n      dup5\n        /* \"#utility.yul\":7909:7927   */\n      add\n        /* \"#utility.yul\":7902:7960   */\n      mstore\n        /* \"#utility.yul\":8021:8025   */\n      0x40\n        /* \"#utility.yul\":8007:8019   */\n      dup2\n        /* \"#utility.yul\":8003:8026   */\n      add\n        /* \"#utility.yul\":7997:8027   */\n      mload\n        /* \"#utility.yul\":7991:7994   */\n      0x80\n        /* \"#utility.yul\":7980:7989   */\n      dup5\n        /* \"#utility.yul\":7976:7995   */\n      add\n        /* \"#utility.yul\":7969:8028   */\n      mstore\n        /* \"#utility.yul\":8089:8091   */\n      0x60\n        /* \"#utility.yul\":8075:8087   */\n      dup2\n        /* \"#utility.yul\":8071:8092   */\n      add\n        /* \"#utility.yul\":8065:8093   */\n      mload\n        /* \"#utility.yul\":8059:8062   */\n      0xa0\n        /* \"#utility.yul\":8048:8057   */\n      dup5\n        /* \"#utility.yul\":8044:8063   */\n      add\n        /* \"#utility.yul\":8037:8094   */\n      mstore\n        /* \"#utility.yul\":8155:8158   */\n      0x80\n        /* \"#utility.yul\":8141:8153   */\n      dup2\n        /* \"#utility.yul\":8137:8159   */\n      add\n        /* \"#utility.yul\":8131:8160   */\n      mload\n        /* \"#utility.yul\":8125:8128   */\n      0xc0\n        /* \"#utility.yul\":8114:8123   */\n      dup5\n        /* \"#utility.yul\":8110:8129   */\n      add\n        /* \"#utility.yul\":8103:8161   */\n      mstore\n        /* \"#utility.yul\":8222:8225   */\n      0xa0\n        /* \"#utility.yul\":8208:8220   */\n      dup2\n        /* \"#utility.yul\":8204:8226   */\n      add\n        /* \"#utility.yul\":8198:8227   */\n      mload\n        /* \"#utility.yul\":8192:8195   */\n      0xe0\n        /* \"#utility.yul\":8181:8190   */\n      dup5\n        /* \"#utility.yul\":8177:8196   */\n      add\n        /* \"#utility.yul\":8170:8228   */\n      mstore\n        /* \"#utility.yul\":8289:8292   */\n      0xc0\n        /* \"#utility.yul\":8275:8287   */\n      dup2\n        /* \"#utility.yul\":8271:8293   */\n      add\n        /* \"#utility.yul\":8265:8294   */\n      mload\n        /* \"#utility.yul\":8259:8262   */\n      0x0100\n        /* \"#utility.yul\":8248:8257   */\n      dup5\n        /* \"#utility.yul\":8244:8263   */\n      add\n        /* \"#utility.yul\":8237:8295   */\n      mstore\n      pop\n        /* \"#utility.yul\":7478:8301   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"contracts/ERC20/Staking.sol\":6602:7533  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20/Staking.sol\":625:650  bool public airdropStatus */\n    tag_4:\n      sload(0x06)\n      tag_27\n      swap1\n      0xff\n      and\n      dup2\n      jump\n    tag_27:\n      mload(0x40)\n        /* \"#utility.yul\":2336:2350   */\n      swap1\n      iszero\n        /* \"#utility.yul\":2329:2351   */\n      iszero\n        /* \"#utility.yul\":2311:2352   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2299:2301   */\n      0x20\n        /* \"#utility.yul\":2284:2302   */\n      add\n        /* \"contracts/ERC20/Staking.sol\":625:650  bool public airdropStatus */\n      tag_25\n        /* \"#utility.yul\":2171:2358   */\n      jump\n        /* \"contracts/ERC20/Staking.sol\":8396:9091  function claimAirdrop() external airdropStatusTrue {... */\n    tag_5:\n      tag_31\n      tag_32\n      jump\t// in\n    tag_31:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_6:\n      tag_31\n      tag_34\n      jump\t// in\n        /* \"contracts/ERC20/Staking.sol\":2931:4098  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_7:\n      tag_31\n      tag_36\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n        /* \"contracts/ERC20/Staking.sol\":560:586  uint256 public airdropRate */\n    tag_8:\n      tag_39\n      sload(0x04)\n      dup2\n      jump\n    tag_39:\n      mload(0x40)\n        /* \"#utility.yul\":8452:8477   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":8440:8442   */\n      0x20\n        /* \"#utility.yul\":8425:8443   */\n      add\n        /* \"contracts/ERC20/Staking.sol\":560:586  uint256 public airdropRate */\n      tag_25\n        /* \"#utility.yul\":8306:8483   */\n      jump\n        /* \"contracts/ERC20/Staking.sol\":4104:4370  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_9:\n      tag_31\n      tag_44\n      calldatasize\n      0x04\n      tag_45\n      jump\t// in\n    tag_44:\n      tag_46\n      jump\t// in\n        /* \"contracts/ERC20/Staking.sol\":657:685  address public token_address */\n    tag_10:\n      sload(0x06)\n      tag_47\n      swap1\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_47:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1468:1500   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1450:1501   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1438:1440   */\n      0x20\n        /* \"#utility.yul\":1423:1441   */\n      add\n        /* \"contracts/ERC20/Staking.sol\":657:685  address public token_address */\n      tag_25\n        /* \"#utility.yul\":1304:1507   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_11:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      jump(tag_47)\n        /* \"contracts/ERC20/Staking.sol\":7970:8065  function blockTimestamp() public view returns (uint256) {... */\n    tag_12:\n        /* \"contracts/ERC20/Staking.sol\":8043:8058  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":7970:8065  function blockTimestamp() public view returns (uint256) {... */\n      jump(tag_39)\n        /* \"contracts/ERC20/Staking.sol\":8071:8205  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_13:\n      tag_39\n      tag_58\n      calldatasize\n      0x04\n      tag_45\n      jump\t// in\n    tag_58:\n      tag_59\n      jump\t// in\n        /* \"contracts/ERC20/Staking.sol\":592:619  uint256 public airdropSince */\n    tag_14:\n      tag_39\n      sload(0x05)\n      dup2\n      jump\n        /* \"contracts/ERC20/Staking.sol\":5628:6596  function withdrawStake() external nonReentrant {... */\n    tag_15:\n      tag_31\n      tag_65\n      jump\t// in\n        /* \"contracts/ERC20/Staking.sol\":521:554  uint256 public stakingPenaltyRate */\n    tag_16:\n      tag_39\n      sload(0x03)\n      dup2\n      jump\n        /* \"contracts/ERC20/Staking.sol\":7645:7765  function startAirdrop() external onlyOwner {... */\n    tag_17:\n      tag_31\n      tag_70\n      jump\t// in\n        /* \"contracts/ERC20/Staking.sol\":7771:7964  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_18:\n      tag_31\n      tag_72\n      calldatasize\n      0x04\n      tag_45\n      jump\t// in\n    tag_72:\n      tag_73\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_19:\n      tag_31\n      tag_75\n      calldatasize\n      0x04\n      tag_76\n      jump\t// in\n    tag_75:\n      tag_77\n      jump\t// in\n        /* \"contracts/ERC20/Staking.sol\":6602:7533  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_24:\n        /* \"contracts/ERC20/Staking.sol\":6645:6666  StakingSummary memory */\n      tag_78\n      tag_79\n      jump\t// in\n    tag_78:\n        /* \"contracts/ERC20/Staking.sol\":6717:6727  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":6678:6701  Stake memory user_stake */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":6704:6728  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":6704:6716  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":6704:6728  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/ERC20/Staking.sol\":6678:6728  Stake memory user_stake = stakeholders[msg.sender] */\n      dup3\n      mload\n      0xe0\n      dup2\n      add\n      dup5\n      mstore\n      dup2\n      sload\n      dup1\n      dup3\n      mstore\n      0x01\n      dup4\n      add\n      sload\n      swap4\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x02\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x03\n      dup2\n      add\n      sload\n      0x60\n      dup5\n      add\n      mstore\n      0x04\n      dup2\n      add\n      sload\n      0x80\n      dup5\n      add\n      mstore\n      0x05\n      dup2\n      add\n      sload\n      0xa0\n      dup5\n      add\n      mstore\n      0x06\n      add\n      sload\n      0xc0\n      dup4\n      add\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":6738:6790  require(user_stake.amount != 0, \"Staking not found\") */\n      tag_81\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_82\n      swap1\n      tag_83\n      jump\t// in\n    tag_82:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_81:\n        /* \"contracts/ERC20/Staking.sol\":6832:6864  StakingSummary(0, 0, user_stake) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":6800:6829  StakingSummary memory summary */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":6832:6864  StakingSummary(0, 0, user_stake) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":6892:6925  _calculateStakeReward(user_stake) */\n      tag_84\n        /* \"contracts/ERC20/Staking.sol\":6853:6863  user_stake */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":6892:6913  _calculateStakeReward */\n      tag_85\n        /* \"contracts/ERC20/Staking.sol\":6892:6925  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_84:\n        /* \"contracts/ERC20/Staking.sol\":6875:6925  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6968:6983  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":6940:6947  summary */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":6940:6953  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":6940:6965  summary.stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":6940:6983  summary.stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/ERC20/Staking.sol\":6936:7150  if (summary.stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_86\n      jumpi\n        /* \"contracts/ERC20/Staking.sol\":7134:7138  1000 */\n      0x03e8\n        /* \"contracts/ERC20/Staking.sol\":7112:7130  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/ERC20/Staking.sol\":7103:7109  reward */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":7103:7130  reward * stakingPenaltyRate */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"contracts/ERC20/Staking.sol\":7102:7138  (reward * stakingPenaltyRate) / 1000 */\n      tag_89\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_89:\n        /* \"contracts/ERC20/Staking.sol\":7055:7073  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/ERC20/Staking.sol\":7035:7052  user_stake.amount */\n      dup5\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7077:7081  1000 */\n      0x03e8\n      swap2\n        /* \"contracts/ERC20/Staking.sol\":7035:7073  user_stake.amount * stakingPenaltyRate */\n      tag_91\n      swap2\n      tag_88\n      jump\t// in\n    tag_91:\n        /* \"contracts/ERC20/Staking.sol\":7034:7081  (user_stake.amount * stakingPenaltyRate) / 1000 */\n      tag_92\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_92:\n        /* \"contracts/ERC20/Staking.sol\":7033:7139  ((user_stake.amount * stakingPenaltyRate) / 1000) +... */\n      tag_93\n      swap2\n      swap1\n      tag_94\n      jump\t// in\n    tag_93:\n        /* \"contracts/ERC20/Staking.sol\":6999:7014  summary.penalty */\n      0x20\n      dup4\n      add\n        /* \"contracts/ERC20/Staking.sol\":6999:7139  summary.penalty =... */\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":6936:7150  if (summary.stake.releaseTime > block.timestamp) {... */\n    tag_86:\n        /* \"contracts/ERC20/Staking.sol\":7208:7209  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":7164:7205  calculateWeek(user_stake.latestClaimDrop) */\n      tag_95\n        /* \"contracts/ERC20/Staking.sol\":7178:7188  user_stake */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":7178:7204  user_stake.latestClaimDrop */\n      0xc0\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7164:7177  calculateWeek */\n      tag_59\n        /* \"contracts/ERC20/Staking.sol\":7164:7205  calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_95:\n        /* \"contracts/ERC20/Staking.sol\":7164:7209  calculateWeek(user_stake.latestClaimDrop) > 0 */\n      gt\n        /* \"contracts/ERC20/Staking.sol\":7160:7409  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      iszero\n      tag_96\n      jumpi\n        /* \"contracts/ERC20/Staking.sol\":7225:7240  uint256 airdrop */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":7243:7279  _calculateAirdrop(user_stake.amount) */\n      tag_97\n        /* \"contracts/ERC20/Staking.sol\":7261:7271  user_stake */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":7261:7278  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7243:7260  _calculateAirdrop */\n      tag_98\n        /* \"contracts/ERC20/Staking.sol\":7243:7279  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_97:\n        /* \"contracts/ERC20/Staking.sol\":7293:7306  summary.stake */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7293:7323  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/ERC20/Staking.sol\":7293:7333  summary.stake.claimableAirdrop = airdrop */\n      mstore\n      pop\n        /* \"contracts/ERC20/Staking.sol\":7160:7409  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      jump(tag_99)\n    tag_96:\n        /* \"contracts/ERC20/Staking.sol\":7364:7377  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7397:7398  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":7364:7394  summary.stake.claimableAirdrop */\n      0xa0\n      swap1\n      swap2\n      add\n        /* \"contracts/ERC20/Staking.sol\":7364:7398  summary.stake.claimableAirdrop = 0 */\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":7160:7409  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n    tag_99:\n        /* \"contracts/ERC20/Staking.sol\":7419:7432  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7419:7442  summary.stake.claimable */\n      0x80\n      add\n        /* \"contracts/ERC20/Staking.sol\":7419:7451  summary.stake.claimable = reward */\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":7484:7501  user_stake.amount */\n      swap1\n      mload\n        /* \"contracts/ERC20/Staking.sol\":7461:7501  summary.total_amount = user_stake.amount */\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":7419:7426  summary */\n      swap2\n        /* \"contracts/ERC20/Staking.sol\":6602:7533  function hasStake() external view returns (StakingSummary memory) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":8396:9091  function claimAirdrop() external airdropStatusTrue {... */\n    tag_32:\n        /* \"contracts/ERC20/Staking.sol\":2575:2596  _checkAirdropStatus() */\n      tag_101\n        /* \"contracts/ERC20/Staking.sol\":2575:2594  _checkAirdropStatus */\n      tag_102\n        /* \"contracts/ERC20/Staking.sol\":2575:2596  _checkAirdropStatus() */\n      jump\t// in\n    tag_101:\n        /* \"contracts/ERC20/Staking.sol\":8549:8559  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":8509:8533  Stake storage user_stake */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8536:8560  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":8536:8548  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":8536:8560  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/ERC20/Staking.sol\":8579:8596  user_stake.amount */\n      dup1\n      sload\n        /* \"contracts/ERC20/Staking.sol\":8571:8623  require(user_stake.amount != 0, \"Staking not found\") */\n      tag_104\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_82\n      swap1\n      tag_83\n      jump\t// in\n    tag_104:\n        /* \"contracts/ERC20/Staking.sol\":8633:8652  uint256 latestClaim */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8655:8696  calculateWeek(user_stake.latestClaimDrop) */\n      tag_106\n        /* \"contracts/ERC20/Staking.sol\":8669:8679  user_stake */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":8669:8695  user_stake.latestClaimDrop */\n      0x06\n      add\n      sload\n        /* \"contracts/ERC20/Staking.sol\":8655:8668  calculateWeek */\n      tag_59\n        /* \"contracts/ERC20/Staking.sol\":8655:8696  calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_106:\n        /* \"contracts/ERC20/Staking.sol\":8711:8728  user_stake.amount */\n      dup3\n      sload\n        /* \"contracts/ERC20/Staking.sol\":8633:8696  uint256 latestClaim = calculateWeek(user_stake.latestClaimDrop) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/ERC20/Staking.sol\":8711:8732  user_stake.amount > 0 */\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":8707:9085  if (user_stake.amount > 0) {... */\n      tag_111\n      jumpi\n        /* \"contracts/ERC20/Staking.sol\":8756:8772  latestClaim != 0 */\n      dup1\n        /* \"contracts/ERC20/Staking.sol\":8748:8798  require(latestClaim != 0, \"Claimable once a week\") */\n      tag_108\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5167:5169   */\n      0x20\n        /* \"contracts/ERC20/Staking.sol\":8748:8798  require(latestClaim != 0, \"Claimable once a week\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5149:5170   */\n      mstore\n        /* \"#utility.yul\":5206:5208   */\n      0x15\n        /* \"#utility.yul\":5186:5204   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5179:5209   */\n      mstore\n      shl(0x58, 0x436c61696d61626c65206f6e63652061207765656b)\n        /* \"#utility.yul\":5225:5243   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5218:5269   */\n      mstore\n        /* \"#utility.yul\":5286:5304   */\n      0x64\n      add\n        /* \"contracts/ERC20/Staking.sol\":8748:8798  require(latestClaim != 0, \"Claimable once a week\") */\n      tag_82\n        /* \"#utility.yul\":4965:5310   */\n      jump\n        /* \"contracts/ERC20/Staking.sol\":8748:8798  require(latestClaim != 0, \"Claimable once a week\") */\n    tag_108:\n        /* \"contracts/ERC20/Staking.sol\":8843:8844  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8813:8840  user_stake.claimableAirdrop */\n      0x05\n      dup4\n      add\n        /* \"contracts/ERC20/Staking.sol\":8813:8844  user_stake.claimableAirdrop = 0 */\n      sstore\n        /* \"contracts/ERC20/Staking.sol\":8887:8902  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":8858:8884  user_stake.latestClaimDrop */\n      0x06\n      dup1\n      dup5\n      add\n        /* \"contracts/ERC20/Staking.sol\":8858:8902  user_stake.latestClaimDrop = block.timestamp */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"contracts/ERC20/Staking.sol\":8964:8977  token_address */\n      sload\n        /* \"contracts/ERC20/Staking.sol\":9042:9059  user_stake.amount */\n      dup3\n      sload\n        /* \"contracts/ERC20/Staking.sol\":8917:9074  SafeERC20.safeTransfer(... */\n      tag_111\n      swap2\n        /* \"contracts/ERC20/Staking.sol\":8964:8977  token_address */\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":8996:9006  msg.sender */\n      caller\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":9024:9060  _calculateAirdrop(user_stake.amount) */\n      tag_112\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":9024:9041  _calculateAirdrop */\n      tag_98\n        /* \"contracts/ERC20/Staking.sol\":9024:9060  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_112:\n        /* \"contracts/ERC20/Staking.sol\":8917:8939  SafeERC20.safeTransfer */\n      tag_113\n        /* \"contracts/ERC20/Staking.sol\":8917:9074  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_111:\n        /* \"contracts/ERC20/Staking.sol\":8447:9091  {... */\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":8396:9091  function claimAirdrop() external airdropStatusTrue {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_34:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_115\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_115:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_118\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_118:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":2931:4098  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_38:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      tag_121\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2280  _nonReentrantBefore */\n      tag_122\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      jump\t// in\n    tag_121:\n        /* \"contracts/ERC20/Staking.sol\":3219:3229  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":3206:3230  stakeholders[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":3206:3218  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":3206:3230  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/ERC20/Staking.sol\":3206:3237  stakeholders[msg.sender].amount */\n      sload\n        /* \"contracts/ERC20/Staking.sol\":3206:3242  stakeholders[msg.sender].amount == 0 */\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":3198:3263  require(stakeholders[msg.sender].amount == 0, \"User is a Staker\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2953:2955   */\n      0x20\n        /* \"contracts/ERC20/Staking.sol\":3198:3263  require(stakeholders[msg.sender].amount == 0, \"User is a Staker\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2935:2956   */\n      mstore\n        /* \"#utility.yul\":2992:2994   */\n      0x10\n        /* \"#utility.yul\":2972:2990   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2965:2995   */\n      mstore\n      shl(0x81, 0x2ab9b2b91034b990309029ba30b5b2b9)\n        /* \"#utility.yul\":3011:3029   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3004:3050   */\n      mstore\n        /* \"#utility.yul\":3067:3085   */\n      0x64\n      add\n        /* \"contracts/ERC20/Staking.sol\":3198:3263  require(stakeholders[msg.sender].amount == 0, \"User is a Staker\") */\n      tag_82\n        /* \"#utility.yul\":2751:3091   */\n      jump\n        /* \"contracts/ERC20/Staking.sol\":3198:3263  require(stakeholders[msg.sender].amount == 0, \"User is a Staker\") */\n    tag_124:\n        /* \"contracts/ERC20/Staking.sol\":3281:3308  stakingPackage[stakePeriod] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":3281:3295  stakingPackage */\n      0x02\n        /* \"contracts/ERC20/Staking.sol\":3281:3308  stakingPackage[stakePeriod] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/ERC20/Staking.sol\":3273:3335  require(stakingPackage[stakePeriod] != 0, \"Package not Found\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5517:5519   */\n      0x20\n        /* \"contracts/ERC20/Staking.sol\":3273:3335  require(stakingPackage[stakePeriod] != 0, \"Package not Found\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5499:5520   */\n      mstore\n        /* \"#utility.yul\":5556:5558   */\n      0x11\n        /* \"#utility.yul\":5536:5554   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5529:5559   */\n      mstore\n      shl(0x7a, 0x141858dad859d9481b9bdd08119bdd5b99)\n        /* \"#utility.yul\":5575:5593   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5568:5615   */\n      mstore\n        /* \"#utility.yul\":5632:5650   */\n      0x64\n      add\n        /* \"contracts/ERC20/Staking.sol\":3273:3335  require(stakingPackage[stakePeriod] != 0, \"Package not Found\") */\n      tag_82\n        /* \"#utility.yul\":5315:5656   */\n      jump\n        /* \"contracts/ERC20/Staking.sol\":3273:3335  require(stakingPackage[stakePeriod] != 0, \"Package not Found\") */\n    tag_127:\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      0x40\n      dup1\n      mload\n      0xe0\n      dup2\n      add\n      dup3\n      mstore\n      dup4\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":3453:3468  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      0x20\n      dup1\n      dup4\n      add\n      dup3\n      swap1\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":3433:3450  uint256 timestamp */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3686:3713  stakingPackage[stakePeriod] */\n      dup6\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":3686:3700  stakingPackage */\n      0x02\n        /* \"contracts/ERC20/Staking.sol\":3686:3713  stakingPackage[stakePeriod] */\n      swap1\n      swap2\n      mstore\n      dup4\n      swap1\n      keccak256\n      sload\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      swap3\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x60\n      dup2\n      add\n        /* \"contracts/ERC20/Staking.sol\":3728:3751  stakePeriod + timestamp */\n      tag_130\n        /* \"contracts/ERC20/Staking.sol\":3453:3468  block.timestamp */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":3701:3712  stakePeriod */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":3728:3751  stakePeriod + timestamp */\n      tag_94\n      jump\t// in\n    tag_130:\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":3766:3767  0 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":3624:3807  Stake(... */\n      0x20\n      dup1\n      dup4\n      add\n      dup3\n      swap1\n      mstore\n      0x40\n      dup1\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n      0x60\n      swap4\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":3610:3620  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":3597:3621  stakeholders[msg.sender] */\n      dup1\n      dup5\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":3597:3609  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":3597:3621  stakeholders[msg.sender] */\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/ERC20/Staking.sol\":3597:3807  stakeholders[msg.sender] = Stake(... */\n      dup6\n      mload\n      dup2\n      sstore\n      swap2\n      dup6\n      add\n      mload\n      0x01\n      dup4\n      add\n      sstore\n      dup5\n      add\n      mload\n      0x02\n      dup3\n      add\n      sstore\n      swap2\n      dup4\n      add\n      mload\n      0x03\n      dup4\n      add\n      sstore\n      0x80\n      dup4\n      add\n      mload\n      0x04\n      dup4\n      add\n      sstore\n      0xa0\n      dup4\n      add\n      mload\n      0x05\n      dup4\n      add\n      sstore\n      0xc0\n      swap1\n      swap3\n      add\n      mload\n      0x06\n      swap2\n      dup3\n      add\n      sstore\n        /* \"contracts/ERC20/Staking.sol\":3865:3878  token_address */\n      sload\n        /* \"contracts/ERC20/Staking.sol\":3818:3960  SafeERC20.safeTransferFrom(... */\n      tag_131\n      swap2\n        /* \"contracts/ERC20/Staking.sol\":3865:3878  token_address */\n      0x0100\n      swap1\n      swap2\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":3925:3929  this */\n      address\n        /* \"contracts/ERC20/Staking.sol\":3944:3950  amount */\n      dup7\n        /* \"contracts/ERC20/Staking.sol\":3818:3844  SafeERC20.safeTransferFrom */\n      tag_132\n        /* \"contracts/ERC20/Staking.sol\":3818:3960  SafeERC20.safeTransferFrom(... */\n      jump\t// in\n    tag_131:\n        /* \"contracts/ERC20/Staking.sol\":4034:4044  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":4027:4091  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed\n        /* \"contracts/ERC20/Staking.sol\":4046:4052  amount */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":4054:4063  timestamp */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":4066:4089  stakePeriod + timestamp */\n      tag_133\n        /* \"contracts/ERC20/Staking.sol\":4054:4063  timestamp */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":4066:4077  stakePeriod */\n      dup8\n        /* \"contracts/ERC20/Staking.sol\":4066:4089  stakePeriod + timestamp */\n      tag_94\n      jump\t// in\n    tag_133:\n        /* \"contracts/ERC20/Staking.sol\":4027:4091  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":8690:8715   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":8746:8748   */\n      0x20\n        /* \"#utility.yul\":8731:8749   */\n      dup5\n      add\n        /* \"#utility.yul\":8724:8758   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":8774:8792   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8767:8801   */\n      mstore\n        /* \"#utility.yul\":8678:8680   */\n      0x60\n        /* \"#utility.yul\":8663:8681   */\n      add\n        /* \"contracts/ERC20/Staking.sol\":4027:4091  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/ERC20/Staking.sol\":3005:4098  {... */\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2323  _nonReentrantAfter() */\n      tag_111\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2816  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2831  _status = _NOT_ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2629:2838  function _nonReentrantAfter() private {... */\n      jump\n        /* \"contracts/ERC20/Staking.sol\":4104:4370  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_46:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_139\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_139:\n        /* \"contracts/ERC20/Staking.sol\":4267:4269  30 */\n      0x1e\n        /* \"contracts/ERC20/Staking.sol\":4257:4263  amount */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":4257:4269  amount <= 30 */\n      gt\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":4249:4289  require(amount <= 30, \"Penalty max 30%\") */\n      tag_141\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5863:5865   */\n      0x20\n        /* \"contracts/ERC20/Staking.sol\":4249:4289  require(amount <= 30, \"Penalty max 30%\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5845:5866   */\n      mstore\n        /* \"#utility.yul\":5902:5904   */\n      0x0f\n        /* \"#utility.yul\":5882:5900   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5875:5905   */\n      mstore\n      shl(0x88, 0x50656e616c7479206d617820333025)\n        /* \"#utility.yul\":5921:5939   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5914:5959   */\n      mstore\n        /* \"#utility.yul\":5976:5994   */\n      0x64\n      add\n        /* \"contracts/ERC20/Staking.sol\":4249:4289  require(amount <= 30, \"Penalty max 30%\") */\n      tag_82\n        /* \"#utility.yul\":5661:6000   */\n      jump\n        /* \"contracts/ERC20/Staking.sol\":4249:4289  require(amount <= 30, \"Penalty max 30%\") */\n    tag_141:\n        /* \"contracts/ERC20/Staking.sol\":4299:4317  stakingPenaltyRate */\n      0x03\n        /* \"contracts/ERC20/Staking.sol\":4299:4326  stakingPenaltyRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/ERC20/Staking.sol\":4341:4363  PenaltyChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":8452:8477   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":4341:4363  PenaltyChanged(amount) */\n      0xcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9\n      swap1\n        /* \"#utility.yul\":8440:8442   */\n      0x20\n        /* \"#utility.yul\":8425:8443   */\n      add\n        /* \"contracts/ERC20/Staking.sol\":4341:4363  PenaltyChanged(amount) */\n    tag_144:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/ERC20/Staking.sol\":4104:4370  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":8071:8205  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_59:\n        /* \"contracts/ERC20/Staking.sol\":8134:8141  uint256 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8192:8198  7 days */\n      0x093a80\n        /* \"contracts/ERC20/Staking.sol\":8161:8188  block.timestamp - timestamp */\n      tag_148\n        /* \"contracts/ERC20/Staking.sol\":8179:8188  timestamp */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":8161:8176  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":8161:8188  block.timestamp - timestamp */\n      tag_149\n      jump\t// in\n    tag_148:\n        /* \"contracts/ERC20/Staking.sol\":8160:8198  (block.timestamp - timestamp) / 7 days */\n      tag_150\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_150:\n        /* \"contracts/ERC20/Staking.sol\":8153:8198  return (block.timestamp - timestamp) / 7 days */\n      swap3\n        /* \"contracts/ERC20/Staking.sol\":8071:8205  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":5628:6596  function withdrawStake() external nonReentrant {... */\n    tag_65:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      tag_152\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2280  _nonReentrantBefore */\n      tag_122\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      jump\t// in\n    tag_152:\n        /* \"contracts/ERC20/Staking.sol\":5832:5842  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":5793:5816  Stake memory user_stake */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":5819:5843  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":5819:5831  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":5819:5843  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/ERC20/Staking.sol\":5793:5843  Stake memory user_stake = stakeholders[msg.sender] */\n      dup3\n      mload\n      0xe0\n      dup2\n      add\n      dup5\n      mstore\n      dup2\n      sload\n      dup1\n      dup3\n      mstore\n      0x01\n      dup4\n      add\n      sload\n      swap4\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x02\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x03\n      dup2\n      add\n      sload\n      0x60\n      dup5\n      add\n      mstore\n      0x04\n      dup2\n      add\n      sload\n      0x80\n      dup5\n      add\n      mstore\n      0x05\n      dup2\n      add\n      sload\n      0xa0\n      dup5\n      add\n      mstore\n      0x06\n      add\n      sload\n      0xc0\n      dup4\n      add\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":5853:5905  require(user_stake.amount != 0, \"Staking not found\") */\n      tag_154\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_82\n      swap1\n      tag_83\n      jump\t// in\n    tag_154:\n        /* \"contracts/ERC20/Staking.sol\":5916:5930  uint256 reward */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":5933:5966  _calculateStakeReward(user_stake) */\n      tag_156\n        /* \"contracts/ERC20/Staking.sol\":5955:5965  user_stake */\n      dup3\n        /* \"contracts/ERC20/Staking.sol\":5933:5954  _calculateStakeReward */\n      tag_85\n        /* \"contracts/ERC20/Staking.sol\":5933:5966  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_156:\n        /* \"contracts/ERC20/Staking.sol\":5996:6006  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":5983:6007  stakeholders[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":5983:5995  stakeholders */\n      0x07\n        /* \"contracts/ERC20/Staking.sol\":5983:6007  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/ERC20/Staking.sol\":5976:6007  delete stakeholders[msg.sender] */\n      dup2\n      dup2\n      sstore\n      0x01\n      dup2\n      add\n      dup3\n      swap1\n      sstore\n      0x02\n      dup2\n      add\n      dup3\n      swap1\n      sstore\n      0x03\n      dup2\n      add\n      dup3\n      swap1\n      sstore\n      0x04\n      dup2\n      add\n      dup3\n      swap1\n      sstore\n      0x05\n      dup2\n      add\n      dup3\n      swap1\n      sstore\n      0x06\n      add\n      sstore\n        /* \"contracts/ERC20/Staking.sol\":6022:6044  user_stake.releaseTime */\n      0x60\n      dup4\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":5916:5966  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6047:6062  block.timestamp */\n      timestamp\n      lt\n        /* \"contracts/ERC20/Staking.sol\":6018:6590  if (user_stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_157\n      jumpi\n        /* \"contracts/ERC20/Staking.sol\":6096:6118  uint256 amount_reduced */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":6136:6158  uint256 reward_reduced */\n      dup1\n        /* \"contracts/ERC20/Staking.sol\":6175:6230  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      tag_158\n        /* \"contracts/ERC20/Staking.sol\":6204:6214  user_stake */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":6204:6221  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":6223:6229  reward */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":6175:6203  _calculateStakingWithPenalty */\n      tag_159\n        /* \"contracts/ERC20/Staking.sol\":6175:6230  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      jump\t// in\n    tag_158:\n        /* \"contracts/ERC20/Staking.sol\":6292:6305  token_address */\n      sload(0x06)\n        /* \"contracts/ERC20/Staking.sol\":6078:6230  (... */\n      swap2\n      swap4\n      pop\n      swap2\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6245:6399  SafeERC20.safeTransfer(... */\n      tag_160\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":6292:6305  token_address */\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/ERC20/Staking.sol\":6324:6334  msg.sender */\n      caller\n        /* \"contracts/ERC20/Staking.sol\":6353:6384  amount_reduced + reward_reduced */\n      tag_112\n        /* \"contracts/ERC20/Staking.sol\":6078:6230  (... */\n      dup5\n      dup7\n        /* \"contracts/ERC20/Staking.sol\":6353:6384  amount_reduced + reward_reduced */\n      tag_94\n      jump\t// in\n        /* \"contracts/ERC20/Staking.sol\":6245:6399  SafeERC20.safeTransfer(... */\n    tag_160:\n        /* \"contracts/ERC20/Staking.sol\":6064:6410  {... */\n      pop\n      pop\n        /* \"contracts/ERC20/Staking.sol\":6018:6590  if (user_stake.releaseTime > block.timestamp) {... */\n      jump(tag_163)\n    tag_157:\n        /* \"contracts/ERC20/Staking.sol\":6477:6490  token_address */\n      sload(0x06)\n        /* \"contracts/ERC20/Staking.sol\":6538:6555  user_stake.amount */\n      dup3\n      mload\n        /* \"contracts/ERC20/Staking.sol\":6430:6579  SafeERC20.safeTransfer(... */\n      tag_163\n      swap2\n        /* \"contracts/ERC20/Staking.sol\":6477:6490  token_address */\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":6509:6519  msg.sender */\n      caller\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":6538:6564  user_stake.amount + reward */\n      tag_112\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":6558:6564  reward */\n      dup6\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":6538:6564  user_stake.amount + reward */\n      tag_94\n      jump\t// in\n        /* \"contracts/ERC20/Staking.sol\":6430:6579  SafeERC20.safeTransfer(... */\n    tag_163:\n        /* \"contracts/ERC20/Staking.sol\":5675:6596  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2323  _nonReentrantAfter() */\n      tag_118\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2816  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2831  _status = _NOT_ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2629:2838  function _nonReentrantAfter() private {... */\n      jump\n        /* \"contracts/ERC20/Staking.sol\":7645:7765  function startAirdrop() external onlyOwner {... */\n    tag_70:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_167\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_167:\n        /* \"contracts/ERC20/Staking.sol\":7713:7728  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":7698:7710  airdropSince */\n      0x05\n        /* \"contracts/ERC20/Staking.sol\":7698:7728  airdropSince = block.timestamp */\n      sstore\n        /* \"contracts/ERC20/Staking.sol\":7738:7751  airdropStatus */\n      0x06\n        /* \"contracts/ERC20/Staking.sol\":7738:7758  airdropStatus = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/ERC20/Staking.sol\":7754:7758  true */\n      0x01\n        /* \"contracts/ERC20/Staking.sol\":7738:7758  airdropStatus = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/ERC20/Staking.sol\":7645:7765  function startAirdrop() external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":7771:7964  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_170\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_170:\n        /* \"contracts/ERC20/Staking.sol\":7867:7870  200 */\n      0xc8\n        /* \"contracts/ERC20/Staking.sol\":7857:7863  amount */\n      dup2\n        /* \"contracts/ERC20/Staking.sol\":7857:7870  amount <= 200 */\n      gt\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":7849:7890  require(amount <= 200, \"Airdrop max 20%\") */\n      tag_172\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6207:6209   */\n      0x20\n        /* \"contracts/ERC20/Staking.sol\":7849:7890  require(amount <= 200, \"Airdrop max 20%\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6189:6210   */\n      mstore\n        /* \"#utility.yul\":6246:6248   */\n      0x0f\n        /* \"#utility.yul\":6226:6244   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6219:6249   */\n      mstore\n      shl(0x88, 0x41697264726f70206d617820323025)\n        /* \"#utility.yul\":6265:6283   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6258:6303   */\n      mstore\n        /* \"#utility.yul\":6320:6338   */\n      0x64\n      add\n        /* \"contracts/ERC20/Staking.sol\":7849:7890  require(amount <= 200, \"Airdrop max 20%\") */\n      tag_82\n        /* \"#utility.yul\":6005:6344   */\n      jump\n        /* \"contracts/ERC20/Staking.sol\":7849:7890  require(amount <= 200, \"Airdrop max 20%\") */\n    tag_172:\n        /* \"contracts/ERC20/Staking.sol\":7900:7911  airdropRate */\n      0x04\n        /* \"contracts/ERC20/Staking.sol\":7900:7920  airdropRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/ERC20/Staking.sol\":7935:7957  AirdropChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":8452:8477   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/ERC20/Staking.sol\":7935:7957  AirdropChanged(amount) */\n      0xcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e\n      swap1\n        /* \"#utility.yul\":8440:8442   */\n      0x20\n        /* \"#utility.yul\":8425:8443   */\n      add\n        /* \"contracts/ERC20/Staking.sol\":7935:7957  AirdropChanged(amount) */\n      tag_144\n        /* \"#utility.yul\":8306:8483   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_77:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_177\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_177:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_179\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3298:3300   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3280:3301   */\n      mstore\n        /* \"#utility.yul\":3337:3339   */\n      0x26\n        /* \"#utility.yul\":3317:3335   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3310:3340   */\n      mstore\n        /* \"#utility.yul\":3376:3410   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":3356:3374   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3349:3411   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":3427:3445   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3420:3456   */\n      mstore\n        /* \"#utility.yul\":3473:3492   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_82\n        /* \"#utility.yul\":3096:3498   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_179:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_182\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_182:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":4613:4980  function _calculateStakeReward(Stake memory user_stake)... */\n    tag_85:\n        /* \"contracts/ERC20/Staking.sol\":4716:4723  uint256 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":4969:4973  1e26 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/ERC20/Staking.sol\":4922:4965  _calculateStakingDuration(user_stake.since) */\n      tag_184\n        /* \"contracts/ERC20/Staking.sol\":4948:4958  user_stake */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":4948:4964  user_stake.since */\n      0x20\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":4922:4947  _calculateStakingDuration */\n      tag_185\n        /* \"contracts/ERC20/Staking.sol\":4922:4965  _calculateStakingDuration(user_stake.since) */\n      jump\t// in\n    tag_184:\n        /* \"contracts/ERC20/Staking.sol\":4883:4903  user_stake.rewardAPY */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/ERC20/Staking.sol\":4847:4864  user_stake.amount */\n      dup5\n      mload\n        /* \"contracts/ERC20/Staking.sol\":4847:4903  user_stake.amount *... */\n      tag_186\n      swap2\n        /* \"contracts/ERC20/Staking.sol\":4883:4903  user_stake.rewardAPY */\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":4847:4903  user_stake.amount *... */\n      tag_88\n      jump\t// in\n    tag_186:\n        /* \"contracts/ERC20/Staking.sol\":4847:4965  user_stake.amount *... */\n      tag_148\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n        /* \"contracts/ERC20/Staking.sol\":8211:8390  function _calculateAirdrop(uint256 stakeAmount)... */\n    tag_98:\n        /* \"contracts/ERC20/Staking.sol\":8306:8313  uint256 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":8375:8383  52 weeks */\n      0x01dfe200\n        /* \"contracts/ERC20/Staking.sol\":8367:8371  1000 */\n      0x03e8\n        /* \"contracts/ERC20/Staking.sol\":8352:8363  airdropRate */\n      sload(0x04)\n        /* \"contracts/ERC20/Staking.sol\":8338:8349  stakeAmount */\n      dup5\n        /* \"contracts/ERC20/Staking.sol\":8338:8363  stakeAmount * airdropRate */\n      tag_190\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_190:\n        /* \"contracts/ERC20/Staking.sol\":8337:8371  (stakeAmount * airdropRate) / 1000 */\n      tag_148\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n        /* \"contracts/ERC20/Staking.sol\":2415:2530  function _checkAirdropStatus() internal view {... */\n    tag_102:\n        /* \"contracts/ERC20/Staking.sol\":2478:2491  airdropStatus */\n      and(0xff, sload(0x06))\n        /* \"contracts/ERC20/Staking.sol\":2478:2499  airdropStatus == true */\n      iszero\n      iszero\n        /* \"contracts/ERC20/Staking.sol\":2478:2491  airdropStatus */\n      0x01\n        /* \"contracts/ERC20/Staking.sol\":2478:2499  airdropStatus == true */\n      eq\n        /* \"contracts/ERC20/Staking.sol\":2470:2523  require(airdropStatus == true, \"Airdrop not started\") */\n      tag_118\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4458:4460   */\n      0x20\n        /* \"contracts/ERC20/Staking.sol\":2470:2523  require(airdropStatus == true, \"Airdrop not started\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4440:4461   */\n      mstore\n        /* \"#utility.yul\":4497:4499   */\n      0x13\n        /* \"#utility.yul\":4477:4495   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4470:4500   */\n      mstore\n      shl(0x6a, 0x105a5c991c9bdc081b9bdd081cdd185c9d1959)\n        /* \"#utility.yul\":4516:4534   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4509:4558   */\n      mstore\n        /* \"#utility.yul\":4575:4593   */\n      0x64\n      add\n        /* \"contracts/ERC20/Staking.sol\":2470:2523  require(airdropStatus == true, \"Airdrop not started\") */\n      tag_82\n        /* \"#utility.yul\":4256:4599   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n    tag_113:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2084:2116   */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2066:2117   */\n      mstore\n        /* \"#utility.yul\":2133:2151   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":2126:2160   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_198\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":895:900  token */\n      dup5\n      swap1\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":925:948  token.transfer.selector */\n      swap1\n        /* \"#utility.yul\":2039:2057   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n    tag_199:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:894  _callOptionalReturn */\n      tag_201\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_198:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_116:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_118\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4806:4808   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4788:4809   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":4825:4843   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4818:4848   */\n      mstore\n        /* \"#utility.yul\":4884:4918   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":4864:4882   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4857:4919   */\n      mstore\n        /* \"#utility.yul\":4936:4954   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_82\n        /* \"#utility.yul\":4604:4960   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_119:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n    tag_122:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2487  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_211\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7320:7322   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7302:7323   */\n      mstore\n        /* \"#utility.yul\":7359:7361   */\n      0x1f\n        /* \"#utility.yul\":7339:7357   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7332:7362   */\n      mstore\n        /* \"#utility.yul\":7398:7431   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":7378:7396   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7371:7432   */\n      mstore\n        /* \"#utility.yul\":7449:7467   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_82\n        /* \"#utility.yul\":7118:7473   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_211:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2598:2605  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2598:2616  _status = _ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n    tag_132:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1770:1785   */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":1752:1786   */\n      mstore\n        /* \"#utility.yul\":1822:1837   */\n      dup4\n      and\n        /* \"#utility.yul\":1802:1820   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1795:1838   */\n      mstore\n        /* \"#utility.yul\":1854:1872   */\n      0x64\n      dup2\n      add\n        /* \"#utility.yul\":1847:1881   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_215\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1132:1137  token */\n      dup6\n      swap1\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1162:1189  token.transferFrom.selector */\n      swap1\n        /* \"#utility.yul\":1687:1705   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      tag_199\n        /* \"#utility.yul\":1512:1887   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n    tag_215:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":4986:5281  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_159:\n        /* \"contracts/ERC20/Staking.sol\":5103:5110  uint256 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":5112:5119  uint256 */\n      dup1\n        /* \"contracts/ERC20/Staking.sol\":5198:5202  1000 */\n      0x03e8\n        /* \"contracts/ERC20/Staking.sol\":5176:5194  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/ERC20/Staking.sol\":5167:5173  amount */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":5167:5194  amount * stakingPenaltyRate */\n      tag_220\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_220:\n        /* \"contracts/ERC20/Staking.sol\":5166:5202  (amount * stakingPenaltyRate) / 1000 */\n      tag_221\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_221:\n        /* \"contracts/ERC20/Staking.sol\":5156:5203  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_222\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":5156:5162  amount */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":5156:5203  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_149\n      jump\t// in\n    tag_222:\n        /* \"contracts/ERC20/Staking.sol\":5259:5263  1000 */\n      0x03e8\n        /* \"contracts/ERC20/Staking.sol\":5237:5255  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/ERC20/Staking.sol\":5228:5234  reward */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":5228:5255  reward * stakingPenaltyRate */\n      tag_223\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_223:\n        /* \"contracts/ERC20/Staking.sol\":5227:5263  (reward * stakingPenaltyRate) / 1000 */\n      tag_224\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_224:\n        /* \"contracts/ERC20/Staking.sol\":5217:5264  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_225\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":5217:5223  reward */\n      dup6\n        /* \"contracts/ERC20/Staking.sol\":5217:5264  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_149\n      jump\t// in\n    tag_225:\n        /* \"contracts/ERC20/Staking.sol\":5135:5274  return (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/ERC20/Staking.sol\":4986:5281  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20/Staking.sol\":4376:4607  function _calculateStakingDuration(uint256 since)... */\n    tag_185:\n        /* \"contracts/ERC20/Staking.sol\":4473:4480  uint256 */\n      0x00\n        /* \"contracts/ERC20/Staking.sol\":4592:4600  365 days */\n      0x01e13380\n        /* \"contracts/ERC20/Staking.sol\":4557:4580  block.timestamp - since */\n      tag_227\n        /* \"contracts/ERC20/Staking.sol\":4575:4580  since */\n      dup4\n        /* \"contracts/ERC20/Staking.sol\":4557:4572  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20/Staking.sol\":4557:4580  block.timestamp - since */\n      tag_149\n      jump\t// in\n    tag_227:\n        /* \"contracts/ERC20/Staking.sol\":4556:4588  (block.timestamp - since) * 1e24 */\n      tag_148\n      swap1\n        /* \"contracts/ERC20/Staking.sol\":4584:4588  1e24 */\n      0xd3c21bcecceda1000000\n        /* \"contracts/ERC20/Staking.sol\":4556:4588  (block.timestamp - since) * 1e24 */\n      tag_88\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_201:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4189  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_231\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4220:4224  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4200:4205  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4219  address(token).functionCall */\n      and\n      tag_232\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_231:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4292  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4261  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4296  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4271:4447  if (returndata.length > 0) {... */\n      tag_198\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4370:4380  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4359:4389  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_234\n      swap2\n      swap1\n      tag_235\n      jump\t// in\n    tag_234:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_198\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6909:6911   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6891:6912   */\n      mstore\n        /* \"#utility.yul\":6948:6950   */\n      0x2a\n        /* \"#utility.yul\":6928:6946   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6921:6951   */\n      mstore\n        /* \"#utility.yul\":6987:7021   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":6967:6985   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6960:7022   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":7038:7056   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7031:7071   */\n      mstore\n        /* \"#utility.yul\":7088:7107   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_82\n        /* \"#utility.yul\":6707:7113   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n    tag_232:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4006:4018  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_241\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4059:4065  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4067:4071  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4073:4074  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4076:4088  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4058  functionCallWithValue */\n      tag_242\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_241:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4030:4089  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n    tag_242:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5125:5137  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5182:5187  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5178  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5187  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_244\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4051:4053   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4033:4054   */\n      mstore\n        /* \"#utility.yul\":4090:4092   */\n      0x26\n        /* \"#utility.yul\":4070:4088   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4063:4093   */\n      mstore\n        /* \"#utility.yul\":4129:4163   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":4109:4127   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4102:4164   */\n      mstore\n      shl(0xd2, 0x1c8818d85b1b)\n        /* \"#utility.yul\":4180:4198   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4173:4209   */\n      mstore\n        /* \"#utility.yul\":4226:4245   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_82\n        /* \"#utility.yul\":3849:4251   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_244:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5241:5253  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5255:5278  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5288  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5293  target.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5301:5306  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5308:5312  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5313  target.call{value: value}(data) */\n      mload(0x40)\n      tag_247\n      swap2\n      swap1\n      tag_248\n      jump\t// in\n    tag_247:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_251\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_250)\n    tag_251:\n      0x60\n      swap2\n      pop\n    tag_250:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5240:5313  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_252\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5357:5363  target */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5365:5372  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5374:5384  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5386:5398  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5356  verifyCallResultFromTarget */\n      tag_253\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_252:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5323:5399  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7466:8094  function verifyCallResultFromTarget(... */\n    tag_253:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7646:7658  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7674:7681  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n      iszero\n      tag_255\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7718  returndata.length */\n      dup3\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7697:7983  if (returndata.length == 0) {... */\n      tag_259\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_259\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6551:6553   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6533:6554   */\n      mstore\n        /* \"#utility.yul\":6590:6592   */\n      0x1d\n        /* \"#utility.yul\":6570:6588   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6563:6593   */\n      mstore\n        /* \"#utility.yul\":6629:6660   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":6609:6627   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6602:6661   */\n      mstore\n        /* \"#utility.yul\":6678:6696   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_82\n        /* \"#utility.yul\":6349:6702   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n    tag_259:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8003:8013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7996:8013  return returndata */\n      jump(tag_241)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n    tag_255:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8077  _revert(returndata, errorMessage) */\n      tag_241\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8052:8062  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8076  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8792  returndata.length */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8796  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n      tag_267\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9003:9013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8997:9014  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9059:9074  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9046:9056  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9042:9044  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9038:9057  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9031:9075  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n    tag_267:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9126:9138  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9119:9139  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_82\n      swap2\n      swap1\n      tag_270\n      jump\t// in\n    tag_79:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      tag_271\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\n    tag_271:\n      swap1\n      mstore\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":14:300   */\n    tag_76:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:146   */\n      iszero\n      tag_275\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:146   */\n    tag_275:\n        /* \"#utility.yul\":168:191   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":220:251   */\n      dup2\n      and\n        /* \"#utility.yul\":210:252   */\n      dup2\n      eq\n        /* \"#utility.yul\":200:270   */\n      tag_276\n      jumpi\n        /* \"#utility.yul\":266:267   */\n      0x00\n        /* \"#utility.yul\":263:264   */\n      dup1\n        /* \"#utility.yul\":256:268   */\n      revert\n        /* \"#utility.yul\":200:270   */\n    tag_276:\n        /* \"#utility.yul\":289:294   */\n      swap4\n        /* \"#utility.yul\":14:300   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":305:582   */\n    tag_235:\n        /* \"#utility.yul\":372:378   */\n      0x00\n        /* \"#utility.yul\":425:427   */\n      0x20\n        /* \"#utility.yul\":413:422   */\n      dup3\n        /* \"#utility.yul\":404:411   */\n      dup5\n        /* \"#utility.yul\":400:423   */\n      sub\n        /* \"#utility.yul\":396:428   */\n      slt\n        /* \"#utility.yul\":393:445   */\n      iszero\n      tag_278\n      jumpi\n        /* \"#utility.yul\":441:442   */\n      0x00\n        /* \"#utility.yul\":438:439   */\n      dup1\n        /* \"#utility.yul\":431:443   */\n      revert\n        /* \"#utility.yul\":393:445   */\n    tag_278:\n        /* \"#utility.yul\":473:482   */\n      dup2\n        /* \"#utility.yul\":467:483   */\n      mload\n        /* \"#utility.yul\":526:531   */\n      dup1\n        /* \"#utility.yul\":519:532   */\n      iszero\n        /* \"#utility.yul\":512:533   */\n      iszero\n        /* \"#utility.yul\":505:510   */\n      dup2\n        /* \"#utility.yul\":502:534   */\n      eq\n        /* \"#utility.yul\":492:552   */\n      tag_276\n      jumpi\n        /* \"#utility.yul\":548:549   */\n      0x00\n        /* \"#utility.yul\":545:546   */\n      dup1\n        /* \"#utility.yul\":538:550   */\n      revert\n        /* \"#utility.yul\":587:767   */\n    tag_45:\n        /* \"#utility.yul\":646:652   */\n      0x00\n        /* \"#utility.yul\":699:701   */\n      0x20\n        /* \"#utility.yul\":687:696   */\n      dup3\n        /* \"#utility.yul\":678:685   */\n      dup5\n        /* \"#utility.yul\":674:697   */\n      sub\n        /* \"#utility.yul\":670:702   */\n      slt\n        /* \"#utility.yul\":667:719   */\n      iszero\n      tag_281\n      jumpi\n        /* \"#utility.yul\":715:716   */\n      0x00\n        /* \"#utility.yul\":712:713   */\n      dup1\n        /* \"#utility.yul\":705:717   */\n      revert\n        /* \"#utility.yul\":667:719   */\n    tag_281:\n      pop\n        /* \"#utility.yul\":738:761   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":587:767   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":772:1020   */\n    tag_37:\n        /* \"#utility.yul\":840:846   */\n      0x00\n        /* \"#utility.yul\":848:854   */\n      dup1\n        /* \"#utility.yul\":901:903   */\n      0x40\n        /* \"#utility.yul\":889:898   */\n      dup4\n        /* \"#utility.yul\":880:887   */\n      dup6\n        /* \"#utility.yul\":876:899   */\n      sub\n        /* \"#utility.yul\":872:904   */\n      slt\n        /* \"#utility.yul\":869:921   */\n      iszero\n      tag_283\n      jumpi\n        /* \"#utility.yul\":917:918   */\n      0x00\n        /* \"#utility.yul\":914:915   */\n      dup1\n        /* \"#utility.yul\":907:919   */\n      revert\n        /* \"#utility.yul\":869:921   */\n    tag_283:\n      pop\n      pop\n        /* \"#utility.yul\":940:963   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":1010:1012   */\n      0x20\n        /* \"#utility.yul\":995:1013   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":982:1014   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":772:1020   */\n      jump\t// out\n        /* \"#utility.yul\":1025:1299   */\n    tag_248:\n        /* \"#utility.yul\":1154:1157   */\n      0x00\n        /* \"#utility.yul\":1192:1198   */\n      dup3\n        /* \"#utility.yul\":1186:1199   */\n      mload\n        /* \"#utility.yul\":1208:1261   */\n      tag_285\n        /* \"#utility.yul\":1254:1260   */\n      dup2\n        /* \"#utility.yul\":1249:1252   */\n      dup5\n        /* \"#utility.yul\":1242:1246   */\n      0x20\n        /* \"#utility.yul\":1234:1240   */\n      dup8\n        /* \"#utility.yul\":1230:1247   */\n      add\n        /* \"#utility.yul\":1208:1261   */\n      tag_286\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":1277:1293   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":1025:1299   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2363:2746   */\n    tag_270:\n        /* \"#utility.yul\":2512:2514   */\n      0x20\n        /* \"#utility.yul\":2501:2510   */\n      dup2\n        /* \"#utility.yul\":2494:2515   */\n      mstore\n        /* \"#utility.yul\":2475:2479   */\n      0x00\n        /* \"#utility.yul\":2544:2550   */\n      dup3\n        /* \"#utility.yul\":2538:2551   */\n      mload\n        /* \"#utility.yul\":2587:2593   */\n      dup1\n        /* \"#utility.yul\":2582:2584   */\n      0x20\n        /* \"#utility.yul\":2571:2580   */\n      dup5\n        /* \"#utility.yul\":2567:2585   */\n      add\n        /* \"#utility.yul\":2560:2594   */\n      mstore\n        /* \"#utility.yul\":2603:2669   */\n      tag_292\n        /* \"#utility.yul\":2662:2668   */\n      dup2\n        /* \"#utility.yul\":2657:2659   */\n      0x40\n        /* \"#utility.yul\":2646:2655   */\n      dup6\n        /* \"#utility.yul\":2642:2660   */\n      add\n        /* \"#utility.yul\":2637:2639   */\n      0x20\n        /* \"#utility.yul\":2629:2635   */\n      dup8\n        /* \"#utility.yul\":2625:2640   */\n      add\n        /* \"#utility.yul\":2603:2669   */\n      tag_286\n      jump\t// in\n    tag_292:\n        /* \"#utility.yul\":2730:2732   */\n      0x1f\n        /* \"#utility.yul\":2709:2724   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2705:2734   */\n      and\n        /* \"#utility.yul\":2690:2735   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":2737:2739   */\n      0x40\n        /* \"#utility.yul\":2686:2740   */\n      add\n      swap3\n        /* \"#utility.yul\":2363:2746   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3503:3844   */\n    tag_83:\n        /* \"#utility.yul\":3705:3707   */\n      0x20\n        /* \"#utility.yul\":3687:3708   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3744:3746   */\n      0x11\n        /* \"#utility.yul\":3724:3742   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3717:3747   */\n      mstore\n      shl(0x7a, 0x14dd185ada5b99c81b9bdd08199bdd5b99)\n        /* \"#utility.yul\":3778:3780   */\n      0x40\n        /* \"#utility.yul\":3763:3781   */\n      dup3\n      add\n        /* \"#utility.yul\":3756:3803   */\n      mstore\n        /* \"#utility.yul\":3835:3837   */\n      0x60\n        /* \"#utility.yul\":3820:3838   */\n      add\n      swap1\n        /* \"#utility.yul\":3503:3844   */\n      jump\t// out\n        /* \"#utility.yul\":8812:8940   */\n    tag_94:\n        /* \"#utility.yul\":8852:8855   */\n      0x00\n        /* \"#utility.yul\":8883:8884   */\n      dup3\n        /* \"#utility.yul\":8879:8885   */\n      not\n        /* \"#utility.yul\":8876:8877   */\n      dup3\n        /* \"#utility.yul\":8873:8886   */\n      gt\n        /* \"#utility.yul\":8870:8909   */\n      iszero\n      tag_311\n      jumpi\n        /* \"#utility.yul\":8889:8907   */\n      tag_311\n      tag_312\n      jump\t// in\n    tag_311:\n      pop\n        /* \"#utility.yul\":8925:8934   */\n      add\n      swap1\n        /* \"#utility.yul\":8812:8940   */\n      jump\t// out\n        /* \"#utility.yul\":8945:9162   */\n    tag_90:\n        /* \"#utility.yul\":8985:8986   */\n      0x00\n        /* \"#utility.yul\":9011:9012   */\n      dup3\n        /* \"#utility.yul\":9001:9133   */\n      tag_314\n      jumpi\n        /* \"#utility.yul\":9055:9065   */\n      0x4e487b71\n        /* \"#utility.yul\":9050:9053   */\n      0xe0\n        /* \"#utility.yul\":9046:9066   */\n      shl\n        /* \"#utility.yul\":9043:9044   */\n      0x00\n        /* \"#utility.yul\":9036:9067   */\n      mstore\n        /* \"#utility.yul\":9090:9094   */\n      0x12\n        /* \"#utility.yul\":9087:9088   */\n      0x04\n        /* \"#utility.yul\":9080:9095   */\n      mstore\n        /* \"#utility.yul\":9118:9122   */\n      0x24\n        /* \"#utility.yul\":9115:9116   */\n      0x00\n        /* \"#utility.yul\":9108:9123   */\n      revert\n        /* \"#utility.yul\":9001:9133   */\n    tag_314:\n      pop\n        /* \"#utility.yul\":9147:9156   */\n      div\n      swap1\n        /* \"#utility.yul\":8945:9162   */\n      jump\t// out\n        /* \"#utility.yul\":9167:9335   */\n    tag_88:\n        /* \"#utility.yul\":9207:9214   */\n      0x00\n        /* \"#utility.yul\":9273:9274   */\n      dup2\n        /* \"#utility.yul\":9269:9270   */\n      0x00\n        /* \"#utility.yul\":9265:9271   */\n      not\n        /* \"#utility.yul\":9261:9275   */\n      div\n        /* \"#utility.yul\":9258:9259   */\n      dup4\n        /* \"#utility.yul\":9255:9276   */\n      gt\n        /* \"#utility.yul\":9250:9251   */\n      dup3\n        /* \"#utility.yul\":9243:9252   */\n      iszero\n        /* \"#utility.yul\":9236:9253   */\n      iszero\n        /* \"#utility.yul\":9232:9277   */\n      and\n        /* \"#utility.yul\":9229:9300   */\n      iszero\n      tag_317\n      jumpi\n        /* \"#utility.yul\":9280:9298   */\n      tag_317\n      tag_312\n      jump\t// in\n    tag_317:\n      pop\n        /* \"#utility.yul\":9320:9329   */\n      mul\n      swap1\n        /* \"#utility.yul\":9167:9335   */\n      jump\t// out\n        /* \"#utility.yul\":9340:9465   */\n    tag_149:\n        /* \"#utility.yul\":9380:9384   */\n      0x00\n        /* \"#utility.yul\":9408:9409   */\n      dup3\n        /* \"#utility.yul\":9405:9406   */\n      dup3\n        /* \"#utility.yul\":9402:9410   */\n      lt\n        /* \"#utility.yul\":9399:9433   */\n      iszero\n      tag_320\n      jumpi\n        /* \"#utility.yul\":9413:9431   */\n      tag_320\n      tag_312\n      jump\t// in\n    tag_320:\n      pop\n        /* \"#utility.yul\":9450:9459   */\n      sub\n      swap1\n        /* \"#utility.yul\":9340:9465   */\n      jump\t// out\n        /* \"#utility.yul\":9470:9728   */\n    tag_286:\n        /* \"#utility.yul\":9542:9543   */\n      0x00\n        /* \"#utility.yul\":9552:9665   */\n    tag_322:\n        /* \"#utility.yul\":9566:9572   */\n      dup4\n        /* \"#utility.yul\":9563:9564   */\n      dup2\n        /* \"#utility.yul\":9560:9573   */\n      lt\n        /* \"#utility.yul\":9552:9665   */\n      iszero\n      tag_324\n      jumpi\n        /* \"#utility.yul\":9642:9653   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":9636:9654   */\n      mload\n        /* \"#utility.yul\":9623:9634   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":9616:9655   */\n      mstore\n        /* \"#utility.yul\":9588:9590   */\n      0x20\n        /* \"#utility.yul\":9581:9591   */\n      add\n        /* \"#utility.yul\":9552:9665   */\n      jump(tag_322)\n    tag_324:\n        /* \"#utility.yul\":9683:9689   */\n      dup4\n        /* \"#utility.yul\":9680:9681   */\n      dup2\n        /* \"#utility.yul\":9677:9690   */\n      gt\n        /* \"#utility.yul\":9674:9722   */\n      iszero\n      tag_215\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":9718:9719   */\n      0x00\n        /* \"#utility.yul\":9700:9716   */\n      swap2\n      add\n        /* \"#utility.yul\":9693:9720   */\n      mstore\n        /* \"#utility.yul\":9470:9728   */\n      jump\t// out\n        /* \"#utility.yul\":9733:9860   */\n    tag_312:\n        /* \"#utility.yul\":9794:9804   */\n      0x4e487b71\n        /* \"#utility.yul\":9789:9792   */\n      0xe0\n        /* \"#utility.yul\":9785:9805   */\n      shl\n        /* \"#utility.yul\":9782:9783   */\n      0x00\n        /* \"#utility.yul\":9775:9806   */\n      mstore\n        /* \"#utility.yul\":9825:9829   */\n      0x11\n        /* \"#utility.yul\":9822:9823   */\n      0x04\n        /* \"#utility.yul\":9815:9830   */\n      mstore\n        /* \"#utility.yul\":9849:9853   */\n      0x24\n        /* \"#utility.yul\":9846:9847   */\n      0x00\n        /* \"#utility.yul\":9839:9854   */\n      revert\n\n    auxdata: 0xa264697066735822122010835dc6397d34d21d228ba39472b06ecaee9ffa3630a155e7b463d6e978263d64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_131": {
									"entryPoint": null,
									"id": 131,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_973": {
									"entryPoint": null,
									"id": 973,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_msgSender_903": {
									"entryPoint": null,
									"id": 903,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 233,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 315,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:306:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:209:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:8"
															},
															"nodeType": "YulIf",
															"src": "105:52:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "179:16:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "170:5:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "258:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "267:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "270:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "243:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "248:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "252:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "207:50:8"
															},
															"nodeType": "YulIf",
															"src": "204:70:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "283:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "293:5:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:8",
														"type": ""
													}
												],
												"src": "14:290:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060405161128a38038061128a83398101604081905261002f9161013b565b600160005561003d336100e9565b600f6003556050600455600680546001600160a01b0390921661010002610100600160a81b031990921691909117815560026020527fa1ef5b42f18533d67a183a193ea6c3fabfaa3bdabc3fc0e3f65b19b517df6e8c5560077f089cfcbf844e824feee5f634cbc488382291f3c9e0de5905f3c30812390dd832556301e1338060005260087fdc083eb4da7563bbd761324b5158d9d40af7c7174afe39b0b31a7577c44fc33b5561016b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006020828403121561014d57600080fd5b81516001600160a01b038116811461016457600080fd5b9392505050565b6111108061017a6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063bed9d86111610071578063bed9d8611461025f578063cb79c2e114610267578063d2a569c314610270578063d5dbdf1b14610278578063f2fde38b1461028b57600080fd5b80638da5cb5b1461022c578063adb618321461023d578063b5d9df8314610243578063b87da76d1461025657600080fd5b80637b0472f0116100de5780637b0472f0146101bf5780638891cf0d146101d25780638c63f97f146101e95780638c8e8fee146101fc57600080fd5b806310486b6a146101105780632cf1a5fb146101905780635b88349d146101ad578063715018a6146101b7575b600080fd5b61011861029e565b604051610187919060006101208201905082518252602083015160208301526040830151805160408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a081015160e084015260c08101516101008401525092915050565b60405180910390f35b60065461019d9060ff1681565b6040519015158152602001610187565b6101b56103fc565b005b6101b56104ca565b6101b56101cd366004610f8c565b6104de565b6101db60045481565b604051908152602001610187565b6101b56101f7366004610f73565b610697565b6006546102149061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610187565b6001546001600160a01b0316610214565b426101db565b6101db610251366004610f73565b61071e565b6101db60055481565b6101b561073e565b6101db60035481565b6101b5610882565b6101b5610286366004610f73565b61089d565b6101b5610299366004610f21565b61091d565b6102a6610ec3565b33600090815260076020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c083015261032a5760405162461bcd60e51b815260040161032190610ffd565b60405180910390fd5b604080516060810182526000808252602082018190529181018390529061035083610996565b90504282604001516060015111156103a9576103e8600354826103739190611062565b61037d9190611040565b60035484516103e89161038f91611062565b6103999190611040565b6103a39190611028565b60208301525b60006103b88460c0015161071e565b11156103dc5760006103cd84600001516109cc565b604084015160a00152506103ea565b6040820151600060a0909101525b60408201516080015290518152919050565b6104046109ee565b33600090815260076020526040902080546104315760405162461bcd60e51b815260040161032190610ffd565b6000610440826006015461071e565b8254909150156104c6578061048f5760405162461bcd60e51b8152602060048201526015602482015274436c61696d61626c65206f6e63652061207765656b60581b6044820152606401610321565b60006005830155426006808401919091555482546104c69161010090046001600160a01b03169033906104c1906109cc565b610a3b565b5050565b6104d2610aa3565b6104dc6000610afd565b565b6104e6610b4f565b33600090815260076020526040902054156105365760405162461bcd60e51b815260206004820152601060248201526f2ab9b2b91034b990309029ba30b5b2b960811b6044820152606401610321565b6000818152600260205260409020546105855760405162461bcd60e51b8152602060048201526011602482015270141858dad859d9481b9bdd08119bdd5b99607a1b6044820152606401610321565b6040805160e081018252838152426020808301829052600085815260029091528390205492820192909252606081016105be8385611028565b815260006020808301829052604080840183905260609384018390523380845260078352928190208551815591850151600183015584015160028201559183015160038301556080830151600483015560a0830151600583015560c09092015160069182015554610640916101009091046001600160a01b0316903086610ba9565b337fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed848361066e8187611028565b6040805193845260208401929092529082015260600160405180910390a2506104c66001600055565b61069f610aa3565b601e8111156106e25760405162461bcd60e51b815260206004820152600f60248201526e50656e616c7479206d61782033302560881b6044820152606401610321565b60038190556040518181527fcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9906020015b60405180910390a150565b600062093a8061072e8342611081565b6107389190611040565b92915050565b610746610b4f565b33600090815260076020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c08301526107c15760405162461bcd60e51b815260040161032190610ffd565b60006107cc82610996565b336000908152600760205260408120818155600181018290556002810182905560038101829055600481018290556005810182905560060155606083015190915042101561085157600080610825846000015184610be7565b600654919350915061084a9061010090046001600160a01b0316336104c18486611028565b5050610876565b60065482516108769161010090046001600160a01b03169033906104c1908590611028565b50506104dc6001600055565b61088a610aa3565b426005556006805460ff19166001179055565b6108a5610aa3565b60c88111156108e85760405162461bcd60e51b815260206004820152600f60248201526e41697264726f70206d61782032302560881b6044820152606401610321565b60048190556040518181527fcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e90602001610713565b610925610aa3565b6001600160a01b03811661098a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610321565b61099381610afd565b50565b60006a52b7d2dcc80cd2e40000006109b18360200151610c3f565b604084015184516109c29190611062565b61072e9190611062565b60006301dfe2006103e8600454846109e49190611062565b61072e9190611040565b60065460ff1615156001146104dc5760405162461bcd60e51b8152602060048201526013602482015272105a5c991c9bdc081b9bdd081cdd185c9d1959606a1b6044820152606401610321565b6040516001600160a01b038316602482015260448101829052610a9e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610c64565b505050565b6001546001600160a01b031633146104dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610321565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026000541415610ba25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610321565b6002600055565b6040516001600160a01b0380851660248301528316604482015260648101829052610be19085906323b872dd60e01b90608401610a67565b50505050565b6000806103e860035485610bfb9190611062565b610c059190611040565b610c0f9085611081565b6103e860035485610c209190611062565b610c2a9190611040565b610c349085611081565b915091509250929050565b60006301e13380610c508342611081565b61072e9069d3c21bcecceda1000000611062565b6000610cb9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d369092919063ffffffff16565b805190915015610a9e5780806020019051810190610cd79190610f51565b610a9e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610321565b6060610d458484600085610d4d565b949350505050565b606082471015610dae5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610321565b600080866001600160a01b03168587604051610dca9190610fae565b60006040518083038185875af1925050503d8060008114610e07576040519150601f19603f3d011682016040523d82523d6000602084013e610e0c565b606091505b5091509150610e1d87838387610e28565b979650505050505050565b60608315610e94578251610e8d576001600160a01b0385163b610e8d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610321565b5081610d45565b610d458383815115610ea95781518083602001fd5b8060405162461bcd60e51b81526004016103219190610fca565b60405180606001604052806000815260200160008152602001610f1c6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b600060208284031215610f3357600080fd5b81356001600160a01b0381168114610f4a57600080fd5b9392505050565b600060208284031215610f6357600080fd5b81518015158114610f4a57600080fd5b600060208284031215610f8557600080fd5b5035919050565b60008060408385031215610f9f57600080fd5b50508035926020909101359150565b60008251610fc0818460208701611098565b9190910192915050565b6020815260008251806020840152610fe9816040850160208701611098565b601f01601f19169190910160400192915050565b60208082526011908201527014dd185ada5b99c81b9bdd08199bdd5b99607a1b604082015260600190565b6000821982111561103b5761103b6110c4565b500190565b60008261105d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561107c5761107c6110c4565b500290565b600082821015611093576110936110c4565b500390565b60005b838110156110b357818101518382015260200161109b565b83811115610be15750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122010835dc6397d34d21d228ba39472b06ecaee9ffa3630a155e7b463d6e978263d64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x128A CODESIZE SUB DUP1 PUSH2 0x128A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x13B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE PUSH2 0x3D CALLER PUSH2 0xE9 JUMP JUMPDEST PUSH1 0xF PUSH1 0x3 SSTORE PUSH1 0x50 PUSH1 0x4 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH32 0xA1EF5B42F18533D67A183A193EA6C3FABFAA3BDABC3FC0E3F65B19B517DF6E8C SSTORE PUSH1 0x7 PUSH32 0x89CFCBF844E824FEEE5F634CBC488382291F3C9E0DE5905F3C30812390DD832 SSTORE PUSH4 0x1E13380 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH32 0xDC083EB4DA7563BBD761324B5158D9D40AF7C7174AFE39B0B31A7577C44FC33B SSTORE PUSH2 0x16B JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1110 DUP1 PUSH2 0x17A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xBED9D861 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0xADB61832 EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x2CF1A5FB EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1B7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x29E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x187 SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x19D SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x187 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x3FC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B5 PUSH2 0x4CA JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1CD CALLDATASIZE PUSH1 0x4 PUSH2 0xF8C JUMP JUMPDEST PUSH2 0x4DE JUMP JUMPDEST PUSH2 0x1DB PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x187 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0xF73 JUMP JUMPDEST PUSH2 0x697 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x214 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x187 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x214 JUMP JUMPDEST TIMESTAMP PUSH2 0x1DB JUMP JUMPDEST PUSH2 0x1DB PUSH2 0x251 CALLDATASIZE PUSH1 0x4 PUSH2 0xF73 JUMP JUMPDEST PUSH2 0x71E JUMP JUMPDEST PUSH2 0x1DB PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x73E JUMP JUMPDEST PUSH2 0x1DB PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x882 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x286 CALLDATASIZE PUSH1 0x4 PUSH2 0xF73 JUMP JUMPDEST PUSH2 0x89D JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x299 CALLDATASIZE PUSH1 0x4 PUSH2 0xF21 JUMP JUMPDEST PUSH2 0x91D JUMP JUMPDEST PUSH2 0x2A6 PUSH2 0xEC3 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x32A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x321 SWAP1 PUSH2 0xFFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x350 DUP4 PUSH2 0x996 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x3A9 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x373 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x37D SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP5 MLOAD PUSH2 0x3E8 SWAP2 PUSH2 0x38F SWAP2 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x399 SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0x3A3 SWAP2 SWAP1 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x3B8 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x71E JUMP JUMPDEST GT ISZERO PUSH2 0x3DC JUMPI PUSH1 0x0 PUSH2 0x3CD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x404 PUSH2 0x9EE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x431 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x321 SWAP1 PUSH2 0xFFD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x440 DUP3 PUSH1 0x6 ADD SLOAD PUSH2 0x71E JUMP JUMPDEST DUP3 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x4C6 JUMPI DUP1 PUSH2 0x48F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x436C61696D61626C65206F6E63652061207765656B PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP4 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE SLOAD DUP3 SLOAD PUSH2 0x4C6 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0x4C1 SWAP1 PUSH2 0x9CC JUMP JUMPDEST PUSH2 0xA3B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4D2 PUSH2 0xAA3 JUMP JUMPDEST PUSH2 0x4DC PUSH1 0x0 PUSH2 0xAFD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4E6 PUSH2 0xB4F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x536 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x2AB9B2B91034B990309029BA30B5B2B9 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x585 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x141858DAD859D9481B9BDD08119BDD5B99 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP4 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP4 SWAP1 KECCAK256 SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD PUSH2 0x5BE DUP4 DUP6 PUSH2 0x1028 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE CALLER DUP1 DUP5 MSTORE PUSH1 0x7 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP2 DUP3 ADD SSTORE SLOAD PUSH2 0x640 SWAP2 PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 ADDRESS DUP7 PUSH2 0xBA9 JUMP JUMPDEST CALLER PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 PUSH2 0x66E DUP2 DUP8 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x4C6 PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x69F PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x50656E616C7479206D617820333025 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 PUSH2 0x72E DUP4 TIMESTAMP PUSH2 0x1081 JUMP JUMPDEST PUSH2 0x738 SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x746 PUSH2 0xB4F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x7C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x321 SWAP1 PUSH2 0xFFD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CC DUP3 PUSH2 0x996 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x6 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD SWAP1 SWAP2 POP TIMESTAMP LT ISZERO PUSH2 0x851 JUMPI PUSH1 0x0 DUP1 PUSH2 0x825 DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0xBE7 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x84A SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0x4C1 DUP5 DUP7 PUSH2 0x1028 JUMP JUMPDEST POP POP PUSH2 0x876 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP3 MLOAD PUSH2 0x876 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0x4C1 SWAP1 DUP6 SWAP1 PUSH2 0x1028 JUMP JUMPDEST POP POP PUSH2 0x4DC PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x88A PUSH2 0xAA3 JUMP JUMPDEST TIMESTAMP PUSH1 0x5 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x8A5 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0x8E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x41697264726F70206D617820323025 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0x713 JUMP JUMPDEST PUSH2 0x925 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x98A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x321 JUMP JUMPDEST PUSH2 0x993 DUP2 PUSH2 0xAFD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x9B1 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xC3F JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0x9C2 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x72E SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0x9E4 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x72E SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105A5C991C9BDC081B9BDD081CDD185C9D1959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xA9E SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xC64 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xBA2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xBE1 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0xA67 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xBFB SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0xC05 SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0xC0F SWAP1 DUP6 PUSH2 0x1081 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xC20 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0xC2A SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0xC34 SWAP1 DUP6 PUSH2 0x1081 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH2 0xC50 DUP4 TIMESTAMP PUSH2 0x1081 JUMP JUMPDEST PUSH2 0x72E SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCB9 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD36 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xA9E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xCD7 SWAP2 SWAP1 PUSH2 0xF51 JUMP JUMPDEST PUSH2 0xA9E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD45 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xD4D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xDAE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xDCA SWAP2 SWAP1 PUSH2 0xFAE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE07 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE0C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xE1D DUP8 DUP4 DUP4 DUP8 PUSH2 0xE28 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xE94 JUMPI DUP3 MLOAD PUSH2 0xE8D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xE8D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST POP DUP2 PUSH2 0xD45 JUMP JUMPDEST PUSH2 0xD45 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0xEA9 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x321 SWAP2 SWAP1 PUSH2 0xFCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1C PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xF4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xFC0 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1098 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xFE9 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1098 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x14DD185ADA5B99C81B9BDD08199BDD5B99 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x103B JUMPI PUSH2 0x103B PUSH2 0x10C4 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x105D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x107C JUMPI PUSH2 0x107C PUSH2 0x10C4 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1093 JUMPI PUSH2 0x1093 PUSH2 0x10C4 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10B3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x109B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xBE1 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT DUP4 0x5D 0xC6 CODECOPY PUSH30 0x34D21D228BA39472B06ECAEE9FFA3630A155E7B463D6E978263D64736F6C PUSH4 0x43000807 STOP CALLER ",
							"sourceMap": "247:8846:7:-:0;;;692:301;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1716:1:1;1821:7;:22;936:32:0;719:10:6;936:18:0;:32::i;:::-;812:2:7;791:18;:23;838:2;824:11;:16;851:13;:21;;-1:-1:-1;;;;;851:21:7;;;;;-1:-1:-1;;;;;;851:21:7;;;;;;;;;883:14;:23;;;:27;947:1;920:24;:28;973:8;-1:-1:-1;958:24:7;985:1;958:24;:28;247:8846;;2433:187:0;2525:6;;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;14:290:8:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:8;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:8:o;:::-;247:8846:7;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_calculateAirdrop_1497": {
									"entryPoint": 2508,
									"id": 1497,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakeReward_1186": {
									"entryPoint": 2454,
									"id": 1186,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingDuration_1163": {
									"entryPoint": 3135,
									"id": 1163,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingWithPenalty_1218": {
									"entryPoint": 3047,
									"id": 1218,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@_callOptionalReturn_560": {
									"entryPoint": 3172,
									"id": 560,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkAirdropStatus_1032": {
									"entryPoint": 2542,
									"id": 1032,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOwner_54": {
									"entryPoint": 2723,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_903": {
									"entryPoint": null,
									"id": 903,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_nonReentrantAfter_165": {
									"entryPoint": null,
									"id": 165,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_nonReentrantBefore_157": {
									"entryPoint": 2895,
									"id": 157,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_revert_890": {
									"entryPoint": null,
									"id": 890,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_111": {
									"entryPoint": 2813,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@airdropRate_931": {
									"entryPoint": null,
									"id": 931,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropSince_933": {
									"entryPoint": null,
									"id": 933,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropStatus_935": {
									"entryPoint": null,
									"id": 935,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@blockTimestamp_1463": {
									"entryPoint": null,
									"id": 1463,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@calculateWeek_1479": {
									"entryPoint": 1822,
									"id": 1479,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@changeAirdropPercentage_1454": {
									"entryPoint": 2205,
									"id": 1454,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changePenaltyFee_1144": {
									"entryPoint": 1687,
									"id": 1144,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@claimAirdrop_1566": {
									"entryPoint": 1020,
									"id": 1566,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@functionCallWithValue_715": {
									"entryPoint": 3405,
									"id": 715,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_651": {
									"entryPoint": 3382,
									"id": 651,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@hasStake_1416": {
									"entryPoint": 670,
									"id": 1416,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isContract_579": {
									"entryPoint": null,
									"id": 579,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_40": {
									"entryPoint": null,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_68": {
									"entryPoint": 1226,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_338": {
									"entryPoint": 2985,
									"id": 338,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_312": {
									"entryPoint": 2619,
									"id": 312,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@stake_1121": {
									"entryPoint": 1246,
									"id": 1121,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@stakingPenaltyRate_929": {
									"entryPoint": null,
									"id": 929,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startAirdrop_1431": {
									"entryPoint": 2178,
									"id": 1431,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@token_address_937": {
									"entryPoint": null,
									"id": 937,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_91": {
									"entryPoint": 2333,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_846": {
									"entryPoint": 3624,
									"id": 846,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@withdrawStake_1300": {
									"entryPoint": 1854,
									"id": 1300,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3873,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 3921,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3955,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 3980,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 4014,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4042,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4093,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_StakingSummary_$996_memory_ptr__to_t_struct$_StakingSummary_$996_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 4136,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 4160,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 4194,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 4225,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 4248,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 4292,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:9862:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:216:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "142:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:8"
															},
															"nodeType": "YulIf",
															"src": "94:52:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "155:36:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "181:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "168:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "168:23:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "159:5:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "254:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "263:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "266:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "256:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "256:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "256:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "213:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "224:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "239:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "244:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "235:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "235:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "248:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "231:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "231:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "220:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "220:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "210:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "210:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "203:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "203:50:8"
															},
															"nodeType": "YulIf",
															"src": "200:70:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "279:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "289:5:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "279:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:8",
														"type": ""
													}
												],
												"src": "14:286:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "383:199:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "429:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "438:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "441:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "431:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "431:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "431:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "404:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "413:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "400:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "400:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "425:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "396:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "396:32:8"
															},
															"nodeType": "YulIf",
															"src": "393:52:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "454:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "473:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "467:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "467:16:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "458:5:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "536:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "545:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "548:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "538:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "538:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "538:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "505:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "526:5:8"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "519:6:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "519:13:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "512:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "512:21:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "502:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "502:32:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "495:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "495:40:8"
															},
															"nodeType": "YulIf",
															"src": "492:60:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "561:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "571:5:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "561:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "349:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "360:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "372:6:8",
														"type": ""
													}
												],
												"src": "305:277:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "657:110:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "703:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "712:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "715:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "705:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "705:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "705:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "678:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "687:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "674:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "674:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "699:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "670:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "670:32:8"
															},
															"nodeType": "YulIf",
															"src": "667:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "728:33:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "751:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "738:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "738:23:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "728:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "623:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "634:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "646:6:8",
														"type": ""
													}
												],
												"src": "587:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "859:161:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "905:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "914:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "917:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "907:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "907:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "907:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "880:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "889:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "876:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "876:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "901:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "872:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "872:32:8"
															},
															"nodeType": "YulIf",
															"src": "869:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "930:33:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "953:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "940:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "940:23:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "930:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "972:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "999:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1010:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "995:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "995:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "982:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "982:32:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "972:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "817:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "828:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "840:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "848:6:8",
														"type": ""
													}
												],
												"src": "772:248:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1162:137:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1172:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1192:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1186:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1186:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1176:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1234:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1242:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1230:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1230:17:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1249:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1254:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1208:21:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1208:53:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1208:53:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1270:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1281:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1286:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1277:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1277:16:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1270:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1138:3:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1143:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1154:3:8",
														"type": ""
													}
												],
												"src": "1025:274:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1405:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1415:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1427:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1438:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1423:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1423:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1415:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1457:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1472:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1488:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1493:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1484:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1484:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1497:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1480:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1480:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1468:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1468:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1450:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1450:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1450:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1374:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1385:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1396:4:8",
														"type": ""
													}
												],
												"src": "1304:203:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1669:218:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1679:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1691:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1702:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1687:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1687:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1679:4:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1714:29:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1732:3:8",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1737:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1728:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1728:11:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1741:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1724:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1724:19:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1718:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1759:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1774:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1782:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1770:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1770:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1752:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1752:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1752:34:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1806:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1817:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1802:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1802:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "1826:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1834:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1822:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1822:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1795:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1795:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1795:43:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1858:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1869:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1854:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1854:18:8"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "1874:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1847:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1847:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1847:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1622:9:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1633:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1641:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1649:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1660:4:8",
														"type": ""
													}
												],
												"src": "1512:375:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2021:145:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2031:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2043:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2054:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2039:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2039:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2031:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2073:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2088:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2104:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2109:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2100:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2100:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2113:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2096:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2096:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2084:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2084:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2066:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2066:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2066:51:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2137:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2148:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2133:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2133:18:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2153:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2126:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2126:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2126:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1982:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1993:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2001:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2012:4:8",
														"type": ""
													}
												],
												"src": "1892:274:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2266:92:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2276:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2288:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2299:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2284:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2284:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2276:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2318:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "2343:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2336:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2336:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2329:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2329:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2311:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2311:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2311:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2235:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2246:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2257:4:8",
														"type": ""
													}
												],
												"src": "2171:187:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2484:262:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2501:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2512:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2494:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2494:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2494:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2524:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2544:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2538:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2538:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2528:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2571:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2582:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2567:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2567:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2587:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2560:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2560:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2560:34:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2629:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2637:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2625:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2625:15:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2646:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2657:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2642:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2642:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2662:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2603:21:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2603:66:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2603:66:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2678:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2694:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2713:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2721:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2709:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2709:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2730:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2726:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2726:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2705:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2705:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2690:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2690:45:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2737:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2686:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2686:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2678:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2453:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2464:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2475:4:8",
														"type": ""
													}
												],
												"src": "2363:383:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2925:166:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2942:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2953:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2935:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2935:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2935:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2976:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2987:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2972:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2972:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2992:2:8",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2965:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2965:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2965:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3015:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3026:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3011:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3011:18:8"
																	},
																	{
																		"hexValue": "557365722069732061205374616b6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3031:18:8",
																		"type": "",
																		"value": "User is a Staker"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3004:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3004:46:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3004:46:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3059:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3071:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3082:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3067:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3067:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3059:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2902:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2916:4:8",
														"type": ""
													}
												],
												"src": "2751:340:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3270:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3287:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3298:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3280:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3280:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3280:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3321:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3332:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3317:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3317:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3337:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3310:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3310:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3310:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3360:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3371:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3356:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3356:18:8"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3376:34:8",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3349:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3349:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3349:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3431:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3442:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3427:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3427:18:8"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3447:8:8",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3420:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3420:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3420:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3465:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3477:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3488:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3473:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3473:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3465:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3247:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3261:4:8",
														"type": ""
													}
												],
												"src": "3096:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3677:167:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3694:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3705:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3687:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3687:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3687:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3728:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3739:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3724:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3724:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3744:2:8",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3717:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3717:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3717:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3767:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3778:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3763:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3763:18:8"
																	},
																	{
																		"hexValue": "5374616b696e67206e6f7420666f756e64",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3783:19:8",
																		"type": "",
																		"value": "Staking not found"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3756:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3756:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3756:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3812:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3824:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3835:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3820:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3820:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3812:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3654:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3668:4:8",
														"type": ""
													}
												],
												"src": "3503:341:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4023:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4040:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4051:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4033:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4033:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4033:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4074:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4085:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4070:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4070:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4090:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4063:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4063:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4063:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4113:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4124:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4109:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4109:18:8"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4129:34:8",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4102:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4102:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4102:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4184:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4195:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4180:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4180:18:8"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4200:8:8",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4173:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4173:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4173:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4218:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4230:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4241:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4226:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4226:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4218:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4000:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4014:4:8",
														"type": ""
													}
												],
												"src": "3849:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4430:169:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4447:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4458:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4440:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4440:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4440:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4481:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4492:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4477:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4477:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4497:2:8",
																		"type": "",
																		"value": "19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4470:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4470:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4470:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4520:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4531:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4516:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4516:18:8"
																	},
																	{
																		"hexValue": "41697264726f70206e6f742073746172746564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4536:21:8",
																		"type": "",
																		"value": "Airdrop not started"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4509:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4509:49:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4509:49:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4567:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4579:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4590:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4575:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4575:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4567:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4407:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4421:4:8",
														"type": ""
													}
												],
												"src": "4256:343:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4778:182:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4795:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4806:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4788:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4788:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4788:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4829:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4840:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4825:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4825:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4845:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4818:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4818:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4818:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4868:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4879:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4864:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4864:18:8"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4884:34:8",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4857:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4857:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4857:62:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4928:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4940:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4951:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4936:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4936:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4928:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4755:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4769:4:8",
														"type": ""
													}
												],
												"src": "4604:356:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5139:171:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5156:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5167:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5149:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5149:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5149:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5190:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5201:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5186:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5186:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5206:2:8",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5179:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5179:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5179:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5229:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5240:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5225:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5225:18:8"
																	},
																	{
																		"hexValue": "436c61696d61626c65206f6e63652061207765656b",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5245:23:8",
																		"type": "",
																		"value": "Claimable once a week"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5218:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5218:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5218:51:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5278:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5290:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5301:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5286:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5286:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5278:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5116:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5130:4:8",
														"type": ""
													}
												],
												"src": "4965:345:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5489:167:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5506:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5517:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5499:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5499:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5499:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5540:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5551:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5536:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5536:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5556:2:8",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5529:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5529:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5529:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5579:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5590:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5575:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5575:18:8"
																	},
																	{
																		"hexValue": "5061636b616765206e6f7420466f756e64",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5595:19:8",
																		"type": "",
																		"value": "Package not Found"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5568:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5568:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5568:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5624:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5636:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5647:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5632:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5632:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5624:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5466:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5480:4:8",
														"type": ""
													}
												],
												"src": "5315:341:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5835:165:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5852:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5863:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5845:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5845:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5845:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5886:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5897:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5882:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5882:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5902:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5875:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5875:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5875:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5925:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5936:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5921:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5921:18:8"
																	},
																	{
																		"hexValue": "50656e616c7479206d617820333025",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5941:17:8",
																		"type": "",
																		"value": "Penalty max 30%"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5914:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5914:45:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5914:45:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5968:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5980:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5991:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5976:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5976:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5968:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5812:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5826:4:8",
														"type": ""
													}
												],
												"src": "5661:339:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6179:165:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6196:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6207:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6189:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6189:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6189:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6230:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6241:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6226:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6226:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6246:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6219:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6219:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6219:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6269:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6280:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6265:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6265:18:8"
																	},
																	{
																		"hexValue": "41697264726f70206d617820323025",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6285:17:8",
																		"type": "",
																		"value": "Airdrop max 20%"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6258:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6258:45:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6258:45:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6312:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6324:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6335:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6320:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6320:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6312:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6156:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6170:4:8",
														"type": ""
													}
												],
												"src": "6005:339:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6523:179:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6540:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6551:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6533:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6533:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6533:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6574:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6585:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6570:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6570:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6590:2:8",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6563:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6563:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6563:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6613:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6624:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6609:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6609:18:8"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6629:31:8",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6602:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6602:59:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6602:59:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6670:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6682:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6693:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6678:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6678:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6670:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6500:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6514:4:8",
														"type": ""
													}
												],
												"src": "6349:353:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6881:232:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6898:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6909:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6891:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6891:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6891:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6932:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6943:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6928:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6928:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6948:2:8",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6921:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6921:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6921:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6971:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6982:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6967:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6967:18:8"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6987:34:8",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6960:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6960:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6960:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7042:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7053:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7038:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7038:18:8"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7058:12:8",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7031:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7031:40:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7031:40:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7080:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7092:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7103:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7088:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7088:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7080:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6858:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6872:4:8",
														"type": ""
													}
												],
												"src": "6707:406:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7292:181:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7309:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7320:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7302:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7302:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7302:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7343:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7354:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7339:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7339:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7359:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7332:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7332:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7332:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7382:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7393:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7378:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7378:18:8"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7398:33:8",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7371:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7371:61:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7371:61:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7441:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7453:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7464:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7449:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7449:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7441:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7269:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7283:4:8",
														"type": ""
													}
												],
												"src": "7118:355:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7641:660:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7651:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7663:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7674:3:8",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7659:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7659:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7651:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7694:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7711:6:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7705:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7705:13:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7687:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7687:32:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7687:32:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7739:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7750:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7735:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7735:20:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "7767:6:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7775:4:8",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7763:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7763:17:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7757:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7757:24:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7728:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7728:54:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7728:54:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7791:44:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7821:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7829:4:8",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7817:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7817:17:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7811:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7811:24:8"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "7795:12:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7855:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7866:4:8",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7851:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7851:20:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7879:12:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7873:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7873:19:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7844:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7844:49:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7844:49:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7913:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7924:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7909:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7909:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "7939:12:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7953:4:8",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7935:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7935:23:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7929:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7929:30:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7902:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7902:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7902:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7980:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7991:3:8",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7976:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7976:19:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "8007:12:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8021:4:8",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8003:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8003:23:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7997:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7997:30:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7969:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7969:59:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7969:59:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8048:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8059:3:8",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8044:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8044:19:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "8075:12:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8089:2:8",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8071:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8071:21:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8065:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8065:28:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8037:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8037:57:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8037:57:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8114:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8125:3:8",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8110:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8110:19:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "8141:12:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8155:3:8",
																						"type": "",
																						"value": "128"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8137:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8137:22:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8131:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8131:29:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8103:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8103:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8103:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8181:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8192:3:8",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8177:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8177:19:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "8208:12:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8222:3:8",
																						"type": "",
																						"value": "160"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8204:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8204:22:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8198:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8198:29:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8170:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8170:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8170:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8248:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8259:3:8",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8244:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8244:19:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "8275:12:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8289:3:8",
																						"type": "",
																						"value": "192"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8271:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8271:22:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8265:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8265:29:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8237:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8237:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8237:58:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_StakingSummary_$996_memory_ptr__to_t_struct$_StakingSummary_$996_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7610:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7621:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7632:4:8",
														"type": ""
													}
												],
												"src": "7478:823:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8407:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8417:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8429:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8440:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8425:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8425:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8417:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8459:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8470:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8452:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8452:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8452:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8376:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8387:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8398:4:8",
														"type": ""
													}
												],
												"src": "8306:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8645:162:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8655:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8667:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8678:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8663:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8663:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8655:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8697:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8708:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8690:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8690:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8690:25:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8735:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8746:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8731:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8731:18:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8751:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8724:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8724:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8724:34:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8778:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8789:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8774:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8774:18:8"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "8794:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8767:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8767:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8767:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8598:9:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "8609:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8617:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8625:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8636:4:8",
														"type": ""
													}
												],
												"src": "8488:319:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8860:80:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8887:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8889:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8889:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8889:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8876:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "8883:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "8879:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8879:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8873:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8873:13:8"
															},
															"nodeType": "YulIf",
															"src": "8870:39:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8918:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8929:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8932:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8925:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8925:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "8918:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8843:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8846:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "8852:3:8",
														"type": ""
													}
												],
												"src": "8812:128:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8991:171:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9022:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9043:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9050:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9055:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "9046:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9046:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9036:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9036:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9036:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9087:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9090:4:8",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9080:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9080:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9080:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9115:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9118:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9108:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9108:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9108:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9011:1:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9004:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9004:9:8"
															},
															"nodeType": "YulIf",
															"src": "9001:132:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9142:14:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9151:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9154:1:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "9147:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9147:9:8"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "9142:1:8"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8976:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8979:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "8985:1:8",
														"type": ""
													}
												],
												"src": "8945:217:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9219:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9278:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9280:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9280:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9280:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "9250:1:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "9243:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9243:9:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "9236:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9236:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "9258:1:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9269:1:8",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "9265:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9265:6:8"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "9273:1:8"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "9261:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9261:14:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "9255:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9255:21:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "9232:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9232:45:8"
															},
															"nodeType": "YulIf",
															"src": "9229:71:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9309:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9324:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9327:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "9320:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9320:9:8"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "9309:7:8"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9198:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9201:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "9207:7:8",
														"type": ""
													}
												],
												"src": "9167:168:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9389:76:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9411:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9413:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9413:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9413:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9405:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9408:1:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "9402:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9402:8:8"
															},
															"nodeType": "YulIf",
															"src": "9399:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9442:17:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9454:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9457:1:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "9450:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9450:9:8"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "9442:4:8"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9371:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9374:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "9380:4:8",
														"type": ""
													}
												],
												"src": "9340:125:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9523:205:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9533:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "9542:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "9537:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9602:63:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "9627:3:8"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "9632:1:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9623:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9623:11:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "9646:3:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "9651:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "9642:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "9642:11:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "9636:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9636:18:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9616:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9616:39:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9616:39:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "9563:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9566:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "9560:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9560:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "9574:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "9576:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "9585:1:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9588:2:8",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "9581:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9581:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "9576:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "9556:3:8",
																"statements": []
															},
															"src": "9552:113:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9691:31:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "9704:3:8"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "9709:6:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9700:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9700:16:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9718:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9693:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9693:27:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9693:27:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "9680:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9683:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9677:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9677:13:8"
															},
															"nodeType": "YulIf",
															"src": "9674:48:8"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "9501:3:8",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "9506:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "9511:6:8",
														"type": ""
													}
												],
												"src": "9470:258:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9765:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9782:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9789:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9794:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "9785:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9785:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9775:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9775:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9775:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9822:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9825:4:8",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9815:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9815:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9815:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9846:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9849:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9839:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9839:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9839:15:8"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "9733:127:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"User is a Staker\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Staking not found\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Airdrop not started\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Claimable once a week\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Package not Found\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Penalty max 30%\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Airdrop max 20%\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_StakingSummary_$996_memory_ptr__to_t_struct$_StakingSummary_$996_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 288)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        let memberValue0 := mload(add(value0, 0x40))\n        mstore(add(headStart, 0x40), mload(memberValue0))\n        mstore(add(headStart, 96), mload(add(memberValue0, 0x20)))\n        mstore(add(headStart, 128), mload(add(memberValue0, 0x40)))\n        mstore(add(headStart, 160), mload(add(memberValue0, 96)))\n        mstore(add(headStart, 192), mload(add(memberValue0, 128)))\n        mstore(add(headStart, 224), mload(add(memberValue0, 160)))\n        mstore(add(headStart, 256), mload(add(memberValue0, 192)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063bed9d86111610071578063bed9d8611461025f578063cb79c2e114610267578063d2a569c314610270578063d5dbdf1b14610278578063f2fde38b1461028b57600080fd5b80638da5cb5b1461022c578063adb618321461023d578063b5d9df8314610243578063b87da76d1461025657600080fd5b80637b0472f0116100de5780637b0472f0146101bf5780638891cf0d146101d25780638c63f97f146101e95780638c8e8fee146101fc57600080fd5b806310486b6a146101105780632cf1a5fb146101905780635b88349d146101ad578063715018a6146101b7575b600080fd5b61011861029e565b604051610187919060006101208201905082518252602083015160208301526040830151805160408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a081015160e084015260c08101516101008401525092915050565b60405180910390f35b60065461019d9060ff1681565b6040519015158152602001610187565b6101b56103fc565b005b6101b56104ca565b6101b56101cd366004610f8c565b6104de565b6101db60045481565b604051908152602001610187565b6101b56101f7366004610f73565b610697565b6006546102149061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610187565b6001546001600160a01b0316610214565b426101db565b6101db610251366004610f73565b61071e565b6101db60055481565b6101b561073e565b6101db60035481565b6101b5610882565b6101b5610286366004610f73565b61089d565b6101b5610299366004610f21565b61091d565b6102a6610ec3565b33600090815260076020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c083015261032a5760405162461bcd60e51b815260040161032190610ffd565b60405180910390fd5b604080516060810182526000808252602082018190529181018390529061035083610996565b90504282604001516060015111156103a9576103e8600354826103739190611062565b61037d9190611040565b60035484516103e89161038f91611062565b6103999190611040565b6103a39190611028565b60208301525b60006103b88460c0015161071e565b11156103dc5760006103cd84600001516109cc565b604084015160a00152506103ea565b6040820151600060a0909101525b60408201516080015290518152919050565b6104046109ee565b33600090815260076020526040902080546104315760405162461bcd60e51b815260040161032190610ffd565b6000610440826006015461071e565b8254909150156104c6578061048f5760405162461bcd60e51b8152602060048201526015602482015274436c61696d61626c65206f6e63652061207765656b60581b6044820152606401610321565b60006005830155426006808401919091555482546104c69161010090046001600160a01b03169033906104c1906109cc565b610a3b565b5050565b6104d2610aa3565b6104dc6000610afd565b565b6104e6610b4f565b33600090815260076020526040902054156105365760405162461bcd60e51b815260206004820152601060248201526f2ab9b2b91034b990309029ba30b5b2b960811b6044820152606401610321565b6000818152600260205260409020546105855760405162461bcd60e51b8152602060048201526011602482015270141858dad859d9481b9bdd08119bdd5b99607a1b6044820152606401610321565b6040805160e081018252838152426020808301829052600085815260029091528390205492820192909252606081016105be8385611028565b815260006020808301829052604080840183905260609384018390523380845260078352928190208551815591850151600183015584015160028201559183015160038301556080830151600483015560a0830151600583015560c09092015160069182015554610640916101009091046001600160a01b0316903086610ba9565b337fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed848361066e8187611028565b6040805193845260208401929092529082015260600160405180910390a2506104c66001600055565b61069f610aa3565b601e8111156106e25760405162461bcd60e51b815260206004820152600f60248201526e50656e616c7479206d61782033302560881b6044820152606401610321565b60038190556040518181527fcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9906020015b60405180910390a150565b600062093a8061072e8342611081565b6107389190611040565b92915050565b610746610b4f565b33600090815260076020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c08301526107c15760405162461bcd60e51b815260040161032190610ffd565b60006107cc82610996565b336000908152600760205260408120818155600181018290556002810182905560038101829055600481018290556005810182905560060155606083015190915042101561085157600080610825846000015184610be7565b600654919350915061084a9061010090046001600160a01b0316336104c18486611028565b5050610876565b60065482516108769161010090046001600160a01b03169033906104c1908590611028565b50506104dc6001600055565b61088a610aa3565b426005556006805460ff19166001179055565b6108a5610aa3565b60c88111156108e85760405162461bcd60e51b815260206004820152600f60248201526e41697264726f70206d61782032302560881b6044820152606401610321565b60048190556040518181527fcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e90602001610713565b610925610aa3565b6001600160a01b03811661098a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610321565b61099381610afd565b50565b60006a52b7d2dcc80cd2e40000006109b18360200151610c3f565b604084015184516109c29190611062565b61072e9190611062565b60006301dfe2006103e8600454846109e49190611062565b61072e9190611040565b60065460ff1615156001146104dc5760405162461bcd60e51b8152602060048201526013602482015272105a5c991c9bdc081b9bdd081cdd185c9d1959606a1b6044820152606401610321565b6040516001600160a01b038316602482015260448101829052610a9e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610c64565b505050565b6001546001600160a01b031633146104dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610321565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026000541415610ba25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610321565b6002600055565b6040516001600160a01b0380851660248301528316604482015260648101829052610be19085906323b872dd60e01b90608401610a67565b50505050565b6000806103e860035485610bfb9190611062565b610c059190611040565b610c0f9085611081565b6103e860035485610c209190611062565b610c2a9190611040565b610c349085611081565b915091509250929050565b60006301e13380610c508342611081565b61072e9069d3c21bcecceda1000000611062565b6000610cb9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d369092919063ffffffff16565b805190915015610a9e5780806020019051810190610cd79190610f51565b610a9e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610321565b6060610d458484600085610d4d565b949350505050565b606082471015610dae5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610321565b600080866001600160a01b03168587604051610dca9190610fae565b60006040518083038185875af1925050503d8060008114610e07576040519150601f19603f3d011682016040523d82523d6000602084013e610e0c565b606091505b5091509150610e1d87838387610e28565b979650505050505050565b60608315610e94578251610e8d576001600160a01b0385163b610e8d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610321565b5081610d45565b610d458383815115610ea95781518083602001fd5b8060405162461bcd60e51b81526004016103219190610fca565b60405180606001604052806000815260200160008152602001610f1c6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b600060208284031215610f3357600080fd5b81356001600160a01b0381168114610f4a57600080fd5b9392505050565b600060208284031215610f6357600080fd5b81518015158114610f4a57600080fd5b600060208284031215610f8557600080fd5b5035919050565b60008060408385031215610f9f57600080fd5b50508035926020909101359150565b60008251610fc0818460208701611098565b9190910192915050565b6020815260008251806020840152610fe9816040850160208701611098565b601f01601f19169190910160400192915050565b60208082526011908201527014dd185ada5b99c81b9bdd08199bdd5b99607a1b604082015260600190565b6000821982111561103b5761103b6110c4565b500190565b60008261105d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561107c5761107c6110c4565b500290565b600082821015611093576110936110c4565b500390565b60005b838110156110b357818101518382015260200161109b565b83811115610be15750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122010835dc6397d34d21d228ba39472b06ecaee9ffa3630a155e7b463d6e978263d64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xBED9D861 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0xADB61832 EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x2CF1A5FB EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1B7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x29E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x187 SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x19D SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x187 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x3FC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B5 PUSH2 0x4CA JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1CD CALLDATASIZE PUSH1 0x4 PUSH2 0xF8C JUMP JUMPDEST PUSH2 0x4DE JUMP JUMPDEST PUSH2 0x1DB PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x187 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0xF73 JUMP JUMPDEST PUSH2 0x697 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x214 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x187 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x214 JUMP JUMPDEST TIMESTAMP PUSH2 0x1DB JUMP JUMPDEST PUSH2 0x1DB PUSH2 0x251 CALLDATASIZE PUSH1 0x4 PUSH2 0xF73 JUMP JUMPDEST PUSH2 0x71E JUMP JUMPDEST PUSH2 0x1DB PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x73E JUMP JUMPDEST PUSH2 0x1DB PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x882 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x286 CALLDATASIZE PUSH1 0x4 PUSH2 0xF73 JUMP JUMPDEST PUSH2 0x89D JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x299 CALLDATASIZE PUSH1 0x4 PUSH2 0xF21 JUMP JUMPDEST PUSH2 0x91D JUMP JUMPDEST PUSH2 0x2A6 PUSH2 0xEC3 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x32A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x321 SWAP1 PUSH2 0xFFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x350 DUP4 PUSH2 0x996 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x3A9 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x373 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x37D SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP5 MLOAD PUSH2 0x3E8 SWAP2 PUSH2 0x38F SWAP2 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x399 SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0x3A3 SWAP2 SWAP1 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x3B8 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x71E JUMP JUMPDEST GT ISZERO PUSH2 0x3DC JUMPI PUSH1 0x0 PUSH2 0x3CD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x404 PUSH2 0x9EE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x431 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x321 SWAP1 PUSH2 0xFFD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x440 DUP3 PUSH1 0x6 ADD SLOAD PUSH2 0x71E JUMP JUMPDEST DUP3 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x4C6 JUMPI DUP1 PUSH2 0x48F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x436C61696D61626C65206F6E63652061207765656B PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP4 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE SLOAD DUP3 SLOAD PUSH2 0x4C6 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0x4C1 SWAP1 PUSH2 0x9CC JUMP JUMPDEST PUSH2 0xA3B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4D2 PUSH2 0xAA3 JUMP JUMPDEST PUSH2 0x4DC PUSH1 0x0 PUSH2 0xAFD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4E6 PUSH2 0xB4F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x536 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x2AB9B2B91034B990309029BA30B5B2B9 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x585 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x141858DAD859D9481B9BDD08119BDD5B99 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP4 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP4 SWAP1 KECCAK256 SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD PUSH2 0x5BE DUP4 DUP6 PUSH2 0x1028 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE CALLER DUP1 DUP5 MSTORE PUSH1 0x7 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP2 DUP3 ADD SSTORE SLOAD PUSH2 0x640 SWAP2 PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 ADDRESS DUP7 PUSH2 0xBA9 JUMP JUMPDEST CALLER PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 PUSH2 0x66E DUP2 DUP8 PUSH2 0x1028 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x4C6 PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x69F PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x50656E616C7479206D617820333025 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 PUSH2 0x72E DUP4 TIMESTAMP PUSH2 0x1081 JUMP JUMPDEST PUSH2 0x738 SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x746 PUSH2 0xB4F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x7C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x321 SWAP1 PUSH2 0xFFD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CC DUP3 PUSH2 0x996 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x6 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD SWAP1 SWAP2 POP TIMESTAMP LT ISZERO PUSH2 0x851 JUMPI PUSH1 0x0 DUP1 PUSH2 0x825 DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0xBE7 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x84A SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0x4C1 DUP5 DUP7 PUSH2 0x1028 JUMP JUMPDEST POP POP PUSH2 0x876 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP3 MLOAD PUSH2 0x876 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0x4C1 SWAP1 DUP6 SWAP1 PUSH2 0x1028 JUMP JUMPDEST POP POP PUSH2 0x4DC PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x88A PUSH2 0xAA3 JUMP JUMPDEST TIMESTAMP PUSH1 0x5 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x8A5 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0x8E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x41697264726F70206D617820323025 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0x713 JUMP JUMPDEST PUSH2 0x925 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x98A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x321 JUMP JUMPDEST PUSH2 0x993 DUP2 PUSH2 0xAFD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x9B1 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xC3F JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0x9C2 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x72E SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0x9E4 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x72E SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105A5C991C9BDC081B9BDD081CDD185C9D1959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xA9E SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xC64 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xBA2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xBE1 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0xA67 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xBFB SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0xC05 SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0xC0F SWAP1 DUP6 PUSH2 0x1081 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xC20 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0xC2A SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0xC34 SWAP1 DUP6 PUSH2 0x1081 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH2 0xC50 DUP4 TIMESTAMP PUSH2 0x1081 JUMP JUMPDEST PUSH2 0x72E SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCB9 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD36 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xA9E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xCD7 SWAP2 SWAP1 PUSH2 0xF51 JUMP JUMPDEST PUSH2 0xA9E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD45 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xD4D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xDAE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xDCA SWAP2 SWAP1 PUSH2 0xFAE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE07 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE0C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xE1D DUP8 DUP4 DUP4 DUP8 PUSH2 0xE28 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xE94 JUMPI DUP3 MLOAD PUSH2 0xE8D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xE8D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST POP DUP2 PUSH2 0xD45 JUMP JUMPDEST PUSH2 0xD45 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0xEA9 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x321 SWAP2 SWAP1 PUSH2 0xFCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1C PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xF4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xFC0 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1098 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xFE9 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1098 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x14DD185ADA5B99C81B9BDD08199BDD5B99 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x103B JUMPI PUSH2 0x103B PUSH2 0x10C4 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x105D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x107C JUMPI PUSH2 0x107C PUSH2 0x10C4 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1093 JUMPI PUSH2 0x1093 PUSH2 0x10C4 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10B3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x109B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xBE1 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT DUP4 0x5D 0xC6 CODECOPY PUSH30 0x34D21D228BA39472B06ECAEE9FFA3630A155E7B463D6E978263D64736F6C PUSH4 0x43000807 STOP CALLER ",
							"sourceMap": "247:8846:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6602:931;;;:::i;:::-;;;;;;7632:4:8;7674:3;7663:9;7659:19;7651:27;;7711:6;7705:13;7694:9;7687:32;7775:4;7767:6;7763:17;7757:24;7750:4;7739:9;7735:20;7728:54;7829:4;7821:6;7817:17;7811:24;7879:12;7873:19;7866:4;7855:9;7851:20;7844:49;7953:4;7939:12;7935:23;7929:30;7924:2;7913:9;7909:18;7902:58;8021:4;8007:12;8003:23;7997:30;7991:3;7980:9;7976:19;7969:59;8089:2;8075:12;8071:21;8065:28;8059:3;8048:9;8044:19;8037:57;8155:3;8141:12;8137:22;8131:29;8125:3;8114:9;8110:19;8103:58;8222:3;8208:12;8204:22;8198:29;8192:3;8181:9;8177:19;8170:58;8289:3;8275:12;8271:22;8265:29;8259:3;8248:9;8244:19;8237:58;;7478:823;;;;;6602:931:7;;;;;;;;625:25;;;;;;;;;;;;2336:14:8;;2329:22;2311:41;;2299:2;2284:18;625:25:7;2171:187:8;8396:695:7;;;:::i;:::-;;1831:101:0;;;:::i;2931:1167:7:-;;;;;;:::i;:::-;;:::i;560:26::-;;;;;;;;;8452:25:8;;;8440:2;8425:18;560:26:7;8306:177:8;4104:266:7;;;;;;:::i;:::-;;:::i;657:28::-;;;;;;;;-1:-1:-1;;;;;657:28:7;;;;;;-1:-1:-1;;;;;1468:32:8;;;1450:51;;1438:2;1423:18;657:28:7;1304:203:8;1201:85:0;1273:6;;-1:-1:-1;;;;;1273:6:0;1201:85;;7970:95:7;8043:15;7970:95;;8071:134;;;;;;:::i;:::-;;:::i;592:27::-;;;;;;5628:968;;;:::i;521:33::-;;;;;;7645:120;;;:::i;7771:193::-;;;;;;:::i;:::-;;:::i;2081:198:0:-;;;;;;:::i;:::-;;:::i;6602:931:7:-;6645:21;;:::i;:::-;6717:10;6678:23;6704:24;;;:12;:24;;;;;;;;;6678:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6738:52;;;;-1:-1:-1;;;6738:52:7;;;;;;;:::i;:::-;;;;;;;;;6832:32;;;;;;;;6800:29;6832:32;;;;;;;;;;;;;;;;6892:33;6853:10;6892:21;:33::i;:::-;6875:50;;6968:15;6940:7;:13;;;:25;;;:43;6936:214;;;7134:4;7112:18;;7103:6;:27;;;;:::i;:::-;7102:36;;;;:::i;:::-;7055:18;;7035:17;;7077:4;;7035:38;;;:::i;:::-;7034:47;;;;:::i;:::-;7033:106;;;;:::i;:::-;6999:15;;;:140;6936:214;7208:1;7164:41;7178:10;:26;;;7164:13;:41::i;:::-;:45;7160:249;;;7225:15;7243:36;7261:10;:17;;;7243;:36::i;:::-;7293:13;;;;:30;;:40;-1:-1:-1;7160:249:7;;;7364:13;;;;7397:1;7364:30;;;;:34;7160:249;7419:13;;;;:23;;:32;7484:17;;7461:40;;7419:7;6602:931;-1:-1:-1;6602:931:7:o;8396:695::-;2575:21;:19;:21::i;:::-;8549:10:::1;8509:24;8536::::0;;;:12:::1;:24;::::0;;;;8579:17;;8571:52:::1;;;;-1:-1:-1::0;;;8571:52:7::1;;;;;;;:::i;:::-;8633:19;8655:41;8669:10;:26;;;8655:13;:41::i;:::-;8711:17:::0;;8633:63;;-1:-1:-1;8711:21:7;8707:378:::1;;8756:16:::0;8748:50:::1;;;::::0;-1:-1:-1;;;8748:50:7;;5167:2:8;8748:50:7::1;::::0;::::1;5149:21:8::0;5206:2;5186:18;;;5179:30;-1:-1:-1;;;5225:18:8;;;5218:51;5286:18;;8748:50:7::1;4965:345:8::0;8748:50:7::1;8843:1;8813:27;::::0;::::1;:31:::0;8887:15:::1;8858:26;::::0;;::::1;:44:::0;;;;8964:13;9042:17;;8917:157:::1;::::0;8964:13:::1;::::0;::::1;-1:-1:-1::0;;;;;8964:13:7::1;::::0;8996:10:::1;::::0;9024:36:::1;::::0;:17:::1;:36::i;:::-;8917:22;:157::i;:::-;8447:644;;8396:695::o:0;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;2931:1167:7:-;2261:21:1;:19;:21::i;:::-;3219:10:7::1;3206:24;::::0;;;:12:::1;:24;::::0;;;;:31;:36;3198:65:::1;;;::::0;-1:-1:-1;;;3198:65:7;;2953:2:8;3198:65:7::1;::::0;::::1;2935:21:8::0;2992:2;2972:18;;;2965:30;-1:-1:-1;;;3011:18:8;;;3004:46;3067:18;;3198:65:7::1;2751:340:8::0;3198:65:7::1;3281:27;::::0;;;:14:::1;:27;::::0;;;;;3273:62:::1;;;::::0;-1:-1:-1;;;3273:62:7;;5517:2:8;3273:62:7::1;::::0;::::1;5499:21:8::0;5556:2;5536:18;;;5529:30;-1:-1:-1;;;5575:18:8;;;5568:47;5632:18;;3273:62:7::1;5315:341:8::0;3273:62:7::1;3624:183;::::0;;::::1;::::0;::::1;::::0;;;;;3453:15:::1;3624:183;::::0;;::::1;::::0;;;3433:17:::1;3686:27:::0;;;:14:::1;:27:::0;;;;;;;3624:183;;;;;;;;;;3728:23:::1;3453:15:::0;3701:11;3728:23:::1;:::i;:::-;3624:183:::0;;3766:1:::1;3624:183;::::0;;::::1;::::0;;;;;;;;;;;;;;;;;3610:10:::1;3597:24:::0;;;:12:::1;:24:::0;;;;;;:210;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;3865:13;3818:142:::1;::::0;3865:13:::1;::::0;;::::1;-1:-1:-1::0;;;;;3865:13:7::1;::::0;3925:4:::1;3944:6:::0;3818:26:::1;:142::i;:::-;4034:10;4027:64;4046:6:::0;4054:9;4066:23:::1;4054:9:::0;4066:11;:23:::1;:::i;:::-;4027:64;::::0;;8690:25:8;;;8746:2;8731:18;;8724:34;;;;8774:18;;;8767:34;8678:2;8663:18;4027:64:7::1;;;;;;;3005:1093;2303:20:1::0;1716:1;2809:7;:22;2629:209;4104:266:7;1094:13:0;:11;:13::i;:::-;4267:2:7::1;4257:6;:12;;4249:40;;;::::0;-1:-1:-1;;;4249:40:7;;5863:2:8;4249:40:7::1;::::0;::::1;5845:21:8::0;5902:2;5882:18;;;5875:30;-1:-1:-1;;;5921:18:8;;;5914:45;5976:18;;4249:40:7::1;5661:339:8::0;4249:40:7::1;4299:18;:27:::0;;;4341:22:::1;::::0;8452:25:8;;;4341:22:7::1;::::0;8440:2:8;8425:18;4341:22:7::1;;;;;;;;4104:266:::0;:::o;8071:134::-;8134:7;8192:6;8161:27;8179:9;8161:15;:27;:::i;:::-;8160:38;;;;:::i;:::-;8153:45;8071:134;-1:-1:-1;;8071:134:7:o;5628:968::-;2261:21:1;:19;:21::i;:::-;5832:10:7::1;5793:23;5819:24:::0;;;:12:::1;:24;::::0;;;;;;;;5793:50;;::::1;::::0;::::1;::::0;;;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;;;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;;::::0;;;;;5853:52:::1;;;;-1:-1:-1::0;;;5853:52:7::1;;;;;;;:::i;:::-;5916:14;5933:33;5955:10;5933:21;:33::i;:::-;5996:10;5983:24;::::0;;;:12:::1;:24;::::0;;;;5976:31;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;;::::0;6022:22:::1;::::0;::::1;::::0;5916:50;;-1:-1:-1;6047:15:7::1;-1:-1:-1::0;6018:572:7::1;;;6096:22;6136::::0;6175:55:::1;6204:10;:17;;;6223:6;6175:28;:55::i;:::-;6292:13;::::0;6078:152;;-1:-1:-1;6078:152:7;-1:-1:-1;6245:154:7::1;::::0;6292:13:::1;::::0;::::1;-1:-1:-1::0;;;;;6292:13:7::1;6324:10;6353:31;6078:152:::0;;6353:31:::1;:::i;6245:154::-;6064:346;;6018:572;;;6477:13;::::0;6538:17;;6430:149:::1;::::0;6477:13:::1;::::0;::::1;-1:-1:-1::0;;;;;6477:13:7::1;::::0;6509:10:::1;::::0;6538:26:::1;::::0;6558:6;;6538:26:::1;:::i;6430:149::-;5675:921;;2303:20:1::0;1716:1;2809:7;:22;2629:209;7645:120:7;1094:13:0;:11;:13::i;:::-;7713:15:7::1;7698:12;:30:::0;7738:13:::1;:20:::0;;-1:-1:-1;;7738:20:7::1;7754:4;7738:20;::::0;;7645:120::o;7771:193::-;1094:13:0;:11;:13::i;:::-;7867:3:7::1;7857:6;:13;;7849:41;;;::::0;-1:-1:-1;;;7849:41:7;;6207:2:8;7849:41:7::1;::::0;::::1;6189:21:8::0;6246:2;6226:18;;;6219:30;-1:-1:-1;;;6265:18:8;;;6258:45;6320:18;;7849:41:7::1;6005:339:8::0;7849:41:7::1;7900:11;:20:::0;;;7935:22:::1;::::0;8452:25:8;;;7935:22:7::1;::::0;8440:2:8;8425:18;7935:22:7::1;8306:177:8::0;2081:198:0;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;3298:2:8;2161:73:0::1;::::0;::::1;3280:21:8::0;3337:2;3317:18;;;3310:30;3376:34;3356:18;;;3349:62;-1:-1:-1;;;3427:18:8;;;3420:36;3473:19;;2161:73:0::1;3096:402:8::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;4613:367:7:-;4716:7;4969:4;4922:43;4948:10;:16;;;4922:25;:43::i;:::-;4883:20;;;;4847:17;;:56;;4883:20;4847:56;:::i;:::-;:118;;;;:::i;8211:179::-;8306:7;8375:8;8367:4;8352:11;;8338;:25;;;;:::i;:::-;8337:34;;;;:::i;2415:115::-;2478:13;;;;:21;;:13;:21;2470:53;;;;-1:-1:-1;;;2470:53:7;;4458:2:8;2470:53:7;;;4440:21:8;4497:2;4477:18;;;4470:30;-1:-1:-1;;;4516:18:8;;;4509:49;4575:18;;2470:53:7;4256:343:8;763:205:4;902:58;;-1:-1:-1;;;;;2084:32:8;;902:58:4;;;2066:51:8;2133:18;;;2126:34;;;875:86:4;;895:5;;-1:-1:-1;;;925:23:4;2039:18:8;;902:58:4;;;;-1:-1:-1;;902:58:4;;;;;;;;;;;;;;-1:-1:-1;;;;;902:58:4;-1:-1:-1;;;;;;902:58:4;;;;;;;;;;875:19;:86::i;:::-;763:205;;;:::o;1359:130:0:-;1273:6;;-1:-1:-1;;;;;1273:6:0;719:10:6;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;4806:2:8;1414:68:0;;;4788:21:8;;;4825:18;;;4818:30;4884:34;4864:18;;;4857:62;4936:18;;1414:68:0;4604:356:8;2433:187:0;2525:6;;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;2336:287:1:-;1759:1;2468:7;;:19;;2460:63;;;;-1:-1:-1;;;2460:63:1;;7320:2:8;2460:63:1;;;7302:21:8;7359:2;7339:18;;;7332:30;7398:33;7378:18;;;7371:61;7449:18;;2460:63:1;7118:355:8;2460:63:1;1759:1;2598:7;:18;2336:287::o;974:241:4:-;1139:68;;-1:-1:-1;;;;;1770:15:8;;;1139:68:4;;;1752:34:8;1822:15;;1802:18;;;1795:43;1854:18;;;1847:34;;;1112:96:4;;1132:5;;-1:-1:-1;;;1162:27:4;1687:18:8;;1139:68:4;1512:375:8;1112:96:4;974:241;;;;:::o;4986:295:7:-;5103:7;5112;5198:4;5176:18;;5167:6;:27;;;;:::i;:::-;5166:36;;;;:::i;:::-;5156:47;;:6;:47;:::i;:::-;5259:4;5237:18;;5228:6;:27;;;;:::i;:::-;5227:36;;;;:::i;:::-;5217:47;;:6;:47;:::i;:::-;5135:139;;;;4986:295;;;;;:::o;4376:231::-;4473:7;4592:8;4557:23;4575:5;4557:15;:23;:::i;:::-;4556:32;;4584:4;4556:32;:::i;3747:706:4:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:4;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:4;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:4;;6909:2:8;4351:85:4;;;6891:21:8;6948:2;6928:18;;;6921:30;6987:34;6967:18;;;6960:62;-1:-1:-1;;;7038:18:8;;;7031:40;7088:19;;4351:85:4;6707:406:8;3873:223:5;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:5:o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:5;;4051:2:8;5149:81:5;;;4033:21:8;4090:2;4070:18;;;4063:30;4129:34;4109:18;;;4102:62;-1:-1:-1;;;4180:18:8;;;4173:36;4226:19;;5149:81:5;3849:402:8;5149:81:5;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:5;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:5:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:17;;7697:286;;-1:-1:-1;;;;;1465:19:5;;;7908:60;;;;-1:-1:-1;;;7908:60:5;;6551:2:8;7908:60:5;;;6533:21:8;6590:2;6570:18;;;6563:30;6629:31;6609:18;;;6602:59;6678:18;;7908:60:5;6349:353:8;7908:60:5;-1:-1:-1;8003:10:5;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:5;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:286:8:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;168:23;;-1:-1:-1;;;;;220:31:8;;210:42;;200:70;;266:1;263;256:12;200:70;289:5;14:286;-1:-1:-1;;;14:286:8:o;305:277::-;372:6;425:2;413:9;404:7;400:23;396:32;393:52;;;441:1;438;431:12;393:52;473:9;467:16;526:5;519:13;512:21;505:5;502:32;492:60;;548:1;545;538:12;587:180;646:6;699:2;687:9;678:7;674:23;670:32;667:52;;;715:1;712;705:12;667:52;-1:-1:-1;738:23:8;;587:180;-1:-1:-1;587:180:8:o;772:248::-;840:6;848;901:2;889:9;880:7;876:23;872:32;869:52;;;917:1;914;907:12;869:52;-1:-1:-1;;940:23:8;;;1010:2;995:18;;;982:32;;-1:-1:-1;772:248:8:o;1025:274::-;1154:3;1192:6;1186:13;1208:53;1254:6;1249:3;1242:4;1234:6;1230:17;1208:53;:::i;:::-;1277:16;;;;;1025:274;-1:-1:-1;;1025:274:8:o;2363:383::-;2512:2;2501:9;2494:21;2475:4;2544:6;2538:13;2587:6;2582:2;2571:9;2567:18;2560:34;2603:66;2662:6;2657:2;2646:9;2642:18;2637:2;2629:6;2625:15;2603:66;:::i;:::-;2730:2;2709:15;-1:-1:-1;;2705:29:8;2690:45;;;;2737:2;2686:54;;2363:383;-1:-1:-1;;2363:383:8:o;3503:341::-;3705:2;3687:21;;;3744:2;3724:18;;;3717:30;-1:-1:-1;;;3778:2:8;3763:18;;3756:47;3835:2;3820:18;;3503:341::o;8812:128::-;8852:3;8883:1;8879:6;8876:1;8873:13;8870:39;;;8889:18;;:::i;:::-;-1:-1:-1;8925:9:8;;8812:128::o;8945:217::-;8985:1;9011;9001:132;;9055:10;9050:3;9046:20;9043:1;9036:31;9090:4;9087:1;9080:15;9118:4;9115:1;9108:15;9001:132;-1:-1:-1;9147:9:8;;8945:217::o;9167:168::-;9207:7;9273:1;9269;9265:6;9261:14;9258:1;9255:21;9250:1;9243:9;9236:17;9232:45;9229:71;;;9280:18;;:::i;:::-;-1:-1:-1;9320:9:8;;9167:168::o;9340:125::-;9380:4;9408:1;9405;9402:8;9399:34;;;9413:18;;:::i;:::-;-1:-1:-1;9450:9:8;;9340:125::o;9470:258::-;9542:1;9552:113;9566:6;9563:1;9560:13;9552:113;;;9642:11;;;9636:18;9623:11;;;9616:39;9588:2;9581:10;9552:113;;;9683:6;9680:1;9677:13;9674:48;;;-1:-1:-1;;9718:1:8;9700:16;;9693:27;9470:258::o;9733:127::-;9794:10;9789:3;9785:20;9782:1;9775:31;9825:4;9822:1;9815:15;9849:4;9846:1;9839:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "873600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"airdropRate()": "2340",
								"airdropSince()": "2384",
								"airdropStatus()": "2356",
								"blockTimestamp()": "236",
								"calculateWeek(uint256)": "487",
								"changeAirdropPercentage(uint256)": "25679",
								"changePenaltyFee(uint256)": "25647",
								"claimAirdrop()": "infinite",
								"hasStake()": "infinite",
								"owner()": "2354",
								"renounceOwnership()": "infinite",
								"stake(uint256,uint256)": "infinite",
								"stakingPenaltyRate()": "2339",
								"startAirdrop()": "48703",
								"token_address()": "2437",
								"transferOwnership(address)": "28411",
								"withdrawStake()": "infinite"
							},
							"internal": {
								"_calculateAirdrop(uint256)": "infinite",
								"_calculateStakeReward(struct Staking.Stake memory)": "infinite",
								"_calculateStakingDuration(uint256)": "243",
								"_calculateStakingWithPenalty(uint256,uint256)": "infinite",
								"_checkAirdropStatus()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "CODESIZE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 692,
									"end": 993,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "tag",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 692,
									"end": 993,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1821,
									"end": 1828,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 6
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 812,
									"end": 814,
									"name": "PUSH",
									"source": 7,
									"value": "F"
								},
								{
									"begin": 791,
									"end": 809,
									"name": "PUSH",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 791,
									"end": 814,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 838,
									"end": 840,
									"name": "PUSH",
									"source": 7,
									"value": "50"
								},
								{
									"begin": 824,
									"end": 835,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 824,
									"end": 840,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 851,
									"end": 864,
									"name": "PUSH",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 851,
									"end": 872,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "PUSH",
									"source": 7,
									"value": "100"
								},
								{
									"begin": 851,
									"end": 872,
									"name": "MUL",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "100"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "OR",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 851,
									"end": 872,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 883,
									"end": 897,
									"name": "PUSH",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 883,
									"end": 906,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 883,
									"end": 906,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 883,
									"end": 906,
									"name": "PUSH",
									"source": 7,
									"value": "A1EF5B42F18533D67A183A193EA6C3FABFAA3BDABC3FC0E3F65B19B517DF6E8C"
								},
								{
									"begin": 883,
									"end": 910,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 947,
									"end": 948,
									"name": "PUSH",
									"source": 7,
									"value": "7"
								},
								{
									"begin": 920,
									"end": 944,
									"name": "PUSH",
									"source": 7,
									"value": "89CFCBF844E824FEEE5F634CBC488382291F3C9E0DE5905F3C30812390DD832"
								},
								{
									"begin": 920,
									"end": 948,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 973,
									"end": 981,
									"name": "PUSH",
									"source": 7,
									"value": "1E13380"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 958,
									"end": 982,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 985,
									"end": 986,
									"name": "PUSH",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 958,
									"end": 982,
									"name": "PUSH",
									"source": 7,
									"value": "DC083EB4DA7563BBD761324B5158D9D40AF7C7174AFE39B0B31A7577C44FC33B"
								},
								{
									"begin": 958,
									"end": 986,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "17"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 8,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 8
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 8,
									"value": "17"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 247,
									"end": 9093,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122010835dc6397d34d21d228ba39472b06ecaee9ffa3630a155e7b463d6e978263d64736f6c63430008070033",
									".code": [
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "8DA5CB5B"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "BED9D861"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "BED9D861"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "CB79C2E1"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "D2A569C3"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "D5DBDF1B"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "F2FDE38B"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "tag",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "8DA5CB5B"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "ADB61832"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "B5D9DF83"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "B87DA76D"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "7B0472F0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "7B0472F0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "8891CF0D"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "8C63F97F"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "8C8E8FEE"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "10486B6A"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "2CF1A5FB"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "5B88349D"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "715018A6"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 247,
											"end": 9093,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "tag",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7632,
											"end": 7636,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7674,
											"end": 7677,
											"name": "PUSH",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 7663,
											"end": 7672,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7659,
											"end": 7678,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7651,
											"end": 7678,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7651,
											"end": 7678,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7711,
											"end": 7717,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7718,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7694,
											"end": 7703,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7687,
											"end": 7719,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7775,
											"end": 7779,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7767,
											"end": 7773,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7763,
											"end": 7780,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7757,
											"end": 7781,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7750,
											"end": 7754,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7739,
											"end": 7748,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7735,
											"end": 7755,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7728,
											"end": 7782,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7829,
											"end": 7833,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7821,
											"end": 7827,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7817,
											"end": 7834,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7811,
											"end": 7835,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7879,
											"end": 7891,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7873,
											"end": 7892,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7866,
											"end": 7870,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7855,
											"end": 7864,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7851,
											"end": 7871,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7844,
											"end": 7893,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7953,
											"end": 7957,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7939,
											"end": 7951,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7935,
											"end": 7958,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7929,
											"end": 7959,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7924,
											"end": 7926,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 7913,
											"end": 7922,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7909,
											"end": 7927,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7960,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8021,
											"end": 8025,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8007,
											"end": 8019,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8003,
											"end": 8026,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7997,
											"end": 8027,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7991,
											"end": 7994,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 7980,
											"end": 7989,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7976,
											"end": 7995,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7969,
											"end": 8028,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8089,
											"end": 8091,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 8075,
											"end": 8087,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8071,
											"end": 8092,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8065,
											"end": 8093,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8059,
											"end": 8062,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 8048,
											"end": 8057,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8044,
											"end": 8063,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8037,
											"end": 8094,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8155,
											"end": 8158,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 8141,
											"end": 8153,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8137,
											"end": 8159,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8131,
											"end": 8160,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8125,
											"end": 8128,
											"name": "PUSH",
											"source": 8,
											"value": "C0"
										},
										{
											"begin": 8114,
											"end": 8123,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8110,
											"end": 8129,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8103,
											"end": 8161,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8222,
											"end": 8225,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 8208,
											"end": 8220,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8204,
											"end": 8226,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8198,
											"end": 8227,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8192,
											"end": 8195,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 8181,
											"end": 8190,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8177,
											"end": 8196,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8170,
											"end": 8228,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8289,
											"end": 8292,
											"name": "PUSH",
											"source": 8,
											"value": "C0"
										},
										{
											"begin": 8275,
											"end": 8287,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8271,
											"end": 8293,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8265,
											"end": 8294,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8259,
											"end": 8262,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 8248,
											"end": 8257,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8244,
											"end": 8263,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8237,
											"end": 8295,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8237,
											"end": 8295,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7478,
											"end": 8301,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7478,
											"end": 8301,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7478,
											"end": 8301,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7478,
											"end": 8301,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7478,
											"end": 8301,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 625,
											"end": 650,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2336,
											"end": 2350,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2336,
											"end": 2350,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2329,
											"end": 2351,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2311,
											"end": 2352,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2311,
											"end": 2352,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2299,
											"end": 2301,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2302,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 625,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 2171,
											"end": 2358,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "tag",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "tag",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "tag",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 560,
											"end": 586,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 560,
											"end": 586,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8452,
											"end": 8477,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8452,
											"end": 8477,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8452,
											"end": 8477,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8440,
											"end": 8442,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8425,
											"end": 8443,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 560,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 8306,
											"end": 8483,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "tag",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 657,
											"end": 685,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "tag",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 657,
											"end": 685,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1468,
											"end": 1500,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1468,
											"end": 1500,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1468,
											"end": 1500,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1450,
											"end": 1501,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1450,
											"end": 1501,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1438,
											"end": 1440,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1423,
											"end": 1441,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 657,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 1304,
											"end": 1507,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8043,
											"end": 8058,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 7970,
											"end": 8065,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "tag",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "tag",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 592,
											"end": 619,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 592,
											"end": 619,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "tag",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 521,
											"end": 554,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 521,
											"end": 554,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "tag",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "tag",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6645,
											"end": 6666,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 6645,
											"end": 6666,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 6645,
											"end": 6666,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6645,
											"end": 6666,
											"name": "tag",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 6645,
											"end": 6666,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6717,
											"end": 6727,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6701,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6716,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6704,
											"end": 6728,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6728,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "tag",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "tag",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 6738,
											"end": 6790,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6800,
											"end": 6829,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6832,
											"end": 6864,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6892,
											"end": 6925,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 6853,
											"end": 6863,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6892,
											"end": 6913,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 6892,
											"end": 6925,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6892,
											"end": 6925,
											"name": "tag",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 6892,
											"end": 6925,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6875,
											"end": 6925,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6875,
											"end": 6925,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6968,
											"end": 6983,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6947,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6953,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6940,
											"end": 6953,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6953,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6965,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 6940,
											"end": 6965,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6965,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6940,
											"end": 6983,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 6936,
											"end": 7150,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6936,
											"end": 7150,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 6936,
											"end": 7150,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7134,
											"end": 7138,
											"name": "PUSH",
											"source": 7,
											"value": "3E8"
										},
										{
											"begin": 7112,
											"end": 7130,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 7112,
											"end": 7130,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7109,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "tag",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "tag",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 7102,
											"end": 7138,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7055,
											"end": 7073,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 7055,
											"end": 7073,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 7035,
											"end": 7052,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7035,
											"end": 7052,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7077,
											"end": 7081,
											"name": "PUSH",
											"source": 7,
											"value": "3E8"
										},
										{
											"begin": 7077,
											"end": 7081,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "tag",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 7035,
											"end": 7073,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "tag",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 7034,
											"end": 7081,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "tag",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 7033,
											"end": 7139,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7014,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6999,
											"end": 7014,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7014,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7139,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6936,
											"end": 7150,
											"name": "tag",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 6936,
											"end": 7150,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7208,
											"end": 7209,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7164,
											"end": 7205,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 7178,
											"end": 7188,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7178,
											"end": 7204,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 7178,
											"end": 7204,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7178,
											"end": 7204,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7164,
											"end": 7177,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 7164,
											"end": 7205,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7164,
											"end": 7205,
											"name": "tag",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 7164,
											"end": 7205,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7164,
											"end": 7209,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7225,
											"end": 7240,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7243,
											"end": 7279,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 7261,
											"end": 7271,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7261,
											"end": 7278,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7261,
											"end": 7278,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7261,
											"end": 7278,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7243,
											"end": 7260,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 7243,
											"end": 7279,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7243,
											"end": 7279,
											"name": "tag",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 7243,
											"end": 7279,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7306,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7293,
											"end": 7306,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7306,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7306,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7323,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 7293,
											"end": 7323,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7293,
											"end": 7333,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "tag",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7377,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7364,
											"end": 7377,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7377,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7377,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7397,
											"end": 7398,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7364,
											"end": 7394,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 7364,
											"end": 7394,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7394,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7394,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7364,
											"end": 7398,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "tag",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 7160,
											"end": 7409,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7432,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7419,
											"end": 7432,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7432,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7432,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7442,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 7419,
											"end": 7442,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7451,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7484,
											"end": 7501,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7484,
											"end": 7501,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7461,
											"end": 7501,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7461,
											"end": 7501,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7419,
											"end": 7426,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6602,
											"end": 7533,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "tag",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2575,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 2575,
											"end": 2594,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 2575,
											"end": 2596,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2575,
											"end": 2596,
											"name": "tag",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 2575,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8549,
											"end": 8559,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 8509,
											"end": 8533,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8548,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8560,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 8579,
											"end": 8596,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8579,
											"end": 8596,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "tag",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 8571,
											"end": 8623,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8633,
											"end": 8652,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8655,
											"end": 8696,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 8669,
											"end": 8679,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8669,
											"end": 8695,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 8669,
											"end": 8695,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8669,
											"end": 8695,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8655,
											"end": 8668,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 8655,
											"end": 8696,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8655,
											"end": 8696,
											"name": "tag",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 8655,
											"end": 8696,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8711,
											"end": 8728,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8711,
											"end": 8728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8633,
											"end": 8696,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8633,
											"end": 8696,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8711,
											"end": 8732,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8707,
											"end": 9085,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "111"
										},
										{
											"begin": 8707,
											"end": 9085,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8756,
											"end": 8772,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5167,
											"end": 5169,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5149,
											"end": 5170,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5206,
											"end": 5208,
											"name": "PUSH",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 5186,
											"end": 5204,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5186,
											"end": 5204,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5186,
											"end": 5204,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5179,
											"end": 5209,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "436C61696D61626C65206F6E63652061207765656B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "58"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5225,
											"end": 5243,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 5225,
											"end": 5243,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5225,
											"end": 5243,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5218,
											"end": 5269,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5286,
											"end": 5304,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5286,
											"end": 5304,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 4965,
											"end": 5310,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "tag",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 8748,
											"end": 8798,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8843,
											"end": 8844,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8813,
											"end": 8840,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 8813,
											"end": 8840,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8813,
											"end": 8840,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8813,
											"end": 8844,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 8887,
											"end": 8902,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8884,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 8858,
											"end": 8884,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8884,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8884,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8902,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8902,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8902,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8858,
											"end": 8902,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 9042,
											"end": 9059,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9042,
											"end": 9059,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8917,
											"end": 9074,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "111"
										},
										{
											"begin": 8917,
											"end": 9074,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8964,
											"end": 8977,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8996,
											"end": 9006,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 8996,
											"end": 9006,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9024,
											"end": 9060,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 9024,
											"end": 9060,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9024,
											"end": 9041,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 9024,
											"end": 9060,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9024,
											"end": 9060,
											"name": "tag",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 9024,
											"end": 9060,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8917,
											"end": 8939,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 8917,
											"end": 9074,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8917,
											"end": 9074,
											"name": "tag",
											"source": 7,
											"value": "111"
										},
										{
											"begin": 8917,
											"end": 9074,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8447,
											"end": 9091,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8447,
											"end": 9091,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8396,
											"end": 9091,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "tag",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 2931,
											"end": 4098,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 2261,
											"end": 2280,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "tag",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3219,
											"end": 3229,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3218,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3230,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3237,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3206,
											"end": 3242,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2953,
											"end": 2955,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2935,
											"end": 2956,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2992,
											"end": 2994,
											"name": "PUSH",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 2972,
											"end": 2990,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2972,
											"end": 2990,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2972,
											"end": 2990,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2965,
											"end": 2995,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2AB9B2B91034B990309029BA30B5B2B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3011,
											"end": 3029,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3011,
											"end": 3029,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3011,
											"end": 3029,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3004,
											"end": 3050,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3067,
											"end": 3085,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3067,
											"end": 3085,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 2751,
											"end": 3091,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "tag",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 3198,
											"end": 3263,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3281,
											"end": 3308,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5517,
											"end": 5519,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5499,
											"end": 5520,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5556,
											"end": 5558,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 5536,
											"end": 5554,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5536,
											"end": 5554,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5536,
											"end": 5554,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5529,
											"end": 5559,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "141858DAD859D9481B9BDD08119BDD5B99"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5575,
											"end": 5593,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 5575,
											"end": 5593,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5575,
											"end": 5593,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5568,
											"end": 5615,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5632,
											"end": 5650,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5632,
											"end": 5650,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 5315,
											"end": 5656,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "tag",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3453,
											"end": 3468,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3433,
											"end": 3450,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3700,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3713,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 3453,
											"end": 3468,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3701,
											"end": 3712,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "tag",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 3728,
											"end": 3751,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3766,
											"end": 3767,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3624,
											"end": 3807,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3610,
											"end": 3620,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3609,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3621,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3597,
											"end": 3807,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3818,
											"end": 3960,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 3818,
											"end": 3960,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3865,
											"end": 3878,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3925,
											"end": 3929,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 3944,
											"end": 3950,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3818,
											"end": 3844,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 3818,
											"end": 3960,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3818,
											"end": 3960,
											"name": "tag",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 3818,
											"end": 3960,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4034,
											"end": 4044,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "PUSH",
											"source": 7,
											"value": "B4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED"
										},
										{
											"begin": 4046,
											"end": 4052,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4054,
											"end": 4063,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "133"
										},
										{
											"begin": 4054,
											"end": 4063,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4066,
											"end": 4077,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "tag",
											"source": 7,
											"value": "133"
										},
										{
											"begin": 4066,
											"end": 4089,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8690,
											"end": 8715,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 8690,
											"end": 8715,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8690,
											"end": 8715,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8746,
											"end": 8748,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8731,
											"end": 8749,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8731,
											"end": 8749,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8724,
											"end": 8758,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8724,
											"end": 8758,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8724,
											"end": 8758,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8724,
											"end": 8758,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8774,
											"end": 8792,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8774,
											"end": 8792,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8774,
											"end": 8792,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8767,
											"end": 8801,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8678,
											"end": 8680,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 8663,
											"end": 8681,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4091,
											"name": "LOG2",
											"source": 7
										},
										{
											"begin": 3005,
											"end": 4098,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 1716,
											"end": 1717,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2809,
											"end": 2816,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2629,
											"end": 2838,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "tag",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4267,
											"end": 4269,
											"name": "PUSH",
											"source": 7,
											"value": "1E"
										},
										{
											"begin": 4257,
											"end": 4263,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4257,
											"end": 4269,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 4257,
											"end": 4269,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5863,
											"end": 5865,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5845,
											"end": 5866,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5902,
											"end": 5904,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 5882,
											"end": 5900,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5882,
											"end": 5900,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5882,
											"end": 5900,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5875,
											"end": 5905,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "50656E616C7479206D617820333025"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "88"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5921,
											"end": 5939,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 5921,
											"end": 5939,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5921,
											"end": 5939,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5914,
											"end": 5959,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5976,
											"end": 5994,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5976,
											"end": 5994,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 5661,
											"end": 6000,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "tag",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 4249,
											"end": 4289,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4299,
											"end": 4317,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 4299,
											"end": 4326,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4299,
											"end": 4326,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4299,
											"end": 4326,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8452,
											"end": 8477,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8452,
											"end": 8477,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8452,
											"end": 8477,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "PUSH",
											"source": 7,
											"value": "CFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9"
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8440,
											"end": 8442,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8425,
											"end": 8443,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "tag",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4341,
											"end": 4363,
											"name": "LOG1",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4370,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "tag",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8134,
											"end": 8141,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8192,
											"end": 8198,
											"name": "PUSH",
											"source": 7,
											"value": "93A80"
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 8179,
											"end": 8188,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8161,
											"end": 8176,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "tag",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 8161,
											"end": 8188,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "tag",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 8160,
											"end": 8198,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8153,
											"end": 8198,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8071,
											"end": 8205,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "tag",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 5628,
											"end": 6596,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "152"
										},
										{
											"begin": 2261,
											"end": 2280,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "tag",
											"source": 1,
											"value": "152"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5832,
											"end": 5842,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5816,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5831,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5819,
											"end": 5843,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5793,
											"end": 5843,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "tag",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 5853,
											"end": 5905,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5916,
											"end": 5930,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5933,
											"end": 5966,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 5955,
											"end": 5965,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5933,
											"end": 5954,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 5933,
											"end": 5966,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5933,
											"end": 5966,
											"name": "tag",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 5933,
											"end": 5966,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5996,
											"end": 6006,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 5995,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5983,
											"end": 6007,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5976,
											"end": 6007,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 6022,
											"end": 6044,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 6022,
											"end": 6044,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6022,
											"end": 6044,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6022,
											"end": 6044,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5916,
											"end": 5966,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5916,
											"end": 5966,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6047,
											"end": 6062,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "157"
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6096,
											"end": 6118,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6136,
											"end": 6158,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6175,
											"end": 6230,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 6204,
											"end": 6214,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6204,
											"end": 6221,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6204,
											"end": 6221,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6204,
											"end": 6221,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6223,
											"end": 6229,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6175,
											"end": 6203,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 6175,
											"end": 6230,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6175,
											"end": 6230,
											"name": "tag",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 6175,
											"end": 6230,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6078,
											"end": 6230,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6078,
											"end": 6230,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6078,
											"end": 6230,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6245,
											"end": 6399,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 6245,
											"end": 6399,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6292,
											"end": 6305,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6324,
											"end": 6334,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 6353,
											"end": 6384,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 6078,
											"end": 6230,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6078,
											"end": 6230,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 6353,
											"end": 6384,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 6353,
											"end": 6384,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6245,
											"end": 6399,
											"name": "tag",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 6245,
											"end": 6399,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6064,
											"end": 6410,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6064,
											"end": 6410,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "tag",
											"source": 7,
											"value": "157"
										},
										{
											"begin": 6018,
											"end": 6590,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6538,
											"end": 6555,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6538,
											"end": 6555,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6430,
											"end": 6579,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 6430,
											"end": 6579,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6477,
											"end": 6490,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6509,
											"end": 6519,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 6509,
											"end": 6519,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6538,
											"end": 6564,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 6538,
											"end": 6564,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6558,
											"end": 6564,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6558,
											"end": 6564,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6538,
											"end": 6564,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 6538,
											"end": 6564,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6430,
											"end": 6579,
											"name": "tag",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 6430,
											"end": 6579,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5675,
											"end": 6596,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5675,
											"end": 6596,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 1716,
											"end": 1717,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2809,
											"end": 2816,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2629,
											"end": 2838,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "tag",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7713,
											"end": 7728,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 7698,
											"end": 7710,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 7698,
											"end": 7728,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7751,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7754,
											"end": 7758,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7738,
											"end": 7758,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 7645,
											"end": 7765,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "tag",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 7771,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7867,
											"end": 7870,
											"name": "PUSH",
											"source": 7,
											"value": "C8"
										},
										{
											"begin": 7857,
											"end": 7863,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7857,
											"end": 7870,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7857,
											"end": 7870,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6207,
											"end": 6209,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6189,
											"end": 6210,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6246,
											"end": 6248,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 6226,
											"end": 6244,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 6226,
											"end": 6244,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6226,
											"end": 6244,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6219,
											"end": 6249,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "41697264726F70206D617820323025"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "88"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6265,
											"end": 6283,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 6265,
											"end": 6283,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6265,
											"end": 6283,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6258,
											"end": 6303,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6320,
											"end": 6338,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 6320,
											"end": 6338,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 6005,
											"end": 6344,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "tag",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 7849,
											"end": 7890,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7900,
											"end": 7911,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7900,
											"end": 7920,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7900,
											"end": 7920,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7900,
											"end": 7920,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8452,
											"end": 8477,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8452,
											"end": 8477,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8452,
											"end": 8477,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "PUSH",
											"source": 7,
											"value": "CC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E"
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8440,
											"end": 8442,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8425,
											"end": 8443,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7935,
											"end": 7957,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 8306,
											"end": 8483,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3298,
											"end": 3300,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3280,
											"end": 3301,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3337,
											"end": 3339,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 3317,
											"end": 3335,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3317,
											"end": 3335,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3317,
											"end": 3335,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3310,
											"end": 3340,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3376,
											"end": 3410,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 3356,
											"end": 3374,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3356,
											"end": 3374,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3356,
											"end": 3374,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3349,
											"end": 3411,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3427,
											"end": 3445,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3427,
											"end": 3445,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3427,
											"end": 3445,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3456,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3473,
											"end": 3492,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 3473,
											"end": 3492,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 3096,
											"end": 3498,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 2263,
											"end": 2271,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4613,
											"end": 4980,
											"name": "tag",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 4613,
											"end": 4980,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4716,
											"end": 4723,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4969,
											"end": 4973,
											"name": "PUSH",
											"source": 7,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 4922,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 4948,
											"end": 4958,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4948,
											"end": 4964,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4948,
											"end": 4964,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4948,
											"end": 4964,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4922,
											"end": 4947,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "185"
										},
										{
											"begin": 4922,
											"end": 4965,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4922,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 4922,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4903,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4883,
											"end": 4903,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4903,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4903,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4864,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4864,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4903,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "tag",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 4847,
											"end": 4903,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8211,
											"end": 8390,
											"name": "tag",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 8211,
											"end": 8390,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8306,
											"end": 8313,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8375,
											"end": 8383,
											"name": "PUSH",
											"source": 7,
											"value": "1DFE200"
										},
										{
											"begin": 8367,
											"end": 8371,
											"name": "PUSH",
											"source": 7,
											"value": "3E8"
										},
										{
											"begin": 8352,
											"end": 8363,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8352,
											"end": 8363,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8338,
											"end": 8349,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "tag",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 8338,
											"end": 8363,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 8337,
											"end": 8371,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2415,
											"end": 2530,
											"name": "tag",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 2415,
											"end": 2530,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2499,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2499,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2478,
											"end": 2491,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2478,
											"end": 2499,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4458,
											"end": 4460,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4440,
											"end": 4461,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4497,
											"end": 4499,
											"name": "PUSH",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 4477,
											"end": 4495,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4477,
											"end": 4495,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4477,
											"end": 4495,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4470,
											"end": 4500,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "105A5C991C9BDC081B9BDD081CDD185C9D1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4516,
											"end": 4534,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4516,
											"end": 4534,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4516,
											"end": 4534,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4509,
											"end": 4558,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4575,
											"end": 4593,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4575,
											"end": 4593,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2470,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 4256,
											"end": 4599,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 763,
											"end": 968,
											"name": "tag",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2084,
											"end": 2116,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2084,
											"end": 2116,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2066,
											"end": 2117,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2133,
											"end": 2151,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 2133,
											"end": 2151,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2133,
											"end": 2151,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2126,
											"end": 2160,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2126,
											"end": 2160,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2126,
											"end": 2160,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 875,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "198"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 895,
											"end": 900,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 895,
											"end": 900,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 925,
											"end": 948,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2039,
											"end": 2057,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 2039,
											"end": 2057,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 902,
											"end": 960,
											"name": "tag",
											"source": 4,
											"value": "199"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 902,
											"end": 960,
											"name": "AND",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 875,
											"end": 894,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "201"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "tag",
											"source": 4,
											"value": "198"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4806,
											"end": 4808,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4788,
											"end": 4809,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4788,
											"end": 4809,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4788,
											"end": 4809,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4825,
											"end": 4843,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4825,
											"end": 4843,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4825,
											"end": 4843,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4818,
											"end": 4848,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4884,
											"end": 4918,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 4864,
											"end": 4882,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4864,
											"end": 4882,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4864,
											"end": 4882,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4857,
											"end": 4919,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4936,
											"end": 4954,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4936,
											"end": 4954,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 4604,
											"end": 4960,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "tag",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "211"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7320,
											"end": 7322,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7302,
											"end": 7323,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7359,
											"end": 7361,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 7339,
											"end": 7357,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 7339,
											"end": 7357,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7339,
											"end": 7357,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7332,
											"end": 7362,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7398,
											"end": 7431,
											"name": "PUSH",
											"source": 8,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 7378,
											"end": 7396,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 7378,
											"end": 7396,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7378,
											"end": 7396,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7371,
											"end": 7432,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7449,
											"end": 7467,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 7449,
											"end": 7467,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "82"
										},
										{
											"begin": 7118,
											"end": 7473,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "tag",
											"source": 1,
											"value": "211"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2598,
											"end": 2605,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2598,
											"end": 2616,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1752,
											"end": 1786,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1822,
											"end": 1837,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1822,
											"end": 1837,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1802,
											"end": 1820,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1802,
											"end": 1820,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1802,
											"end": 1820,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1795,
											"end": 1838,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1854,
											"end": 1872,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 1854,
											"end": 1872,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1854,
											"end": 1872,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1847,
											"end": 1881,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1847,
											"end": 1881,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1847,
											"end": 1881,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "215"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1162,
											"end": 1189,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1687,
											"end": 1705,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 1687,
											"end": 1705,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "199"
										},
										{
											"begin": 1512,
											"end": 1887,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "tag",
											"source": 4,
											"value": "215"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "tag",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5103,
											"end": 5110,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5112,
											"end": 5119,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5198,
											"end": 5202,
											"name": "PUSH",
											"source": 7,
											"value": "3E8"
										},
										{
											"begin": 5176,
											"end": 5194,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 5176,
											"end": 5194,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5167,
											"end": 5173,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "220"
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "tag",
											"source": 7,
											"value": "220"
										},
										{
											"begin": 5167,
											"end": 5194,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "tag",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 5166,
											"end": 5202,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5156,
											"end": 5162,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "tag",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 5156,
											"end": 5203,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5259,
											"end": 5263,
											"name": "PUSH",
											"source": 7,
											"value": "3E8"
										},
										{
											"begin": 5237,
											"end": 5255,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 5237,
											"end": 5255,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5234,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "tag",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 5228,
											"end": 5255,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "tag",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 5227,
											"end": 5263,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "225"
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5217,
											"end": 5223,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "tag",
											"source": 7,
											"value": "225"
										},
										{
											"begin": 5217,
											"end": 5264,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5135,
											"end": 5274,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5135,
											"end": 5274,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5135,
											"end": 5274,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5135,
											"end": 5274,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5281,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4376,
											"end": 4607,
											"name": "tag",
											"source": 7,
											"value": "185"
										},
										{
											"begin": 4376,
											"end": 4607,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4473,
											"end": 4480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4592,
											"end": 4600,
											"name": "PUSH",
											"source": 7,
											"value": "1E13380"
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 4575,
											"end": 4580,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4557,
											"end": 4572,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "tag",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 4557,
											"end": 4580,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4556,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 4556,
											"end": 4588,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4584,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "D3C21BCECCEDA1000000"
										},
										{
											"begin": 4556,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 4556,
											"end": 4588,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "tag",
											"source": 4,
											"value": "201"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4166,
											"end": 4189,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "231"
										},
										{
											"begin": 4220,
											"end": 4224,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4200,
											"end": 4205,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "232"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "tag",
											"source": 4,
											"value": "231"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4275,
											"end": 4296,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "198"
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4370,
											"end": 4380,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "234"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "235"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "tag",
											"source": 4,
											"value": "234"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "198"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6909,
											"end": 6911,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6891,
											"end": 6912,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6948,
											"end": 6950,
											"name": "PUSH",
											"source": 8,
											"value": "2A"
										},
										{
											"begin": 6928,
											"end": 6946,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 6928,
											"end": 6946,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6928,
											"end": 6946,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6921,
											"end": 6951,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6987,
											"end": 7021,
											"name": "PUSH",
											"source": 8,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 6967,
											"end": 6985,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 6967,
											"end": 6985,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6967,
											"end": 6985,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6960,
											"end": 7022,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7038,
											"end": 7056,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 7038,
											"end": 7056,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7038,
											"end": 7056,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7031,
											"end": 7071,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7088,
											"end": 7107,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 7088,
											"end": 7107,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 6707,
											"end": 7113,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "tag",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 4059,
											"end": 4065,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4067,
											"end": 4071,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4088,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4037,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "tag",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4030,
											"end": 4089,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "tag",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5125,
											"end": 5137,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5182,
											"end": 5187,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5157,
											"end": 5178,
											"name": "SELFBALANCE",
											"source": 5
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4051,
											"end": 4053,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4033,
											"end": 4054,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4090,
											"end": 4092,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4063,
											"end": 4093,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4129,
											"end": 4163,
											"name": "PUSH",
											"source": 8,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4102,
											"end": 4164,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C8818D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4180,
											"end": 4198,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4180,
											"end": 4198,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4180,
											"end": 4198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4173,
											"end": 4209,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4226,
											"end": 4245,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 4226,
											"end": 4245,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 3849,
											"end": 4251,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "tag",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5241,
											"end": 5253,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5255,
											"end": 5278,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5288,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5282,
											"end": 5293,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5301,
											"end": 5306,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5308,
											"end": 5312,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "248"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "3F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "250"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 5,
											"value": "250"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 5357,
											"end": 5363,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5374,
											"end": 5384,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5386,
											"end": 5398,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5330,
											"end": 5356,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "tag",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "SWAP8",
											"source": 5
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "SWAP7",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "tag",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7646,
											"end": 7658,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 7674,
											"end": 7681,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "255"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7701,
											"end": 7718,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7701,
											"end": 7718,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "259"
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "259"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6551,
											"end": 6553,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6533,
											"end": 6554,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6590,
											"end": 6592,
											"name": "PUSH",
											"source": 8,
											"value": "1D"
										},
										{
											"begin": 6570,
											"end": 6588,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 6570,
											"end": 6588,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6570,
											"end": 6588,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6563,
											"end": 6593,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6629,
											"end": 6660,
											"name": "PUSH",
											"source": 8,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 6609,
											"end": 6627,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 6609,
											"end": 6627,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6609,
											"end": 6627,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6602,
											"end": 6661,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 6696,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 6678,
											"end": 6696,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 6349,
											"end": 6702,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "tag",
											"source": 5,
											"value": "259"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8003,
											"end": 8013,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "tag",
											"source": 5,
											"value": "255"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 8052,
											"end": 8062,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8064,
											"end": 8076,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8775,
											"end": 8796,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "267"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 9003,
											"end": 9013,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8997,
											"end": 9014,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9059,
											"end": 9074,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9046,
											"end": 9056,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9042,
											"end": 9044,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 9038,
											"end": 9057,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9031,
											"end": 9075,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "tag",
											"source": 5,
											"value": "267"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9126,
											"end": 9138,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "270"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "271"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "271"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 300,
											"name": "tag",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 14,
											"end": 300,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 94,
											"end": 146,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 94,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "275"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 94,
											"end": 146,
											"name": "tag",
											"source": 8,
											"value": "275"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 168,
											"end": 191,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 168,
											"end": 191,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 220,
											"end": 251,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 220,
											"end": 251,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 210,
											"end": 252,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 210,
											"end": 252,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 200,
											"end": 270,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 200,
											"end": 270,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 266,
											"end": 267,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 264,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 256,
											"end": 268,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 200,
											"end": 270,
											"name": "tag",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 200,
											"end": 270,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 289,
											"end": 294,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 14,
											"end": 300,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 300,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 305,
											"end": 582,
											"name": "tag",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 305,
											"end": 582,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 372,
											"end": 378,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 425,
											"end": 427,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 413,
											"end": 422,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 404,
											"end": 411,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 400,
											"end": 423,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 396,
											"end": 428,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 393,
											"end": 445,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 393,
											"end": 445,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "278"
										},
										{
											"begin": 393,
											"end": 445,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 441,
											"end": 442,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 438,
											"end": 439,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 431,
											"end": 443,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 393,
											"end": 445,
											"name": "tag",
											"source": 8,
											"value": "278"
										},
										{
											"begin": 393,
											"end": 445,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 473,
											"end": 482,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 467,
											"end": 483,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 526,
											"end": 531,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 519,
											"end": 532,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 512,
											"end": 533,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 505,
											"end": 510,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 502,
											"end": 534,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 492,
											"end": 552,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 492,
											"end": 552,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 548,
											"end": 549,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 546,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 538,
											"end": 550,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 587,
											"end": 767,
											"name": "tag",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 587,
											"end": 767,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 646,
											"end": 652,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 699,
											"end": 701,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 687,
											"end": 696,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 678,
											"end": 685,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 674,
											"end": 697,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 670,
											"end": 702,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 667,
											"end": 719,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 667,
											"end": 719,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "281"
										},
										{
											"begin": 667,
											"end": 719,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 715,
											"end": 716,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 712,
											"end": 713,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 705,
											"end": 717,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 667,
											"end": 719,
											"name": "tag",
											"source": 8,
											"value": "281"
										},
										{
											"begin": 667,
											"end": 719,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 738,
											"end": 761,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 738,
											"end": 761,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 587,
											"end": 767,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 587,
											"end": 767,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 772,
											"end": 1020,
											"name": "tag",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 772,
											"end": 1020,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 840,
											"end": 846,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 848,
											"end": 854,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 901,
											"end": 903,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 889,
											"end": 898,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 880,
											"end": 887,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 876,
											"end": 899,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 872,
											"end": 904,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 869,
											"end": 921,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 869,
											"end": 921,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "283"
										},
										{
											"begin": 869,
											"end": 921,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 917,
											"end": 918,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 914,
											"end": 915,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 907,
											"end": 919,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 869,
											"end": 921,
											"name": "tag",
											"source": 8,
											"value": "283"
										},
										{
											"begin": 869,
											"end": 921,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 940,
											"end": 963,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 940,
											"end": 963,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 940,
											"end": 963,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1012,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 995,
											"end": 1013,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 995,
											"end": 1013,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 995,
											"end": 1013,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 982,
											"end": 1014,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 982,
											"end": 1014,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 772,
											"end": 1020,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1025,
											"end": 1299,
											"name": "tag",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 1025,
											"end": 1299,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1154,
											"end": 1157,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1192,
											"end": 1198,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1186,
											"end": 1199,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1208,
											"end": 1261,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 1254,
											"end": 1260,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1249,
											"end": 1252,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1242,
											"end": 1246,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1234,
											"end": 1240,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1230,
											"end": 1247,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1208,
											"end": 1261,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 1208,
											"end": 1261,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1208,
											"end": 1261,
											"name": "tag",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 1208,
											"end": 1261,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1277,
											"end": 1293,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1277,
											"end": 1293,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1277,
											"end": 1293,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1277,
											"end": 1293,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1277,
											"end": 1293,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1299,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1025,
											"end": 1299,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2363,
											"end": 2746,
											"name": "tag",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 2363,
											"end": 2746,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2512,
											"end": 2514,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2501,
											"end": 2510,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2494,
											"end": 2515,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2544,
											"end": 2550,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2538,
											"end": 2551,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2587,
											"end": 2593,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2582,
											"end": 2584,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2571,
											"end": 2580,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2567,
											"end": 2585,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2560,
											"end": 2594,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 2662,
											"end": 2668,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2657,
											"end": 2659,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2646,
											"end": 2655,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2642,
											"end": 2660,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2637,
											"end": 2639,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2629,
											"end": 2635,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 2625,
											"end": 2640,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 2603,
											"end": 2669,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2603,
											"end": 2669,
											"name": "tag",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 2603,
											"end": 2669,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2730,
											"end": 2732,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2709,
											"end": 2724,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2705,
											"end": 2734,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2690,
											"end": 2735,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2690,
											"end": 2735,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2690,
											"end": 2735,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2690,
											"end": 2735,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2737,
											"end": 2739,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2686,
											"end": 2740,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2686,
											"end": 2740,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2363,
											"end": 2746,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2363,
											"end": 2746,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3503,
											"end": 3844,
											"name": "tag",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 3503,
											"end": 3844,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3705,
											"end": 3707,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3687,
											"end": 3708,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3687,
											"end": 3708,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3687,
											"end": 3708,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3744,
											"end": 3746,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 3724,
											"end": 3742,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3724,
											"end": 3742,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3724,
											"end": 3742,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3717,
											"end": 3747,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "14DD185ADA5B99C81B9BDD08199BDD5B99"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3778,
											"end": 3780,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3763,
											"end": 3781,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3763,
											"end": 3781,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3756,
											"end": 3803,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3835,
											"end": 3837,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3820,
											"end": 3838,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3820,
											"end": 3838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3503,
											"end": 3844,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8812,
											"end": 8940,
											"name": "tag",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 8812,
											"end": 8940,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8852,
											"end": 8855,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8883,
											"end": 8884,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8879,
											"end": 8885,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 8876,
											"end": 8877,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8873,
											"end": 8886,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 8870,
											"end": 8909,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8870,
											"end": 8909,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "311"
										},
										{
											"begin": 8870,
											"end": 8909,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8889,
											"end": 8907,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "311"
										},
										{
											"begin": 8889,
											"end": 8907,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 8889,
											"end": 8907,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8889,
											"end": 8907,
											"name": "tag",
											"source": 8,
											"value": "311"
										},
										{
											"begin": 8889,
											"end": 8907,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8925,
											"end": 8934,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8925,
											"end": 8934,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8812,
											"end": 8940,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8945,
											"end": 9162,
											"name": "tag",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 8945,
											"end": 9162,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8985,
											"end": 8986,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9011,
											"end": 9012,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9001,
											"end": 9133,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "314"
										},
										{
											"begin": 9001,
											"end": 9133,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9055,
											"end": 9065,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 9050,
											"end": 9053,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 9046,
											"end": 9066,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 9043,
											"end": 9044,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9036,
											"end": 9067,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9090,
											"end": 9094,
											"name": "PUSH",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 9087,
											"end": 9088,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9080,
											"end": 9095,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9118,
											"end": 9122,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 9115,
											"end": 9116,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9108,
											"end": 9123,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 9001,
											"end": 9133,
											"name": "tag",
											"source": 8,
											"value": "314"
										},
										{
											"begin": 9001,
											"end": 9133,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9147,
											"end": 9156,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 9147,
											"end": 9156,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8945,
											"end": 9162,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9167,
											"end": 9335,
											"name": "tag",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 9167,
											"end": 9335,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9207,
											"end": 9214,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9273,
											"end": 9274,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9269,
											"end": 9270,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9265,
											"end": 9271,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 9261,
											"end": 9275,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 9258,
											"end": 9259,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9255,
											"end": 9276,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 9250,
											"end": 9251,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9243,
											"end": 9252,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9236,
											"end": 9253,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9232,
											"end": 9277,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9229,
											"end": 9300,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9229,
											"end": 9300,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "317"
										},
										{
											"begin": 9229,
											"end": 9300,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9280,
											"end": 9298,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "317"
										},
										{
											"begin": 9280,
											"end": 9298,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 9280,
											"end": 9298,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9280,
											"end": 9298,
											"name": "tag",
											"source": 8,
											"value": "317"
										},
										{
											"begin": 9280,
											"end": 9298,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9320,
											"end": 9329,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 9320,
											"end": 9329,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9167,
											"end": 9335,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9340,
											"end": 9465,
											"name": "tag",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 9340,
											"end": 9465,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9380,
											"end": 9384,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9408,
											"end": 9409,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9405,
											"end": 9406,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9402,
											"end": 9410,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 9399,
											"end": 9433,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9399,
											"end": 9433,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "320"
										},
										{
											"begin": 9399,
											"end": 9433,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9413,
											"end": 9431,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "320"
										},
										{
											"begin": 9413,
											"end": 9431,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 9413,
											"end": 9431,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9413,
											"end": 9431,
											"name": "tag",
											"source": 8,
											"value": "320"
										},
										{
											"begin": 9413,
											"end": 9431,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9450,
											"end": 9459,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 9450,
											"end": 9459,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9340,
											"end": 9465,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9470,
											"end": 9728,
											"name": "tag",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 9470,
											"end": 9728,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9542,
											"end": 9543,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9552,
											"end": 9665,
											"name": "tag",
											"source": 8,
											"value": "322"
										},
										{
											"begin": 9552,
											"end": 9665,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9566,
											"end": 9572,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9563,
											"end": 9564,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9560,
											"end": 9573,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 9552,
											"end": 9665,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9552,
											"end": 9665,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "324"
										},
										{
											"begin": 9552,
											"end": 9665,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9642,
											"end": 9653,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9642,
											"end": 9653,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9642,
											"end": 9653,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9636,
											"end": 9654,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9623,
											"end": 9634,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9623,
											"end": 9634,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9623,
											"end": 9634,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9616,
											"end": 9655,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9588,
											"end": 9590,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9581,
											"end": 9591,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9552,
											"end": 9665,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "322"
										},
										{
											"begin": 9552,
											"end": 9665,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9552,
											"end": 9665,
											"name": "tag",
											"source": 8,
											"value": "324"
										},
										{
											"begin": 9552,
											"end": 9665,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9683,
											"end": 9689,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9680,
											"end": 9681,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9677,
											"end": 9690,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 9674,
											"end": 9722,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9674,
											"end": 9722,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 9674,
											"end": 9722,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9718,
											"end": 9719,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9700,
											"end": 9716,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9700,
											"end": 9716,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9693,
											"end": 9720,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9470,
											"end": 9728,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9733,
											"end": 9860,
											"name": "tag",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 9733,
											"end": 9860,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9794,
											"end": 9804,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 9789,
											"end": 9792,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 9785,
											"end": 9805,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 9782,
											"end": 9783,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9775,
											"end": 9806,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9825,
											"end": 9829,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 9822,
											"end": 9823,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9815,
											"end": 9830,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9849,
											"end": 9853,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 9846,
											"end": 9847,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9839,
											"end": 9854,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"airdropRate()": "8891cf0d",
							"airdropSince()": "b87da76d",
							"airdropStatus()": "2cf1a5fb",
							"blockTimestamp()": "adb61832",
							"calculateWeek(uint256)": "b5d9df83",
							"changeAirdropPercentage(uint256)": "d5dbdf1b",
							"changePenaltyFee(uint256)": "8c63f97f",
							"claimAirdrop()": "5b88349d",
							"hasStake()": "10486b6a",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"stake(uint256,uint256)": "7b0472f0",
							"stakingPenaltyRate()": "cb79c2e1",
							"startAirdrop()": "d2a569c3",
							"token_address()": "8c8e8fee",
							"transferOwnership(address)": "f2fde38b",
							"withdrawStake()": "bed9d861"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdropRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeAirdropPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changePenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimDrop\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"internalType\":\"struct Staking.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Staked(address,uint256,uint256,uint256)\":{\"notice\":\"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\"}},\"kind\":\"user\",\"methods\":{\"stake(uint256,uint256)\":{\"notice\":\"_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID\"},\"withdrawStake()\":{\"notice\":\"withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/ERC20/Staking.sol\":{\"keccak256\":\"0x482c7e8d453231fe530213ec9199bc865e11617eb645117a05d3022dfe7c02e0\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://a8e9945dfb6d274914d9ea2803701e774b724854511a67921d9bf851a4751454\",\"dweb:/ipfs/QmZKyeqBsjE3TKPdKwAUfRR1zy18FqJzgCMHBrF9vp9JCN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 123,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 7,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 927,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "stakingPackage",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 929,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "stakingPenaltyRate",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 931,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "airdropRate",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 933,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "airdropSince",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 935,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "airdropStatus",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 937,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "token_address",
								"offset": 1,
								"slot": "6",
								"type": "t_address"
							},
							{
								"astId": 1002,
								"contract": "contracts/ERC20/Staking.sol:Staking",
								"label": "stakeholders",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Stake)988_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Stake)988_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Stake)",
								"numberOfBytes": "32",
								"value": "t_struct(Stake)988_storage"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Stake)988_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Stake",
								"members": [
									{
										"astId": 975,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "amount",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 977,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "since",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 979,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "rewardAPY",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 981,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "releaseTime",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 983,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "claimable",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 985,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "claimableAirdrop",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 987,
										"contract": "contracts/ERC20/Staking.sol:Staking",
										"label": "latestClaimDrop",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"events": {
							"Staked(address,uint256,uint256,uint256)": {
								"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
							}
						},
						"kind": "user",
						"methods": {
							"stake(uint256,uint256)": {
								"notice": "_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID"
							},
							"withdrawStake()": {
								"notice": "withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							913
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 914,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 913,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								913
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 903,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 903,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							166
						]
					},
					"id": 167,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 166,
							"linearizedBaseContracts": [
								166
							],
							"name": "ReentrancyGuard",
							"nameLocation": "906:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 118,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1701:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1676:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 116,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 117,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 121,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1748:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1723:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 119,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 120,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 123,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1783:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1767:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 122,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 130,
										"nodeType": "Block",
										"src": "1811:39:1",
										"statements": [
											{
												"expression": {
													"id": 128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 126,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "1821:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 127,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "1831:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 129,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:1"
											}
										]
									},
									"id": 131,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:1"
									},
									"scope": 166,
									"src": "1797:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 141,
										"nodeType": "Block",
										"src": "2251:79:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 134,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 157,
														"src": "2261:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:1"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 138,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2303:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 140,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:1"
											}
										]
									},
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 142,
									"name": "nonReentrant",
									"nameLocation": "2236:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:1"
									},
									"src": "2227:103:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 156,
										"nodeType": "Block",
										"src": "2375:248:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 148,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 146,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 123,
																"src": "2468:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 147,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 121,
																"src": "2479:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 145,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 151,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:1"
											},
											{
												"expression": {
													"id": 154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 152,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "2598:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 153,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 121,
														"src": "2608:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 155,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:1"
											}
										]
									},
									"id": 157,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2345:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:1"
									},
									"returnParameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:1"
									},
									"scope": 166,
									"src": "2336:287:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "2667:171:1",
										"statements": [
											{
												"expression": {
													"id": 162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 160,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "2809:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 161,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "2819:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 163,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:1"
											}
										]
									},
									"id": 165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2638:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:1"
									},
									"returnParameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:1"
									},
									"scope": 166,
									"src": "2629:209:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 167,
							"src": "888:1952:1",
							"usedErrors": []
						}
					],
					"src": "112:2729:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							244
						]
					},
					"id": 245,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 168,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 169,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 244,
							"linearizedBaseContracts": [
								244
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 170,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 178,
									"name": "Transfer",
									"nameLocation": "394:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "403:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "425:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "445:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:2"
									},
									"src": "388:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 187,
									"name": "Approval",
									"nameLocation": "625:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "634:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "657:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "682:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:2"
									},
									"src": "619:78:2"
								},
								{
									"documentation": {
										"id": 188,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:2"
									},
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "820:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:2"
									},
									"scope": 244,
									"src": "774:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "931:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:2"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "971:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:2"
									},
									"scope": 244,
									"src": "912:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1211:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1223:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1257:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 208,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:2"
									},
									"scope": 244,
									"src": "1193:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 221,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "1557:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "1572:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:2"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "1612:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:2"
									},
									"scope": 244,
									"src": "1538:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 222,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 231,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2291:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 223,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2308:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 225,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:2"
									},
									"returnParameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2342:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 228,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:2"
									},
									"scope": 244,
									"src": "2274:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 243,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2677:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2699:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2719:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:2"
									},
									"returnParameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2758:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 240,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:2"
									},
									"scope": 244,
									"src": "2646:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 245,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							280
						]
					},
					"id": 281,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 246,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 247,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:3",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 280,
							"linearizedBaseContracts": [
								280
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 248,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:3",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 265,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1471:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1494:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1519:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1542:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1568:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 257,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1585:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 259,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1604:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 261,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:3"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:3"
									},
									"scope": 280,
									"src": "1446:183:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 266,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:3",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 273,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1950:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 267,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:3"
									},
									"returnParameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1988:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:3"
									},
									"scope": 280,
									"src": "1934:63:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 274,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:3",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 279,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:3"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "2240:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 276,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:3"
									},
									"scope": 280,
									"src": "2189:60:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 281,
							"src": "620:1631:3",
							"usedErrors": []
						}
					],
					"src": "114:2138:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							891
						],
						"IERC20": [
							244
						],
						"IERC20Permit": [
							280
						],
						"SafeERC20": [
							561
						]
					},
					"id": 562,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 282,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 283,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 562,
							"sourceUnit": 245,
							"src": "140:23:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 284,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 562,
							"sourceUnit": 281,
							"src": "164:46:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 285,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 562,
							"sourceUnit": 892,
							"src": "211:36:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 286,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:4",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 561,
							"linearizedBaseContracts": [
								561
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 289,
									"libraryName": {
										"id": 287,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 891,
										"src": "737:7:4"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:4",
									"typeName": {
										"id": 288,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 311,
										"nodeType": "Block",
										"src": "865:103:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 300,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 292,
															"src": "895:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 303,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 292,
																			"src": "925:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 211,
																		"src": "925:14:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 305,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 306,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 294,
																	"src": "950:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 307,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 296,
																	"src": "954:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 301,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 302,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 299,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "875:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 310,
												"nodeType": "ExpressionStatement",
												"src": "875:86:4"
											}
										]
									},
									"id": 312,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "794:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 291,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 290,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "794:6:4"
													},
													"referencedDeclaration": 244,
													"src": "794:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "816:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "836:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:4"
									},
									"returnParameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:4"
									},
									"scope": 561,
									"src": "763:205:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 337,
										"nodeType": "Block",
										"src": "1102:113:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 325,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 315,
															"src": "1132:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 328,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 315,
																			"src": "1162:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 329,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 243,
																		"src": "1162:18:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 330,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 331,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 317,
																	"src": "1191:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 332,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 319,
																	"src": "1197:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 333,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 321,
																	"src": "1201:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 326,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 327,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 324,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "1112:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 336,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:4"
											}
										]
									},
									"id": 338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1009:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 314,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 313,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "1009:6:4"
													},
													"referencedDeclaration": 244,
													"src": "1009:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1031:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1053:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1073:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:4"
									},
									"returnParameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:4"
									},
									"scope": 561,
									"src": "974:241:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 381,
										"nodeType": "Block",
										"src": "1581:497:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 352,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 350,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 346,
																			"src": "1830:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 351,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 353,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 363,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 358,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$561",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$561",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 357,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 356,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:4",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 359,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 360,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 344,
																					"src": "1877:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 354,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 342,
																					"src": "1846:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$244",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 355,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 221,
																				"src": "1846:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 361,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 362,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 364,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 366,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 349,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 368,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 370,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 342,
															"src": "2001:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 373,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 342,
																			"src": "2031:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 231,
																		"src": "2031:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 376,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 344,
																	"src": "2055:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 377,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 346,
																	"src": "2064:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 371,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 369,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "1981:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 380,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:4"
											}
										]
									},
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:4",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 382,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "1505:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 341,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 340,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "1505:6:4"
													},
													"referencedDeclaration": 244,
													"src": "1505:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "1527:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 343,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "1552:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:4"
									},
									"returnParameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:4"
									},
									"scope": 561,
									"src": "1475:603:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 417,
										"nodeType": "Block",
										"src": "2200:194:4",
										"statements": [
											{
												"assignments": [
													393
												],
												"declarations": [
													{
														"constant": false,
														"id": 393,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 417,
														"src": "2210:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 392,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 404,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 398,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$561",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$561",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 397,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 396,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 399,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 400,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 387,
																"src": "2264:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 394,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 385,
																"src": "2233:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$244",
																	"typeString": "contract IERC20"
																}
															},
															"id": 395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 221,
															"src": "2233:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 401,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 402,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 389,
														"src": "2275:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 406,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 385,
															"src": "2310:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 409,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 385,
																			"src": "2340:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 231,
																		"src": "2340:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 411,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 412,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 387,
																	"src": "2364:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 413,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 393,
																	"src": "2373:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 407,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 408,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 414,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 405,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "2290:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 416,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:4"
											}
										]
									},
									"id": 418,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "2124:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 384,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 383,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "2124:6:4"
													},
													"referencedDeclaration": 244,
													"src": "2124:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "2146:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "2171:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:4"
									},
									"returnParameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:4"
									},
									"scope": 561,
									"src": "2084:310:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 465,
										"nodeType": "Block",
										"src": "2516:370:4",
										"statements": [
											{
												"id": 464,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:4",
												"statements": [
													{
														"assignments": [
															429
														],
														"declarations": [
															{
																"constant": false,
																"id": 429,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:4",
																"nodeType": "VariableDeclaration",
																"scope": 464,
																"src": "2550:20:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 428,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 438,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 434,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$561",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$561",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 433,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 432,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 435,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 436,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 423,
																	"src": "2604:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 430,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 421,
																	"src": "2573:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 221,
																"src": "2573:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 442,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 440,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 429,
																		"src": "2634:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 441,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 425,
																		"src": "2650:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 443,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 439,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 444,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 445,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:4"
													},
													{
														"assignments": [
															447
														],
														"declarations": [
															{
																"constant": false,
																"id": 447,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:4",
																"nodeType": "VariableDeclaration",
																"scope": 464,
																"src": "2715:20:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 446,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 451,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 448,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 429,
																"src": "2738:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 449,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 425,
																"src": "2753:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 453,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 421,
																	"src": "2792:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 456,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 421,
																					"src": "2822:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$244",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 457,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 231,
																				"src": "2822:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 458,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 459,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 423,
																			"src": "2846:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 460,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 447,
																			"src": "2855:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 454,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 452,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 560,
																"src": "2772:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 463,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:4"
													}
												]
											}
										]
									},
									"id": 466,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "2440:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 420,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 419,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "2440:6:4"
													},
													"referencedDeclaration": 244,
													"src": "2440:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "2462:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 422,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "2487:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:4"
									},
									"returnParameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:4"
									},
									"scope": 561,
									"src": "2400:486:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 521,
										"nodeType": "Block",
										"src": "3107:257:4",
										"statements": [
											{
												"assignments": [
													487
												],
												"declarations": [
													{
														"constant": false,
														"id": 487,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 521,
														"src": "3117:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 486,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 492,
												"initialValue": {
													"arguments": [
														{
															"id": 490,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "3152:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 488,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "3139:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$280",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 273,
														"src": "3139:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 496,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "3181:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 497,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 473,
															"src": "3188:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 498,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "3197:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 499,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "3204:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 500,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "3214:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 501,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "3217:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 502,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 483,
															"src": "3220:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 493,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "3168:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$280",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 495,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 265,
														"src": "3168:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 504,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:4"
											},
											{
												"assignments": [
													506
												],
												"declarations": [
													{
														"constant": false,
														"id": 506,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 521,
														"src": "3232:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 505,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 511,
												"initialValue": {
													"arguments": [
														{
															"id": 509,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "3266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 507,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "3253:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$280",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 508,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 273,
														"src": "3253:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 517,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 513,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "3290:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 514,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 487,
																	"src": "3304:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 515,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 512,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 520,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:4"
											}
										]
									},
									"id": 522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2921:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$280",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 468,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 467,
														"name": "IERC20Permit",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 280,
														"src": "2921:12:4"
													},
													"referencedDeclaration": 280,
													"src": "2921:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$280",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2949:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 470,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2972:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 472,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2997:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3020:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3046:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 478,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3063:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 480,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3082:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 482,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:4"
									},
									"returnParameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:4"
									},
									"scope": 561,
									"src": "2892:472:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 559,
										"nodeType": "Block",
										"src": "3817:636:4",
										"statements": [
											{
												"assignments": [
													532
												],
												"declarations": [
													{
														"constant": false,
														"id": 532,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 559,
														"src": "4166:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 531,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 541,
												"initialValue": {
													"arguments": [
														{
															"id": 538,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "4220:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 535,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 526,
																	"src": "4200:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 534,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 533,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 536,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 537,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 651,
														"src": "4192:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 542,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "4275:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 543,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 544,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 558,
												"nodeType": "IfStatement",
												"src": "4271:176:4",
												"trueBody": {
													"id": 557,
													"nodeType": "Block",
													"src": "4298:149:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 549,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 532,
																				"src": "4370:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 551,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 550,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:4",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 552,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 547,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 548,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 553,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 554,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 546,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 555,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 556,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 523,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 560,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "3776:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 525,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 524,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "3776:6:4"
													},
													"referencedDeclaration": 244,
													"src": "3776:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "3790:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 527,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:4"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:4"
									},
									"scope": 561,
									"src": "3747:706:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 562,
							"src": "707:3748:4",
							"usedErrors": []
						}
					],
					"src": "115:4341:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							891
						]
					},
					"id": 892,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 563,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 564,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 891,
							"linearizedBaseContracts": [
								891
							],
							"name": "Address",
							"nameLocation": "202:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 578,
										"nodeType": "Block",
										"src": "1241:254:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 572,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 567,
																"src": "1465:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 573,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 574,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 575,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 571,
												"id": 577,
												"nodeType": "Return",
												"src": "1458:30:5"
											}
										]
									},
									"documentation": {
										"id": 565,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:5",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "1195:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:5"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "1235:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 569,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:5"
									},
									"scope": 891,
									"src": "1175:320:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 612,
										"nodeType": "Block",
										"src": "2483:241:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 594,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 590,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$891",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$891",
																				"typeString": "library Address"
																			}
																		],
																		"id": 589,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 588,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 591,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 592,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 593,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 584,
																"src": "2526:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 595,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 587,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 597,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:5"
											},
											{
												"assignments": [
													599,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 599,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 612,
														"src": "2578:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 598,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 606,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 604,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 600,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 582,
																"src": "2596:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 603,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 602,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 584,
																"src": "2618:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 608,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 599,
															"src": "2647:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 609,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 607,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 611,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:5"
											}
										]
									},
									"documentation": {
										"id": 580,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 613,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "2431:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "2458:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 583,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:5"
									},
									"returnParameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:5"
									},
									"scope": 891,
									"src": "2412:312:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 630,
										"nodeType": "Block",
										"src": "3555:96:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 624,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "3594:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 625,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "3602:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 626,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 627,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 623,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															671,
															715
														],
														"referencedDeclaration": 715,
														"src": "3572:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 622,
												"id": 629,
												"nodeType": "Return",
												"src": "3565:79:5"
											}
										]
									},
									"documentation": {
										"id": 614,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 631,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "3488:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 615,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "3504:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 617,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:5"
									},
									"returnParameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "3541:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 620,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:5"
									},
									"scope": 891,
									"src": "3466:185:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 650,
										"nodeType": "Block",
										"src": "4020:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 644,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 634,
															"src": "4059:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 645,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "4067:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 646,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 647,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 638,
															"src": "4076:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 643,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															671,
															715
														],
														"referencedDeclaration": 715,
														"src": "4037:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 642,
												"id": 649,
												"nodeType": "Return",
												"src": "4030:59:5"
											}
										]
									},
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 651,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "3904:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "3928:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 635,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "3955:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 637,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:5"
									},
									"returnParameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 641,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "4006:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 640,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:5"
									},
									"scope": 891,
									"src": "3873:223:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 670,
										"nodeType": "Block",
										"src": "4601:111:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 664,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "4640:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 665,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 656,
															"src": "4648:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 666,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 658,
															"src": "4654:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 663,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															671,
															715
														],
														"referencedDeclaration": 715,
														"src": "4618:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 662,
												"id": 669,
												"nodeType": "Return",
												"src": "4611:94:5"
											}
										]
									},
									"documentation": {
										"id": 652,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 671,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 654,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "4498:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 653,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "4522:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 655,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "4549:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:5"
									},
									"returnParameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "4587:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 660,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:5"
									},
									"scope": 891,
									"src": "4458:254:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 714,
										"nodeType": "Block",
										"src": "5139:267:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 692,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 688,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$891",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$891",
																				"typeString": "library Address"
																			}
																		],
																		"id": 687,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 686,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 689,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 690,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 691,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 678,
																"src": "5182:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 693,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 685,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 695,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:5"
											},
											{
												"assignments": [
													697,
													699
												],
												"declarations": [
													{
														"constant": false,
														"id": 697,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 714,
														"src": "5241:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 696,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 699,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 714,
														"src": "5255:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 698,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 706,
												"initialValue": {
													"arguments": [
														{
															"id": 704,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 676,
															"src": "5308:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 700,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 674,
																"src": "5282:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 701,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 703,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 702,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 678,
																"src": "5301:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 708,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 674,
															"src": "5357:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 709,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 697,
															"src": "5365:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 710,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 699,
															"src": "5374:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 711,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 680,
															"src": "5386:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 707,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "5330:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 684,
												"id": 713,
												"nodeType": "Return",
												"src": "5323:76:5"
											}
										]
									},
									"documentation": {
										"id": 672,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:5",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "5000:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 673,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "5024:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 675,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "5051:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 677,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "5074:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 679,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:5"
									},
									"returnParameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "5125:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 682,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:5"
									},
									"scope": 891,
									"src": "4960:446:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 731,
										"nodeType": "Block",
										"src": "5683:97:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 726,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 718,
															"src": "5719:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 727,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "5727:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 728,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 725,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															732,
															761
														],
														"referencedDeclaration": 761,
														"src": "5700:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 724,
												"id": 730,
												"nodeType": "Return",
												"src": "5693:80:5"
											}
										]
									},
									"documentation": {
										"id": 716,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 732,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "5611:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "5627:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 719,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:5"
									},
									"returnParameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "5669:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 722,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:5"
									},
									"scope": 891,
									"src": "5583:197:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 760,
										"nodeType": "Block",
										"src": "6122:168:5",
										"statements": [
											{
												"assignments": [
													745,
													747
												],
												"declarations": [
													{
														"constant": false,
														"id": 745,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 760,
														"src": "6133:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 744,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 747,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 760,
														"src": "6147:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 746,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 752,
												"initialValue": {
													"arguments": [
														{
															"id": 750,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 737,
															"src": "6192:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 748,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 735,
															"src": "6174:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 749,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 754,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 735,
															"src": "6241:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 755,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 745,
															"src": "6249:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 756,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 747,
															"src": "6258:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 757,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 739,
															"src": "6270:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 753,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "6214:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 743,
												"id": 759,
												"nodeType": "Return",
												"src": "6207:76:5"
											}
										]
									},
									"documentation": {
										"id": 733,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 761,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 735,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "6001:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 734,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "6025:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 736,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 739,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "6052:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 738,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:5"
									},
									"returnParameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "6108:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 741,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:5"
									},
									"scope": 891,
									"src": "5964:326:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 777,
										"nodeType": "Block",
										"src": "6566:101:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 772,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 764,
															"src": "6604:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 773,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 766,
															"src": "6612:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 774,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 771,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															778,
															807
														],
														"referencedDeclaration": 807,
														"src": "6583:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 770,
												"id": 776,
												"nodeType": "Return",
												"src": "6576:84:5"
											}
										]
									},
									"documentation": {
										"id": 762,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 778,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "6499:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 763,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 766,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "6515:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 765,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:5"
									},
									"returnParameters": {
										"id": 770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "6552:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 768,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:5"
									},
									"scope": 891,
									"src": "6469:198:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 806,
										"nodeType": "Block",
										"src": "7008:170:5",
										"statements": [
											{
												"assignments": [
													791,
													793
												],
												"declarations": [
													{
														"constant": false,
														"id": 791,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 806,
														"src": "7019:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 790,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 793,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 806,
														"src": "7033:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 792,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 798,
												"initialValue": {
													"arguments": [
														{
															"id": 796,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "7080:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 794,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "7060:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 795,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 797,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 800,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "7129:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 801,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "7137:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 802,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "7146:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 803,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "7158:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 799,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "7102:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 789,
												"id": 805,
												"nodeType": "Return",
												"src": "7095:76:5"
											}
										]
									},
									"documentation": {
										"id": 779,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 807,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "6892:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 780,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "6916:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 782,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "6943:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 784,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:5"
									},
									"returnParameters": {
										"id": 789,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 788,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "6994:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 787,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:5"
									},
									"scope": 891,
									"src": "6853:325:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 845,
										"nodeType": "Block",
										"src": "7660:434:5",
										"statements": [
											{
												"condition": {
													"id": 821,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 812,
													"src": "7674:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 843,
													"nodeType": "Block",
													"src": "8030:58:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 839,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 814,
																		"src": "8052:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 840,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 816,
																		"src": "8064:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 838,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 890,
																	"src": "8044:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 841,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 842,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:5"
														}
													]
												},
												"id": 844,
												"nodeType": "IfStatement",
												"src": "7670:418:5",
												"trueBody": {
													"id": 837,
													"nodeType": "Block",
													"src": "7683:341:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 825,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 822,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 814,
																		"src": "7701:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 823,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 824,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 834,
															"nodeType": "IfStatement",
															"src": "7697:286:5",
															"trueBody": {
																"id": 833,
																"nodeType": "Block",
																"src": "7725:258:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 828,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 810,
																							"src": "7927:6:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 827,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 579,
																						"src": "7916:10:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 829,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 830,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 826,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 831,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 832,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:5"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 835,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 814,
																"src": "8003:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 820,
															"id": 836,
															"nodeType": "Return",
															"src": "7996:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 808,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:5",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 846,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 810,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "7511:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 809,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 812,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "7535:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 811,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "7557:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 813,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "7590:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 815,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:5"
									},
									"returnParameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "7646:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 818,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:5"
									},
									"scope": 891,
									"src": "7466:628:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 869,
										"nodeType": "Block",
										"src": "8475:135:5",
										"statements": [
											{
												"condition": {
													"id": 858,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 849,
													"src": "8489:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 867,
													"nodeType": "Block",
													"src": "8546:58:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 863,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 851,
																		"src": "8568:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 864,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 853,
																		"src": "8580:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 862,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 890,
																	"src": "8560:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 865,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 866,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:5"
														}
													]
												},
												"id": 868,
												"nodeType": "IfStatement",
												"src": "8485:119:5",
												"trueBody": {
													"id": 861,
													"nodeType": "Block",
													"src": "8498:42:5",
													"statements": [
														{
															"expression": {
																"id": 859,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 851,
																"src": "8519:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 857,
															"id": 860,
															"nodeType": "Return",
															"src": "8512:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 847,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:5",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 870,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "8350:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 848,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "8372:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 850,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "8405:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 852,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:5"
									},
									"returnParameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "8461:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 855,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:5"
									},
									"scope": 891,
									"src": "8315:295:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 889,
										"nodeType": "Block",
										"src": "8699:457:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 877,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 872,
															"src": "8775:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 878,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 879,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 887,
													"nodeType": "Block",
													"src": "9105:45:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 884,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 874,
																		"src": "9126:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 883,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 885,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 886,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:5"
														}
													]
												},
												"id": 888,
												"nodeType": "IfStatement",
												"src": "8771:379:5",
												"trueBody": {
													"id": 882,
													"nodeType": "Block",
													"src": "8798:301:5",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:5",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:5",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:5"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:5"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:5",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:5",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:5"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:5"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:5"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 872,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:5",
																	"valueSize": 1
																},
																{
																	"declaration": 872,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:5",
																	"valueSize": 1
																}
															],
															"id": 881,
															"nodeType": "InlineAssembly",
															"src": "8947:142:5"
														}
													]
												}
											}
										]
									},
									"id": 890,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "8633:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 871,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "8658:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 873,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:5"
									},
									"returnParameters": {
										"id": 876,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:5"
									},
									"scope": 891,
									"src": "8616:540:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 892,
							"src": "194:8964:5",
							"usedErrors": []
						}
					],
					"src": "101:9058:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							913
						]
					},
					"id": 914,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 893,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 894,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 913,
							"linearizedBaseContracts": [
								913
							],
							"name": "Context",
							"nameLocation": "626:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 902,
										"nodeType": "Block",
										"src": "702:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 899,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 898,
												"id": 901,
												"nodeType": "Return",
												"src": "712:17:6"
											}
										]
									},
									"id": 903,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:6"
									},
									"returnParameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 903,
												"src": "693:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 896,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:6"
									},
									"scope": 913,
									"src": "640:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 911,
										"nodeType": "Block",
										"src": "809:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 908,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 907,
												"id": 910,
												"nodeType": "Return",
												"src": "819:15:6"
											}
										]
									},
									"id": 912,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:6"
									},
									"returnParameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "793:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 905,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:6"
									},
									"scope": 913,
									"src": "742:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 914,
							"src": "608:235:6",
							"usedErrors": []
						}
					],
					"src": "86:758:6"
				},
				"id": 6
			},
			"contracts/ERC20/Staking.sol": {
				"ast": {
					"absolutePath": "contracts/ERC20/Staking.sol",
					"exportedSymbols": {
						"Address": [
							891
						],
						"Context": [
							913
						],
						"IERC20": [
							244
						],
						"IERC20Permit": [
							280
						],
						"Ownable": [
							112
						],
						"ReentrancyGuard": [
							166
						],
						"SafeERC20": [
							561
						],
						"Staking": [
							1567
						]
					},
					"id": 1568,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 915,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 916,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1568,
							"sourceUnit": 562,
							"src": "64:65:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 917,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1568,
							"sourceUnit": 167,
							"src": "130:62:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 918,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1568,
							"sourceUnit": 113,
							"src": "193:52:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 919,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 166,
										"src": "267:15:7"
									},
									"id": 920,
									"nodeType": "InheritanceSpecifier",
									"src": "267:15:7"
								},
								{
									"baseName": {
										"id": 921,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "284:7:7"
									},
									"id": 922,
									"nodeType": "InheritanceSpecifier",
									"src": "284:7:7"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1567,
							"linearizedBaseContracts": [
								1567,
								112,
								913,
								166
							],
							"name": "Staking",
							"nameLocation": "256:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 923,
										"nodeType": "StructuredDocumentation",
										"src": "298:159:7",
										"text": " @notice Constructor since this contract is not meant to be used without inheritance\n push once to stakeholders for it to work properly"
									},
									"id": 927,
									"mutability": "mutable",
									"name": "stakingPackage",
									"nameLocation": "500:14:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "463:51:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 926,
										"keyType": {
											"id": 924,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "471:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "463:27:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 925,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "482:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "cb79c2e1",
									"id": 929,
									"mutability": "mutable",
									"name": "stakingPenaltyRate",
									"nameLocation": "536:18:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "521:33:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 928,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "521:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8891cf0d",
									"id": 931,
									"mutability": "mutable",
									"name": "airdropRate",
									"nameLocation": "575:11:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "560:26:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 930,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "560:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b87da76d",
									"id": 933,
									"mutability": "mutable",
									"name": "airdropSince",
									"nameLocation": "607:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "592:27:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 932,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "592:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2cf1a5fb",
									"id": 935,
									"mutability": "mutable",
									"name": "airdropStatus",
									"nameLocation": "637:13:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "625:25:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 934,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "625:4:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8c8e8fee",
									"id": 937,
									"mutability": "mutable",
									"name": "token_address",
									"nameLocation": "672:13:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "657:28:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 936,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "657:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 972,
										"nodeType": "Block",
										"src": "719:274:7",
										"statements": [
											{
												"expression": {
													"id": 944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 942,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 929,
														"src": "791:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3135",
														"id": 943,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "812:2:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_15_by_1",
															"typeString": "int_const 15"
														},
														"value": "15"
													},
													"src": "791:23:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 945,
												"nodeType": "ExpressionStatement",
												"src": "791:23:7"
											},
											{
												"expression": {
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 946,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 931,
														"src": "824:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3830",
														"id": 947,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "838:2:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_80_by_1",
															"typeString": "int_const 80"
														},
														"value": "80"
													},
													"src": "824:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 949,
												"nodeType": "ExpressionStatement",
												"src": "824:16:7"
											},
											{
												"expression": {
													"id": 952,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 950,
														"name": "token_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "851:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 951,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "867:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "851:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 953,
												"nodeType": "ExpressionStatement",
												"src": "851:21:7"
											},
											{
												"expression": {
													"id": 958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 954,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 927,
															"src": "883:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 956,
														"indexExpression": {
															"hexValue": "3930",
															"id": 955,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "898:7:7",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_7776000_by_1",
																"typeString": "int_const 7776000"
															},
															"value": "90"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "883:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "36",
														"id": 957,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "909:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_6_by_1",
															"typeString": "int_const 6"
														},
														"value": "6"
													},
													"src": "883:27:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 959,
												"nodeType": "ExpressionStatement",
												"src": "883:27:7"
											},
											{
												"expression": {
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 960,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 927,
															"src": "920:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 962,
														"indexExpression": {
															"hexValue": "313830",
															"id": 961,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "935:8:7",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_15552000_by_1",
																"typeString": "int_const 15552000"
															},
															"value": "180"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "920:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "37",
														"id": 963,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "947:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_7_by_1",
															"typeString": "int_const 7"
														},
														"value": "7"
													},
													"src": "920:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 965,
												"nodeType": "ExpressionStatement",
												"src": "920:28:7"
											},
											{
												"expression": {
													"id": 970,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 966,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 927,
															"src": "958:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 968,
														"indexExpression": {
															"hexValue": "333635",
															"id": 967,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "973:8:7",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															"value": "365"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "958:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "38",
														"id": 969,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "985:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"src": "958:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 971,
												"nodeType": "ExpressionStatement",
												"src": "958:28:7"
											}
										]
									},
									"id": 973,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "712:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "704:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 938,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "704:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "703:15:7"
									},
									"returnParameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "719:0:7"
									},
									"scope": 1567,
									"src": "692:301:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.Stake",
									"id": 988,
									"members": [
										{
											"constant": false,
											"id": 975,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "1257:6:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1249:14:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 974,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1249:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 977,
											"mutability": "mutable",
											"name": "since",
											"nameLocation": "1281:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1273:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 976,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1273:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 979,
											"mutability": "mutable",
											"name": "rewardAPY",
											"nameLocation": "1304:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1296:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 978,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1296:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 981,
											"mutability": "mutable",
											"name": "releaseTime",
											"nameLocation": "1331:11:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1323:19:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 980,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1323:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 983,
											"mutability": "mutable",
											"name": "claimable",
											"nameLocation": "1459:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1451:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 982,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1451:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 985,
											"mutability": "mutable",
											"name": "claimableAirdrop",
											"nameLocation": "1486:16:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1478:24:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 984,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1478:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 987,
											"mutability": "mutable",
											"name": "latestClaimDrop",
											"nameLocation": "1520:15:7",
											"nodeType": "VariableDeclaration",
											"scope": 988,
											"src": "1512:23:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 986,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1512:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stake",
									"nameLocation": "1233:5:7",
									"nodeType": "StructDefinition",
									"scope": 1567,
									"src": "1226:316:7",
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.StakingSummary",
									"id": 996,
									"members": [
										{
											"constant": false,
											"id": 990,
											"mutability": "mutable",
											"name": "total_amount",
											"nameLocation": "1719:12:7",
											"nodeType": "VariableDeclaration",
											"scope": 996,
											"src": "1711:20:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 989,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1711:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 992,
											"mutability": "mutable",
											"name": "penalty",
											"nameLocation": "1749:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 996,
											"src": "1741:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 991,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1741:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 995,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "1772:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 996,
											"src": "1766:11:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
												"typeString": "struct Staking.Stake"
											},
											"typeName": {
												"id": 994,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 993,
													"name": "Stake",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 988,
													"src": "1766:5:7"
												},
												"referencedDeclaration": 988,
												"src": "1766:5:7",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
													"typeString": "struct Staking.Stake"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakingSummary",
									"nameLocation": "1686:14:7",
									"nodeType": "StructDefinition",
									"scope": 1567,
									"src": "1679:105:7",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 997,
										"nodeType": "StructuredDocumentation",
										"src": "1790:111:7",
										"text": " @notice\n stakes is used to keep track of the INDEX for the stakers in the stakes array"
									},
									"id": 1002,
									"mutability": "mutable",
									"name": "stakeholders",
									"nameLocation": "1941:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 1567,
									"src": "1906:47:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
										"typeString": "mapping(address => struct Staking.Stake)"
									},
									"typeName": {
										"id": 1001,
										"keyType": {
											"id": 998,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1914:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1906:25:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
											"typeString": "mapping(address => struct Staking.Stake)"
										},
										"valueType": {
											"id": 1000,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 999,
												"name": "Stake",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 988,
												"src": "1925:5:7"
											},
											"referencedDeclaration": 988,
											"src": "1925:5:7",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
												"typeString": "struct Staking.Stake"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "1960:124:7",
										"text": " @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
									},
									"id": 1013,
									"name": "Staked",
									"nameLocation": "2095:6:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2127:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2111:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1004,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2111:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2149:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2141:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2141:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2173:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2165:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1011,
												"indexed": false,
												"mutability": "mutable",
												"name": "releaseTime",
												"nameLocation": "2200:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2192:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2192:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2101:116:7"
									},
									"src": "2089:129:7"
								},
								{
									"anonymous": false,
									"id": 1017,
									"name": "PenaltyChanged",
									"nameLocation": "2230:14:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2253:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "2245:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1014,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2245:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2244:16:7"
									},
									"src": "2224:37:7"
								},
								{
									"anonymous": false,
									"id": 1021,
									"name": "AirdropChanged",
									"nameLocation": "2272:14:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2295:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1021,
												"src": "2287:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2287:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2286:16:7"
									},
									"src": "2266:37:7"
								},
								{
									"body": {
										"id": 1031,
										"nodeType": "Block",
										"src": "2460:70:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1027,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1025,
																"name": "airdropStatus",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 935,
																"src": "2478:13:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "74727565",
																"id": 1026,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2495:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "2478:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "41697264726f70206e6f742073746172746564",
															"id": 1028,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2501:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9",
																"typeString": "literal_string \"Airdrop not started\""
															},
															"value": "Airdrop not started"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7926a5ee8e254ef8e13d9506c19da7fc2dd6aec32216a6c9c2e2b31207c67ce9",
																"typeString": "literal_string \"Airdrop not started\""
															}
														],
														"id": 1024,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2470:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2470:53:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1030,
												"nodeType": "ExpressionStatement",
												"src": "2470:53:7"
											}
										]
									},
									"id": 1032,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkAirdropStatus",
									"nameLocation": "2424:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2443:2:7"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2460:0:7"
									},
									"scope": 1567,
									"src": "2415:115:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1038,
										"nodeType": "Block",
										"src": "2565:49:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1034,
														"name": "_checkAirdropStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1032,
														"src": "2575:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1035,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2575:21:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1036,
												"nodeType": "ExpressionStatement",
												"src": "2575:21:7"
											},
											{
												"id": 1037,
												"nodeType": "PlaceholderStatement",
												"src": "2606:1:7"
											}
										]
									},
									"id": 1039,
									"name": "airdropStatusTrue",
									"nameLocation": "2545:17:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2562:2:7"
									},
									"src": "2536:78:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1120,
										"nodeType": "Block",
										"src": "3005:1093:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1056,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1050,
																		"name": "stakeholders",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1002,
																		"src": "3206:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
																			"typeString": "mapping(address => struct Staking.Stake storage ref)"
																		}
																	},
																	"id": 1053,
																	"indexExpression": {
																		"expression": {
																			"id": 1051,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3219:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1052,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3219:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3206:24:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$988_storage",
																		"typeString": "struct Staking.Stake storage ref"
																	}
																},
																"id": 1054,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 975,
																"src": "3206:31:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1055,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3241:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3206:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "557365722069732061205374616b6572",
															"id": 1057,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3244:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8",
																"typeString": "literal_string \"User is a Staker\""
															},
															"value": "User is a Staker"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_002b09ba03e032e4244dee656b2dd548bb90af618b73d6ab2c368e48900fe3e8",
																"typeString": "literal_string \"User is a Staker\""
															}
														],
														"id": 1049,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3198:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1058,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3198:65:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1059,
												"nodeType": "ExpressionStatement",
												"src": "3198:65:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1065,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 1061,
																	"name": "stakingPackage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 927,
																	"src": "3281:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 1063,
																"indexExpression": {
																	"id": 1062,
																	"name": "stakePeriod",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1044,
																	"src": "3296:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3281:27:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1064,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3312:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3281:32:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061636b616765206e6f7420466f756e64",
															"id": 1066,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3315:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734",
																"typeString": "literal_string \"Package not Found\""
															},
															"value": "Package not Found"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b966c5cdef0470d151bc3ff46f0ab5ffe6eef49a18cd09fd9e73be23a59ff734",
																"typeString": "literal_string \"Package not Found\""
															}
														],
														"id": 1060,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3273:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1067,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3273:62:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1068,
												"nodeType": "ExpressionStatement",
												"src": "3273:62:7"
											},
											{
												"assignments": [
													1070
												],
												"declarations": [
													{
														"constant": false,
														"id": 1070,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "3441:9:7",
														"nodeType": "VariableDeclaration",
														"scope": 1120,
														"src": "3433:17:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1069,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3433:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1073,
												"initialValue": {
													"expression": {
														"id": 1071,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "3453:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "3453:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3433:35:7"
											},
											{
												"expression": {
													"id": 1092,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1074,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1002,
															"src": "3597:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1077,
														"indexExpression": {
															"expression": {
																"id": 1075,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3610:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1076,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3610:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3597:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1079,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1042,
																"src": "3643:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1080,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1070,
																"src": "3663:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"baseExpression": {
																	"id": 1081,
																	"name": "stakingPackage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 927,
																	"src": "3686:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 1083,
																"indexExpression": {
																	"id": 1082,
																	"name": "stakePeriod",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1044,
																	"src": "3701:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3686:27:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1086,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1084,
																			"name": "stakePeriod",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1044,
																			"src": "3728:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1085,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1070,
																			"src": "3742:9:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3728:23:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1087,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3727:25:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 1088,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3766:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1089,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3781:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1090,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3796:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1078,
															"name": "Stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 988,
															"src": "3624:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Stake_$988_storage_ptr_$",
																"typeString": "type(struct Staking.Stake storage pointer)"
															}
														},
														"id": 1091,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3624:183:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
															"typeString": "struct Staking.Stake memory"
														}
													},
													"src": "3597:210:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$988_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"id": 1093,
												"nodeType": "ExpressionStatement",
												"src": "3597:210:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1098,
																	"name": "token_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 937,
																	"src": "3865:13:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1097,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 244,
																"src": "3858:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$244_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1099,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3858:21:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"expression": {
																"id": 1100,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3893:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3893:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1104,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3925:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Staking_$1567",
																		"typeString": "contract Staking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Staking_$1567",
																		"typeString": "contract Staking"
																	}
																],
																"id": 1103,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3917:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1102,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3917:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1105,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3917:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1106,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1042,
															"src": "3944:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1094,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 561,
															"src": "3818:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$561_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1096,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 338,
														"src": "3818:26:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3818:142:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1108,
												"nodeType": "ExpressionStatement",
												"src": "3818:142:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1110,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4034:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1111,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4034:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1112,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1042,
															"src": "4046:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1113,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "4054:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1116,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1114,
																		"name": "stakePeriod",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1044,
																		"src": "4066:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1115,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1070,
																		"src": "4080:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4066:23:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1117,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "4065:25:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1109,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1013,
														"src": "4027:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4027:64:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1119,
												"nodeType": "EmitStatement",
												"src": "4022:69:7"
											}
										]
									},
									"documentation": {
										"id": 1040,
										"nodeType": "StructuredDocumentation",
										"src": "2726:200:7",
										"text": " @notice\n _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n StakeID"
									},
									"functionSelector": "7b0472f0",
									"id": 1121,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1047,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1046,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 142,
												"src": "2992:12:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2992:12:7"
										}
									],
									"name": "stake",
									"nameLocation": "2940:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2954:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "2946:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1041,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2946:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "stakePeriod",
												"nameLocation": "2970:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "2962:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1043,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2962:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2945:37:7"
									},
									"returnParameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3005:0:7"
									},
									"scope": 1567,
									"src": "2931:1167:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1143,
										"nodeType": "Block",
										"src": "4165:205:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1131,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1129,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1123,
																"src": "4257:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "3330",
																"id": 1130,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4267:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_30_by_1",
																	"typeString": "int_const 30"
																},
																"value": "30"
															},
															"src": "4257:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50656e616c7479206d617820333025",
															"id": 1132,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4271:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a",
																"typeString": "literal_string \"Penalty max 30%\""
															},
															"value": "Penalty max 30%"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c5b4e61a28898b30f1a1f9e8beb207f204de893cd09640e59267f93465f1229a",
																"typeString": "literal_string \"Penalty max 30%\""
															}
														],
														"id": 1128,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4249:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4249:40:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1134,
												"nodeType": "ExpressionStatement",
												"src": "4249:40:7"
											},
											{
												"expression": {
													"id": 1137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1135,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 929,
														"src": "4299:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1136,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1123,
														"src": "4320:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4299:27:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1138,
												"nodeType": "ExpressionStatement",
												"src": "4299:27:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1140,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1123,
															"src": "4356:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1139,
														"name": "PenaltyChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1017,
														"src": "4341:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4341:22:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1142,
												"nodeType": "EmitStatement",
												"src": "4336:27:7"
											}
										]
									},
									"functionSelector": "8c63f97f",
									"id": 1144,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1126,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1125,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "4155:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "4155:9:7"
										}
									],
									"name": "changePenaltyFee",
									"nameLocation": "4113:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4138:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1144,
												"src": "4130:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4130:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4129:16:7"
									},
									"returnParameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4165:0:7"
									},
									"scope": 1567,
									"src": "4104:266:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1162,
										"nodeType": "Block",
										"src": "4486:121:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1157,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1154,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1151,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "4557:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1152,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "4557:15:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1153,
																				"name": "since",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1146,
																				"src": "4575:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4557:23:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1155,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4556:25:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "31653234",
																	"id": 1156,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4584:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000000000"
																	},
																	"value": "1e24"
																},
																"src": "4556:32:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1158,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4555:34:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "333635",
														"id": 1159,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4592:8:7",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31536000_by_1",
															"typeString": "int_const 31536000"
														},
														"value": "365"
													},
													"src": "4555:45:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1150,
												"id": 1161,
												"nodeType": "Return",
												"src": "4548:52:7"
											}
										]
									},
									"id": 1163,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingDuration",
									"nameLocation": "4385:25:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "since",
												"nameLocation": "4419:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "4411:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4411:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4410:15:7"
									},
									"returnParameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "4473:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4473:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4472:9:7"
									},
									"scope": 1567,
									"src": "4376:231:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1185,
										"nodeType": "Block",
										"src": "4729:251:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1180,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1175,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1171,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1166,
																			"src": "4847:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1172,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 975,
																		"src": "4847:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"expression": {
																			"id": 1173,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1166,
																			"src": "4883:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1174,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardAPY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 979,
																		"src": "4883:20:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4847:56:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1177,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1166,
																				"src": "4948:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																					"typeString": "struct Staking.Stake memory"
																				}
																			},
																			"id": 1178,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "since",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 977,
																			"src": "4948:16:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1176,
																		"name": "_calculateStakingDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1163,
																		"src": "4922:25:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1179,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4922:43:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4847:118:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1181,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4846:120:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653236",
														"id": 1182,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4969:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000000000"
														},
														"value": "1e26"
													},
													"src": "4846:127:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1170,
												"id": 1184,
												"nodeType": "Return",
												"src": "4827:146:7"
											}
										]
									},
									"id": 1186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakeReward",
									"nameLocation": "4622:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1166,
												"mutability": "mutable",
												"name": "user_stake",
												"nameLocation": "4657:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "4644:23:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
													"typeString": "struct Staking.Stake"
												},
												"typeName": {
													"id": 1165,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1164,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 988,
														"src": "4644:5:7"
													},
													"referencedDeclaration": 988,
													"src": "4644:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
														"typeString": "struct Staking.Stake"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4643:25:7"
									},
									"returnParameters": {
										"id": 1170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "4716:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1168,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4716:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4715:9:7"
									},
									"scope": 1567,
									"src": "4613:367:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1217,
										"nodeType": "Block",
										"src": "5125:156:7",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1205,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1197,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1188,
																"src": "5156:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1203,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1200,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1198,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1188,
																						"src": "5167:6:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1199,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 929,
																						"src": "5176:18:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "5167:27:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1201,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "5166:29:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1202,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5198:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "5166:36:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1204,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5165:38:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5156:47:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1206,
																"name": "reward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1190,
																"src": "5217:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1212,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1209,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1207,
																						"name": "reward",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1190,
																						"src": "5228:6:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1208,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 929,
																						"src": "5237:18:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "5228:27:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1210,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "5227:29:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1211,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5259:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "5227:36:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1213,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5226:38:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5217:47:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1215,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5142:132:7",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 1196,
												"id": 1216,
												"nodeType": "Return",
												"src": "5135:139:7"
											}
										]
									},
									"id": 1218,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingWithPenalty",
									"nameLocation": "4995:28:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1188,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5032:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1218,
												"src": "5024:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5024:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1190,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "5048:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1218,
												"src": "5040:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5040:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5023:32:7"
									},
									"returnParameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1218,
												"src": "5103:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5103:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1218,
												"src": "5112:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5112:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5102:18:7"
									},
									"scope": 1567,
									"src": "4986:295:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1299,
										"nodeType": "Block",
										"src": "5675:921:7",
										"statements": [
											{
												"assignments": [
													1226
												],
												"declarations": [
													{
														"constant": false,
														"id": 1226,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "5806:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1299,
														"src": "5793:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1225,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1224,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 988,
																"src": "5793:5:7"
															},
															"referencedDeclaration": 988,
															"src": "5793:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1231,
												"initialValue": {
													"baseExpression": {
														"id": 1227,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1002,
														"src": "5819:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1230,
													"indexExpression": {
														"expression": {
															"id": 1228,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "5832:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1229,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "5832:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5819:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$988_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5793:50:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1236,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1233,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1226,
																	"src": "5861:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 1234,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 975,
																"src": "5861:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1235,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5882:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5861:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b696e67206e6f7420666f756e64",
															"id": 1237,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5885:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															},
															"value": "Staking not found"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															}
														],
														"id": 1232,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5853:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5853:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1239,
												"nodeType": "ExpressionStatement",
												"src": "5853:52:7"
											},
											{
												"assignments": [
													1241
												],
												"declarations": [
													{
														"constant": false,
														"id": 1241,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "5924:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1299,
														"src": "5916:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1240,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5916:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1245,
												"initialValue": {
													"arguments": [
														{
															"id": 1243,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1226,
															"src": "5955:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1242,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1186,
														"src": "5933:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$988_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5933:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5916:50:7"
											},
											{
												"expression": {
													"id": 1250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "5976:31:7",
													"subExpression": {
														"baseExpression": {
															"id": 1246,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1002,
															"src": "5983:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1249,
														"indexExpression": {
															"expression": {
																"id": 1247,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5996:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1248,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5996:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5983:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1251,
												"nodeType": "ExpressionStatement",
												"src": "5976:31:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1252,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1226,
															"src": "6022:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1253,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 981,
														"src": "6022:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1254,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "6047:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "6047:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6022:40:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1297,
													"nodeType": "Block",
													"src": "6416:174:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1286,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 937,
																				"src": "6477:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1285,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 244,
																			"src": "6470:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$244_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1287,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6470:21:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1288,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "6509:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1289,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "6509:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1293,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"id": 1290,
																						"name": "user_stake",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1226,
																						"src": "6538:10:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																							"typeString": "struct Staking.Stake memory"
																						}
																					},
																					"id": 1291,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "amount",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 975,
																					"src": "6538:17:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1292,
																					"name": "reward",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1241,
																					"src": "6558:6:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "6538:26:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1294,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "6537:28:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1282,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 561,
																		"src": "6430:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$561_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1284,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 312,
																	"src": "6430:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1295,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6430:149:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1296,
															"nodeType": "ExpressionStatement",
															"src": "6430:149:7"
														}
													]
												},
												"id": 1298,
												"nodeType": "IfStatement",
												"src": "6018:572:7",
												"trueBody": {
													"id": 1281,
													"nodeType": "Block",
													"src": "6064:346:7",
													"statements": [
														{
															"assignments": [
																1258,
																1260
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1258,
																	"mutability": "mutable",
																	"name": "amount_reduced",
																	"nameLocation": "6104:14:7",
																	"nodeType": "VariableDeclaration",
																	"scope": 1281,
																	"src": "6096:22:7",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1257,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6096:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1260,
																	"mutability": "mutable",
																	"name": "reward_reduced",
																	"nameLocation": "6144:14:7",
																	"nodeType": "VariableDeclaration",
																	"scope": 1281,
																	"src": "6136:22:7",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1259,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6136:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1266,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1262,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1226,
																			"src": "6204:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1263,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 975,
																		"src": "6204:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1264,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1241,
																		"src": "6223:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1261,
																	"name": "_calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1218,
																	"src": "6175:28:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 1265,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6175:55:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6078:152:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1271,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 937,
																				"src": "6292:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1270,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 244,
																			"src": "6285:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$244_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1272,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6285:21:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1273,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "6324:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "6324:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1277,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1275,
																					"name": "amount_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1258,
																					"src": "6353:14:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1276,
																					"name": "reward_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1260,
																					"src": "6370:14:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "6353:31:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1278,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "6352:33:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1267,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 561,
																		"src": "6245:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$561_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 312,
																	"src": "6245:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1279,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6245:154:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1280,
															"nodeType": "ExpressionStatement",
															"src": "6245:154:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1219,
										"nodeType": "StructuredDocumentation",
										"src": "5287:335:7",
										"text": " @notice\n withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n Notice index of the stake is the users stake counter, starting at 0 for the first stake\n Will return the amount to MINT onto the account\n Will also _calculateStakeReward and reset timer"
									},
									"functionSelector": "bed9d861",
									"id": 1300,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1222,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1221,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 142,
												"src": "5662:12:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "5662:12:7"
										}
									],
									"name": "withdrawStake",
									"nameLocation": "5637:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5650:2:7"
									},
									"returnParameters": {
										"id": 1223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5675:0:7"
									},
									"scope": 1567,
									"src": "5628:968:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1415,
										"nodeType": "Block",
										"src": "6668:865:7",
										"statements": [
											{
												"assignments": [
													1308
												],
												"declarations": [
													{
														"constant": false,
														"id": 1308,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "6691:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1415,
														"src": "6678:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1307,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1306,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 988,
																"src": "6678:5:7"
															},
															"referencedDeclaration": 988,
															"src": "6678:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1313,
												"initialValue": {
													"baseExpression": {
														"id": 1309,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1002,
														"src": "6704:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1312,
													"indexExpression": {
														"expression": {
															"id": 1310,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "6717:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1311,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "6717:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6704:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$988_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6678:50:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1315,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1308,
																	"src": "6746:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 1316,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 975,
																"src": "6746:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1317,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6767:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6746:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b696e67206e6f7420666f756e64",
															"id": 1319,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6770:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															},
															"value": "Staking not found"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															}
														],
														"id": 1314,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6738:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6738:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1321,
												"nodeType": "ExpressionStatement",
												"src": "6738:52:7"
											},
											{
												"assignments": [
													1324
												],
												"declarations": [
													{
														"constant": false,
														"id": 1324,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "6822:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1415,
														"src": "6800:29:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
															"typeString": "struct Staking.StakingSummary"
														},
														"typeName": {
															"id": 1323,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1322,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 996,
																"src": "6800:14:7"
															},
															"referencedDeclaration": 996,
															"src": "6800:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$996_storage_ptr",
																"typeString": "struct Staking.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1330,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 1326,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6847:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 1327,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6850:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1328,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1308,
															"src": "6853:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1325,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 996,
														"src": "6832:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$996_storage_ptr_$",
															"typeString": "type(struct Staking.StakingSummary storage pointer)"
														}
													},
													"id": 1329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6832:32:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6800:64:7"
											},
											{
												"assignments": [
													1332
												],
												"declarations": [
													{
														"constant": false,
														"id": 1332,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "6883:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1415,
														"src": "6875:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1331,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6875:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1336,
												"initialValue": {
													"arguments": [
														{
															"id": 1334,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1308,
															"src": "6914:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1333,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1186,
														"src": "6892:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$988_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6892:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6875:50:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1337,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1324,
																"src": "6940:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1338,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 995,
															"src": "6940:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1339,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 981,
														"src": "6940:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1340,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "6968:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1341,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "6968:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6940:43:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1365,
												"nodeType": "IfStatement",
												"src": "6936:214:7",
												"trueBody": {
													"id": 1364,
													"nodeType": "Block",
													"src": "6985:165:7",
													"statements": [
														{
															"expression": {
																"id": 1362,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1343,
																		"name": "summary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1324,
																		"src": "6999:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																			"typeString": "struct Staking.StakingSummary memory"
																		}
																	},
																	"id": 1345,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "penalty",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 992,
																	"src": "6999:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1361,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1352,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1349,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"id": 1346,
																									"name": "user_stake",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1308,
																									"src": "7035:10:7",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																										"typeString": "struct Staking.Stake memory"
																									}
																								},
																								"id": 1347,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "amount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 975,
																								"src": "7035:17:7",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1348,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 929,
																								"src": "7055:18:7",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7035:38:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1350,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7034:40:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1351,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7077:4:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "7034:47:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1353,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "7033:49:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1359,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1356,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1354,
																								"name": "reward",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1332,
																								"src": "7103:6:7",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1355,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 929,
																								"src": "7112:18:7",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7103:27:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1357,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7102:29:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1358,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7134:4:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "7102:36:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1360,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "7101:38:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7033:106:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6999:140:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1363,
															"nodeType": "ExpressionStatement",
															"src": "6999:140:7"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1367,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1308,
																	"src": "7178:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 1368,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "latestClaimDrop",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 987,
																"src": "7178:26:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1366,
															"name": "calculateWeek",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1479,
															"src": "7164:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256) view returns (uint256)"
															}
														},
														"id": 1369,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7164:41:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1370,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7208:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7164:45:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1396,
													"nodeType": "Block",
													"src": "7350:59:7",
													"statements": [
														{
															"expression": {
																"id": 1394,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1388,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1324,
																			"src": "7364:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1391,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 995,
																		"src": "7364:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1392,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 985,
																	"src": "7364:30:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1393,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7397:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7364:34:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1395,
															"nodeType": "ExpressionStatement",
															"src": "7364:34:7"
														}
													]
												},
												"id": 1397,
												"nodeType": "IfStatement",
												"src": "7160:249:7",
												"trueBody": {
													"id": 1387,
													"nodeType": "Block",
													"src": "7211:133:7",
													"statements": [
														{
															"assignments": [
																1373
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1373,
																	"mutability": "mutable",
																	"name": "airdrop",
																	"nameLocation": "7233:7:7",
																	"nodeType": "VariableDeclaration",
																	"scope": 1387,
																	"src": "7225:15:7",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1372,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7225:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1378,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1375,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1308,
																			"src": "7261:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1376,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 975,
																		"src": "7261:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1374,
																	"name": "_calculateAirdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1497,
																	"src": "7243:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 1377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7243:36:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7225:54:7"
														},
														{
															"expression": {
																"id": 1385,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1379,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1324,
																			"src": "7293:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1382,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 995,
																		"src": "7293:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1383,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 985,
																	"src": "7293:30:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1384,
																	"name": "airdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1373,
																	"src": "7326:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7293:40:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1386,
															"nodeType": "ExpressionStatement",
															"src": "7293:40:7"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"expression": {
																"id": 1398,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1324,
																"src": "7419:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1401,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 995,
															"src": "7419:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1402,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimable",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 983,
														"src": "7419:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1403,
														"name": "reward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1332,
														"src": "7445:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7419:32:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1405,
												"nodeType": "ExpressionStatement",
												"src": "7419:32:7"
											},
											{
												"expression": {
													"id": 1411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1406,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1324,
															"src": "7461:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
																"typeString": "struct Staking.StakingSummary memory"
															}
														},
														"id": 1408,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 990,
														"src": "7461:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1409,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1308,
															"src": "7484:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1410,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 975,
														"src": "7484:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7461:40:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1412,
												"nodeType": "ExpressionStatement",
												"src": "7461:40:7"
											},
											{
												"expression": {
													"id": 1413,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1324,
													"src": "7519:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"functionReturnParameters": 1305,
												"id": 1414,
												"nodeType": "Return",
												"src": "7512:14:7"
											}
										]
									},
									"functionSelector": "10486b6a",
									"id": 1416,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasStake",
									"nameLocation": "6611:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1301,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6619:2:7"
									},
									"returnParameters": {
										"id": 1305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1304,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1416,
												"src": "6645:21:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$996_memory_ptr",
													"typeString": "struct Staking.StakingSummary"
												},
												"typeName": {
													"id": 1303,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1302,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 996,
														"src": "6645:14:7"
													},
													"referencedDeclaration": 996,
													"src": "6645:14:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$996_storage_ptr",
														"typeString": "struct Staking.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6644:23:7"
									},
									"scope": 1567,
									"src": "6602:931:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1430,
										"nodeType": "Block",
										"src": "7688:77:7",
										"statements": [
											{
												"expression": {
													"id": 1424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1421,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 933,
														"src": "7698:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1422,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "7713:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1423,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "7713:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7698:30:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1425,
												"nodeType": "ExpressionStatement",
												"src": "7698:30:7"
											},
											{
												"expression": {
													"id": 1428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1426,
														"name": "airdropStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 935,
														"src": "7738:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1427,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7754:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "7738:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1429,
												"nodeType": "ExpressionStatement",
												"src": "7738:20:7"
											}
										]
									},
									"functionSelector": "d2a569c3",
									"id": 1431,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1419,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1418,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "7678:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "7678:9:7"
										}
									],
									"name": "startAirdrop",
									"nameLocation": "7654:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7666:2:7"
									},
									"returnParameters": {
										"id": 1420,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7688:0:7"
									},
									"scope": 1567,
									"src": "7645:120:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1453,
										"nodeType": "Block",
										"src": "7839:125:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1441,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1439,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1433,
																"src": "7857:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "323030",
																"id": 1440,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7867:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_200_by_1",
																	"typeString": "int_const 200"
																},
																"value": "200"
															},
															"src": "7857:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "41697264726f70206d617820323025",
															"id": 1442,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7872:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287",
																"typeString": "literal_string \"Airdrop max 20%\""
															},
															"value": "Airdrop max 20%"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ca38a7cdd0d88458c918147b84adf10c279c728340c1d33bf50944e932496287",
																"typeString": "literal_string \"Airdrop max 20%\""
															}
														],
														"id": 1438,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7849:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7849:41:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1444,
												"nodeType": "ExpressionStatement",
												"src": "7849:41:7"
											},
											{
												"expression": {
													"id": 1447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1445,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 931,
														"src": "7900:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1446,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1433,
														"src": "7914:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7900:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1448,
												"nodeType": "ExpressionStatement",
												"src": "7900:20:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1450,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1433,
															"src": "7950:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1449,
														"name": "AirdropChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1021,
														"src": "7935:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7935:22:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1452,
												"nodeType": "EmitStatement",
												"src": "7930:27:7"
											}
										]
									},
									"functionSelector": "d5dbdf1b",
									"id": 1454,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1436,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1435,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "7829:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "7829:9:7"
										}
									],
									"name": "changeAirdropPercentage",
									"nameLocation": "7780:23:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7812:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "7804:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1432,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7804:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7803:16:7"
									},
									"returnParameters": {
										"id": 1437,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7839:0:7"
									},
									"scope": 1567,
									"src": "7771:193:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1462,
										"nodeType": "Block",
										"src": "8026:39:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1459,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "8043:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "8043:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1458,
												"id": 1461,
												"nodeType": "Return",
												"src": "8036:22:7"
											}
										]
									},
									"functionSelector": "adb61832",
									"id": 1463,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "blockTimestamp",
									"nameLocation": "7979:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1455,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7993:2:7"
									},
									"returnParameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "8017:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8017:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8016:9:7"
									},
									"scope": 1567,
									"src": "7970:95:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1478,
										"nodeType": "Block",
										"src": "8143:62:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1473,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1470,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "8161:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1471,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "8161:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1472,
																	"name": "timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1465,
																	"src": "8179:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8161:27:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1474,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8160:29:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "37",
														"id": 1475,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8192:6:7",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_604800_by_1",
															"typeString": "int_const 604800"
														},
														"value": "7"
													},
													"src": "8160:38:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1469,
												"id": 1477,
												"nodeType": "Return",
												"src": "8153:45:7"
											}
										]
									},
									"functionSelector": "b5d9df83",
									"id": 1479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateWeek",
									"nameLocation": "8080:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "8102:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "8094:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1464,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8094:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8093:19:7"
									},
									"returnParameters": {
										"id": 1469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "8134:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8134:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8133:9:7"
									},
									"scope": 1567,
									"src": "8071:134:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1496,
										"nodeType": "Block",
										"src": "8319:71:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1491,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1488,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1486,
																				"name": "stakeAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1481,
																				"src": "8338:11:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1487,
																				"name": "airdropRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 931,
																				"src": "8352:11:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8338:25:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1489,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8337:27:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 1490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8367:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "8337:34:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1492,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8336:36:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3532",
														"id": 1493,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8375:8:7",
														"subdenomination": "weeks",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31449600_by_1",
															"typeString": "int_const 31449600"
														},
														"value": "52"
													},
													"src": "8336:47:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1485,
												"id": 1495,
												"nodeType": "Return",
												"src": "8329:54:7"
											}
										]
									},
									"id": 1497,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateAirdrop",
									"nameLocation": "8220:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1481,
												"mutability": "mutable",
												"name": "stakeAmount",
												"nameLocation": "8246:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "8238:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8238:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8237:21:7"
									},
									"returnParameters": {
										"id": 1485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1484,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "8306:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1483,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8306:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8305:9:7"
									},
									"scope": 1567,
									"src": "8211:179:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1565,
										"nodeType": "Block",
										"src": "8447:644:7",
										"statements": [
											{
												"assignments": [
													1504
												],
												"declarations": [
													{
														"constant": false,
														"id": 1504,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "8523:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1565,
														"src": "8509:24:7",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1503,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1502,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 988,
																"src": "8509:5:7"
															},
															"referencedDeclaration": 988,
															"src": "8509:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1509,
												"initialValue": {
													"baseExpression": {
														"id": 1505,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1002,
														"src": "8536:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$988_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1508,
													"indexExpression": {
														"expression": {
															"id": 1506,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "8549:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1507,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "8549:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8536:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$988_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8509:51:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1514,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1511,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1504,
																	"src": "8579:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																		"typeString": "struct Staking.Stake storage pointer"
																	}
																},
																"id": 1512,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 975,
																"src": "8579:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1513,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8600:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8579:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b696e67206e6f7420666f756e64",
															"id": 1515,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8603:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															},
															"value": "Staking not found"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_326c1d96046868f1e6fa00b91bca4d19f429836dc06be2d1957c95089929330e",
																"typeString": "literal_string \"Staking not found\""
															}
														],
														"id": 1510,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8571:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8571:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1517,
												"nodeType": "ExpressionStatement",
												"src": "8571:52:7"
											},
											{
												"assignments": [
													1519
												],
												"declarations": [
													{
														"constant": false,
														"id": 1519,
														"mutability": "mutable",
														"name": "latestClaim",
														"nameLocation": "8641:11:7",
														"nodeType": "VariableDeclaration",
														"scope": 1565,
														"src": "8633:19:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1518,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8633:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1524,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1521,
																"name": "user_stake",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1504,
																"src": "8669:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																	"typeString": "struct Staking.Stake storage pointer"
																}
															},
															"id": 1522,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "latestClaimDrop",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 987,
															"src": "8669:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1520,
														"name": "calculateWeek",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1479,
														"src": "8655:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8655:41:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8633:63:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1525,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1504,
															"src": "8711:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																"typeString": "struct Staking.Stake storage pointer"
															}
														},
														"id": 1526,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 975,
														"src": "8711:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1527,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8731:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8711:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1564,
												"nodeType": "IfStatement",
												"src": "8707:378:7",
												"trueBody": {
													"id": 1563,
													"nodeType": "Block",
													"src": "8734:351:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1532,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1530,
																			"name": "latestClaim",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1519,
																			"src": "8756:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1531,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8771:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "8756:16:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "436c61696d61626c65206f6e63652061207765656b",
																		"id": 1533,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8774:23:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3",
																			"typeString": "literal_string \"Claimable once a week\""
																		},
																		"value": "Claimable once a week"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a545cf8bed6150fe43a7fcf5d302e1427d9de4b32611b13b65b5d5b4ba0c35e3",
																			"typeString": "literal_string \"Claimable once a week\""
																		}
																	],
																	"id": 1529,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "8748:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1534,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8748:50:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1535,
															"nodeType": "ExpressionStatement",
															"src": "8748:50:7"
														},
														{
															"expression": {
																"id": 1540,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1536,
																		"name": "user_stake",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "8813:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1538,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 985,
																	"src": "8813:27:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1539,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8843:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8813:31:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1541,
															"nodeType": "ExpressionStatement",
															"src": "8813:31:7"
														},
														{
															"expression": {
																"id": 1547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1542,
																		"name": "user_stake",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "8858:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1544,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "latestClaimDrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 987,
																	"src": "8858:26:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 1545,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "8887:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1546,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "8887:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8858:44:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1548,
															"nodeType": "ExpressionStatement",
															"src": "8858:44:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1553,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 937,
																				"src": "8964:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1552,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 244,
																			"src": "8957:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$244_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1554,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8957:21:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1555,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8996:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1556,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8996:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1558,
																					"name": "user_stake",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1504,
																					"src": "9042:10:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Stake_$988_storage_ptr",
																						"typeString": "struct Staking.Stake storage pointer"
																					}
																				},
																				"id": 1559,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 975,
																				"src": "9042:17:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1557,
																			"name": "_calculateAirdrop",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1497,
																			"src": "9024:17:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) view returns (uint256)"
																			}
																		},
																		"id": 1560,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9024:36:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$244",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1549,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 561,
																		"src": "8917:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$561_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1551,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 312,
																	"src": "8917:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8917:157:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1562,
															"nodeType": "ExpressionStatement",
															"src": "8917:157:7"
														}
													]
												}
											}
										]
									},
									"functionSelector": "5b88349d",
									"id": 1566,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1500,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1499,
												"name": "airdropStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1039,
												"src": "8429:17:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "8429:17:7"
										}
									],
									"name": "claimAirdrop",
									"nameLocation": "8405:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8417:2:7"
									},
									"returnParameters": {
										"id": 1501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8447:0:7"
									},
									"scope": 1567,
									"src": "8396:695:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1568,
							"src": "247:8846:7",
							"usedErrors": []
						}
					],
					"src": "39:9055:7"
				},
				"id": 7
			}
		}
	}
}